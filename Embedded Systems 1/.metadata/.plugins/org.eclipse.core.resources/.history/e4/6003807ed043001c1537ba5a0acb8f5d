

.syntax unified
.cpu cortex-m4
.thumb
.section .text

.global main



main:
	// Required API Initializations
	BL delay_Init
	BL LCD_Init
	BL tone_Init
	BL key_Init

	// This program's hardware initialization
	BL RCC_Setup

	BL GPIOB_Setup

	BL ADC1_Setup

	BL NVIC_Setup

	BL TIM5_Setup

	LDR R1, =TIM5_BASE
	LDR R2, [R1, #TIM_CR1]	// Read current controls
	ORR R2, #CEN			// Enable count
	STR R2, [R1, #TIM_CR1]	// Write


	loop:
	// Check if a conversion is ready
	LDR R1, =EndOfConversion
	LDR R2, [R1]
	CMP R2, #0
	IT NE
		BLNE Display

	LDR R1, =IsContinuious
	LDR R2, [R1]
	CMP R2, #1
	IT EQ
		BLEQ BufferCont

	// Check if any keys were pressed
	LDR R1, =press
	LDRB R2, [R1]
	CMP R2, #1
	IT EQ
		BLEQ KeyPressed


	B loop

Display:
	PUSH {R1-R3, LR}

	// Pause Interrupts
	LDR R1, =NVIC_BASE

	// ICER1, AKA ADC
	LDR R2, [R1, #0x84]
	ORR R2, #1<<18
	STR R2, [R1, #0x84]

	// Clear Display
	BL LCD_Home

	// Load sampled value
	LDR R0, =Buffer
	LDRB R1, [R0]

	// Convert the sampled value into millivolts by
	BL ADC_to_mV

	// Convert millivolts into temperature
	// The function returns the whole number of the temp
	// In R0, decimal value in R1. Argument is R2
	MOV R2, R0	// Move return value from prev. funct
	BL mV_to_C

	// R0 contains whole number of temp
	// R1 contains decimal val. of temp
	// This method pushes and pops those
	BL DispCel

	// Move values to where they will need to be
	// After newline
	MOV R2, R0
	MOV R3, R1

	// Newline
	MOV R0, #1
	MOV R1, #0
	BL LCD_MoveCursor

	// Convert Celsius (stored in R2&R3) to Fahrenheit
	BL C_to_F

	// Display Fahrenheit
	BL DispFah

	// Clear flag that got us here
	LDR R1, =EndOfConversion
	MOV R2, #0
	STR R2, [R1]

	// Resume Interrupts
	LDR R1, =NVIC_BASE

	// ICER1, AKA ADC
	LDR R2, [R1, #NVIC_ISER1]
	ORR R2, #1<<18
	STR R2, [R1, #NVIC_ISER1]

	POP {R1-R3, PC}


// Display the line for celsius
DispCel:
	PUSH {R0, R1, LR}

	// Backup whole number
	MOV R7, R0

	// Convert decimal value to ASCII
	BL num_to_ASCII
	MOV R6, R0

	// Convert whole number to ASCII
	MOV R1, R7
	BL num_to_ASCII

	// Clear scratch register
	MOV R2, #0

	// Write tens to memory
	LDR R1, =StringBuffer
	LDR R3, =0xFF00
	AND R2, R3, R0
	LSR R2, #8
	STRB R2, [R1, #0]

	// Write ones to memory
	MOV R2, #0
	LSR R3, #8
	AND R2, R3, R0
	STRB R2, [R1, #1]

	// Write a decimal point
	MOV R2, #'.'
	STRB R2, [R1, #2]

	// Write the decimal value
	STRB R6, [R1, #3]

	// Write "[degree symbol]C"
	MOV R2, #'C'
	LSL R2, #8
	ORR R2, 0xDF
	STR R2, [R1, #4]

	BL LCD_PrintString

	POP {R0, R1, PC}


// Display the line for fahrenheit
DispFah:
	PUSH {R0, R1, LR}

	// Backup whole number
	MOV R7, R0

	// Convert decimal value to ASCII
	BL num_to_ASCII
	MOV R6, R0

	// Convert whole number to ASCII
	MOV R1, R7
	BL num_to_ASCII

	// Clear scratch register
	MOV R2, #0

	// Write tens to memory
	LDR R1, =StringBuffer
	LDR R3, =0xFF00
	AND R2, R3, R0
	LSR R2, #8
	STRB R2, [R1, #0]

	// Write ones to memory
	MOV R2, #0
	LSR R3, #8
	AND R2, R3, R0
	STRB R2, [R1, #1]

	// Write a decimal point
	MOV R2, #'.'
	STRB R2, [R1, #2]

	// Write the decimal value
	STRB R6, [R1, #3]

	// Write "[degree symbol]F"
	MOV R2, #'F'
	LSL R2, #8
	ORR R2, 0xDF
	STR R2, [R1, #4]

	BL LCD_PrintString

	POP {R0, R1, PC}


// Check the keycode if a key was pressed
KeyPressed:
	PUSH {R0-R2, LR}

	// Get the key that was pressed
	LDR R1, =button
	LDRB R2, [R1]
	MOV R1, R2

	// Convert the keycode to a hex char
	BL key_ToChar

	// Compare to C
	CMP R0, #'C'
	IT EQ
		BLEQ ContMode

	CMP R0, #'1'
	ITT EQ
		MOVEQ R1, #1000-1
		BLEQ AdjustTime

	CMP R0, #'2'
	ITT EQ
		MOVEQ R1, #2000-1
		BLEQ AdjustTime

	CMP R0, #'3'
	ITT EQ
		MOVEQ R1, #3000-1
		BLEQ AdjustTime

	CMP R0, #'4'
	ITT EQ
		MOVEQ R1, #4000-1
		BLEQ AdjustTime

	CMP R0, #'5'
	ITT EQ
		MOVEQ R1, #5000-1
		BLEQ AdjustTime

	CMP R0, #'6'
	ITT EQ
		MOVEQ R1, #6000-1
		BLEQ AdjustTime

	CMP R0, #'7'
	ITT EQ
		MOVEQ R1, #7000-1
		BLEQ AdjustTime

	CMP R0, #'8'
	ITT EQ
		MOVEQ R1, #8000-1
		BLEQ AdjustTime

	CMP R0, #'9'
	ITT EQ
		MOVEQ R1, #9000-1
		BLEQ AdjustTime

	CMP R0, #'A'
	IT EQ
		BLEQ AdvanceDisplay

	LDR R1, =press
	MOV R2, #0
	STRB R2, [R1]

	POP {R0-R2, PC}


// Toggle continuious mode if the key pressed was C
ContMode:
	PUSH {R1, R2, LR}
	// Toggle the beeper when sampling, if this beeped during
	// constant, that would be irritating.
	LDR R1, =ShouldBeep
	LDR R2, [R1]
	EOR R2, #1
	STR R2, [R1]

	// Change the continuious flag
	LDR R1, =IsContinuious
	LDR R2, [R1]
	EOR R2, #1
	STR R2, [R1]

	// Toggle cont. mode
	LDR R1, =ADC_BASE
	LDR R2, [R1, #ADC_CR2]
	EOR R2, #CONT
	ORR R2, #SWSTART
	STR R2, [R1, #ADC_CR2]

	// Toggle ADC EOC IRQ
	LDR R1, =ADC_BASE
	LDR R2, [R1, #ADC_CR1]
	EOR R2, #EOCIE			// Toggle EOC interrupt
	STR R2, [R1, #ADC_CR1]

	POP {R1, R2, PC}


// Adjust the sample interval if the key pressed was a number
// Interval gets changed to N seconds where N is the number of
// the key that was pressed
AdjustTime:
	PUSH {R0, R1, LR}

	MOV R0, R1
	LDR R1, =TIM5_BASE
	STR R0, [R1, #TIM_ARR]
	MOV R0, #0
	STR R0, [R1, #TIM_CNT]

	POP {R0, R1, PC}


// When the buffer is in continuious mode, EOC doesn't trigger
// so manually poll the DR and update the display
BufferCont:
	PUSH {R1, R2, LR}

	// Read the data
	LDR R1, =ADC_BASE
	LDR R2, [R1, #ADC_DR]

	// Convert the sampled value into millivolts
	BL ADC_to_mV

	// Convert millivolts into temperature
	// The function returns the whole number of the temp
	// In R0, decimal value in R1. Argument is R2
	MOV R2, R0
	BL mV_to_C

	// R0 contains whole number of temp
	// R1 contains decimal val. of temp
	// This method pushes and pops those
	BL DispCel

	// Move values to where they will need to be
	// After newline
	MOV R2, R0
	MOV R3, R1

	// Newline
	MOV R0, #1
	MOV R1, #0
	BL LCD_MoveCursor

	// Convert Celsius (stored in R2&R3) to Fahrenheit
	BL C_to_F

	// Display Fahrenheit
	BL DispFah

	MOV R0, #0
	MOV R1, #17
	BL LCD_MoveCursor

	POP {R1, R2, PC}


AdvanceDisplay:
	PUSH {}

	// Load current index of the buffer
	// REMEMBER THAT THIS POINTS TO A FREE SPACE
	LDR R1, =BufferIndex
	LDR R2, [R1]

	// Load the current cell being displayed
	LDR R1, =DisplayIndex
	LDR R3, [R1]

	// If the display index less than the buffer index
	// (because buffer index points to next free space)
	// Advance the display index
	CMP R3, R2
	IT LT

	POP {}


.equ RCC_BASE,	0x40023800
.equ AHB1ENR,	0x30
.equ APB1ENR,	0x40
.equ APB2ENR,	0x44
.equ GPIOBEN,	1 << 1
.equ ADC1EN,	1 << 8
.equ TIM5EN,	1 << 3
RCC_Setup:
	PUSH {R1, R2, LR}

	// Enable GPIOB in RCC
	LDR R1, =RCC_BASE
	LDR R2, [R1, #AHB1ENR]
	ORR R2, #GPIOBEN
	STR R2, [R1, #AHB1ENR]

	// Enable ADC1 in RCC
	LDR R2, [R1, #APB2ENR]
	ORR R2, #ADC1EN
	STR R2, [R1, #APB2ENR]

	// Enable TIM5 in RCC
	LDR R2, [R1, #APB1ENR]
	ORR R2, #TIM5EN
	STR R2, [R1, #APB1ENR]

	POP {R1, R2, PC}


.equ GPIOB_BASE,	0x40020400
.equ GPIO_MODER,	0
.equ PIN_ANALOG,	0b11
GPIOB_Setup:
	PUSH {R1-R3, LR}

	// Set GPIOB MODER
	LDR R1, =GPIOB_BASE
	MOV R3, #PIN_ANALOG
	LDR R2, [R1, #GPIO_MODER]
	BFI R2, R3, #0, #2
	STR R2, [R1, #GPIO_MODER]

	POP {R1-R3, PC}


.equ TIM5_BASE,	0x40000C00
.equ TIM_CR1,	0
.equ TIM_DIER,	0x0C
.equ TIM_PSC,	0x28
.equ TIM_ARR,	0x2C
.equ TIM_EGR, 	0x14
.equ TIM_CNT,	0x24
.equ TIM_SR, 	0x10
.equ CEN,	1 << 0
.equ DIR,	1 << 4
.equ OPM,	1 << 3
.equ UIE,	1 << 0
.equ TIM_UG,	1 << 0
.equ TIM_UIF, 	1 << 0
.equ MILLISECONDS, 	16000
TIM5_Setup:
	PUSH {R1, R2, LR}

	LDR R1, =TIM5_BASE		// Timer 5 base address

	LDR R2, =16000 			// 16MHz / 16kHz = 1kHz aka 1ms
	STR R2, [R1, #TIM_PSC]	// Apply prescale to 1ms per count

	// This is the prescaler fix Dr. Livingston provided
	// From what I understand, it forces an update event
	// on the timer, which somehow forces the prescale into effect.
	MOV R2, #TIM_UG
	LDR R1, =TIM5_BASE
	STR R2, [r1, #TIM_EGR]

	LDR R1, =TIM5_BASE
	LDR R2, [R1, #TIM_SR]
	BIC R2, #TIM_UIF
	STR R2, [R1, #TIM_SR]

	// These should be cleared by default but better safe than sorry
	LDR R2, [R1, #TIM_CR1]
	BIC R2, #DIR
	BIC R2, #OPM
	STR R2, [R1, #TIM_CR1]

	// Enable timer to generate interrupts
	LDR R2, [R1, #TIM_DIER]
	ORR R2, #UIE
	STR R2, [R1, #TIM_DIER]

	// Load default delay of 1sec
	LDR R2, =1000-1
	STR R2, [R1, #TIM_ARR]

	POP {R1, R2, PC}



.equ ADC_BASE,	0x40012000
.equ ADC_CR1,	0x04
.equ ADC_CR2,	0x08
.equ ADC_SQR1,	0x2C
.equ ADC_SQR3,	0x34
.equ ADC_DR,	0x4C
.equ ADC_10BIT,	0b01
.equ EOCIE,		1 << 5
.equ ADON,		1 << 0
.equ CONT,		1 << 1
.equ CH_8,		8
.equ SWSTART,	1 << 30
ADC1_Setup:
	PUSH {R1-R3, LR}

	// Set 10bit resolution and enable EOC interrupt
	LDR R1, =ADC_BASE
	MOV R3, #ADC_10BIT
	LDR R2, [R1, #ADC_CR1]
	ORR R2, #EOCIE			// Enable EOC interrupt
	BFI R2, R3, #24, #2		// Insert 10bit code
	STR R2, [R1, #ADC_CR1]

	// Turn on ADC and default to NOT continuious
	LDR R2, [R1, #ADC_CR2]
	ORR R2, #ADON
	BIC R2, #CONT
	STR R2, [R1, #ADC_CR2]

	// Set scan count
	LDR R1, =ADC_BASE
	LDR R2, [R1, #ADC_SQR1]
	BFC R2, #20, #4
	STR R2, [R1, #ADC_SQR1]

	// Set the one channel to be scanned
	LDR R1, =ADC_BASE
	MOV R3, #8
	LDR R2, [R1, #ADC_SQR3]
	BFI R2, R3, #0, #5
	STR R2, [R1, #ADC_SQR3]


	POP {R1-R3, PC}


.equ NVIC_BASE,		0xE000E100
.equ NVIC_ISER0,	0x00
.equ NVIC_ISER1,	0x04
.equ TIM5_INT,		1 << 18
.equ ADC_INT,		1 << 18
NVIC_Setup:
	PUSH {R1, R2, LR}

	LDR R1, =NVIC_BASE

	// ADC Interrupt is slot 18
	// which lives in the first ISER
	LDR R2, [R1, #NVIC_ISER0]
	ORR R2, #ADC_INT
	STR R2, [R1, #NVIC_ISER0]

	// TIM5 Interrupt is slot 50
	// which lives in the second ISER
	LDR R2, [R1, #NVIC_ISER1]
	ORR R2, #TIM5_INT
	STR R2, [R1, #NVIC_ISER1]

	POP {R1, R2, PC}



.global TIM5_IRQHandler
.thumb_func
TIM5_IRQHandler:
	PUSH {LR}

	// Clear flag that hardware uses to generate IRQ
	LDR R1, =TIM5_BASE
	LDR R2, [R1, #TIM_SR]
	BIC R2, #TIM_UIF
	STR R2, [R1, #TIM_SR]

	// Start conversion
	LDR R1, =ADC_BASE
	LDR R2, [R1, ADC_CR2]
	ORR R2, #SWSTART
	STR R2, [R1, ADC_CR2]

	1:
	// Return from ISR
	POP {LR}
	BX LR


.global ADC_IRQHandler
.thumb_func
ADC_IRQHandler:
	PUSH {LR}

	// Reading from the DR clears the EOC flag which causes
	// IRQ generation, so there's nothing to clear
	LDR R1, =ADC_BASE
	LDRH R3, [R1, #ADC_DR]

	// Load the current index of the buffer
	LDR R1, =BufferIndex
	LDR R2, [R1]

	// Compare the current index of the buffer to the max size
	// This buffer has a size of [0-9] so 10 slots
	CMP R2, #10

	// If the buffer is full, return from the ISR without doing anything
	BGE 1f

	// If we are within the 10 slots
	ITTT LT
		LDRLT R1, =Buffer	// Load buffer base address
		STRLT R3, [R1, R2]	// Store the ADC result to the current cell
		ADDLT R2, #1		// Increment index pointer

	// Update buffer index
	LDR R1, =BufferIndex
	STR R2, [R1]

	// Beep if not in continuious mode
	LDR R1, =ShouldBeep
	LDR R2, [R1]
	CMP R2, #1
	IT EQ
		BLEQ tone_Notify

	// Update interrupt flag for main
	LDR R1, =EndOfConversion
	MOV R2, #1
	STR R2, [R1]

	1:
	POP {LR}
	BX LR

.section .data
// Flag to poll between conversions
EndOfConversion:
.word	0

// Flag to control if the speaker should beep every conversion
ShouldBeep:
.word	1

// Determines if the ADC is in continuious mode
IsContinuious:
.word 0

// Buffer for display text
StringBuffer:
.word 	0
.word	0

// Where the next free entry is in the buffer
BufferIndex:
.word	0

// What index in the buffer is the display showing
DisplayIndex:
.word 	0

// 10 half-words for temp values
Buffer:
.space	2*(10)
