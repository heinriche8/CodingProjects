
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000534  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080006f8  080006f8  000106f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800070c  0800070c  00010714  2**0
                  CONTENTS
  4 .ARM          00000000  0800070c  0800070c  00010714  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800070c  08000714  00010714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800070c  0800070c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000710  08000710  00010710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000714  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000714  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010714  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000035f  00000000  00000000  00010744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000000e0  00000000  00000000  00010aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000076  00000000  00000000  00010b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00010c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000000b2  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00010d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000002c  00000000  00000000  00010da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080006e0 	.word	0x080006e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080006e0 	.word	0x080006e0

08000204 <num_to_ASCII>:
//		R4	-	Tens
//		R5	-	Hundreds
//		R6	-	Thousands
//		R7	-	Mask
num_to_ASCII:
	PUSH {R1-R12, LR}	// Backup registers
 8000204:	e92d 5ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

	LDR R2, =MAX_VALUE	// Load max value
 8000208:	f242 720f 	movw	r2, #9999	; 0x270f
	CMP R1, R2			// Compare the argument to the maximum value
 800020c:	4291      	cmp	r1, r2
	BGE error			// Return the error code if the argument is larger than the max.
 800020e:	da36      	bge.n	800027e <error>
	MOV R2, R1			// Copy the argument for modification
 8000210:	460a      	mov	r2, r1

	MOV R6, #0			// Clear thousands counter
 8000212:	f04f 0600 	mov.w	r6, #0

08000216 <mod1000>:
mod1000:
	SUBS R2, R2, #0x3E8	// Subtract 1000, update flags
 8000216:	f5b2 727a 	subs.w	r2, r2, #1000	; 0x3e8
	ITET PL					// If positive
 800021a:	bf56      	itet	pl
		ADDPL R6, R6, #1	// Increment thousands counter
 800021c:	3601      	addpl	r6, #1
		ADDMI R2, R2, #0x3E8// Add back 1000 if negative
 800021e:	f502 727a 	addmi.w	r2, r2, #1000	; 0x3e8
		BPL mod1000			// Otherwise continue looping
 8000222:	e7f8      	bpl.n	8000216 <mod1000>

	MOV R5, #0			// Clear hundreds counter
 8000224:	f04f 0500 	mov.w	r5, #0

08000228 <mod100>:
mod100:
	SUBS R2, R2, #0x64	// Subtract 100, update flags
 8000228:	3a64      	subs	r2, #100	; 0x64
	ITET PL					//If positive
 800022a:	bf56      	itet	pl
		ADDPL R5, R5, #1	// Increment hundreds counter
 800022c:	3501      	addpl	r5, #1
		ADDMI R2, R2, #0x64	// Add back 100 if negative
 800022e:	3264      	addmi	r2, #100	; 0x64
		BPL mod100			// Otherwise continue looping
 8000230:	e7fa      	bpl.n	8000228 <mod100>

	MOV R4, #0			// Clear tens register
 8000232:	f04f 0400 	mov.w	r4, #0

08000236 <mod10>:
mod10:
	SUBS R2, R2, #0xA	// Subtract 10, update flags
 8000236:	3a0a      	subs	r2, #10
	ITET PL					// If positive
 8000238:	bf56      	itet	pl
		ADDPL R4, R4, #1	// Increment tens counter
 800023a:	3401      	addpl	r4, #1
		ADDMI R2, R2, #0xA	// Add back 10 if negative
 800023c:	320a      	addmi	r2, #10
		BPL mod10			// Otherwise continue looping
 800023e:	e7fa      	bpl.n	8000236 <mod10>

	MOV R3, R2			// Whatever is left is the ones place
 8000240:	4613      	mov	r3, r2
	MOV R2, #0			// Clear register 2
 8000242:	f04f 0200 	mov.w	r2, #0

	MOV R7, #0x30		// Load mask for numeric ASCII values
 8000246:	f04f 0730 	mov.w	r7, #48	; 0x30

	ORR R2, R2, R7		// Apply base mask
 800024a:	ea42 0207 	orr.w	r2, r2, r7
	ORR R2, R2, R6		// Apply thousands place
 800024e:	ea42 0206 	orr.w	r2, r2, r6
	LSL R2, R2, #8		// Shift left 8 for the hundreds place
 8000252:	ea4f 2202 	mov.w	r2, r2, lsl #8
	ORR R2, R2, R7		// Apply base mask
 8000256:	ea42 0207 	orr.w	r2, r2, r7
	ORR R2, R2, R5		// Apply hundreds place
 800025a:	ea42 0205 	orr.w	r2, r2, r5
	LSL R2, R2, #8		// Shift left 8 more for the tens place
 800025e:	ea4f 2202 	mov.w	r2, r2, lsl #8
	ORR R2, R2, R7		// Apply base mask
 8000262:	ea42 0207 	orr.w	r2, r2, r7
	ORR R2, R2, R4		// Apply tens place
 8000266:	ea42 0204 	orr.w	r2, r2, r4
	LSL R2, R2, #8		// Shift left last 8 time for the ones place
 800026a:	ea4f 2202 	mov.w	r2, r2, lsl #8
	ORR R2, R2, R7		// Apply base mask
 800026e:	ea42 0207 	orr.w	r2, r2, r7
	ORR R2, R2, R3		// Apply ones place
 8000272:	ea42 0203 	orr.w	r2, r2, r3

	MOV R0, R2			// Move return value
 8000276:	4610      	mov	r0, r2

	POP {R1-R12, LR}	// Restore registers
 8000278:	e8bd 5ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	BX LR
 800027c:	4770      	bx	lr

0800027e <error>:

error:
	LDR R0, =ERR
 800027e:	4802      	ldr	r0, [pc, #8]	; (8000288 <error+0xa>)
	POP {R1-R12, LR}
 8000280:	e8bd 5ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	BX LR
 8000284:	4770      	bx	lr
 8000286:	0000      	.short	0x0000
	LDR R0, =ERR
 8000288:	4572722e 	.word	0x4572722e

0800028c <PortSetup>:
//		R1	-	Addresses
//		R2	-	Scratch
//		R3	-	Masks
PortSetup:
	// Backup Registers
    PUSH {R1-R3, LR}
 800028c:	b50e      	push	{r1, r2, r3, lr}

	// Enable GPIO Ports A & C
    LDR R1, =RCC_BASE			// Load RCC base address
 800028e:	496c      	ldr	r1, [pc, #432]	; (8000440 <LCD_PrintChar+0x8>)
    LDR R2, [R1, #RCC_AHB1ENR]	// Read from the AHB1 Enable Register
 8000290:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    ORR R2, R2, #RCC_GPIOAEN	// Apply GPIOA Enable mask
 8000292:	f042 0201 	orr.w	r2, r2, #1
    ORR R2, R2, #RCC_GPIOCEN	// Apply GPIOC Enable mask
 8000296:	f042 0204 	orr.w	r2, r2, #4
    STR R2, [R1, #RCC_AHB1ENR]	// Write back to memory
 800029a:	630a      	str	r2, [r1, #48]	; 0x30

    // Set GPIOA Pins as output (PA4-PA11)
    LDR R1, =GPIOA_BASE			// Load GPIOA base address
 800029c:	4969      	ldr	r1, [pc, #420]	; (8000444 <LCD_PrintChar+0xc>)
    LDR R3, =0x00555500			// Load mode mask
 800029e:	4b6a      	ldr	r3, [pc, #424]	; (8000448 <LCD_PrintChar+0x10>)
    LDR R2, [R1, #GPIO_MODER]	// Read
 80002a0:	680a      	ldr	r2, [r1, #0]
    ORR R2, R3					// Apply mode mask
 80002a2:	ea42 0203 	orr.w	r2, r2, r3
    STR R2, [R1, #GPIO_MODER]	// Write
 80002a6:	600a      	str	r2, [r1, #0]

    // Set GPIOC Pins as output (PC8-PC10)
    LDR R1, =GPIOC_BASE			// Load GPIOC base address
 80002a8:	4968      	ldr	r1, [pc, #416]	; (800044c <LCD_PrintChar+0x14>)
    LDR R3, =0x00550000			// Load mode mask
 80002aa:	f44f 03aa 	mov.w	r3, #5570560	; 0x550000
    LDR R2, [R1, #GPIO_MODER]	// Read
 80002ae:	680a      	ldr	r2, [r1, #0]
    ORR R2, R3					// Apply mode mask
 80002b0:	ea42 0203 	orr.w	r2, r2, r3
    STR R2, [R1, #GPIO_MODER]	// Write
 80002b4:	600a      	str	r2, [r1, #0]

	POP {R1-R3, LR}			// Restore
 80002b6:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    BX LR						// Return
 80002ba:	4770      	bx	lr

080002bc <WriteInstruction>:
//		R2	-	Scratch
//		R3	-	GPIOC Address
//		R4	-	GPIOA Address
//		R7	-	Masks
WriteInstruction:
	PUSH {R1-R4, R7, LR}			// Backup registers
 80002bc:	b59e      	push	{r1, r2, r3, r4, r7, lr}

	LDR R3, =GPIOC_BASE			// Load GPIO port C address
 80002be:	4b63      	ldr	r3, [pc, #396]	; (800044c <LCD_PrintChar+0x14>)
	LDR R4, =GPIOA_BASE			// Load GPIO port A address
 80002c0:	4c60      	ldr	r4, [pc, #384]	; (8000444 <LCD_PrintChar+0xc>)

	// Clear RS, RW, E
	LDR R2, [R3, #GPIO_ODR]	// Read
 80002c2:	695a      	ldr	r2, [r3, #20]
	BIC R2, #RS				// Apply RS set mask
 80002c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
	BIC R2, #RW				// Apply RW set mask
 80002c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
	BIC R2, #E				// Apply E clear mask
 80002cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
	STR R2, [R3, #GPIO_ODR]	// Write
 80002d0:	615a      	str	r2, [r3, #20]

	// Set E, E => 1
	LDR R2, [R3, #GPIO_ODR]	// Read
 80002d2:	695a      	ldr	r2, [r3, #20]
	ORR R2, #E				// Apply E set mask
 80002d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	STR R2, [R3, #GPIO_ODR]	// Write
 80002d8:	615a      	str	r2, [r3, #20]

	// Push the instruction onto the data bus
	LDR R2, [R3, #GPIO_ODR]	// Read
 80002da:	695a      	ldr	r2, [r3, #20]
	BFI R2, R1, #4, #8		// Insert instruction
 80002dc:	f361 120b 	bfi	r2, r1, #4, #8
	STR R2, [R4, #GPIO_ODR]	// Write to BSRR
 80002e0:	6162      	str	r2, [r4, #20]
	
	// Clear E, E => 0
	LDR R2, [R3, #GPIO_ODR]	// Read
 80002e2:	695a      	ldr	r2, [r3, #20]
	BIC R2, #E				// Apply E clear mask
 80002e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
	STR R2, [R3, #GPIO_ODR]	// Write
 80002e8:	615a      	str	r2, [r3, #20]

	//	Wait for appropriate delay
	//	->	Listed delay for holding instructions on the bus after E falls
	//		is 10ns, when the next instruction takes more than 60ns

	POP {R1-R4, R7, PC}			// Restore & Return
 80002ea:	bd9e      	pop	{r1, r2, r3, r4, r7, pc}

080002ec <WriteData>:
//		R3	-	GPIOC Address
//		R4	-	GPIOA Address
//		R7	-	Masks
// RS=0 RW=0  R1-Arg
WriteData:
	PUSH {R1-R4, R7, LR}	// Backup
 80002ec:	b59e      	push	{r1, r2, r3, r4, r7, lr}
	LDR R3, =GPIOC_BASE	// Load GPIOC address
 80002ee:	4b57      	ldr	r3, [pc, #348]	; (800044c <LCD_PrintChar+0x14>)
	LDR R4, =GPIOA_BASE	// Load GPIOA address
 80002f0:	4c54      	ldr	r4, [pc, #336]	; (8000444 <LCD_PrintChar+0xc>)

	// Set RS=1,RW=0,E=0
	LDR R2, [R3, #GPIO_ODR]	// Read
 80002f2:	695a      	ldr	r2, [r3, #20]
	BIC R2, #E				// Apply E clear mask
 80002f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
	ORR R2, #RS				// Apply RS set mask
 80002f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	BIC R2, #RW				// Apply RW clear mask
 80002fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
	STR R2, [R3, #GPIO_ODR]	// Write
 8000300:	615a      	str	r2, [r3, #20]

	// Set E=1
	LDR R2, [R3, #GPIO_ODR]	// Read
 8000302:	695a      	ldr	r2, [r3, #20]
	ORR R2, #E				// Apply E set mask
 8000304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	STR R2, [R3, #GPIO_ODR]	// Write to BSRR
 8000308:	615a      	str	r2, [r3, #20]

	// Set R1 -> DataBus (PA4-PA11)
	LDR R2, [R3, #GPIO_ODR]	// Read
 800030a:	695a      	ldr	r2, [r3, #20]
	BFI R2, R1, #4, #8		// Insert data onto bus
 800030c:	f361 120b 	bfi	r2, r1, #4, #8
	STR R2, [R4, #GPIO_ODR]	// Write
 8000310:	6162      	str	r2, [r4, #20]

	// Set E=0
	MOV R2, #0				// Clear scratch register
 8000312:	f04f 0200 	mov.w	r2, #0
	BIC R2, #E				// Apply E clear mask
 8000316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
	STR R2, [R3, #GPIO_ODR]	// Write to BSRR
 800031a:	615a      	str	r2, [r3, #20]

	// >37us delay
	MOV R1, #40
 800031c:	f04f 0128 	mov.w	r1, #40	; 0x28
	BL delay_us
 8000320:	f000 f89f 	bl	8000462 <delay_us>

	POP {R1-R4, R7, PC}
 8000324:	bd9e      	pop	{r1, r2, r3, r4, r7, pc}

08000326 <LCD_Init>:
//	Returns:
//		N/A
//	Register Use:
//		R1	-	Instructions/Commands
LCD_Init:
	PUSH {R1, LR}	// Backup registers
 8000326:	b502      	push	{r1, lr}

    BL PortSetup		// Configure GPIO ports
 8000328:	f7ff ffb0 	bl	800028c <PortSetup>

    // Write Function Set (0x38)
    MOV R1, #0x38		// Load instruction
 800032c:	f04f 0138 	mov.w	r1, #56	; 0x38
    BL WriteInstruction	// Write instruction
 8000330:	f7ff ffc4 	bl	80002bc <WriteInstruction>

    MOV R1, #40			// >37us delay after prev. command
 8000334:	f04f 0128 	mov.w	r1, #40	; 0x28
    BL delay_us			// Execute delay
 8000338:	f000 f893 	bl	8000462 <delay_us>

    // Write Function Set (0x38)
    MOV R1, #0x38		// Load instruction
 800033c:	f04f 0138 	mov.w	r1, #56	; 0x38
    BL WriteInstruction	// Write instruction
 8000340:	f7ff ffbc 	bl	80002bc <WriteInstruction>

    MOV R1, #40			// >37us delay after prev. command
 8000344:	f04f 0128 	mov.w	r1, #40	; 0x28
    BL delay_us			// Execute delay
 8000348:	f000 f88b 	bl	8000462 <delay_us>

    // Write Display On/Off(0x0F)
    MOV R1, #0x0F		// Load instruction
 800034c:	f04f 010f 	mov.w	r1, #15
    BL WriteInstruction	// Write instruction
 8000350:	f7ff ffb4 	bl	80002bc <WriteInstruction>

    MOV R1, #40			// >37us delay after prev. command
 8000354:	f04f 0128 	mov.w	r1, #40	; 0x28
    BL delay_us			// Execute delay
 8000358:	f000 f883 	bl	8000462 <delay_us>

    // Write Display Clear (0x01)
    MOV R1, 0x01		// Load instruction
 800035c:	f04f 0101 	mov.w	r1, #1
    BL WriteInstruction	// Execute instruction
 8000360:	f7ff ffac 	bl	80002bc <WriteInstruction>

    MOV R1, #2			// >1.52ms delay after prev. command
 8000364:	f04f 0102 	mov.w	r1, #2
    BL delay_ms			// Execute delay
 8000368:	f000 f872 	bl	8000450 <delay_ms>

    #Write Entry Mode Set (0x06)
    MOV R1, #0x06		// Load instruction
 800036c:	f04f 0106 	mov.w	r1, #6
    BL WriteInstruction	// Execute instruction
 8000370:	f7ff ffa4 	bl	80002bc <WriteInstruction>

	MOV R1, #40			// >37us delay after prev. command
 8000374:	f04f 0128 	mov.w	r1, #40	; 0x28
	BL delay_us			// Execute delay
 8000378:	f000 f873 	bl	8000462 <delay_us>

	POP {R1, PC}
 800037c:	bd02      	pop	{r1, pc}

0800037e <LCD_Clear>:
//	Returns:
//		N/A
//	Register Use:
//		R1	-	Instruction & Delay
LCD_Clear:
	PUSH {R1, LR}		// Backup registers
 800037e:	b502      	push	{r1, lr}

	MOV R1, #0x01			// Load instruction
 8000380:	f04f 0101 	mov.w	r1, #1
	BL WriteInstruction		// Execute instruction
 8000384:	f7ff ff9a 	bl	80002bc <WriteInstruction>

	MOV R1, #2				// Load delay
 8000388:	f04f 0102 	mov.w	r1, #2
	BL delay_ms				// Execute delay
 800038c:	f000 f860 	bl	8000450 <delay_ms>

	POP {R1, PC}		// Restore & return
 8000390:	bd02      	pop	{r1, pc}

08000392 <LCD_Home>:
//	Returns:
//		N/A
//	Register Use:
//		R1	-	Instructions & Delay
LCD_Home:
	PUSH {R1, LR}		// Backup registers
 8000392:	b502      	push	{r1, lr}

	MOV R1, #0x02			// Load instruction
 8000394:	f04f 0102 	mov.w	r1, #2
	BL WriteInstruction		// Execute instruction
 8000398:	f7ff ff90 	bl	80002bc <WriteInstruction>

	MOV R1, #2				// Load delay
 800039c:	f04f 0102 	mov.w	r1, #2
	BL delay_ms				// Execute delay
 80003a0:	f000 f856 	bl	8000450 <delay_ms>

	POP {R1, PC}		// Restore & return
 80003a4:	bd02      	pop	{r1, pc}

080003a6 <LCD_MoveCursor>:
//		R0	-	Argument
//		R1	-	Argument
//		R7	-	Scratch
//		R6	-	Command mask
LCD_MoveCursor:
	PUSH {R0-R1, R6-R7, LR}
 80003a6:	b5c3      	push	{r0, r1, r6, r7, lr}
	MOV R7, #0			// Clear scratch register
 80003a8:	f04f 0700 	mov.w	r7, #0
	MOV R6, #0			// Command register
 80003ac:	f04f 0600 	mov.w	r6, #0

	CMP R0, #0			// Determine if in top row
 80003b0:	2800      	cmp	r0, #0
	IT NE
 80003b2:	bf18      	it	ne
		MOVNE R7, #0x40	// Load second row mask if in bottom row
 80003b4:	2740      	movne	r7, #64	; 0x40

	ORR R7, R7, R1		// Apply mask
 80003b6:	ea47 0701 	orr.w	r7, r7, r1
						// This gives us the desired address

	MOV R6, #0x80 		// Load command mask, 0b10000000
 80003ba:	f04f 0680 	mov.w	r6, #128	; 0x80
	ORR R1, R6, R7		// Apply mask to desired address
 80003be:	ea46 0107 	orr.w	r1, r6, r7
	// This should make the command be 0b1aaaaaaa where
	// all of the a's represent the address of the desired
	// location. Result is stored in R1, so we just call
	// the method that pushes instructions

	BL WriteInstruction	// Push instruction to the LCD
 80003c2:	f7ff ff7b 	bl	80002bc <WriteInstruction>

	MOV R1, #40			// >37us delay for moving cursor
 80003c6:	f04f 0128 	mov.w	r1, #40	; 0x28
	BL delay_us			// Execute delay
 80003ca:	f000 f84a 	bl	8000462 <delay_us>

	POP {R0-R1, R6-R7, PC}
 80003ce:	bdc3      	pop	{r0, r1, r6, r7, pc}

080003d0 <LCD_PrintString>:
//	Register Use:
//		R0	-	Return
//		R1	-	Argument
//		R2	-	Current character
LCD_PrintString:
	PUSH {R1-R2, LR}	// We don't need to back up R0 because it is a return
 80003d0:	b506      	push	{r1, r2, lr}
	MOV R0, #0			// Iterator value
 80003d2:	f04f 0000 	mov.w	r0, #0

080003d6 <loop>:

	// Determine the length of the string
loop:
	LDRB R2, [R1, R0]	// Load character from the string with offset R0
 80003d6:	5c0a      	ldrb	r2, [r1, r0]
	CMP R2, #0			// Determine if the character is null
 80003d8:	2a00      	cmp	r2, #0
	ITTTT NE			// If the character isn't null
 80003da:	bf1f      	itttt	ne
		ADDNE R0, #1	// Increment the iterator
 80003dc:	3001      	addne	r0, #1
		PUSHNE {R1}		// Backup the address
 80003de:	b402      	pushne	{r1}
		MOVNE R1, R2	// Move the character into R1
 80003e0:	4611      	movne	r1, r2
		BLNE WriteData	// Write the character
 80003e2:	f7ff ff83 	blne	80002ec <WriteData>

	// Because I built the delay for writing characters into WriteData,
	// the condition flags get updated making the next IT block inaccurate
	// so I need to redo the original comparisons to fix the PSR

	CMP R2, #0
 80003e6:	2a00      	cmp	r2, #0
	ITT NE
 80003e8:	bf1c      	itt	ne
		POPNE {R1}		// Restore address
 80003ea:	bc02      	popne	{r1}
		BNE loop		// Loop until we hit a null char
 80003ec:	e7f3      	bne.n	80003d6 <loop>

	POP {R1-R2, PC}	// Restore & return
 80003ee:	bd06      	pop	{r1, r2, pc}

080003f0 <LCD_PrintNum>:
//	Register Use:
//		R0	-	ASCII String
//		R1	-	Argument
//		R2	-	Mask
LCD_PrintNum:
	PUSH {R0-R2, LR}
 80003f0:	b507      	push	{r0, r1, r2, lr}

	BL num_to_ASCII 	// Stores ASCII representing chars in R0
 80003f2:	f7ff ff07 	bl	8000204 <num_to_ASCII>
	MOV R1, #0			// Clear R1 so we can use it for WriteData
 80003f6:	f04f 0100 	mov.w	r1, #0
	MOV R2, #0xFF000000	// Base mask for characters
 80003fa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000

	AND R1, R0, R2		// Mask off all but first char
 80003fe:	ea00 0102 	and.w	r1, r0, r2
	LSR R1, R1, #24		// Move char into correct position
 8000402:	ea4f 6111 	mov.w	r1, r1, lsr #24
	BL WriteData		// Write char
 8000406:	f7ff ff71 	bl	80002ec <WriteData>

	LSR R2, R2, #8		// Shift mask right by one char
 800040a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	AND R1, R0, R2		// Apply mask
 800040e:	ea00 0102 	and.w	r1, r0, r2
	LSR R1, R1, #16		// Move char into correct position
 8000412:	ea4f 4111 	mov.w	r1, r1, lsr #16
	BL WriteData		// Write char
 8000416:	f7ff ff69 	bl	80002ec <WriteData>

	LSR R2, R2, #8		// Shift mask right by one char
 800041a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	AND R1, R0, R2		// Apply mask
 800041e:	ea00 0102 	and.w	r1, r0, r2
	LSR R1, R1, #8		// Move char into correct position
 8000422:	ea4f 2111 	mov.w	r1, r1, lsr #8
	BL WriteData		// Write char
 8000426:	f7ff ff61 	bl	80002ec <WriteData>

	LSR R2, R2, #8		// Shift mask left by one char
 800042a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	AND R1, R0, R2		// Apply mask
 800042e:	ea00 0102 	and.w	r1, r0, r2
	BL WriteData		// Write char
 8000432:	f7ff ff5b 	bl	80002ec <WriteData>

	POP {R0-R2, PC}
 8000436:	bd07      	pop	{r0, r1, r2, pc}

08000438 <LCD_PrintChar>:
//	Returns:
//		N/A
//	Register Use:
//		R1	-	Argument
LCD_PrintChar:
	PUSH {LR}
 8000438:	b500      	push	{lr}

	BL WriteData
 800043a:	f7ff ff57 	bl	80002ec <WriteData>

	POP {PC}
 800043e:	bd00      	pop	{pc}
    LDR R1, =RCC_BASE			// Load RCC base address
 8000440:	40023800 	.word	0x40023800
    LDR R1, =GPIOA_BASE			// Load GPIOA base address
 8000444:	40020000 	.word	0x40020000
    LDR R3, =0x00555500			// Load mode mask
 8000448:	00555500 	.word	0x00555500
    LDR R1, =GPIOC_BASE			// Load GPIOC base address
 800044c:	40020800 	.word	0x40020800

08000450 <delay_ms>:
//	Returns:
//		Void
//	Register Use:
//		R1	-	Argument
delay_ms:
	PUSH {R0-R12, LR}	// Back up all registers
 8000450:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	LSL R1, R1, #12		// Conversion to milliseconds
 8000454:	ea4f 3101 	mov.w	r1, r1, lsl #12
	1:					// Decrement loop
		SUBS R1, R1, #1	// Decrement by 1
 8000458:	3901      	subs	r1, #1
		BNE 1b			// Loop if not zero
 800045a:	d1fd      	bne.n	8000458 <delay_ms+0x8>
	POP {R0-R12, LR}	// Restore registers
 800045c:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	BX LR				// Return from subroutine
 8000460:	4770      	bx	lr

08000462 <delay_us>:

// Busy loop for about R1 microseonds
// Provided by Dr. Livingston in Lab 4
delay_us:
	// stack
	PUSH {R1, LR}
 8000462:	b502      	push	{r1, lr}

	LSL R1, R1, #3
 8000464:	ea4f 01c1 	mov.w	r1, r1, lsl #3

1:
	SUBS R1, R1, #1
 8000468:	3901      	subs	r1, #1
	BNE 1b
 800046a:	d1fd      	bne.n	8000468 <delay_us+0x6>

	// return
	POP {R1, PC}
 800046c:	bd02      	pop	{r1, pc}
	...

08000470 <Key_Init>:
//		R3	-	Masks
// Keypad lives on PC0-PC7
// Row[0] = PC4; Row[3] = PC7
// Col[0] = PC0; Col[3] = PC3
Key_Init:
	PUSH {R1-R3, LR}			// Backup
 8000470:	b50e      	push	{r1, r2, r3, lr}

	LDR R1, =RCC_BASE			// Load RCC base address
 8000472:	495f      	ldr	r1, [pc, #380]	; (80005f0 <return+0x4>)
	LDR R2, [R1, #RCC_AHB1ENR]	// Read from the RCC AHB1 enable register
 8000474:	6b0a      	ldr	r2, [r1, #48]	; 0x30
	ORR R2, #RCC_GPIOCEN		// Apply mask to enable GPIOC
 8000476:	f042 0204 	orr.w	r2, r2, #4
	STR R2, [R1, #RCC_AHB1ENR]	// Write back to the RCC
 800047a:	630a      	str	r2, [r1, #48]	; 0x30

	LDR R1, =GPIOC_BASE			// Load GPIOC base address
 800047c:	495d      	ldr	r1, [pc, #372]	; (80005f4 <return+0x8>)
	LDR R2, [R1, #GPIO_MODER]	// Read from the current mode register
 800047e:	680a      	ldr	r2, [r1, #0]
	MOV R3, #ROW_INPUT			// Load mask to set rows as input
 8000480:	f04f 0355 	mov.w	r3, #85	; 0x55
	BFI R2, R3, #0, #16			// Insert mask where PC0-PC7 live
 8000484:	f363 020f 	bfi	r2, r3, #0, #16
	STR R2, [R1, #GPIO_MODER]	// Write back to the mode register
 8000488:	600a      	str	r2, [r1, #0]

	// R1 still contains GPIOC's base address, so now configure PUPDR

	LDR R2, [R1, #GPIO_PUPDR]	// Read the current pull-up/down register
 800048a:	68ca      	ldr	r2, [r1, #12]
	LDR R3, =0xAAAA				// Load the mask to set our pins to pull-up
 800048c:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
	ORR R2, R3					// Apply mask
 8000490:	ea42 0203 	orr.w	r2, r2, r3
	STR R2, [R1, #GPIO_PUPDR]	// Write back to pull-up/down register
 8000494:	60ca      	str	r2, [r1, #12]

	POP {R1-R3, PC}				// Restore & Return
 8000496:	bd0e      	pop	{r1, r2, r3, pc}

08000498 <Key_GetKey_NoBlock>:
//		R3	-	Column index
//		R4	-	Row index
Key_GetKey_NoBlock:
	// Comments regarding how the keypad was implemented are at
	// the end of the file.
	PUSH {R1-R4, LR}	// backup registers
 8000498:	b51e      	push	{r1, r2, r3, r4, lr}

	// Clear used registers because some BFI's are used
	MOV R0, #0
 800049a:	f04f 0000 	mov.w	r0, #0
	MOV R3, #0
 800049e:	f04f 0300 	mov.w	r3, #0
	MOV R4, #0
 80004a2:	f04f 0400 	mov.w	r4, #0

	// Configure rows as inputs, columns as outputs
	LDR R1, =GPIOC_BASE			// Load GPIOC base address
 80004a6:	4953      	ldr	r1, [pc, #332]	; (80005f4 <return+0x8>)
	LDR R2, [R1, #GPIO_MODER]	// Read from the current mode register
 80004a8:	680a      	ldr	r2, [r1, #0]
	MOV R3, #ROW_INPUT			// Load mask to set rows as input
 80004aa:	f04f 0355 	mov.w	r3, #85	; 0x55
	BFI R2, R3, #0, #16			// Insert mask where PC0-PC7 live
 80004ae:	f363 020f 	bfi	r2, r3, #0, #16
	STR R2, [R1, #GPIO_MODER]	// Write back to the mode register
 80004b2:	600a      	str	r2, [r1, #0]

	// Push '1111' onto columns
	LDR R2, [R1, #GPIO_ODR]		// Read current ODR
 80004b4:	694a      	ldr	r2, [r1, #20]
	ORR R2, #0xF				// Push 1111
 80004b6:	f042 020f 	orr.w	r2, r2, #15
	STR R2, [R1, #GPIO_ODR]		// Write
 80004ba:	614a      	str	r2, [r1, #20]

	// Give the electricity time to propogate
	MOV R1, #5
 80004bc:	f04f 0105 	mov.w	r1, #5
	BL delay_us
 80004c0:	f7ff ffcf 	bl	8000462 <delay_us>

	// Read in rows IDR
	LDR R1, =GPIOC_BASE		// Load GPIOC base address
 80004c4:	494b      	ldr	r1, [pc, #300]	; (80005f4 <return+0x8>)
	LDR R2, [R1, #GPIO_IDR]	// Read current IDR
 80004c6:	690a      	ldr	r2, [r1, #16]
	LSR R2, R2, #4			// Rows are in the upper nibble, so shift right 4 times
 80004c8:	ea4f 1212 	mov.w	r2, r2, lsr #4
	BFI R4, R2, #0, #4		// Store value into R4
 80004cc:	f362 0403 	bfi	r4, r2, #0, #4

	// Swap rows to outputs and columns as inputs
	LDR R1, =GPIOC_BASE			// Load GPIOC base address
 80004d0:	4948      	ldr	r1, [pc, #288]	; (80005f4 <return+0x8>)
	LDR R2, [R1, #GPIO_MODER]	// Read from the current mode register
 80004d2:	680a      	ldr	r2, [r1, #0]
	MOV R3, #COL_INPUT			// Load mask to set rows as input
 80004d4:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
	BFI R2, R3, #0, #16			// Insert mask where PC0-PC7 live
 80004d8:	f363 020f 	bfi	r2, r3, #0, #16
	STR R2, [R1, #GPIO_MODER]	// Write back to the mode register
 80004dc:	600a      	str	r2, [r1, #0]

	// Push the stored value that was on rows IDR to the ODR
	LDR R1, =GPIOC_BASE			// Load GPIOC base address
 80004de:	4945      	ldr	r1, [pc, #276]	; (80005f4 <return+0x8>)
	LDR R2, [R1, #GPIO_ODR]		// Read from the current ODR
 80004e0:	694a      	ldr	r2, [r1, #20]
	BFI R2, R4, #4, #4			// Insert into the upper nibble, aka rows
 80004e2:	f364 1207 	bfi	r2, r4, #4, #4
	STR R2, [R1, #GPIO_ODR]		// Write back to the ODR
 80004e6:	614a      	str	r2, [r1, #20]


	// Give the electricity time to propogate
	MOV R1, #5
 80004e8:	f04f 0105 	mov.w	r1, #5
	BL delay_us
 80004ec:	f7ff ffb9 	bl	8000462 <delay_us>

	// Clear R3 because it still has a mask
	MOV R3, #0
 80004f0:	f04f 0300 	mov.w	r3, #0

	// Read the column IDR
	LDR R1, =GPIOC_BASE		// Load GPIOC base address
 80004f4:	493f      	ldr	r1, [pc, #252]	; (80005f4 <return+0x8>)
	LDR R2, [R1, #GPIO_IDR]	// Read the current IDR
 80004f6:	690a      	ldr	r2, [r1, #16]
	BFI R3, R2, #0, #4		// Store the upper nibble
 80004f8:	f362 0303 	bfi	r3, r2, #0, #4

	MOV R1, R3
 80004fc:	4619      	mov	r1, r3
	MOV R2, R4
 80004fe:	4622      	mov	r2, r4
	BL IndexToNum
 8000500:	f000 f81c 	bl	800053c <IndexToNum>

	POP {R1-R4, PC}
 8000504:	bd1e      	pop	{r1, r2, r3, r4, pc}

08000506 <Key_GetKey>:
//		R1	-	Subroutine arguments
//		R2	-	Backup copy of the button code
Key_GetKey:
// Similar to GetKey_NoBlock, but waits for a key to be pressed to return.
// Basically just continuiously call the NoBlock method while it returns 0.
	PUSH {R1-R2, LR}
 8000506:	b506      	push	{r1, r2, lr}
	1:
		// Delay 10ms for debouncing
		MOV R1, #10
 8000508:	f04f 010a 	mov.w	r1, #10
		BL delay_ms
 800050c:	f7ff ffa0 	bl	8000450 <delay_ms>

		// Check if there's a key being pressed
		BL Key_GetKey_NoBlock
 8000510:	f7ff ffc2 	bl	8000498 <Key_GetKey_NoBlock>

		// Compare to 0 as it means no buttons being pressed
		// If there isn't a button being pressed, loop.
		CMP R0, #0
 8000514:	2800      	cmp	r0, #0
		BEQ 1b
 8000516:	d0f7      	beq.n	8000508 <Key_GetKey+0x2>
		MOV R2, R0
 8000518:	4602      	mov	r2, r0
	1:
		// Delay 10ms for debouncing
		MOV R1, #10
 800051a:	f04f 010a 	mov.w	r1, #10
		BL delay_ms
 800051e:	f7ff ff97 	bl	8000450 <delay_ms>

		BL Key_GetKey_NoBlock
 8000522:	f7ff ffb9 	bl	8000498 <Key_GetKey_NoBlock>

		CMP R0, #0
 8000526:	2800      	cmp	r0, #0
		BNE 1b
 8000528:	d1f7      	bne.n	800051a <Key_GetKey+0x14>

		MOV R0, R2
 800052a:	4610      	mov	r0, r2

	POP {R1-R2, PC}
 800052c:	bd06      	pop	{r1, r2, pc}

0800052e <Key_GetChar>:
//	Register Use:
//		R0	-	Return value
//		R1	-	Subroutine arguments
//		R2	-	Array address
Key_GetChar:
	PUSH {R1-R2, LR}
 800052e:	b506      	push	{r1, r2, lr}

	BL Key_GetKey
 8000530:	f7ff ffe9 	bl	8000506 <Key_GetKey>

	MOV R1, R0
 8000534:	4601      	mov	r1, r0

	LDR R2, =chars
 8000536:	4a30      	ldr	r2, [pc, #192]	; (80005f8 <return+0xc>)
	LDRB R0, [R2, R1]
 8000538:	5c50      	ldrb	r0, [r2, r1]

	POP {R1-R2, PC}
 800053a:	bd06      	pop	{r1, r2, pc}

0800053c <IndexToNum>:
//	Register Use:
//		R0	-	Return
//		R1	-	Argument
//		R2	-	Argument
IndexToNum:
	PUSH {LR}
 800053c:	b500      	push	{lr}

	CMP R1, #0b0001		// First column case
 800053e:	2901      	cmp	r1, #1
	BEQ column1
 8000540:	d008      	beq.n	8000554 <column1>

	CMP R1, #0b0010		// Second column case
 8000542:	2902      	cmp	r1, #2
	BEQ column2
 8000544:	d019      	beq.n	800057a <column2>

	CMP R1, #0b0100		// Third column case
 8000546:	2904      	cmp	r1, #4
	BEQ column3
 8000548:	d02a      	beq.n	80005a0 <column3>

	CMP R1, #0b1000		// Fourth column case
 800054a:	2908      	cmp	r1, #8
	BEQ column4
 800054c:	d03b      	beq.n	80005c6 <column4>

	// Default case; only 16 buttons on our keypad.
	MOV R0, #0
 800054e:	f04f 0000 	mov.w	r0, #0
	B return
 8000552:	e04b      	b.n	80005ec <return>

08000554 <column1>:

	column1:
		CMP R2, #0b0001		// First row case
 8000554:	2a01      	cmp	r2, #1
		IT EQ
 8000556:	bf08      	it	eq
			MOVEQ R0, #1		// Column 1, Row 1
 8000558:	2001      	moveq	r0, #1
			BEQ return
 800055a:	d047      	beq.n	80005ec <return>
		CMP R2, #0b0010		// Second row case
 800055c:	2a02      	cmp	r2, #2
		IT EQ
 800055e:	bf08      	it	eq
			MOVEQ R0, #4		// Column 1, Row 2
 8000560:	2004      	moveq	r0, #4
			BEQ return
 8000562:	d043      	beq.n	80005ec <return>
		CMP R2, #0b0100		// Third row case
 8000564:	2a04      	cmp	r2, #4
		IT EQ
 8000566:	bf08      	it	eq
			MOVEQ R0, #7		// Column 1, Row 3
 8000568:	2007      	moveq	r0, #7
			BEQ return
 800056a:	d03f      	beq.n	80005ec <return>
		CMP R2, #0b1000		// Fourth row case
 800056c:	2a08      	cmp	r2, #8
		IT EQ
 800056e:	bf08      	it	eq
			MOVEQ R0, #0xF		// Column 1, Row 4
 8000570:	200f      	moveq	r0, #15
			BEQ return
 8000572:	d03b      	beq.n	80005ec <return>

		// Default case; only 16 buttons on our keypad.
		MOV R0, #0
 8000574:	f04f 0000 	mov.w	r0, #0
		B return
 8000578:	e038      	b.n	80005ec <return>

0800057a <column2>:

	column2:
		CMP R2, #0b0001		// First row case
 800057a:	2a01      	cmp	r2, #1
		IT EQ
 800057c:	bf08      	it	eq
			MOVEQ R0, #2		// Column 2, Row 1
 800057e:	2002      	moveq	r0, #2
			BEQ return
 8000580:	d034      	beq.n	80005ec <return>
		CMP R2, #0b0010		// Second row case
 8000582:	2a02      	cmp	r2, #2
		IT EQ
 8000584:	bf08      	it	eq
			MOVEQ R0, #5		// Column 2, Row 2
 8000586:	2005      	moveq	r0, #5
			BEQ return
 8000588:	d030      	beq.n	80005ec <return>
		CMP R2, #0b0100		// Third row case
 800058a:	2a04      	cmp	r2, #4
		IT EQ
 800058c:	bf08      	it	eq
			MOVEQ R0, #8		// Column 2, Row 3
 800058e:	2008      	moveq	r0, #8
			BEQ return
 8000590:	d02c      	beq.n	80005ec <return>
		CMP R2, #0b1000		// Fourth row case
 8000592:	2a08      	cmp	r2, #8
		IT EQ
 8000594:	bf08      	it	eq
			MOVEQ R0, #16		// Column 2, Row 4
 8000596:	2010      	moveq	r0, #16
			BEQ return
 8000598:	d028      	beq.n	80005ec <return>

		// Default case; only 16 buttons on our keypad.
		MOV R0, #0
 800059a:	f04f 0000 	mov.w	r0, #0
		B return
 800059e:	e025      	b.n	80005ec <return>

080005a0 <column3>:

	column3:
		CMP R2, #0b0001		// First row case
 80005a0:	2a01      	cmp	r2, #1
		IT EQ
 80005a2:	bf08      	it	eq
			MOVEQ R0, #3		// Column 3, Row 1
 80005a4:	2003      	moveq	r0, #3
			BEQ return
 80005a6:	d021      	beq.n	80005ec <return>
		CMP R2, #0b0010		// Second row case
 80005a8:	2a02      	cmp	r2, #2
		IT EQ
 80005aa:	bf08      	it	eq
			MOVEQ R0, #6		// Column 3, Row 2
 80005ac:	2006      	moveq	r0, #6
			BEQ return
 80005ae:	d01d      	beq.n	80005ec <return>
		CMP R2, #0b0100		// Third row case
 80005b0:	2a04      	cmp	r2, #4
		IT EQ
 80005b2:	bf08      	it	eq
			MOVEQ R0, #9		// Column 3, Row 3
 80005b4:	2009      	moveq	r0, #9
			BEQ return
 80005b6:	d019      	beq.n	80005ec <return>
		CMP R2, #0b1000		// Fourth row case
 80005b8:	2a08      	cmp	r2, #8
		IT EQ
 80005ba:	bf08      	it	eq
			MOVEQ R0, #0xE		// Column 3, Row 4
 80005bc:	200e      	moveq	r0, #14
			BEQ return
 80005be:	d015      	beq.n	80005ec <return>

		// Default case; only 16 buttons on our keypad.
		MOV R0, #0
 80005c0:	f04f 0000 	mov.w	r0, #0
		B return
 80005c4:	e012      	b.n	80005ec <return>

080005c6 <column4>:

	column4:
		CMP R2, #0b0001		// First row case
 80005c6:	2a01      	cmp	r2, #1
		IT EQ
 80005c8:	bf08      	it	eq
			MOVEQ R0, #0xA		// Column 4, Row 1
 80005ca:	200a      	moveq	r0, #10
			BEQ return
 80005cc:	d00e      	beq.n	80005ec <return>
		CMP R2, #0b0010		// Second row case
 80005ce:	2a02      	cmp	r2, #2
		IT EQ
 80005d0:	bf08      	it	eq
			MOVEQ R0, #0xB		// Column 4, Row 2
 80005d2:	200b      	moveq	r0, #11
			BEQ return
 80005d4:	d00a      	beq.n	80005ec <return>
		CMP R2, #0b0100		// Third row case
 80005d6:	2a04      	cmp	r2, #4
		IT EQ
 80005d8:	bf08      	it	eq
			MOVEQ R0, #0xC		// Column 4, Row 3
 80005da:	200c      	moveq	r0, #12
			BEQ return
 80005dc:	d006      	beq.n	80005ec <return>
		CMP R2, #0b1000		// Fourth row case
 80005de:	2a08      	cmp	r2, #8
		IT EQ
 80005e0:	bf08      	it	eq
			MOVEQ R0, #0xD		// Column 4, Row 4
 80005e2:	200d      	moveq	r0, #13
			BEQ return
 80005e4:	d002      	beq.n	80005ec <return>

		// Default case; only 16 buttons on our keypad.
		MOV R0, #0
 80005e6:	f04f 0000 	mov.w	r0, #0
		B return
 80005ea:	e7ff      	b.n	80005ec <return>

080005ec <return>:

	return:
		POP {PC}
 80005ec:	bd00      	pop	{pc}
 80005ee:	0000      	.short	0x0000
	LDR R1, =RCC_BASE			// Load RCC base address
 80005f0:	40023800 	.word	0x40023800
	LDR R1, =GPIOC_BASE			// Load GPIOC base address
 80005f4:	40020800 	.word	0x40020800
	LDR R2, =chars
 80005f8:	080006f8 	.word	0x080006f8

080005fc <main>:
.section .text

.global main

main:
	BL LCD_Init				// Initialize display
 80005fc:	f7ff fe93 	bl	8000326 <LCD_Init>

	BL Key_Init				// Initialize keypad
 8000600:	f7ff ff36 	bl	8000470 <Key_Init>

	MOV R6, #0				// Initialize line counter
 8000604:	f04f 0600 	mov.w	r6, #0
	MOV R7, #0				// Initialize char counter
 8000608:	f04f 0700 	mov.w	r7, #0
1:
	BL Key_GetChar			// Get the key being pressed
 800060c:	f7ff ff8f 	bl	800052e <Key_GetChar>
	MOV R1, R0				// Move it into an argument register
 8000610:	4601      	mov	r1, r0
	BL LCD_PrintChar		// Print the character
 8000612:	f7ff ff11 	bl	8000438 <LCD_PrintChar>
	ADD R7, R7, #1			// Increment the char counter
 8000616:	f107 0701 	add.w	r7, r7, #1
	CMP R7, #16				// If there are 16 characters
 800061a:	2f10      	cmp	r7, #16
	BEQ newLine				// Move to a new line
 800061c:	d000      	beq.n	8000620 <newLine>
	B 1b					// Otherwise loop
 800061e:	e7f5      	b.n	800060c <main+0x10>

08000620 <newLine>:

newLine:
	CMP R6, #1				// Determine if we are on line 0 or 1
 8000620:	2e01      	cmp	r6, #1
	ITTT NE					// If we are on the first row
 8000622:	bf1e      	ittt	ne
		MOVNE R0, #1		// Second row index
 8000624:	2001      	movne	r0, #1
		MOVNE R1, #0		// First column inxed
 8000626:	2100      	movne	r1, #0
		BLNE LCD_MoveCursor	// Move the cursor
 8000628:	f7ff febd 	blne	80003a6 <LCD_MoveCursor>

	CMP R6, #1				// Redo comparison just to be safe
 800062c:	2e01      	cmp	r6, #1
	ITT NE					// Again if we are on the first row
 800062e:	bf1c      	itt	ne
		MOVNE R6, #1		// Update row counter
 8000630:	2601      	movne	r6, #1
		MOVNE R7, #0		// Reset char counter
 8000632:	2700      	movne	r7, #0
		BNE 1b				// Jump back to loop
 8000634:	d1ea      	bne.n	800060c <main+0x10>

	CMP R6, #1				// Again, redo the comparison
 8000636:	2e01      	cmp	r6, #1
	ITTT EQ					// If we are on the second row
 8000638:	bf02      	ittt	eq
		MOVEQ R6, #0		// Update row counter
 800063a:	2600      	moveq	r6, #0
		MOVEQ R7, #0		// Update char counter
 800063c:	2700      	moveq	r7, #0
		BLEQ LCD_Home		// Home the cursor
 800063e:	f7ff fea8 	bleq	8000392 <LCD_Home>
	B 1b					// Return to loop
 8000642:	e7e3      	b.n	800060c <main+0x10>

08000644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000646:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000648:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490d      	ldr	r1, [pc, #52]	; (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0a      	ldr	r4, [pc, #40]	; (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000672:	f000 f811 	bl	8000698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f7ff ffc1 	bl	80005fc <main>

0800067a <LoopForever>:

LoopForever:
    b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   r0, =_estack
 800067c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000688:	08000714 	.word	0x08000714
  ldr r2, =_sbss
 800068c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000690:	2000001c 	.word	0x2000001c

08000694 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC_IRQHandler>
	...

08000698 <__libc_init_array>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	4d0d      	ldr	r5, [pc, #52]	; (80006d0 <__libc_init_array+0x38>)
 800069c:	4c0d      	ldr	r4, [pc, #52]	; (80006d4 <__libc_init_array+0x3c>)
 800069e:	1b64      	subs	r4, r4, r5
 80006a0:	10a4      	asrs	r4, r4, #2
 80006a2:	2600      	movs	r6, #0
 80006a4:	42a6      	cmp	r6, r4
 80006a6:	d109      	bne.n	80006bc <__libc_init_array+0x24>
 80006a8:	4d0b      	ldr	r5, [pc, #44]	; (80006d8 <__libc_init_array+0x40>)
 80006aa:	4c0c      	ldr	r4, [pc, #48]	; (80006dc <__libc_init_array+0x44>)
 80006ac:	f000 f818 	bl	80006e0 <_init>
 80006b0:	1b64      	subs	r4, r4, r5
 80006b2:	10a4      	asrs	r4, r4, #2
 80006b4:	2600      	movs	r6, #0
 80006b6:	42a6      	cmp	r6, r4
 80006b8:	d105      	bne.n	80006c6 <__libc_init_array+0x2e>
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c0:	4798      	blx	r3
 80006c2:	3601      	adds	r6, #1
 80006c4:	e7ee      	b.n	80006a4 <__libc_init_array+0xc>
 80006c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ca:	4798      	blx	r3
 80006cc:	3601      	adds	r6, #1
 80006ce:	e7f2      	b.n	80006b6 <__libc_init_array+0x1e>
 80006d0:	0800070c 	.word	0x0800070c
 80006d4:	0800070c 	.word	0x0800070c
 80006d8:	0800070c 	.word	0x0800070c
 80006dc:	08000710 	.word	0x08000710

080006e0 <_init>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	bf00      	nop
 80006e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e6:	bc08      	pop	{r3}
 80006e8:	469e      	mov	lr, r3
 80006ea:	4770      	bx	lr

080006ec <_fini>:
 80006ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ee:	bf00      	nop
 80006f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f2:	bc08      	pop	{r3}
 80006f4:	469e      	mov	lr, r3
 80006f6:	4770      	bx	lr
