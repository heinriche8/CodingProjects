
Demo.elf:     file format elf32-littlenios2
Demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001512c memsz 0x0001512c flags r-x
    LOAD off    0x0001614c vaddr 0x0001514c paddr 0x00016e74 align 2**12
         filesz 0x00001d28 memsz 0x00001d28 flags rw-
    LOAD off    0x00018b9c vaddr 0x00018b9c paddr 0x00018b9c align 2**12
         filesz 0x00000000 memsz 0x000001a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000148ac  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000670  00014adc  00014adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d28  0001514c  00016e74  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a0  00018b9c  00018b9c  00018b9c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00018d3c  00018d3c  00017e74  2**0
                  CONTENTS
  7 .vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  dead2000  dead2000  00017e74  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00017e74  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001100  00000000  00000000  00017e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026cd7  00000000  00000000  00018f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a302  00000000  00000000  0003fc6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d080  00000000  00000000  00049f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003148  00000000  00000000  00056ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004edf  00000000  00000000  0005a13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017d21  00000000  00000000  0005f01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00076d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019b0  00000000  00000000  00076d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007ccfa  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0007ccfd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007cd02  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007cd03  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0007cd04  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0007cd0d  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0007cd16  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000f  00000000  00000000  0007cd1f  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000005b  00000000  00000000  0007cd2e  2**0
                  CONTENTS, READONLY
 27 .jdi          00007beb  00000000  00000000  0007cd89  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00131005  00000000  00000000  00084974  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00014adc l    d  .rodata	00000000 .rodata
0001514c l    d  .rwdata	00000000 .rwdata
00018b9c l    d  .bss	00000000 .bss
00018d3c l    d  .SDRAM	00000000 .SDRAM
dead2000 l    d  .vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Demo_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 LT24.c
00018b9c l     O .bss	00000004 LT24
00018ba0 l     O .bss	00000004 hRes
00018ba4 l     O .bss	00000004 vRes
00018ba8 l     O .bss	00000004 numPixels
00016e00 l     O .rwdata	00000001 cmdX
00016e01 l     O .rwdata	00000001 cmdY
00018bac l     O .bss	00000002 touch_rx
0000026c l     F .text	0000007c to565
00000000 l    df *ABS*	00000000 accel.c
00018bb0 l     O .bss	00000004 i2c_dev
00018bb4 l     O .bss	00000004 status
00018bb8 l     O .bss	00000002 accel_tx
00018bba l     O .bss	00000006 accel_rx
00000000 l    df *ABS*	00000000 cstick.c
00016e04 l     O .rwdata	00000004 ADC_SAMPLE0
00016e08 l     O .rwdata	00000004 ADC_SAMPLE1
00016e0c l     O .rwdata	00000004 ADC_IER
00016e10 l     O .rwdata	00000004 ADC_CMD
00000000 l    df *ABS*	00000000 demo_program.c
00000000 l    df *ABS*	00000000 display.c
00016e14 l     O .rwdata	00000004 delay
00000000 l    df *ABS*	00000000 keys.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 servo.c
00016e18 l     O .rwdata	00000004 PWMX
00016e1c l     O .rwdata	00000004 PWMY
00000000 l    df *ABS*	00000000 vga.c
00018bc0 l     O .bss	00000004 pixelbuf
00018bc4 l     O .bss	00000004 charbuf
00018bc8 l     O .bss	00000004 pixel_hRes
00018bcc l     O .bss	00000004 pixel_vRes
00018bd0 l     O .bss	00000004 pixel_hBits
00018bd4 l     O .bss	00000004 pixel_vBits
00018bd8 l     O .bss	00000004 numPixels
00016e20 l     O .rwdata	00000004 char_wBits
00016e24 l     O .rwdata	00000004 char_vBits
000019d8 l     F .text	0000007c to565
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014e62 l     O .rodata	00000010 zeroes.4389
00014e72 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
0000575c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 findfp.c
0000700c l     F .text	00000008 __fp_unlock
00007020 l     F .text	0000019c __sinit.part.1
000071bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015554 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00015998 l     O .rwdata	00000020 lc_ctype_charset
00015978 l     O .rwdata	00000020 lc_message_charset
000159b8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00014ea4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014fc8 l     O .rodata	00000010 zeroes.4333
00014fd8 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f02c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f140 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f16c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f500 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f5e8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f6d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f8b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016e58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fb54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fc90 l     F .text	00000034 alt_dev_reg
00015b98 l     O .rwdata	00000038 gyro_i2c
00015bd0 l     O .rwdata	00001060 JTAG_UART
00016c30 l     O .rwdata	0000003c modular_adc_0
00016c6c l     O .rwdata	0000005c vga_subsystem_Char_Buf_Subsystem_Char_Buf_DMA
00016cc8 l     O .rwdata	0000005c vga_subsystem_VGA_Pixel_DMA
00016d24 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00016d78 l     O .rwdata	00000044 vga_subsystem_Char_Buf_Subsystem_Char_Buf_RGB_Resampler
00016dbc l     O .rwdata	00000044 vga_subsystem_VGA_Pixel_RGB_Resampler
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0001063c l     F .text	00000110 optional_irq_callback
0001079c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00012478 l     F .text	0000020c altera_avalon_jtag_uart_irq
00012684 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012eb8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
00012fac l     F .text	000000a8 alt_adc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000137bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013aa8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00013c08 l     F .text	0000003c alt_get_errno
00013c44 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018c08 g     O .bss	00000004 alt_instruction_exception_handler
00001848 g     F .text	00000060 servo_move
000091e4 g     F .text	00000074 _mprec_log10
0001324c g     F .text	00000050 adc_stop
000092d0 g     F .text	0000008c __any_on
0000ba24 g     F .text	00000054 _isatty_r
00014eb0 g     O .rodata	00000028 __mprec_tinytens
0000f7ec g     F .text	0000007c alt_main
0000321c g     F .text	000000c0 _puts_r
00018c3c g     O .bss	00000100 alt_irq
0000b74c g     F .text	00000060 _lseek_r
00016e74 g       *ABS*	00000000 __flash_rwdata_start
0000da68 g     F .text	00000088 .hidden __eqdf2
00018d3c g       *ABS*	00000000 __alt_heap_start
00009a0c g     F .text	0000005c __sseek
0000736c g     F .text	00000010 __sinit
000146b8 g     F .text	00000140 __swbuf_r
000006dc g     F .text	00000074 getTouchY
00007e40 g     F .text	0000007c _setlocale_r
000071c4 g     F .text	00000078 __sfmoreglue
00010e94 g     F .text	000000a8 alt_avalon_i2c_rx_read
00000904 g     F .text	00000138 Accel_getVals
0000f88c g     F .text	00000024 __malloc_unlock
00001370 g     F .text	00000030 LED_Clear
000120ac g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00010c18 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00008148 g     F .text	0000015c memmove
00007354 g     F .text	00000018 _cleanup
00000750 g     F .text	00000078 getPixelX
000118fc g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
000082a4 g     F .text	000000a8 _Balloc
000025d8 g     F .text	00000070 .hidden __fixsfsi
00000838 g     F .text	000000cc Accel_Init
0000daf0 g     F .text	000000dc .hidden __gtdf2
00014298 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00013410 g     F .text	00000048 adc_interrupt_disable
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b9c8 g     F .text	0000005c _fstat_r
00018be8 g     O .bss	00000004 errno
00009988 g     F .text	00000008 __seofread
00009d1c g     F .text	000013a0 ___svfiprintf_internal_r
00013100 g     F .text	00000074 altera_modular_adc_init
00018c00 g     O .bss	00000004 alt_argv
0001ee00 g       *ABS*	00000000 _gp
0000fb24 g     F .text	00000030 usleep
000120f0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00000b28 g     F .text	00000068 click_init
000020f4 g     F .text	000004e4 .hidden __subsf3
00001d70 g     F .text	000000b4 VGA_Pixelbuf_Fill
00010da8 g     F .text	00000044 alt_avalon_i2c_is_busy
00015a18 g     O .rwdata	00000180 alt_fd_list
00001a54 g     F .text	00000058 VGA_Pixelbuf_Swapframes
00010b4c g     F .text	000000cc alt_avalon_i2c_master_config_set
0001395c g     F .text	00000090 alt_find_dev
00008000 g     F .text	00000148 memcpy
00007014 g     F .text	0000000c _cleanup_r
0000eea8 g     F .text	000000dc .hidden __floatsidf
00013314 g     F .text	0000003c adc_set_mode_run_continuously
00013b8c g     F .text	0000007c alt_io_redirect
0000dbcc g     F .text	000000f4 .hidden __ltdf2
00014adc g       *ABS*	00000000 __DTOR_END__
0001173c g     F .text	000001c0 alt_avalon_i2c_master_transmit
000032dc g     F .text	00000014 puts
00013a0c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000098c0 g     F .text	00000074 __fpclassifyd
00009140 g     F .text	000000a4 __ratio
0001287c g     F .text	0000021c altera_avalon_jtag_uart_read
000028c0 g     F .text	00000014 malloc
0000c730 g     F .text	00000064 .hidden __udivsi3
0000f53c g     F .text	000000ac isatty
0000119c g     F .text	00000060 click_isr
00014f00 g     O .rodata	000000c8 __mprec_tens
00007ebc g     F .text	0000000c __locale_charset
000109b8 g     F .text	00000098 alt_avalon_i2c_enable
00018be4 g     O .bss	00000004 __malloc_top_pad
000004d4 g     F .text	00000094 LCD_drawPixel
00011fe0 g     F .text	00000068 alt_avalon_i2c_int_disable
00016e38 g     O .rwdata	00000004 __mb_cur_max
00007eec g     F .text	0000000c _localeconv_r
000086d8 g     F .text	0000003c __i2b
000077f0 g     F .text	000004c8 __sfvwrite_r
000032f0 g     F .text	00000054 _sbrk_r
0000b968 g     F .text	00000060 _read_r
00016e64 g     O .rwdata	00000008 altera_modular_adc_list
00016e4c g     O .rwdata	00000004 alt_max_fd
0000b3a0 g     F .text	000000f0 _fclose_r
0000b71c g     F .text	00000030 fflush
00000b04 g     F .text	00000024 cstick_gety
00018be0 g     O .bss	00000004 __malloc_max_sbrked_mem
00011b08 g     F .text	00000210 alt_avalon_i2c_master_receive
0000c7ec g     F .text	000008ac .hidden __adddf3
00008ee8 g     F .text	0000010c __b2d
0000c074 g     F .text	000005c4 .hidden __umoddi3
0000f710 g     F .text	000000dc lseek
00012048 g     F .text	00000064 alt_avalon_i2c_int_enable
00016e30 g     O .rwdata	00000004 _global_impure_ptr
0000935c g     F .text	00000564 _realloc_r
00018d3c g       *ABS*	00000000 __bss_end
0000f410 g     F .text	000000f0 alt_iic_isr_register
00014190 g     F .text	00000108 alt_tick
0000ba78 g     F .text	000005fc .hidden __udivdi3
00011f08 g     F .text	00000058 alt_avalon_i2c_int_status_get
000134dc g     F .text	0000003c adc_wait_for_interrupt
00014ed8 g     O .rodata	00000028 __mprec_bigtens
000084bc g     F .text	00000104 __s2b
0000ef84 g     F .text	000000a8 .hidden __floatunsidf
00008c28 g     F .text	00000060 __mcmp
0000738c g     F .text	00000018 __fp_lock_all
0000f3c4 g     F .text	0000004c alt_ic_irq_enabled
000140f4 g     F .text	0000009c alt_alarm_stop
00010838 g     F .text	00000054 alt_avalon_i2c_register_callback
0001088c g     F .text	000000ec alt_avalon_i2c_init
00018bf8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000159f0 g     O .rwdata	00000028 alt_dev_null
000132d4 g     F .text	00000040 adc_set_mode_run_once
00000ae0 g     F .text	00000024 cstick_getx
0001379c g     F .text	00000020 alt_dcache_flush_all
000085c0 g     F .text	00000068 __hi0bits
0000ee28 g     F .text	00000080 .hidden __fixdfsi
00016e74 g       *ABS*	00000000 __ram_rwdata_end
000007c8 g     F .text	00000070 getPixelY
00016e44 g     O .rwdata	00000008 alt_dev_list
0000fb90 g     F .text	00000100 write
00014550 g     F .text	000000a0 _putc_r
000111c8 g     F .text	0000004c alt_avalon_i2c_check_arblost
00002038 g     F .text	000000bc .hidden __gtsf2
00011fa4 g     F .text	0000003c alt_avalon_i2c_int_clear
0001514c g       *ABS*	00000000 __ram_rodata_end
0000f1a8 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000dbcc g     F .text	000000f4 .hidden __ledf2
00016e5c g     O .rwdata	00000008 alt_avalon_i2c_list
000018a8 g     F .text	0000007c servo_deg
0001329c g     F .text	00000038 adc_start
000089a0 g     F .text	00000140 __pow5mult
00018bf4 g     O .bss	00000004 __nlocale_changed
0000c794 g     F .text	00000058 .hidden __umodsi3
000012f8 g     F .text	0000003c Demo_Cstick_Init
00018d3c g       *ABS*	00000000 end
000123b8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00010978 g     F .text	00000040 alt_avalon_i2c_open
00001b50 g     F .text	00000084 VGA_Charbuf_Char
00014adc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00011350 g     F .text	000000e8 alt_avalon_i2c_master_tx
00012f30 g     F .text	0000007c alt_avalon_timer_sc_init
0000285c g     F .text	00000064 .hidden __clzsi2
00012a98 g     F .text	00000224 altera_avalon_jtag_uart_write
00001980 g     F .text	00000058 servo_disable
0000737c g     F .text	00000004 __sfp_lock_acquire
00001690 g     F .text	00000030 button_Read
00007f1c g     F .text	000000e4 memchr
00003344 g     F .text	00000058 _sprintf_r
00001924 g     F .text	0000005c servo_read
000074e0 g     F .text	00000310 _free_r
00013e8c g     F .text	0000022c alt_printf
00007ec8 g     F .text	00000010 __locale_mb_cur_max
000016f0 g     F .text	00000158 notmain
00014928 g     F .text	00000180 __call_exitprocs
00018bf0 g     O .bss	00000004 __mlocale_changed
0001074c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00016e28 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00018c0c g     O .bss	00000004 _alt_tick_rate
00011d18 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0001213c g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00008ae0 g     F .text	00000148 __lshift
00012cbc g     F .text	000001fc alt_avalon_spi_command
00018c10 g     O .bss	00000004 _alt_nticks
0000f8ec g     F .text	00000104 read
0000fcfc g     F .text	00000940 alt_sys_init
00002648 g     F .text	00000124 .hidden __floatsisf
00009b4c g     F .text	000001d0 __ssprint_r
00014810 g     F .text	00000118 __register_exitproc
00011574 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00008714 g     F .text	0000028c __multiply
00012724 g     F .text	00000068 altera_avalon_jtag_uart_close
00002010 g     F .text	00000028 .hidden __mulsi3
0001514c g       *ABS*	00000000 __ram_rwdata_start
00014adc g       *ABS*	00000000 __ram_rodata_start
00018c14 g     O .bss	00000028 __malloc_current_mallinfo
00008ff4 g     F .text	0000014c __d2b
00001670 g     F .text	00000020 delay_Get
00012254 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000143c4 g     F .text	000000c4 alt_get_fd
00013644 g     F .text	00000158 alt_busy_sleep
0000b270 g     F .text	00000054 _close_r
000144d4 g     F .text	0000007c memcmp
00010dec g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00012314 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018d3c g       *ABS*	00000000 __alt_stack_base
00012364 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000b11c g     F .text	00000154 __swsetup_r
000133cc g     F .text	00000044 adc_interrupt_enable
0000d098 g     F .text	000009d0 .hidden __divdf3
0000723c g     F .text	00000118 __sfp
00009258 g     F .text	00000078 __copybits
00001b04 g     F .text	0000004c VGA_Charbuf_Clear
0001514c g     O .rwdata	00000408 __malloc_av_
00007388 g     F .text	00000004 __sinit_lock_release
0000dcc0 g     F .text	0000086c .hidden __muldf3
00009934 g     F .text	00000054 __sread
00001eb4 g     F .text	000000fc VGA_Pixelbuf_Rect
000142bc g     F .text	00000108 alt_find_file
000137f8 g     F .text	000000a4 alt_dev_llist_insert
0000f868 g     F .text	00000024 __malloc_lock
0000fa74 g     F .text	000000b0 sbrk
000034a0 g     F .text	000022bc ___svfprintf_internal_r
00011214 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0001117c g     F .text	0000004c alt_avalon_i2c_check_nack
000015fc g     F .text	00000048 Hex_Clear
0000b6c0 g     F .text	0000005c _fflush_r
0000b2c4 g     F .text	000000dc _calloc_r
000014f0 g     F .text	0000010c Hex_scrollPrint
00018b9c g       *ABS*	00000000 __bss_start
00000340 g     F .text	000000dc LCD_Init
000030f4 g     F .text	00000128 memset
00000b90 g     F .text	00000274 main
00011148 g     F .text	00000034 alt_avalon_i2c_master_target_set
00018c04 g     O .bss	00000004 alt_envp
00018bdc g     O .bss	00000004 __malloc_max_total_mem
000122b4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000147f8 g     F .text	00000018 __swbuf
00011f60 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00013054 g     F .text	000000ac alt_adc_word_read
00009a68 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000b490 g     F .text	00000014 fclose
00005984 g     F .text	00001688 _dtoa_r
000028e8 g     F .text	0000080c _malloc_r
00016e50 g     O .rwdata	00000004 alt_errno
000011fc g     F .text	000000cc Demo_VGA_Init
00007cb8 g     F .text	000000c4 _fwalk
00000a74 g     F .text	00000034 cstick_Start
000145f0 g     F .text	000000c8 putc
0000c638 g     F .text	00000084 .hidden __divsi3
000073bc g     F .text	00000124 _malloc_trim_r
00014adc g       *ABS*	00000000 __CTOR_END__
00009a70 g     F .text	000000dc strcmp
00014adc g       *ABS*	00000000 __flash_rodata_start
00014adc g       *ABS*	00000000 __DTOR_LIST__
00000568 g     F .text	00000100 LCD_drawRect
0000da68 g     F .text	00000088 .hidden __nedf2
0000041c g     F .text	000000b8 LCD_Fill
0000fcc4 g     F .text	00000038 alt_irq_init
0000f9f0 g     F .text	00000084 alt_release_fd
0000339c g     F .text	0000006c sprintf
00014d1a g     O .rodata	00000100 .hidden __clz_tab
00018bec g     O .bss	00000004 _PathLocale
00014488 g     F .text	00000014 atexit
00002038 g     F .text	000000bc .hidden __gesf2
0000b0bc g     F .text	00000060 _write_r
00007ef8 g     F .text	00000018 setlocale
00016e34 g     O .rwdata	00000004 _impure_ptr
00018bfc g     O .bss	00000004 alt_argc
0000b4a4 g     F .text	0000021c __sflush_r
000138fc g     F .text	00000060 _do_dtors
00007ee4 g     F .text	00000008 __locale_cjk_lang
00011110 g     F .text	00000038 alt_avalon_i2c_master_target_get
00011020 g     F .text	000000f0 alt_avalon_i2c_send_address
00000020 g       .exceptions	00000000 alt_irq_entry
00008e84 g     F .text	00000064 __ulp
000073a4 g     F .text	00000018 __fp_unlock_all
00016e3c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007f10 g     F .text	0000000c localeconv
000121ec g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00010a50 g     F .text	0000004c alt_avalon_i2c_disable
0000f260 g     F .text	00000050 alt_ic_isr_register
00016e74 g       *ABS*	00000000 _edata
00001e24 g     F .text	00000090 VGA_Pixelbuf_Pixel
00018d3c g       *ABS*	00000000 _end
000002e8 g     F .text	00000058 LCD_swapFrames
0001349c g     F .text	00000040 adc_interrupt_asserted
00000230 g       *ABS*	00000000 __ram_exceptions_end
0001278c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00001c9c g     F .text	000000d4 VGA_Pixelbuf_Init
00010a9c g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000f338 g     F .text	0000008c alt_ic_irq_disable
00009990 g     F .text	0000007c __swrite
00016e2c g     O .rwdata	00000004 __malloc_trim_threshold
00013458 g     F .text	00000044 adc_clear_interrupt_status
00007ed8 g     F .text	0000000c __locale_msgcharset
00000668 g     F .text	00000074 getTouchX
0001449c g     F .text	00000038 exit
00007d7c g     F .text	000000c4 _fwalk_reent
0000276c g     F .text	000000f0 .hidden __floatunsisf
00008c88 g     F .text	000001fc __mdiff
000016c0 g     F .text	00000030 switch_Read
0000c6bc g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007380 g     F .text	00000004 __sfp_lock_release
00010cac g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000012c8 g     F .text	00000030 Demo_LCD_Init
00001334 g     F .text	0000003c LED_Print
00010f3c g     F .text	000000e4 alt_avalon_i2c_cmd_write
00001fb0 g     F .text	00000060 .hidden __fixunssfsi
0001320c g     F .text	00000040 altera_modular_adc_open
00014aa8 g     F .text	00000034 _exit
00013518 g     F .text	0000012c alt_alarm_start
0000b7ac g     F .text	000001bc __smakebuf_r
00001644 g     F .text	0000002c delay_Set
00003408 g     F .text	00000098 strlen
00013d30 g     F .text	0000015c open
0000daf0 g     F .text	000000dc .hidden __gedf2
00001aac g     F .text	00000058 VGA_Charbuf_Init
000140b8 g     F .text	0000003c alt_putchar
00013350 g     F .text	0000007c adc_recalibrate
00000e04 g     F .text	00000398 rainbow_Init
00001bd4 g     F .text	000000c8 VGA_Charbuf_String
000139ec g     F .text	00000020 alt_icache_flush_all
000013a0 g     F .text	00000150 Hex_printString
00016e54 g     O .rwdata	00000004 alt_priority_mask
00000aa8 g     F .text	00000038 cstick_Stop
00000a3c g     F .text	00000038 cstick_Init
0000f2b0 g     F .text	00000088 alt_ic_irq_enable
dead2000 g       *ABS*	00000000 __alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM
0000e52c g     F .text	000008fc .hidden __subdf3
00008628 g     F .text	000000b0 __lo0bits
00016e6c g     O .rwdata	00000008 alt_alarm_list
0001389c g     F .text	00000060 _do_ctors
0000f068 g     F .text	000000d8 close
000121a0 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0000f650 g     F .text	00000084 alt_load
00011438 g     F .text	0000013c alt_avalon_i2c_master_rx
00013174 g     F .text	00000098 alt_adc_register_callback
000028d4 g     F .text	00000014 free
00007384 g     F .text	00000004 __sinit_lock_acquire
00008374 g     F .text	00000148 __multadd
0000834c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10a30f04 	addi	r2,r2,-29636
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a30f04 	addi	r2,r2,-29636
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e12c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a78217 	ldw	r2,-25080(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a78217 	ldw	r2,-25080(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6bb8014 	ori	gp,gp,60928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10a2e714 	ori	r2,r2,35740

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18e34f14 	ori	r3,r3,36156

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000f6500 	call	f650 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000f7ec0 	call	f7ec <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e268>

0000026c <to565>:
/*
 * Converts an input RGB888 or ARGB8888 value
 * into RGB565 color space. Ignores alpha
 * in conversion.
 */
static uint16_t to565(uint32_t color) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	df000215 	stw	fp,8(sp)
     274:	df000204 	addi	fp,sp,8
     278:	e13fff15 	stw	r4,-4(fp)
	// Mask off color values
	uint8_t red = (color & 0x00FF0000)>>16;
     27c:	e0bfff17 	ldw	r2,-4(fp)
     280:	10803fec 	andhi	r2,r2,255
     284:	1004d43a 	srli	r2,r2,16
     288:	e0bffe05 	stb	r2,-8(fp)
	uint8_t green = (color & 0x0000FF00)>>8;
     28c:	e0bfff17 	ldw	r2,-4(fp)
     290:	10bfc00c 	andi	r2,r2,65280
     294:	1004d23a 	srli	r2,r2,8
     298:	e0bffe45 	stb	r2,-7(fp)
	uint8_t blue = (color & 0x000000FF);
     29c:	e0bfff17 	ldw	r2,-4(fp)
     2a0:	e0bffe85 	stb	r2,-6(fp)

	return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
     2a4:	e0bffe03 	ldbu	r2,-8(fp)
     2a8:	10803e0c 	andi	r2,r2,248
     2ac:	1004923a 	slli	r2,r2,8
     2b0:	1007883a 	mov	r3,r2
     2b4:	e0bffe43 	ldbu	r2,-7(fp)
     2b8:	10803f0c 	andi	r2,r2,252
     2bc:	100490fa 	slli	r2,r2,3
     2c0:	1884b03a 	or	r2,r3,r2
     2c4:	1007883a 	mov	r3,r2
     2c8:	e0bffe83 	ldbu	r2,-6(fp)
     2cc:	1004d0fa 	srli	r2,r2,3
     2d0:	10803fcc 	andi	r2,r2,255
     2d4:	1884b03a 	or	r2,r3,r2
}
     2d8:	e037883a 	mov	sp,fp
     2dc:	df000017 	ldw	fp,0(sp)
     2e0:	dec00104 	addi	sp,sp,4
     2e4:	f800283a 	ret

000002e8 <LCD_swapFrames>:

/*
 * Swaps the front and back buffers of the display
 */
void LCD_swapFrames() {
     2e8:	defffe04 	addi	sp,sp,-8
     2ec:	df000115 	stw	fp,4(sp)
     2f0:	df000104 	addi	fp,sp,4
	// Front buffer is read-only, but writing any value
	// to the front buffer register triggers a swap
	// after the current frame finishes
	LT24 -> fBuffer = 1;
     2f4:	d0a76717 	ldw	r2,-25188(gp)
     2f8:	00c00044 	movi	r3,1
     2fc:	10c00015 	stw	r3,0(r2)

	// Wait until a frame is done drawing for timing reasons
	uint8_t framePending = (LT24 -> status)&(1);
     300:	d0a76717 	ldw	r2,-25188(gp)
     304:	10800317 	ldw	r2,12(r2)
     308:	1080004c 	andi	r2,r2,1
     30c:	e0bfff05 	stb	r2,-4(fp)
	while(framePending) {
     310:	00000406 	br	324 <LCD_swapFrames+0x3c>
		framePending = (LT24 -> status)&(1);
     314:	d0a76717 	ldw	r2,-25188(gp)
     318:	10800317 	ldw	r2,12(r2)
     31c:	1080004c 	andi	r2,r2,1
     320:	e0bfff05 	stb	r2,-4(fp)
	// after the current frame finishes
	LT24 -> fBuffer = 1;

	// Wait until a frame is done drawing for timing reasons
	uint8_t framePending = (LT24 -> status)&(1);
	while(framePending) {
     324:	e0bfff03 	ldbu	r2,-4(fp)
     328:	103ffa1e 	bne	r2,zero,314 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e314>
		framePending = (LT24 -> status)&(1);
	}
}
     32c:	0001883a 	nop
     330:	e037883a 	mov	sp,fp
     334:	df000017 	ldw	fp,0(sp)
     338:	dec00104 	addi	sp,sp,4
     33c:	f800283a 	ret

00000340 <LCD_Init>:
 * Initializes the display by
 * creating a structure and assigning
 * memory locations where the
 * framebuffer will live
 */
void LCD_Init() {
     340:	defffb04 	addi	sp,sp,-20
     344:	dfc00415 	stw	ra,16(sp)
     348:	df000315 	stw	fp,12(sp)
     34c:	df000304 	addi	fp,sp,12
	// Initialize an LCD struct
	LT24 = (LCD*)VIDEO_PIXEL_BUFFER_DMA_0_BASE;
     350:	00afbbf4 	movhi	r2,48879
     354:	10850004 	addi	r2,r2,5120
     358:	d0a76715 	stw	r2,-25188(gp)

	// Get the resolution and pixel count from struct
	hRes = (LT24->resolution)&(0xFFFF);
     35c:	d0a76717 	ldw	r2,-25188(gp)
     360:	10800217 	ldw	r2,8(r2)
     364:	10bfffcc 	andi	r2,r2,65535
     368:	d0a76815 	stw	r2,-25184(gp)
	vRes = ((LT24->resolution)&(0xFFFF0000))>>16;
     36c:	d0a76717 	ldw	r2,-25188(gp)
     370:	10800217 	ldw	r2,8(r2)
     374:	1004d43a 	srli	r2,r2,16
     378:	d0a76915 	stw	r2,-25180(gp)
	numPixels = hRes*vRes;
     37c:	d0a76817 	ldw	r2,-25184(gp)
     380:	d0e76917 	ldw	r3,-25180(gp)
     384:	180b883a 	mov	r5,r3
     388:	1009883a 	mov	r4,r2
     38c:	00020100 	call	2010 <__mulsi3>
     390:	d0a76a15 	stw	r2,-25176(gp)

	// Allocate front and back buffers
	uint16_t* front = malloc(numPixels*sizeof(uint16_t));
     394:	d0a76a17 	ldw	r2,-25176(gp)
     398:	1085883a 	add	r2,r2,r2
     39c:	1009883a 	mov	r4,r2
     3a0:	00028c00 	call	28c0 <malloc>
     3a4:	e0bffe15 	stw	r2,-8(fp)
	uint16_t* back = malloc(numPixels*sizeof(uint16_t));
     3a8:	d0a76a17 	ldw	r2,-25176(gp)
     3ac:	1085883a 	add	r2,r2,r2
     3b0:	1009883a 	mov	r4,r2
     3b4:	00028c00 	call	28c0 <malloc>
     3b8:	e0bfff15 	stw	r2,-4(fp)

	// Update the back buffer and swap it into the front
	LT24->bBuffer = (uint32_t)front;
     3bc:	d0a76717 	ldw	r2,-25188(gp)
     3c0:	e0fffe17 	ldw	r3,-8(fp)
     3c4:	10c00115 	stw	r3,4(r2)
	LCD_swapFrames();
     3c8:	00002e80 	call	2e8 <LCD_swapFrames>

	// Wait until a frame is done drawing for timing reasons
	uint8_t framePending = (LT24 -> status)&(1);
     3cc:	d0a76717 	ldw	r2,-25188(gp)
     3d0:	10800317 	ldw	r2,12(r2)
     3d4:	1080004c 	andi	r2,r2,1
     3d8:	e0bffd05 	stb	r2,-12(fp)
	while(framePending) {
     3dc:	00000406 	br	3f0 <LCD_Init+0xb0>
		framePending = (LT24 -> status)&(1);
     3e0:	d0a76717 	ldw	r2,-25188(gp)
     3e4:	10800317 	ldw	r2,12(r2)
     3e8:	1080004c 	andi	r2,r2,1
     3ec:	e0bffd05 	stb	r2,-12(fp)
	LT24->bBuffer = (uint32_t)front;
	LCD_swapFrames();

	// Wait until a frame is done drawing for timing reasons
	uint8_t framePending = (LT24 -> status)&(1);
	while(framePending) {
     3f0:	e0bffd03 	ldbu	r2,-12(fp)
     3f4:	103ffa1e 	bne	r2,zero,3e0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e3e0>
		framePending = (LT24 -> status)&(1);
	}

	// Update the new back buffer
	LT24->bBuffer = (uint32_t)back;
     3f8:	d0a76717 	ldw	r2,-25188(gp)
     3fc:	e0ffff17 	ldw	r3,-4(fp)
     400:	10c00115 	stw	r3,4(r2)
}
     404:	0001883a 	nop
     408:	e037883a 	mov	sp,fp
     40c:	dfc00117 	ldw	ra,4(sp)
     410:	df000017 	ldw	fp,0(sp)
     414:	dec00204 	addi	sp,sp,8
     418:	f800283a 	ret

0000041c <LCD_Fill>:
 * Fills the back buffer with a user specified
 * color. The input color is in RGB888 or ARGB888
 * format, but gets converted to RGB565.
 * Alpha is ignored.
 */
void LCD_Fill(uint32_t color) {
     41c:	defff904 	addi	sp,sp,-28
     420:	dfc00615 	stw	ra,24(sp)
     424:	df000515 	stw	fp,20(sp)
     428:	df000504 	addi	fp,sp,20
     42c:	e13fff15 	stw	r4,-4(fp)
	// Convert the RGB888 color to RGB565
	uint16_t newColor = to565(color);
     430:	e13fff17 	ldw	r4,-4(fp)
     434:	000026c0 	call	26c <to565>
     438:	e0bffd0d 	sth	r2,-12(fp)

	// Get access to the back buffer
	uint16_t* frameBuffer = (uint16_t*)LT24->bBuffer;
     43c:	d0a76717 	ldw	r2,-25188(gp)
     440:	10800117 	ldw	r2,4(r2)
     444:	e0bffe15 	stw	r2,-8(fp)

	// Y-loop
	for(int y = 0; y < vRes; y++) {
     448:	e03ffb15 	stw	zero,-20(fp)
     44c:	00001706 	br	4ac <LCD_Fill+0x90>
		// X-loop
		for(int x = 0; x < hRes; x++) {
     450:	e03ffc15 	stw	zero,-16(fp)
     454:	00000f06 	br	494 <LCD_Fill+0x78>
			// Set the current pixel to the new color
			frameBuffer[((320*y)+x)] = newColor;
     458:	01405004 	movi	r5,320
     45c:	e13ffb17 	ldw	r4,-20(fp)
     460:	00020100 	call	2010 <__mulsi3>
     464:	1007883a 	mov	r3,r2
     468:	e0bffc17 	ldw	r2,-16(fp)
     46c:	1885883a 	add	r2,r3,r2
     470:	1085883a 	add	r2,r2,r2
     474:	1007883a 	mov	r3,r2
     478:	e0bffe17 	ldw	r2,-8(fp)
     47c:	10c5883a 	add	r2,r2,r3
     480:	e0fffd0b 	ldhu	r3,-12(fp)
     484:	10c0000d 	sth	r3,0(r2)
	uint16_t* frameBuffer = (uint16_t*)LT24->bBuffer;

	// Y-loop
	for(int y = 0; y < vRes; y++) {
		// X-loop
		for(int x = 0; x < hRes; x++) {
     488:	e0bffc17 	ldw	r2,-16(fp)
     48c:	10800044 	addi	r2,r2,1
     490:	e0bffc15 	stw	r2,-16(fp)
     494:	e0fffc17 	ldw	r3,-16(fp)
     498:	d0a76817 	ldw	r2,-25184(gp)
     49c:	18bfee36 	bltu	r3,r2,458 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e458>

	// Get access to the back buffer
	uint16_t* frameBuffer = (uint16_t*)LT24->bBuffer;

	// Y-loop
	for(int y = 0; y < vRes; y++) {
     4a0:	e0bffb17 	ldw	r2,-20(fp)
     4a4:	10800044 	addi	r2,r2,1
     4a8:	e0bffb15 	stw	r2,-20(fp)
     4ac:	e0fffb17 	ldw	r3,-20(fp)
     4b0:	d0a76917 	ldw	r2,-25180(gp)
     4b4:	18bfe636 	bltu	r3,r2,450 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e450>
			frameBuffer[((320*y)+x)] = newColor;
		}

	}

	LCD_swapFrames();
     4b8:	00002e80 	call	2e8 <LCD_swapFrames>
}
     4bc:	0001883a 	nop
     4c0:	e037883a 	mov	sp,fp
     4c4:	dfc00117 	ldw	ra,4(sp)
     4c8:	df000017 	ldw	fp,0(sp)
     4cc:	dec00204 	addi	sp,sp,8
     4d0:	f800283a 	ret

000004d4 <LCD_drawPixel>:
 * Sets an individual pixel to the specified color.
 * Input color can be in ARGB8888, RGB888, or RGB565.
 * Alpha is ignored if input is ARGB8888
 * DOES NOT SWITCH BUFFERS AUTOMATICALLY!
 */
void LCD_drawPixel(uint32_t x, uint32_t y, uint32_t color) {
     4d4:	defff904 	addi	sp,sp,-28
     4d8:	dfc00615 	stw	ra,24(sp)
     4dc:	df000515 	stw	fp,20(sp)
     4e0:	df000504 	addi	fp,sp,20
     4e4:	e13ffd15 	stw	r4,-12(fp)
     4e8:	e17ffe15 	stw	r5,-8(fp)
     4ec:	e1bfff15 	stw	r6,-4(fp)
	// Dimension Check
	if(x < hRes && y < vRes) {
     4f0:	d0a76817 	ldw	r2,-25184(gp)
     4f4:	e0fffd17 	ldw	r3,-12(fp)
     4f8:	1880152e 	bgeu	r3,r2,550 <LCD_drawPixel+0x7c>
     4fc:	d0a76917 	ldw	r2,-25180(gp)
     500:	e0fffe17 	ldw	r3,-8(fp)
     504:	1880122e 	bgeu	r3,r2,550 <LCD_drawPixel+0x7c>
		uint16_t newColor = to565(color);
     508:	e13fff17 	ldw	r4,-4(fp)
     50c:	000026c0 	call	26c <to565>
     510:	e0bffb0d 	sth	r2,-20(fp)
		uint16_t* frameBuffer = (uint16_t*)LT24->bBuffer;
     514:	d0a76717 	ldw	r2,-25188(gp)
     518:	10800117 	ldw	r2,4(r2)
     51c:	e0bffc15 	stw	r2,-16(fp)
		frameBuffer[((320*y)+x)] = newColor;
     520:	01405004 	movi	r5,320
     524:	e13ffe17 	ldw	r4,-8(fp)
     528:	00020100 	call	2010 <__mulsi3>
     52c:	1007883a 	mov	r3,r2
     530:	e0bffd17 	ldw	r2,-12(fp)
     534:	1885883a 	add	r2,r3,r2
     538:	1085883a 	add	r2,r2,r2
     53c:	1007883a 	mov	r3,r2
     540:	e0bffc17 	ldw	r2,-16(fp)
     544:	10c5883a 	add	r2,r2,r3
     548:	e0fffb0b 	ldhu	r3,-20(fp)
     54c:	10c0000d 	sth	r3,0(r2)
	}
}
     550:	0001883a 	nop
     554:	e037883a 	mov	sp,fp
     558:	dfc00117 	ldw	ra,4(sp)
     55c:	df000017 	ldw	fp,0(sp)
     560:	dec00204 	addi	sp,sp,8
     564:	f800283a 	ret

00000568 <LCD_drawRect>:
 * This draws a filled rectangle with no special border.
 * Input color can be in ARGB8888, RGB888, or RGB565.
 * Alpha is ignored if input is ARGB8888
 * DOES NOT SWITCH BUFFERS AUTOMATICALLY!
 */
void LCD_drawRect(uint32_t anchorX, uint32_t anchorY, uint32_t xLen, uint32_t yLen, uint32_t Color) {
     568:	defff604 	addi	sp,sp,-40
     56c:	dfc00915 	stw	ra,36(sp)
     570:	df000815 	stw	fp,32(sp)
     574:	df000804 	addi	fp,sp,32
     578:	e13ffc15 	stw	r4,-16(fp)
     57c:	e17ffd15 	stw	r5,-12(fp)
     580:	e1bffe15 	stw	r6,-8(fp)
     584:	e1ffff15 	stw	r7,-4(fp)

	// Dimension Check
	if(((anchorX+xLen) < hRes) && ((anchorY+yLen) < vRes)) {
     588:	e0fffc17 	ldw	r3,-16(fp)
     58c:	e0bffe17 	ldw	r2,-8(fp)
     590:	1887883a 	add	r3,r3,r2
     594:	d0a76817 	ldw	r2,-25184(gp)
     598:	18802d2e 	bgeu	r3,r2,650 <LCD_drawRect+0xe8>
     59c:	e0fffd17 	ldw	r3,-12(fp)
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	1887883a 	add	r3,r3,r2
     5a8:	d0a76917 	ldw	r2,-25180(gp)
     5ac:	1880282e 	bgeu	r3,r2,650 <LCD_drawRect+0xe8>

		for(int y = anchorY; y < (anchorY+yLen); y++) {
     5b0:	e0bffd17 	ldw	r2,-12(fp)
     5b4:	e0bff815 	stw	r2,-32(fp)
     5b8:	00002006 	br	63c <LCD_drawRect+0xd4>
			for(int x = anchorX; x < (anchorX+xLen); x++) {
     5bc:	e0bffc17 	ldw	r2,-16(fp)
     5c0:	e0bff915 	stw	r2,-28(fp)
     5c4:	00001506 	br	61c <LCD_drawRect+0xb4>

				uint16_t newColor = to565(Color);
     5c8:	e1000217 	ldw	r4,8(fp)
     5cc:	000026c0 	call	26c <to565>
     5d0:	e0bffa0d 	sth	r2,-24(fp)
				uint16_t* frameBuffer = (uint16_t*)LT24->bBuffer;
     5d4:	d0a76717 	ldw	r2,-25188(gp)
     5d8:	10800117 	ldw	r2,4(r2)
     5dc:	e0bffb15 	stw	r2,-20(fp)
				frameBuffer[((320*y)+x)] = newColor;
     5e0:	01405004 	movi	r5,320
     5e4:	e13ff817 	ldw	r4,-32(fp)
     5e8:	00020100 	call	2010 <__mulsi3>
     5ec:	1007883a 	mov	r3,r2
     5f0:	e0bff917 	ldw	r2,-28(fp)
     5f4:	1885883a 	add	r2,r3,r2
     5f8:	1085883a 	add	r2,r2,r2
     5fc:	1007883a 	mov	r3,r2
     600:	e0bffb17 	ldw	r2,-20(fp)
     604:	10c5883a 	add	r2,r2,r3
     608:	e0fffa0b 	ldhu	r3,-24(fp)
     60c:	10c0000d 	sth	r3,0(r2)

	// Dimension Check
	if(((anchorX+xLen) < hRes) && ((anchorY+yLen) < vRes)) {

		for(int y = anchorY; y < (anchorY+yLen); y++) {
			for(int x = anchorX; x < (anchorX+xLen); x++) {
     610:	e0bff917 	ldw	r2,-28(fp)
     614:	10800044 	addi	r2,r2,1
     618:	e0bff915 	stw	r2,-28(fp)
     61c:	e0fffc17 	ldw	r3,-16(fp)
     620:	e0bffe17 	ldw	r2,-8(fp)
     624:	1885883a 	add	r2,r3,r2
     628:	e0fff917 	ldw	r3,-28(fp)
     62c:	18bfe636 	bltu	r3,r2,5c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e5c8>
void LCD_drawRect(uint32_t anchorX, uint32_t anchorY, uint32_t xLen, uint32_t yLen, uint32_t Color) {

	// Dimension Check
	if(((anchorX+xLen) < hRes) && ((anchorY+yLen) < vRes)) {

		for(int y = anchorY; y < (anchorY+yLen); y++) {
     630:	e0bff817 	ldw	r2,-32(fp)
     634:	10800044 	addi	r2,r2,1
     638:	e0bff815 	stw	r2,-32(fp)
     63c:	e0fffd17 	ldw	r3,-12(fp)
     640:	e0bfff17 	ldw	r2,-4(fp)
     644:	1885883a 	add	r2,r3,r2
     648:	e0fff817 	ldw	r3,-32(fp)
     64c:	18bfdb36 	bltu	r3,r2,5bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152e5bc>

			}
		}
	}

}
     650:	0001883a 	nop
     654:	e037883a 	mov	sp,fp
     658:	dfc00117 	ldw	ra,4(sp)
     65c:	df000017 	ldw	fp,0(sp)
     660:	dec00204 	addi	sp,sp,8
     664:	f800283a 	ret

00000668 <getTouchX>:

uint16_t getTouchX() {
     668:	defffb04 	addi	sp,sp,-20
     66c:	dfc00415 	stw	ra,16(sp)
     670:	df000315 	stw	fp,12(sp)
     674:	df000304 	addi	fp,sp,12
	// Get X
	alt_avalon_spi_command(TOUCH_SPI_BASE,0,
     678:	d8000215 	stw	zero,8(sp)
     67c:	d0a76b04 	addi	r2,gp,-25172
     680:	d8800115 	stw	r2,4(sp)
     684:	00800084 	movi	r2,2
     688:	d8800015 	stw	r2,0(sp)
     68c:	d1e00004 	addi	r7,gp,-32768
     690:	01800044 	movi	r6,1
     694:	000b883a 	mov	r5,zero
     698:	012fbbf4 	movhi	r4,48879
     69c:	21058004 	addi	r4,r4,5632
     6a0:	0012cbc0 	call	12cbc <alt_avalon_spi_command>
								1, &cmdX,
								2, touch_rx,
								0);
	return (touch_rx[0]<<5) | (touch_rx[1]>>3);
     6a4:	d0a76b03 	ldbu	r2,-25172(gp)
     6a8:	10803fcc 	andi	r2,r2,255
     6ac:	1004917a 	slli	r2,r2,5
     6b0:	1007883a 	mov	r3,r2
     6b4:	d0a76b43 	ldbu	r2,-25171(gp)
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	1004d0fa 	srli	r2,r2,3
     6c0:	10803fcc 	andi	r2,r2,255
     6c4:	1884b03a 	or	r2,r3,r2
}
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <getTouchY>:

uint16_t getTouchY() {
     6dc:	defffb04 	addi	sp,sp,-20
     6e0:	dfc00415 	stw	ra,16(sp)
     6e4:	df000315 	stw	fp,12(sp)
     6e8:	df000304 	addi	fp,sp,12
	// Get Y
	alt_avalon_spi_command(TOUCH_SPI_BASE,0,
     6ec:	d8000215 	stw	zero,8(sp)
     6f0:	d0a76b04 	addi	r2,gp,-25172
     6f4:	d8800115 	stw	r2,4(sp)
     6f8:	00800084 	movi	r2,2
     6fc:	d8800015 	stw	r2,0(sp)
     700:	d1e00044 	addi	r7,gp,-32767
     704:	01800044 	movi	r6,1
     708:	000b883a 	mov	r5,zero
     70c:	012fbbf4 	movhi	r4,48879
     710:	21058004 	addi	r4,r4,5632
     714:	0012cbc0 	call	12cbc <alt_avalon_spi_command>
									1, &cmdY,
									2, touch_rx,
									0);
	return (touch_rx[0]<<5) | (touch_rx[1]>>3);
     718:	d0a76b03 	ldbu	r2,-25172(gp)
     71c:	10803fcc 	andi	r2,r2,255
     720:	1004917a 	slli	r2,r2,5
     724:	1007883a 	mov	r3,r2
     728:	d0a76b43 	ldbu	r2,-25171(gp)
     72c:	10803fcc 	andi	r2,r2,255
     730:	1004d0fa 	srli	r2,r2,3
     734:	10803fcc 	andi	r2,r2,255
     738:	1884b03a 	or	r2,r3,r2
}
     73c:	e037883a 	mov	sp,fp
     740:	dfc00117 	ldw	ra,4(sp)
     744:	df000017 	ldw	fp,0(sp)
     748:	dec00204 	addi	sp,sp,8
     74c:	f800283a 	ret

00000750 <getPixelX>:

uint32_t getPixelX() {
     750:	defffd04 	addi	sp,sp,-12
     754:	dfc00215 	stw	ra,8(sp)
     758:	df000115 	stw	fp,4(sp)
     75c:	df000104 	addi	fp,sp,4

	uint32_t location = 0xFFFFFFFF;
     760:	00bfffc4 	movi	r2,-1
     764:	e0bfff15 	stw	r2,-4(fp)

	if(getTouchY() > Y_MIN) {
     768:	00006dc0 	call	6dc <getTouchY>
     76c:	10bfffcc 	andi	r2,r2,65535
     770:	108034f0 	cmpltui	r2,r2,211
     774:	10000b1e 	bne	r2,zero,7a4 <getPixelX+0x54>
		location = getTouchX() * X_SCL;
     778:	00006680 	call	668 <getTouchX>
     77c:	10bfffcc 	andi	r2,r2,65535
     780:	1009883a 	mov	r4,r2
     784:	00026480 	call	2648 <__floatsisf>
     788:	1007883a 	mov	r3,r2
     78c:	008f76f4 	movhi	r2,15835
     790:	1088b444 	addi	r2,r2,8913
     794:	1885ff32 	custom	252,r2,r3,r2
     798:	1009883a 	mov	r4,r2
     79c:	0001fb00 	call	1fb0 <__fixunssfsi>
     7a0:	e0bfff15 	stw	r2,-4(fp)
	}

	return (hRes-location)+X_OFFSET;
     7a4:	d0e76817 	ldw	r3,-25184(gp)
     7a8:	e0bfff17 	ldw	r2,-4(fp)
     7ac:	1885c83a 	sub	r2,r3,r2
     7b0:	10800284 	addi	r2,r2,10
}
     7b4:	e037883a 	mov	sp,fp
     7b8:	dfc00117 	ldw	ra,4(sp)
     7bc:	df000017 	ldw	fp,0(sp)
     7c0:	dec00204 	addi	sp,sp,8
     7c4:	f800283a 	ret

000007c8 <getPixelY>:

uint32_t getPixelY() {
     7c8:	defffd04 	addi	sp,sp,-12
     7cc:	dfc00215 	stw	ra,8(sp)
     7d0:	df000115 	stw	fp,4(sp)
     7d4:	df000104 	addi	fp,sp,4
	uint32_t location = 0xFFFFFFFF;
     7d8:	00bfffc4 	movi	r2,-1
     7dc:	e0bfff15 	stw	r2,-4(fp)

	if(getTouchY() > Y_MIN) {
     7e0:	00006dc0 	call	6dc <getTouchY>
     7e4:	10bfffcc 	andi	r2,r2,65535
     7e8:	108034f0 	cmpltui	r2,r2,211
     7ec:	10000b1e 	bne	r2,zero,81c <getPixelY+0x54>
		location = getTouchY() * Y_SCL;
     7f0:	00006dc0 	call	6dc <getTouchY>
     7f4:	10bfffcc 	andi	r2,r2,65535
     7f8:	1009883a 	mov	r4,r2
     7fc:	00026480 	call	2648 <__floatsisf>
     800:	1007883a 	mov	r3,r2
     804:	008f68b4 	movhi	r2,15778
     808:	10b2b044 	addi	r2,r2,-13631
     80c:	1885ff32 	custom	252,r2,r3,r2
     810:	1009883a 	mov	r4,r2
     814:	0001fb00 	call	1fb0 <__fixunssfsi>
     818:	e0bfff15 	stw	r2,-4(fp)
	}

	return location-Y_OFFSET;
     81c:	e0bfff17 	ldw	r2,-4(fp)
     820:	10bffec4 	addi	r2,r2,-5
}
     824:	e037883a 	mov	sp,fp
     828:	dfc00117 	ldw	ra,4(sp)
     82c:	df000017 	ldw	fp,0(sp)
     830:	dec00204 	addi	sp,sp,8
     834:	f800283a 	ret

00000838 <Accel_Init>:

/*
 * Attempts to initialize the accelerometer
 * Returns 1 if successful, 0 otherwise
 */
uint8_t Accel_Init() {
     838:	defffd04 	addi	sp,sp,-12
     83c:	dfc00215 	stw	ra,8(sp)
     840:	df000115 	stw	fp,4(sp)
     844:	df000104 	addi	fp,sp,4
	uint8_t successful = 0;
     848:	e03fff05 	stb	zero,-4(fp)

	// Attempt to retrieve access to the I2C controller
	i2c_dev = alt_avalon_i2c_open("/dev/gyro_i2c");
     84c:	01000074 	movhi	r4,1
     850:	2112b704 	addi	r4,r4,19164
     854:	00109780 	call	10978 <alt_avalon_i2c_open>
     858:	d0a76c15 	stw	r2,-25168(gp)

	// Update success flag
	if(i2c_dev != NULL) {
     85c:	d0a76c17 	ldw	r2,-25168(gp)
     860:	10000226 	beq	r2,zero,86c <Accel_Init+0x34>
		successful = 1;
     864:	00800044 	movi	r2,1
     868:	e0bfff05 	stb	r2,-4(fp)
	}

	// Specify target address
	alt_avalon_i2c_master_target_set(i2c_dev, ACCEL_ADDR);
     86c:	d0a76c17 	ldw	r2,-25168(gp)
     870:	014014c4 	movi	r5,83
     874:	1009883a 	mov	r4,r2
     878:	00111480 	call	11148 <alt_avalon_i2c_master_target_set>

	// Load TX buffer
	accel_tx[0] = ACCEL_DFR_ADDR;
     87c:	00800c44 	movi	r2,49
     880:	d0a76e05 	stb	r2,-25160(gp)
	accel_tx[1] = DFR_DATA;
     884:	008002c4 	movi	r2,11
     888:	d0a76e45 	stb	r2,-25159(gp)

	// Transmit and update flags
	status = alt_avalon_i2c_master_tx(i2c_dev, accel_tx, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
     88c:	d0a76c17 	ldw	r2,-25168(gp)
     890:	000f883a 	mov	r7,zero
     894:	01800084 	movi	r6,2
     898:	d1676e04 	addi	r5,gp,-25160
     89c:	1009883a 	mov	r4,r2
     8a0:	00113500 	call	11350 <alt_avalon_i2c_master_tx>
     8a4:	d0a76d15 	stw	r2,-25164(gp)
	if(status != ALT_AVALON_I2C_SUCCESS) {
     8a8:	d0a76d17 	ldw	r2,-25164(gp)
     8ac:	10000126 	beq	r2,zero,8b4 <Accel_Init+0x7c>
		successful = 0;
     8b0:	e03fff05 	stb	zero,-4(fp)
	}

	// Reload TX buffer
	accel_tx[0] = ACCEL_PWR_ADDR;
     8b4:	00800b44 	movi	r2,45
     8b8:	d0a76e05 	stb	r2,-25160(gp)
	accel_tx[1] = PWR_DATA;
     8bc:	00800204 	movi	r2,8
     8c0:	d0a76e45 	stb	r2,-25159(gp)

	// Transmit and update flags
	status = alt_avalon_i2c_master_tx(i2c_dev, accel_tx, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
     8c4:	d0a76c17 	ldw	r2,-25168(gp)
     8c8:	000f883a 	mov	r7,zero
     8cc:	01800084 	movi	r6,2
     8d0:	d1676e04 	addi	r5,gp,-25160
     8d4:	1009883a 	mov	r4,r2
     8d8:	00113500 	call	11350 <alt_avalon_i2c_master_tx>
     8dc:	d0a76d15 	stw	r2,-25164(gp)
	if(status != ALT_AVALON_I2C_SUCCESS) {
     8e0:	d0a76d17 	ldw	r2,-25164(gp)
     8e4:	10000126 	beq	r2,zero,8ec <Accel_Init+0xb4>
		successful = 0;
     8e8:	e03fff05 	stb	zero,-4(fp)
	}

	return successful;
     8ec:	e0bfff03 	ldbu	r2,-4(fp)
}
     8f0:	e037883a 	mov	sp,fp
     8f4:	dfc00117 	ldw	ra,4(sp)
     8f8:	df000017 	ldw	fp,0(sp)
     8fc:	dec00204 	addi	sp,sp,8
     900:	f800283a 	ret

00000904 <Accel_getVals>:

/*
 * Returns a struct with the measurements from the accelerometer
 */
accel_reading Accel_getVals() {
     904:	defff504 	addi	sp,sp,-44
     908:	dfc00a15 	stw	ra,40(sp)
     90c:	df000915 	stw	fp,36(sp)
     910:	dc400815 	stw	r17,32(sp)
     914:	dc000715 	stw	r16,28(sp)
     918:	df000904 	addi	fp,sp,36
	uint8_t valid = 1;
     91c:	00800044 	movi	r2,1
     920:	e0bff905 	stb	r2,-28(fp)

	// Load the read command into the transmit buffer
	accel_tx[0] = ACCEL_READ;
     924:	00800c84 	movi	r2,50
     928:	d0a76e05 	stb	r2,-25160(gp)

	// Transmit and receive
	status = alt_avalon_i2c_master_tx_rx(i2c_dev, accel_tx, 1, (uint8_t*)accel_rx, 6, ALT_AVALON_I2C_NO_INTERRUPTS);
     92c:	d0e76c17 	ldw	r3,-25168(gp)
     930:	d8000115 	stw	zero,4(sp)
     934:	00800184 	movi	r2,6
     938:	d8800015 	stw	r2,0(sp)
     93c:	d1e76e84 	addi	r7,gp,-25158
     940:	01800044 	movi	r6,1
     944:	d1676e04 	addi	r5,gp,-25160
     948:	1809883a 	mov	r4,r3
     94c:	00115740 	call	11574 <alt_avalon_i2c_master_tx_rx>
     950:	d0a76d15 	stw	r2,-25164(gp)

	// If not successful, fill the values with an invalid flag
	if(status != ALT_AVALON_I2C_SUCCESS) {
     954:	d0a76d17 	ldw	r2,-25164(gp)
     958:	10000726 	beq	r2,zero,978 <Accel_getVals+0x74>
		accel_rx[0] = ACCEL_INVALID;
     95c:	00a00004 	movi	r2,-32768
     960:	d0a76e8d 	sth	r2,-25158(gp)
		accel_rx[1] = ACCEL_INVALID;
     964:	00a00004 	movi	r2,-32768
     968:	d0a76f0d 	sth	r2,-25156(gp)
		accel_rx[2] = ACCEL_INVALID;
     96c:	00a00004 	movi	r2,-32768
     970:	d0a76f8d 	sth	r2,-25154(gp)

		valid = 0;
     974:	e03ff905 	stb	zero,-28(fp)
	}

	accel_reading result = {valid, accel_rx[0], accel_rx[1], accel_rx[2]};
     978:	e0bff903 	ldbu	r2,-28(fp)
     97c:	e0bffb85 	stb	r2,-18(fp)
     980:	d0a76e8b 	ldhu	r2,-25158(gp)
     984:	e0bffc0d 	sth	r2,-16(fp)
     988:	d0a76f0b 	ldhu	r2,-25156(gp)
     98c:	e0bffc8d 	sth	r2,-14(fp)
     990:	d0a76f8b 	ldhu	r2,-25154(gp)
     994:	e0bffd0d 	sth	r2,-12(fp)

	return result;
     998:	e0bffb8b 	ldhu	r2,-18(fp)
     99c:	e0bff98d 	sth	r2,-26(fp)
     9a0:	e0bffc0b 	ldhu	r2,-16(fp)
     9a4:	e0bffa0d 	sth	r2,-24(fp)
     9a8:	e0bffc8b 	ldhu	r2,-14(fp)
     9ac:	e0bffa8d 	sth	r2,-22(fp)
     9b0:	e0bffd0b 	ldhu	r2,-12(fp)
     9b4:	e0bffb0d 	sth	r2,-20(fp)
     9b8:	0007883a 	mov	r3,zero
     9bc:	e0bff98b 	ldhu	r2,-26(fp)
     9c0:	10bfffcc 	andi	r2,r2,65535
     9c4:	18ffffec 	andhi	r3,r3,65535
     9c8:	1884b03a 	or	r2,r3,r2
     9cc:	1007883a 	mov	r3,r2
     9d0:	e0bffa0b 	ldhu	r2,-24(fp)
     9d4:	1004943a 	slli	r2,r2,16
     9d8:	18ffffcc 	andi	r3,r3,65535
     9dc:	1884b03a 	or	r2,r3,r2
     9e0:	1007883a 	mov	r3,r2
     9e4:	0005883a 	mov	r2,zero
     9e8:	e13ffa8b 	ldhu	r4,-22(fp)
     9ec:	213fffcc 	andi	r4,r4,65535
     9f0:	10bfffec 	andhi	r2,r2,65535
     9f4:	1104b03a 	or	r2,r2,r4
     9f8:	e13ffb0b 	ldhu	r4,-20(fp)
     9fc:	2008943a 	slli	r4,r4,16
     a00:	10bfffcc 	andi	r2,r2,65535
     a04:	1104b03a 	or	r2,r2,r4
     a08:	1821883a 	mov	r16,r3
     a0c:	1023883a 	mov	r17,r2
     a10:	8007883a 	mov	r3,r16
     a14:	8809883a 	mov	r4,r17
}
     a18:	1805883a 	mov	r2,r3
     a1c:	2007883a 	mov	r3,r4
     a20:	e6fffe04 	addi	sp,fp,-8
     a24:	dfc00317 	ldw	ra,12(sp)
     a28:	df000217 	ldw	fp,8(sp)
     a2c:	dc400117 	ldw	r17,4(sp)
     a30:	dc000017 	ldw	r16,0(sp)
     a34:	dec00404 	addi	sp,sp,16
     a38:	f800283a 	ret

00000a3c <cstick_Init>:

/*
 * Initializes the required values for our ADC
 * to operate appropriately.
 */
void cstick_Init() {
     a3c:	deffff04 	addi	sp,sp,-4
     a40:	df000015 	stw	fp,0(sp)
     a44:	d839883a 	mov	fp,sp
	*ADC_IER &= ~(IER_OFF);
     a48:	d0a00317 	ldw	r2,-32756(gp)
     a4c:	d0e00317 	ldw	r3,-32756(gp)
     a50:	19000017 	ldw	r4,0(r3)
     a54:	00ffff84 	movi	r3,-2
     a58:	20c6703a 	and	r3,r4,r3
     a5c:	10c00015 	stw	r3,0(r2)
}
     a60:	0001883a 	nop
     a64:	e037883a 	mov	sp,fp
     a68:	df000017 	ldw	fp,0(sp)
     a6c:	dec00104 	addi	sp,sp,4
     a70:	f800283a 	ret

00000a74 <cstick_Start>:

/*
 * Sets the Run bit in the ADC control register, which
 * starts the ADC sampling
 */
void cstick_Start() {
     a74:	deffff04 	addi	sp,sp,-4
     a78:	df000015 	stw	fp,0(sp)
     a7c:	d839883a 	mov	fp,sp
	*ADC_CMD |= CMD_RUN;
     a80:	d0a00417 	ldw	r2,-32752(gp)
     a84:	d0e00417 	ldw	r3,-32752(gp)
     a88:	18c00017 	ldw	r3,0(r3)
     a8c:	18c00054 	ori	r3,r3,1
     a90:	10c00015 	stw	r3,0(r2)
}
     a94:	0001883a 	nop
     a98:	e037883a 	mov	sp,fp
     a9c:	df000017 	ldw	fp,0(sp)
     aa0:	dec00104 	addi	sp,sp,4
     aa4:	f800283a 	ret

00000aa8 <cstick_Stop>:

/*
 * Clears the Run bit in the ADC control register, which
 * stops the ADC from sampling
 */
void cstick_Stop() {
     aa8:	deffff04 	addi	sp,sp,-4
     aac:	df000015 	stw	fp,0(sp)
     ab0:	d839883a 	mov	fp,sp
	*ADC_CMD &= ~(CMD_RUN);
     ab4:	d0a00417 	ldw	r2,-32752(gp)
     ab8:	d0e00417 	ldw	r3,-32752(gp)
     abc:	19000017 	ldw	r4,0(r3)
     ac0:	00ffff84 	movi	r3,-2
     ac4:	20c6703a 	and	r3,r4,r3
     ac8:	10c00015 	stw	r3,0(r2)
}
     acc:	0001883a 	nop
     ad0:	e037883a 	mov	sp,fp
     ad4:	df000017 	ldw	fp,0(sp)
     ad8:	dec00104 	addi	sp,sp,4
     adc:	f800283a 	ret

00000ae0 <cstick_getx>:

/*
 * Returns the value stored in the X-value register
 */
uint32_t cstick_getx() {
     ae0:	deffff04 	addi	sp,sp,-4
     ae4:	df000015 	stw	fp,0(sp)
     ae8:	d839883a 	mov	fp,sp
	return *ADC_SAMPLE0;
     aec:	d0a00117 	ldw	r2,-32764(gp)
     af0:	10800017 	ldw	r2,0(r2)
}
     af4:	e037883a 	mov	sp,fp
     af8:	df000017 	ldw	fp,0(sp)
     afc:	dec00104 	addi	sp,sp,4
     b00:	f800283a 	ret

00000b04 <cstick_gety>:

/*
 * Returns the value stored in the Y-value register
 */
uint32_t cstick_gety() {
     b04:	deffff04 	addi	sp,sp,-4
     b08:	df000015 	stw	fp,0(sp)
     b0c:	d839883a 	mov	fp,sp
	return *ADC_SAMPLE1;
     b10:	d0a00217 	ldw	r2,-32760(gp)
     b14:	10800017 	ldw	r2,0(r2)
}
     b18:	e037883a 	mov	sp,fp
     b1c:	df000017 	ldw	fp,0(sp)
     b20:	dec00104 	addi	sp,sp,4
     b24:	f800283a 	ret

00000b28 <click_init>:
/*
 * Enables and initializes the interrupt associated with
 * the joystick clicker
 * Params: ISR is a function pointer to be executed when an IRQ occurs
 */
void click_init(void* ISR) {
     b28:	defffc04 	addi	sp,sp,-16
     b2c:	dfc00315 	stw	ra,12(sp)
     b30:	df000215 	stw	fp,8(sp)
     b34:	df000204 	addi	fp,sp,8
     b38:	e13fff15 	stw	r4,-4(fp)

	// Unmask Interrupt
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(JOYIRQ_BASE, 1);
     b3c:	00c00044 	movi	r3,1
     b40:	00afbbf4 	movhi	r2,48879
     b44:	10854204 	addi	r2,r2,5384
     b48:	10c00035 	stwio	r3,0(r2)

	// Set edge capture
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(JOYIRQ_BASE, 1);
     b4c:	00c00044 	movi	r3,1
     b50:	00afbbf4 	movhi	r2,48879
     b54:	10854304 	addi	r2,r2,5388
     b58:	10c00035 	stwio	r3,0(r2)
	 * Arg1: IRQ controller ID that the target IRQ is connected to
	 * Arg2: IRQ ID for the target IRQ
	 * Arg3: ISR function pointer to be executed when an IRQ is processed
	 * Arg4/5: Unused for this implementation
	 */
	alt_ic_isr_register(JOYIRQ_IRQ_INTERRUPT_CONTROLLER_ID, JOYIRQ_IRQ, ISR, NULL, NULL);
     b5c:	e0bfff17 	ldw	r2,-4(fp)
     b60:	d8000015 	stw	zero,0(sp)
     b64:	000f883a 	mov	r7,zero
     b68:	100d883a 	mov	r6,r2
     b6c:	014000c4 	movi	r5,3
     b70:	0009883a 	mov	r4,zero
     b74:	000f2600 	call	f260 <alt_ic_isr_register>
}
     b78:	0001883a 	nop
     b7c:	e037883a 	mov	sp,fp
     b80:	dfc00117 	ldw	ra,4(sp)
     b84:	df000017 	ldw	fp,0(sp)
     b88:	dec00204 	addi	sp,sp,8
     b8c:	f800283a 	ret

00000b90 <main>:
void rainbow_Init();
void Demo_VGA_Init();
void Demo_LCD_Init();
void Demo_Cstick_Init();

int main() {
     b90:	deffe904 	addi	sp,sp,-92
     b94:	dfc01615 	stw	ra,88(sp)
     b98:	df001515 	stw	fp,84(sp)
     b9c:	df001504 	addi	fp,sp,84
	printf("Lots of initialization that needs to happen, please wait...\n");
     ba0:	01000074 	movhi	r4,1
     ba4:	2112bb04 	addi	r4,r4,19180
     ba8:	00032dc0 	call	32dc <puts>

	volatile uint16_t switches;
	volatile uint32_t cstick_X, cstick_Y;

	char pos[7] = "";
     bac:	e03ff415 	stw	zero,-48(fp)
     bb0:	e03ff50d 	sth	zero,-44(fp)
     bb4:	e03ff585 	stb	zero,-42(fp)
	char accelerometer[31] = "";
     bb8:	e03ff5c5 	stb	zero,-41(fp)
     bbc:	e03ff605 	stb	zero,-40(fp)
     bc0:	e03ff645 	stb	zero,-39(fp)
     bc4:	e03ff685 	stb	zero,-38(fp)
     bc8:	e0bff6c4 	addi	r2,fp,-37
     bcc:	00c006c4 	movi	r3,27
     bd0:	180d883a 	mov	r6,r3
     bd4:	000b883a 	mov	r5,zero
     bd8:	1009883a 	mov	r4,r2
     bdc:	00030f40 	call	30f4 <memset>
	const char* done_init = "Initialization is done! Enjoy!";
     be0:	00800074 	movhi	r2,1
     be4:	1092ca04 	addi	r2,r2,19240
     be8:	e0bfec15 	stw	r2,-80(fp)
	const char* accel_msg = "Accelerometer Readings:";
     bec:	00800074 	movhi	r2,1
     bf0:	1092d204 	addi	r2,r2,19272
     bf4:	e0bfed15 	stw	r2,-76(fp)
	const char* notYet = "(No readings yet)";
     bf8:	00800074 	movhi	r2,1
     bfc:	1092d804 	addi	r2,r2,19296
     c00:	e0bfee15 	stw	r2,-72(fp)
	const char* paused = "(Accelerometer Paused)";
     c04:	00800074 	movhi	r2,1
     c08:	1092dd04 	addi	r2,r2,19316
     c0c:	e0bfef15 	stw	r2,-68(fp)

	// Just a lot of spaces to "clear" a line
	const char* clearLine = "                                                          ";
     c10:	00800074 	movhi	r2,1
     c14:	1092e304 	addi	r2,r2,19340
     c18:	e0bff015 	stw	r2,-64(fp)


	Demo_VGA_Init();
     c1c:	00011fc0 	call	11fc <Demo_VGA_Init>
	Demo_LCD_Init();
     c20:	00012c80 	call	12c8 <Demo_LCD_Init>
	Demo_Cstick_Init();
     c24:	00012f80 	call	12f8 <Demo_Cstick_Init>
	Accel_Init();
     c28:	00008380 	call	838 <Accel_Init>

	printf("Initialization done! Enjoy!\n");
     c2c:	01000074 	movhi	r4,1
     c30:	2112f204 	addi	r4,r4,19400
     c34:	00032dc0 	call	32dc <puts>
	VGA_Charbuf_String(done_init, 2, 12);
     c38:	01800304 	movi	r6,12
     c3c:	01400084 	movi	r5,2
     c40:	e13fec17 	ldw	r4,-80(fp)
     c44:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
	VGA_Charbuf_String(accel_msg, 2, 20);
     c48:	01800504 	movi	r6,20
     c4c:	01400084 	movi	r5,2
     c50:	e13fed17 	ldw	r4,-76(fp)
     c54:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
	VGA_Charbuf_String(notYet, 2, 22);
     c58:	01800584 	movi	r6,22
     c5c:	01400084 	movi	r5,2
     c60:	e13fee17 	ldw	r4,-72(fp)
     c64:	0001bd40 	call	1bd4 <VGA_Charbuf_String>


	while(1) {
		switches = switch_Read();
     c68:	00016c00 	call	16c0 <switch_Read>
     c6c:	e0bff18d 	sth	r2,-58(fp)

		// Switches = 1 -> Joystick/Servo
		// Switches = 0 -> Accelerometer/VGA

		if(switches & 1) {
     c70:	e0bff18b 	ldhu	r2,-58(fp)
     c74:	10bfffcc 	andi	r2,r2,65535
     c78:	1080004c 	andi	r2,r2,1
     c7c:	10003126 	beq	r2,zero,d44 <main+0x1b4>

			// Joystick/Servo Program

			// Read the ADC samples for the X and Y values of the
			// joystick
			cstick_X = cstick_getx();
     c80:	0000ae00 	call	ae0 <cstick_getx>
     c84:	e0bff215 	stw	r2,-56(fp)
			cstick_Y = cstick_gety();
     c88:	0000b040 	call	b04 <cstick_gety>
     c8c:	e0bff315 	stw	r2,-52(fp)

			// Convert joystick readings to degrees, assuming
			// a range of 0-3900 for the joystick
			uint8_t servoX, servoY;
			servoX = cstick_X * JOY_TO_SERVO;
     c90:	e0bff217 	ldw	r2,-56(fp)
     c94:	1009883a 	mov	r4,r2
     c98:	000276c0 	call	276c <__floatunsisf>
     c9c:	1007883a 	mov	r3,r2
     ca0:	008f4f74 	movhi	r2,15677
     ca4:	10b4d6c4 	addi	r2,r2,-11429
     ca8:	1885ff32 	custom	252,r2,r3,r2
     cac:	1009883a 	mov	r4,r2
     cb0:	0001fb00 	call	1fb0 <__fixunssfsi>
     cb4:	e0bff105 	stb	r2,-60(fp)
			servoY = cstick_Y * JOY_TO_SERVO;
     cb8:	e0bff317 	ldw	r2,-52(fp)
     cbc:	1009883a 	mov	r4,r2
     cc0:	000276c0 	call	276c <__floatunsisf>
     cc4:	1007883a 	mov	r3,r2
     cc8:	008f4f74 	movhi	r2,15677
     ccc:	10b4d6c4 	addi	r2,r2,-11429
     cd0:	1885ff32 	custom	252,r2,r3,r2
     cd4:	1009883a 	mov	r4,r2
     cd8:	0001fb00 	call	1fb0 <__fixunssfsi>
     cdc:	e0bff145 	stb	r2,-59(fp)

			// Move the servos
			servo_deg(servoX, 0);
     ce0:	e0bff103 	ldbu	r2,-60(fp)
     ce4:	000b883a 	mov	r5,zero
     ce8:	1009883a 	mov	r4,r2
     cec:	00018a80 	call	18a8 <servo_deg>
			servo_deg(servoY, 1);
     cf0:	e0bff143 	ldbu	r2,-59(fp)
     cf4:	01400044 	movi	r5,1
     cf8:	1009883a 	mov	r4,r2
     cfc:	00018a80 	call	18a8 <servo_deg>

			// Create a string and print it to the hex displays
			sprintf(pos, "%3d%3d", servoX, servoY);
     d00:	e0fff103 	ldbu	r3,-60(fp)
     d04:	e13ff143 	ldbu	r4,-59(fp)
     d08:	e0bff404 	addi	r2,fp,-48
     d0c:	200f883a 	mov	r7,r4
     d10:	180d883a 	mov	r6,r3
     d14:	01400074 	movhi	r5,1
     d18:	2952f904 	addi	r5,r5,19428
     d1c:	1009883a 	mov	r4,r2
     d20:	000339c0 	call	339c <sprintf>
			Hex_printString(pos);
     d24:	e0bff404 	addi	r2,fp,-48
     d28:	1009883a 	mov	r4,r2
     d2c:	00013a00 	call	13a0 <Hex_printString>

			// Update the char buffer to show that the accelerometer is paused
			VGA_Charbuf_String(paused, 2, 24);
     d30:	01800604 	movi	r6,24
     d34:	01400084 	movi	r5,2
     d38:	e13fef17 	ldw	r4,-68(fp)
     d3c:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
     d40:	00002d06 	br	df8 <main+0x268>
		} else {

			// Accelerometer/VGA program

			// Clear the lines for the reading and paused message
			VGA_Charbuf_String(clearLine, 2, 24);
     d44:	01800604 	movi	r6,24
     d48:	01400084 	movi	r5,2
     d4c:	e13ff017 	ldw	r4,-64(fp)
     d50:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
			VGA_Charbuf_String(clearLine, 2, 22);
     d54:	01800584 	movi	r6,22
     d58:	01400084 	movi	r5,2
     d5c:	e13ff017 	ldw	r4,-64(fp)
     d60:	0001bd40 	call	1bd4 <VGA_Charbuf_String>

			// Get the current accelerometer readings
			accel_reading current = Accel_getVals();
     d64:	00009040 	call	904 <Accel_getVals>
     d68:	1009883a 	mov	r4,r2
     d6c:	180b883a 	mov	r5,r3
     d70:	e13ffd8d 	sth	r4,-10(fp)
     d74:	2004d43a 	srli	r2,r4,16
     d78:	e0bffe0d 	sth	r2,-8(fp)
     d7c:	e17ffe8d 	sth	r5,-6(fp)
     d80:	2804d43a 	srli	r2,r5,16
     d84:	e0bfff0d 	sth	r2,-4(fp)

			// If the accelerometer reading is valid, print it
			// to the VGA character buffer
			if(current.valid) {
     d88:	e0bffd83 	ldbu	r2,-10(fp)
     d8c:	10803fcc 	andi	r2,r2,255
     d90:	10001926 	beq	r2,zero,df8 <main+0x268>
				sprintf(accelerometer, "X:%d   Y:%d   Z:%d", current.X, current.Y, current.Z);
     d94:	e0bffe0b 	ldhu	r2,-8(fp)
     d98:	113fffcc 	andi	r4,r2,65535
     d9c:	2120001c 	xori	r4,r4,32768
     da0:	21200004 	addi	r4,r4,-32768
     da4:	e0bffe8b 	ldhu	r2,-6(fp)
     da8:	117fffcc 	andi	r5,r2,65535
     dac:	2960001c 	xori	r5,r5,32768
     db0:	29600004 	addi	r5,r5,-32768
     db4:	e0bfff0b 	ldhu	r2,-4(fp)
     db8:	10bfffcc 	andi	r2,r2,65535
     dbc:	10a0001c 	xori	r2,r2,32768
     dc0:	10a00004 	addi	r2,r2,-32768
     dc4:	e0fff5c4 	addi	r3,fp,-41
     dc8:	d8800015 	stw	r2,0(sp)
     dcc:	280f883a 	mov	r7,r5
     dd0:	200d883a 	mov	r6,r4
     dd4:	01400074 	movhi	r5,1
     dd8:	2952fb04 	addi	r5,r5,19436
     ddc:	1809883a 	mov	r4,r3
     de0:	000339c0 	call	339c <sprintf>
				VGA_Charbuf_String(accelerometer, 2, 22);
     de4:	e0bff5c4 	addi	r2,fp,-41
     de8:	01800584 	movi	r6,22
     dec:	01400084 	movi	r5,2
     df0:	1009883a 	mov	r4,r2
     df4:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
			}

		}

		// ~10ms sleep
		usleep(10000);
     df8:	0109c404 	movi	r4,10000
     dfc:	000fb240 	call	fb24 <usleep>
	}
     e00:	003f9906 	br	c68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152ec68>

00000e04 <rainbow_Init>:

	return 0;
}

void rainbow_Init() {
     e04:	defff904 	addi	sp,sp,-28
     e08:	dfc00615 	stw	ra,24(sp)
     e0c:	df000515 	stw	fp,20(sp)
     e10:	df000504 	addi	fp,sp,20
	// Initial Conditions
	uint32_t anchor = 20;
     e14:	00800504 	movi	r2,20
     e18:	e0bffc15 	stw	r2,-16(fp)
	uint32_t xLen = 320-(2*anchor);
     e1c:	e0fffc17 	ldw	r3,-16(fp)
     e20:	0005883a 	mov	r2,zero
     e24:	10c5c83a 	sub	r2,r2,r3
     e28:	1085883a 	add	r2,r2,r2
     e2c:	10805004 	addi	r2,r2,320
     e30:	e0bffd15 	stw	r2,-12(fp)
	uint32_t yLen = 240-(2*anchor);
     e34:	e0fffc17 	ldw	r3,-16(fp)
     e38:	0005883a 	mov	r2,zero
     e3c:	10c5c83a 	sub	r2,r2,r3
     e40:	1085883a 	add	r2,r2,r2
     e44:	10803c04 	addi	r2,r2,240
     e48:	e0bffe15 	stw	r2,-8(fp)
	const uint32_t offset = 3;
     e4c:	008000c4 	movi	r2,3
     e50:	e0bfff15 	stw	r2,-4(fp)

	// ROYGBV
	LCD_Fill(0);
     e54:	0009883a 	mov	r4,zero
     e58:	000041c0 	call	41c <LCD_Fill>

	// Red fill
	LCD_Fill(0xCC0000);
     e5c:	01003334 	movhi	r4,204
     e60:	000041c0 	call	41c <LCD_Fill>

	// Swap black back to foreground
	LCD_swapFrames();
     e64:	00002e80 	call	2e8 <LCD_swapFrames>

	// Orange
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0xFF8C00);
     e68:	e0fffc17 	ldw	r3,-16(fp)
     e6c:	e0bfff17 	ldw	r2,-4(fp)
     e70:	1887c83a 	sub	r3,r3,r2
     e74:	00804034 	movhi	r2,256
     e78:	10a30004 	addi	r2,r2,-29696
     e7c:	d8800015 	stw	r2,0(sp)
     e80:	e1fffe17 	ldw	r7,-8(fp)
     e84:	e1bffd17 	ldw	r6,-12(fp)
     e88:	e17ffc17 	ldw	r5,-16(fp)
     e8c:	1809883a 	mov	r4,r3
     e90:	00005680 	call	568 <LCD_drawRect>
	anchor += 20;
     e94:	e0bffc17 	ldw	r2,-16(fp)
     e98:	10800504 	addi	r2,r2,20
     e9c:	e0bffc15 	stw	r2,-16(fp)
	xLen = xLen - 40;
     ea0:	e0bffd17 	ldw	r2,-12(fp)
     ea4:	10bff604 	addi	r2,r2,-40
     ea8:	e0bffd15 	stw	r2,-12(fp)
	yLen = yLen - 40;
     eac:	e0bffe17 	ldw	r2,-8(fp)
     eb0:	10bff604 	addi	r2,r2,-40
     eb4:	e0bffe15 	stw	r2,-8(fp)

	// Yellow
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0xFFFF00);
     eb8:	e0fffc17 	ldw	r3,-16(fp)
     ebc:	e0bfff17 	ldw	r2,-4(fp)
     ec0:	1887c83a 	sub	r3,r3,r2
     ec4:	00804034 	movhi	r2,256
     ec8:	10bfc004 	addi	r2,r2,-256
     ecc:	d8800015 	stw	r2,0(sp)
     ed0:	e1fffe17 	ldw	r7,-8(fp)
     ed4:	e1bffd17 	ldw	r6,-12(fp)
     ed8:	e17ffc17 	ldw	r5,-16(fp)
     edc:	1809883a 	mov	r4,r3
     ee0:	00005680 	call	568 <LCD_drawRect>
	anchor += 20;
     ee4:	e0bffc17 	ldw	r2,-16(fp)
     ee8:	10800504 	addi	r2,r2,20
     eec:	e0bffc15 	stw	r2,-16(fp)
	xLen = xLen - 40;
     ef0:	e0bffd17 	ldw	r2,-12(fp)
     ef4:	10bff604 	addi	r2,r2,-40
     ef8:	e0bffd15 	stw	r2,-12(fp)
	yLen = yLen - 40;
     efc:	e0bffe17 	ldw	r2,-8(fp)
     f00:	10bff604 	addi	r2,r2,-40
     f04:	e0bffe15 	stw	r2,-8(fp)

	// Green
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0x32CD32);
     f08:	e0fffc17 	ldw	r3,-16(fp)
     f0c:	e0bfff17 	ldw	r2,-4(fp)
     f10:	1887c83a 	sub	r3,r3,r2
     f14:	00800cf4 	movhi	r2,51
     f18:	10b34c84 	addi	r2,r2,-13006
     f1c:	d8800015 	stw	r2,0(sp)
     f20:	e1fffe17 	ldw	r7,-8(fp)
     f24:	e1bffd17 	ldw	r6,-12(fp)
     f28:	e17ffc17 	ldw	r5,-16(fp)
     f2c:	1809883a 	mov	r4,r3
     f30:	00005680 	call	568 <LCD_drawRect>
	anchor += 20;
     f34:	e0bffc17 	ldw	r2,-16(fp)
     f38:	10800504 	addi	r2,r2,20
     f3c:	e0bffc15 	stw	r2,-16(fp)
	xLen = xLen - 40;
     f40:	e0bffd17 	ldw	r2,-12(fp)
     f44:	10bff604 	addi	r2,r2,-40
     f48:	e0bffd15 	stw	r2,-12(fp)
	yLen = yLen - 40;
     f4c:	e0bffe17 	ldw	r2,-8(fp)
     f50:	10bff604 	addi	r2,r2,-40
     f54:	e0bffe15 	stw	r2,-8(fp)

	// Blue
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0x0000FF);
     f58:	e0fffc17 	ldw	r3,-16(fp)
     f5c:	e0bfff17 	ldw	r2,-4(fp)
     f60:	1887c83a 	sub	r3,r3,r2
     f64:	00803fc4 	movi	r2,255
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	e1bffd17 	ldw	r6,-12(fp)
     f74:	e17ffc17 	ldw	r5,-16(fp)
     f78:	1809883a 	mov	r4,r3
     f7c:	00005680 	call	568 <LCD_drawRect>
	anchor += 20;
     f80:	e0bffc17 	ldw	r2,-16(fp)
     f84:	10800504 	addi	r2,r2,20
     f88:	e0bffc15 	stw	r2,-16(fp)
	xLen = xLen - 40;
     f8c:	e0bffd17 	ldw	r2,-12(fp)
     f90:	10bff604 	addi	r2,r2,-40
     f94:	e0bffd15 	stw	r2,-12(fp)
	yLen = yLen - 40;
     f98:	e0bffe17 	ldw	r2,-8(fp)
     f9c:	10bff604 	addi	r2,r2,-40
     fa0:	e0bffe15 	stw	r2,-8(fp)

	// Violet
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0x8A2BE2);
     fa4:	e0fffc17 	ldw	r3,-16(fp)
     fa8:	e0bfff17 	ldw	r2,-4(fp)
     fac:	1887c83a 	sub	r3,r3,r2
     fb0:	008022b4 	movhi	r2,138
     fb4:	108af884 	addi	r2,r2,11234
     fb8:	d8800015 	stw	r2,0(sp)
     fbc:	e1fffe17 	ldw	r7,-8(fp)
     fc0:	e1bffd17 	ldw	r6,-12(fp)
     fc4:	e17ffc17 	ldw	r5,-16(fp)
     fc8:	1809883a 	mov	r4,r3
     fcc:	00005680 	call	568 <LCD_drawRect>

	// Swap frames, rainbow to front, blank to back
	LCD_swapFrames();
     fd0:	00002e80 	call	2e8 <LCD_swapFrames>

	// Reset initial conditions
	anchor = 20;
     fd4:	00800504 	movi	r2,20
     fd8:	e0bffc15 	stw	r2,-16(fp)
	xLen = 320-(2*anchor);
     fdc:	e0fffc17 	ldw	r3,-16(fp)
     fe0:	0005883a 	mov	r2,zero
     fe4:	10c5c83a 	sub	r2,r2,r3
     fe8:	1085883a 	add	r2,r2,r2
     fec:	10805004 	addi	r2,r2,320
     ff0:	e0bffd15 	stw	r2,-12(fp)
	yLen = 240-(2*anchor);
     ff4:	e0fffc17 	ldw	r3,-16(fp)
     ff8:	0005883a 	mov	r2,zero
     ffc:	10c5c83a 	sub	r2,r2,r3
    1000:	1085883a 	add	r2,r2,r2
    1004:	10803c04 	addi	r2,r2,240
    1008:	e0bffe15 	stw	r2,-8(fp)

	// Fill and re-swap rainbow to front, violet to back
	LCD_Fill(0x8A2BE2);
    100c:	010022b4 	movhi	r4,138
    1010:	210af884 	addi	r4,r4,11234
    1014:	000041c0 	call	41c <LCD_Fill>
	LCD_swapFrames();
    1018:	00002e80 	call	2e8 <LCD_swapFrames>

	// Blue
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0x0000FF);
    101c:	e0fffc17 	ldw	r3,-16(fp)
    1020:	e0bfff17 	ldw	r2,-4(fp)
    1024:	1887c83a 	sub	r3,r3,r2
    1028:	00803fc4 	movi	r2,255
    102c:	d8800015 	stw	r2,0(sp)
    1030:	e1fffe17 	ldw	r7,-8(fp)
    1034:	e1bffd17 	ldw	r6,-12(fp)
    1038:	e17ffc17 	ldw	r5,-16(fp)
    103c:	1809883a 	mov	r4,r3
    1040:	00005680 	call	568 <LCD_drawRect>
	anchor += 20;
    1044:	e0bffc17 	ldw	r2,-16(fp)
    1048:	10800504 	addi	r2,r2,20
    104c:	e0bffc15 	stw	r2,-16(fp)
	xLen = xLen - 40;
    1050:	e0bffd17 	ldw	r2,-12(fp)
    1054:	10bff604 	addi	r2,r2,-40
    1058:	e0bffd15 	stw	r2,-12(fp)
	yLen = yLen - 40;
    105c:	e0bffe17 	ldw	r2,-8(fp)
    1060:	10bff604 	addi	r2,r2,-40
    1064:	e0bffe15 	stw	r2,-8(fp)

	// Green
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0x32CD32);
    1068:	e0fffc17 	ldw	r3,-16(fp)
    106c:	e0bfff17 	ldw	r2,-4(fp)
    1070:	1887c83a 	sub	r3,r3,r2
    1074:	00800cf4 	movhi	r2,51
    1078:	10b34c84 	addi	r2,r2,-13006
    107c:	d8800015 	stw	r2,0(sp)
    1080:	e1fffe17 	ldw	r7,-8(fp)
    1084:	e1bffd17 	ldw	r6,-12(fp)
    1088:	e17ffc17 	ldw	r5,-16(fp)
    108c:	1809883a 	mov	r4,r3
    1090:	00005680 	call	568 <LCD_drawRect>
	anchor += 20;
    1094:	e0bffc17 	ldw	r2,-16(fp)
    1098:	10800504 	addi	r2,r2,20
    109c:	e0bffc15 	stw	r2,-16(fp)
	xLen = xLen - 40;
    10a0:	e0bffd17 	ldw	r2,-12(fp)
    10a4:	10bff604 	addi	r2,r2,-40
    10a8:	e0bffd15 	stw	r2,-12(fp)
	yLen = yLen - 40;
    10ac:	e0bffe17 	ldw	r2,-8(fp)
    10b0:	10bff604 	addi	r2,r2,-40
    10b4:	e0bffe15 	stw	r2,-8(fp)

	// Yellow
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0xFFFF00);
    10b8:	e0fffc17 	ldw	r3,-16(fp)
    10bc:	e0bfff17 	ldw	r2,-4(fp)
    10c0:	1887c83a 	sub	r3,r3,r2
    10c4:	00804034 	movhi	r2,256
    10c8:	10bfc004 	addi	r2,r2,-256
    10cc:	d8800015 	stw	r2,0(sp)
    10d0:	e1fffe17 	ldw	r7,-8(fp)
    10d4:	e1bffd17 	ldw	r6,-12(fp)
    10d8:	e17ffc17 	ldw	r5,-16(fp)
    10dc:	1809883a 	mov	r4,r3
    10e0:	00005680 	call	568 <LCD_drawRect>
	anchor += 20;
    10e4:	e0bffc17 	ldw	r2,-16(fp)
    10e8:	10800504 	addi	r2,r2,20
    10ec:	e0bffc15 	stw	r2,-16(fp)
	xLen = xLen - 40;
    10f0:	e0bffd17 	ldw	r2,-12(fp)
    10f4:	10bff604 	addi	r2,r2,-40
    10f8:	e0bffd15 	stw	r2,-12(fp)
	yLen = yLen - 40;
    10fc:	e0bffe17 	ldw	r2,-8(fp)
    1100:	10bff604 	addi	r2,r2,-40
    1104:	e0bffe15 	stw	r2,-8(fp)

	// Orange
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0xFF8C00);
    1108:	e0fffc17 	ldw	r3,-16(fp)
    110c:	e0bfff17 	ldw	r2,-4(fp)
    1110:	1887c83a 	sub	r3,r3,r2
    1114:	00804034 	movhi	r2,256
    1118:	10a30004 	addi	r2,r2,-29696
    111c:	d8800015 	stw	r2,0(sp)
    1120:	e1fffe17 	ldw	r7,-8(fp)
    1124:	e1bffd17 	ldw	r6,-12(fp)
    1128:	e17ffc17 	ldw	r5,-16(fp)
    112c:	1809883a 	mov	r4,r3
    1130:	00005680 	call	568 <LCD_drawRect>
	anchor += 20;
    1134:	e0bffc17 	ldw	r2,-16(fp)
    1138:	10800504 	addi	r2,r2,20
    113c:	e0bffc15 	stw	r2,-16(fp)
	xLen = xLen - 40;
    1140:	e0bffd17 	ldw	r2,-12(fp)
    1144:	10bff604 	addi	r2,r2,-40
    1148:	e0bffd15 	stw	r2,-12(fp)
	yLen = yLen - 40;
    114c:	e0bffe17 	ldw	r2,-8(fp)
    1150:	10bff604 	addi	r2,r2,-40
    1154:	e0bffe15 	stw	r2,-8(fp)

	// Red
	LCD_drawRect(anchor-offset, anchor, xLen, yLen, 0xCC0000);
    1158:	e0fffc17 	ldw	r3,-16(fp)
    115c:	e0bfff17 	ldw	r2,-4(fp)
    1160:	1887c83a 	sub	r3,r3,r2
    1164:	00803334 	movhi	r2,204
    1168:	d8800015 	stw	r2,0(sp)
    116c:	e1fffe17 	ldw	r7,-8(fp)
    1170:	e1bffd17 	ldw	r6,-12(fp)
    1174:	e17ffc17 	ldw	r5,-16(fp)
    1178:	1809883a 	mov	r4,r3
    117c:	00005680 	call	568 <LCD_drawRect>
	LCD_swapFrames();
    1180:	00002e80 	call	2e8 <LCD_swapFrames>
}
    1184:	0001883a 	nop
    1188:	e037883a 	mov	sp,fp
    118c:	dfc00117 	ldw	ra,4(sp)
    1190:	df000017 	ldw	fp,0(sp)
    1194:	dec00204 	addi	sp,sp,8
    1198:	f800283a 	ret

0000119c <click_isr>:

void click_isr(void* context) {
    119c:	defffd04 	addi	sp,sp,-12
    11a0:	dfc00215 	stw	ra,8(sp)
    11a4:	df000115 	stw	fp,4(sp)
    11a8:	df000104 	addi	fp,sp,4
    11ac:	e13fff15 	stw	r4,-4(fp)

	// Clear to ensure ISR only fires once
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(JOYIRQ_BASE, 1);
    11b0:	00c00044 	movi	r3,1
    11b4:	00afbbf4 	movhi	r2,48879
    11b8:	10854304 	addi	r2,r2,5388
    11bc:	10c00035 	stwio	r3,0(r2)

	// Disable interrupts while in here
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(JOYIRQ_BASE, 0);
    11c0:	0007883a 	mov	r3,zero
    11c4:	00afbbf4 	movhi	r2,48879
    11c8:	10854204 	addi	r2,r2,5384
    11cc:	10c00035 	stwio	r3,0(r2)

	LCD_swapFrames();
    11d0:	00002e80 	call	2e8 <LCD_swapFrames>

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(JOYIRQ_BASE, 1);
    11d4:	00c00044 	movi	r3,1
    11d8:	00afbbf4 	movhi	r2,48879
    11dc:	10854204 	addi	r2,r2,5384
    11e0:	10c00035 	stwio	r3,0(r2)

}
    11e4:	0001883a 	nop
    11e8:	e037883a 	mov	sp,fp
    11ec:	dfc00117 	ldw	ra,4(sp)
    11f0:	df000017 	ldw	fp,0(sp)
    11f4:	dec00204 	addi	sp,sp,8
    11f8:	f800283a 	ret

000011fc <Demo_VGA_Init>:

void Demo_VGA_Init() {
    11fc:	defff904 	addi	sp,sp,-28
    1200:	dfc00615 	stw	ra,24(sp)
    1204:	df000515 	stw	fp,20(sp)
    1208:	df000504 	addi	fp,sp,20
	const char* helloWorld = "Hello World! This is Evan's CE2820 V10 SoC!";
    120c:	00800074 	movhi	r2,1
    1210:	10930004 	addi	r2,r2,19456
    1214:	e0bffb15 	stw	r2,-20(fp)
	const char* info_1 = "Slider switch 0 controls program behavior.";
    1218:	00800074 	movhi	r2,1
    121c:	10930b04 	addi	r2,r2,19500
    1220:	e0bffc15 	stw	r2,-16(fp)
	const char* info_2 = "0 = Accelerometer/VGA";
    1224:	00800074 	movhi	r2,1
    1228:	10931604 	addi	r2,r2,19544
    122c:	e0bffd15 	stw	r2,-12(fp)
	const char* info_3 = "1 = Joystick/Servos";
    1230:	00800074 	movhi	r2,1
    1234:	10931c04 	addi	r2,r2,19568
    1238:	e0bffe15 	stw	r2,-8(fp)
	const char* initializing = "Please wait, lots of initialization is happening...";
    123c:	00800074 	movhi	r2,1
    1240:	10932104 	addi	r2,r2,19588
    1244:	e0bfff15 	stw	r2,-4(fp)

	VGA_Charbuf_Init();
    1248:	0001aac0 	call	1aac <VGA_Charbuf_Init>
	VGA_Pixelbuf_Init();
    124c:	0001c9c0 	call	1c9c <VGA_Pixelbuf_Init>
	VGA_Pixelbuf_Fill(0);
    1250:	0009883a 	mov	r4,zero
    1254:	0001d700 	call	1d70 <VGA_Pixelbuf_Fill>
	VGA_Pixelbuf_Fill(0);
    1258:	0009883a 	mov	r4,zero
    125c:	0001d700 	call	1d70 <VGA_Pixelbuf_Fill>
	VGA_Charbuf_String(helloWorld, 2, 2);
    1260:	01800084 	movi	r6,2
    1264:	01400084 	movi	r5,2
    1268:	e13ffb17 	ldw	r4,-20(fp)
    126c:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
	VGA_Charbuf_String(info_1, 2, 4);
    1270:	01800104 	movi	r6,4
    1274:	01400084 	movi	r5,2
    1278:	e13ffc17 	ldw	r4,-16(fp)
    127c:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
	VGA_Charbuf_String(info_2, 2, 6);
    1280:	01800184 	movi	r6,6
    1284:	01400084 	movi	r5,2
    1288:	e13ffd17 	ldw	r4,-12(fp)
    128c:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
	VGA_Charbuf_String(info_3, 2, 8);
    1290:	01800204 	movi	r6,8
    1294:	01400084 	movi	r5,2
    1298:	e13ffe17 	ldw	r4,-8(fp)
    129c:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
	VGA_Charbuf_String(initializing, 2, 10);
    12a0:	01800284 	movi	r6,10
    12a4:	01400084 	movi	r5,2
    12a8:	e13fff17 	ldw	r4,-4(fp)
    12ac:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
}
    12b0:	0001883a 	nop
    12b4:	e037883a 	mov	sp,fp
    12b8:	dfc00117 	ldw	ra,4(sp)
    12bc:	df000017 	ldw	fp,0(sp)
    12c0:	dec00204 	addi	sp,sp,8
    12c4:	f800283a 	ret

000012c8 <Demo_LCD_Init>:

void Demo_LCD_Init() {
    12c8:	defffe04 	addi	sp,sp,-8
    12cc:	dfc00115 	stw	ra,4(sp)
    12d0:	df000015 	stw	fp,0(sp)
    12d4:	d839883a 	mov	fp,sp
	LCD_Init();
    12d8:	00003400 	call	340 <LCD_Init>
	rainbow_Init();
    12dc:	0000e040 	call	e04 <rainbow_Init>
}
    12e0:	0001883a 	nop
    12e4:	e037883a 	mov	sp,fp
    12e8:	dfc00117 	ldw	ra,4(sp)
    12ec:	df000017 	ldw	fp,0(sp)
    12f0:	dec00204 	addi	sp,sp,8
    12f4:	f800283a 	ret

000012f8 <Demo_Cstick_Init>:

void Demo_Cstick_Init() {
    12f8:	defffe04 	addi	sp,sp,-8
    12fc:	dfc00115 	stw	ra,4(sp)
    1300:	df000015 	stw	fp,0(sp)
    1304:	d839883a 	mov	fp,sp
	cstick_Init();
    1308:	0000a3c0 	call	a3c <cstick_Init>
	cstick_Start();
    130c:	0000a740 	call	a74 <cstick_Start>
	click_init(click_isr);
    1310:	01000034 	movhi	r4,0
    1314:	21046704 	addi	r4,r4,4508
    1318:	0000b280 	call	b28 <click_init>
}
    131c:	0001883a 	nop
    1320:	e037883a 	mov	sp,fp
    1324:	dfc00117 	ldw	ra,4(sp)
    1328:	df000017 	ldw	fp,0(sp)
    132c:	dec00204 	addi	sp,sp,8
    1330:	f800283a 	ret

00001334 <LED_Print>:
 * Params:
 * 		uint16_t value - number to be printed
 * Returns:
 * 		Void
 */
void LED_Print(uint16_t value) {
    1334:	defffd04 	addi	sp,sp,-12
    1338:	df000215 	stw	fp,8(sp)
    133c:	df000204 	addi	fp,sp,8
    1340:	2005883a 	mov	r2,r4
    1344:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t* LEDs = (uint16_t*) LEDS_BASE;
    1348:	00bfc834 	movhi	r2,65312
    134c:	e0bffe15 	stw	r2,-8(fp)

	*LEDs = value;
    1350:	e0bffe17 	ldw	r2,-8(fp)
    1354:	e0ffff0b 	ldhu	r3,-4(fp)
    1358:	10c0000d 	sth	r3,0(r2)

	return;
    135c:	0001883a 	nop
}
    1360:	e037883a 	mov	sp,fp
    1364:	df000017 	ldw	fp,0(sp)
    1368:	dec00104 	addi	sp,sp,4
    136c:	f800283a 	ret

00001370 <LED_Clear>:
 * Params:
 * 		Void
 * Returns:
 * 		Void
 */
void LED_Clear() {
    1370:	defffe04 	addi	sp,sp,-8
    1374:	df000115 	stw	fp,4(sp)
    1378:	df000104 	addi	fp,sp,4
	uint16_t* LEDs = (uint16_t*) LEDS_BASE;
    137c:	00bfc834 	movhi	r2,65312
    1380:	e0bfff15 	stw	r2,-4(fp)

	*LEDs = 0;
    1384:	e0bfff17 	ldw	r2,-4(fp)
    1388:	1000000d 	sth	zero,0(r2)

	return;
    138c:	0001883a 	nop
}
    1390:	e037883a 	mov	sp,fp
    1394:	df000017 	ldw	fp,0(sp)
    1398:	dec00104 	addi	sp,sp,4
    139c:	f800283a 	ret

000013a0 <Hex_printString>:
 * Params:
 * 		const char* string - the string to be printed
 * Returns:
 * 		Void
 */
void Hex_printString(const char* string) {
    13a0:	defffa04 	addi	sp,sp,-24
    13a4:	df000515 	stw	fp,20(sp)
    13a8:	df000504 	addi	fp,sp,20
    13ac:	e13fff15 	stw	r4,-4(fp)
	uint32_t* seg7_low = (uint32_t*) HEX3_HEX0_BASE;
    13b0:	00bfc834 	movhi	r2,65312
    13b4:	10800804 	addi	r2,r2,32
    13b8:	e0bffb15 	stw	r2,-20(fp)
	uint16_t* seg7_hi = (uint16_t*) HEX5_HEX4_BASE;
    13bc:	00bfc834 	movhi	r2,65312
    13c0:	10800c04 	addi	r2,r2,48
    13c4:	e0bffc15 	stw	r2,-16(fp)

	uint32_t lower = 0;
    13c8:	e03ffd15 	stw	zero,-12(fp)
	uint16_t upper = 0;
    13cc:	e03ffe0d 	sth	zero,-8(fp)
	// 6 displays, I'll do this manually

	// Working from HEX5 down to HEX0

	// HEX5
	upper |= (string[0] << 8);
    13d0:	e0bfff17 	ldw	r2,-4(fp)
    13d4:	10800003 	ldbu	r2,0(r2)
    13d8:	10803fcc 	andi	r2,r2,255
    13dc:	1080201c 	xori	r2,r2,128
    13e0:	10bfe004 	addi	r2,r2,-128
    13e4:	1004923a 	slli	r2,r2,8
    13e8:	1007883a 	mov	r3,r2
    13ec:	e0bffe0b 	ldhu	r2,-8(fp)
    13f0:	1884b03a 	or	r2,r3,r2
    13f4:	e0bffe0d 	sth	r2,-8(fp)

	// HEX4
	upper |= string[1];
    13f8:	e0bfff17 	ldw	r2,-4(fp)
    13fc:	10800044 	addi	r2,r2,1
    1400:	10800003 	ldbu	r2,0(r2)
    1404:	10c03fcc 	andi	r3,r2,255
    1408:	18c0201c 	xori	r3,r3,128
    140c:	18ffe004 	addi	r3,r3,-128
    1410:	e0bffe0b 	ldhu	r2,-8(fp)
    1414:	1884b03a 	or	r2,r3,r2
    1418:	e0bffe0d 	sth	r2,-8(fp)

	// HEX3
	lower |= (string[2] << (8*3));
    141c:	e0bfff17 	ldw	r2,-4(fp)
    1420:	10800084 	addi	r2,r2,2
    1424:	10800003 	ldbu	r2,0(r2)
    1428:	10803fcc 	andi	r2,r2,255
    142c:	1080201c 	xori	r2,r2,128
    1430:	10bfe004 	addi	r2,r2,-128
    1434:	1004963a 	slli	r2,r2,24
    1438:	1007883a 	mov	r3,r2
    143c:	e0bffd17 	ldw	r2,-12(fp)
    1440:	10c4b03a 	or	r2,r2,r3
    1444:	e0bffd15 	stw	r2,-12(fp)

	// HEX2
	lower |= (string[3] << (8*2));
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	108000c4 	addi	r2,r2,3
    1450:	10800003 	ldbu	r2,0(r2)
    1454:	10803fcc 	andi	r2,r2,255
    1458:	1080201c 	xori	r2,r2,128
    145c:	10bfe004 	addi	r2,r2,-128
    1460:	1004943a 	slli	r2,r2,16
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffd17 	ldw	r2,-12(fp)
    146c:	10c4b03a 	or	r2,r2,r3
    1470:	e0bffd15 	stw	r2,-12(fp)

	// HEX1
	lower |= (string[4] << (8*1));
    1474:	e0bfff17 	ldw	r2,-4(fp)
    1478:	10800104 	addi	r2,r2,4
    147c:	10800003 	ldbu	r2,0(r2)
    1480:	10803fcc 	andi	r2,r2,255
    1484:	1080201c 	xori	r2,r2,128
    1488:	10bfe004 	addi	r2,r2,-128
    148c:	1004923a 	slli	r2,r2,8
    1490:	1007883a 	mov	r3,r2
    1494:	e0bffd17 	ldw	r2,-12(fp)
    1498:	10c4b03a 	or	r2,r2,r3
    149c:	e0bffd15 	stw	r2,-12(fp)

	// HEX0
	lower |= (string[5] << (8*0));
    14a0:	e0bfff17 	ldw	r2,-4(fp)
    14a4:	10800144 	addi	r2,r2,5
    14a8:	10800003 	ldbu	r2,0(r2)
    14ac:	10803fcc 	andi	r2,r2,255
    14b0:	1080201c 	xori	r2,r2,128
    14b4:	10bfe004 	addi	r2,r2,-128
    14b8:	e0fffd17 	ldw	r3,-12(fp)
    14bc:	1884b03a 	or	r2,r3,r2
    14c0:	e0bffd15 	stw	r2,-12(fp)

	*seg7_low = lower;
    14c4:	e0bffb17 	ldw	r2,-20(fp)
    14c8:	e0fffd17 	ldw	r3,-12(fp)
    14cc:	10c00015 	stw	r3,0(r2)
	*seg7_hi = upper;
    14d0:	e0bffc17 	ldw	r2,-16(fp)
    14d4:	e0fffe0b 	ldhu	r3,-8(fp)
    14d8:	10c0000d 	sth	r3,0(r2)

	return;
    14dc:	0001883a 	nop
}
    14e0:	e037883a 	mov	sp,fp
    14e4:	df000017 	ldw	fp,0(sp)
    14e8:	dec00104 	addi	sp,sp,4
    14ec:	f800283a 	ret

000014f0 <Hex_scrollPrint>:
 * Params:
 * 		const char* string - the string to be scrolled
 * Returns:
 * 		Void
 */
void Hex_scrollPrint(const char* scrollMe) {
    14f0:	defff704 	addi	sp,sp,-36
    14f4:	dfc00815 	stw	ra,32(sp)
    14f8:	df000715 	stw	fp,28(sp)
    14fc:	df000704 	addi	fp,sp,28
    1500:	e13fff15 	stw	r4,-4(fp)
	// Create a blank char buffer of 6 chars
	char buffer[6] = "\0\0\0\0\0\0";
    1504:	00800074 	movhi	r2,1
    1508:	10932e04 	addi	r2,r2,19640
    150c:	10c00017 	ldw	r3,0(r2)
    1510:	e0fffd15 	stw	r3,-12(fp)
    1514:	1080010b 	ldhu	r2,4(r2)
    1518:	e0bffe0d 	sth	r2,-8(fp)

	// Determine the length of the provided message
	int messageLength = strlen(scrollMe);
    151c:	e13fff17 	ldw	r4,-4(fp)
    1520:	00034080 	call	3408 <strlen>
    1524:	e0bffc15 	stw	r2,-16(fp)

	// Variable to store how many times to shift the buffer
	int iterations = 0;
    1528:	e03ff915 	stw	zero,-28(fp)

	// If the message will fit on the display, we don't need more than
	// one iteration. Otherwise it's the length of the message minus 5 iterations.
	if(messageLength < 7) {
    152c:	e0bffc17 	ldw	r2,-16(fp)
    1530:	108001c8 	cmpgei	r2,r2,7
    1534:	1000031e 	bne	r2,zero,1544 <Hex_scrollPrint+0x54>
		iterations = 1;
    1538:	00800044 	movi	r2,1
    153c:	e0bff915 	stw	r2,-28(fp)
    1540:	00000306 	br	1550 <Hex_scrollPrint+0x60>
	} else {
		iterations = messageLength - 5;
    1544:	e0bffc17 	ldw	r2,-16(fp)
    1548:	10bffec4 	addi	r2,r2,-5
    154c:	e0bff915 	stw	r2,-28(fp)
	}


	// Actual scrolling loop
	for(int i = 0; i < iterations; i++) {
    1550:	e03ffa15 	stw	zero,-24(fp)
    1554:	00002006 	br	15d8 <Hex_scrollPrint+0xe8>
		// Copy 6 chars starting at specified index into buffer
		for(int j = 0; j < 6; j++) {
    1558:	e03ffb15 	stw	zero,-20(fp)
    155c:	00000e06 	br	1598 <Hex_scrollPrint+0xa8>
			buffer[j] = scrollMe[j+i];
    1560:	e0fffb17 	ldw	r3,-20(fp)
    1564:	e0bffa17 	ldw	r2,-24(fp)
    1568:	1885883a 	add	r2,r3,r2
    156c:	1007883a 	mov	r3,r2
    1570:	e0bfff17 	ldw	r2,-4(fp)
    1574:	10c5883a 	add	r2,r2,r3
    1578:	10c00003 	ldbu	r3,0(r2)
    157c:	e13ffd04 	addi	r4,fp,-12
    1580:	e0bffb17 	ldw	r2,-20(fp)
    1584:	2085883a 	add	r2,r4,r2
    1588:	10c00005 	stb	r3,0(r2)


	// Actual scrolling loop
	for(int i = 0; i < iterations; i++) {
		// Copy 6 chars starting at specified index into buffer
		for(int j = 0; j < 6; j++) {
    158c:	e0bffb17 	ldw	r2,-20(fp)
    1590:	10800044 	addi	r2,r2,1
    1594:	e0bffb15 	stw	r2,-20(fp)
    1598:	e0bffb17 	ldw	r2,-20(fp)
    159c:	10800190 	cmplti	r2,r2,6
    15a0:	103fef1e 	bne	r2,zero,1560 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152f560>
			buffer[j] = scrollMe[j+i];
		}
		// Print the actual message
		Hex_printString(buffer);
    15a4:	e0bffd04 	addi	r2,fp,-12
    15a8:	1009883a 	mov	r4,r2
    15ac:	00013a00 	call	13a0 <Hex_printString>

		// Print the starting index on the LEDs
		LED_Print(i);
    15b0:	e0bffa17 	ldw	r2,-24(fp)
    15b4:	10bfffcc 	andi	r2,r2,65535
    15b8:	1009883a 	mov	r4,r2
    15bc:	00013340 	call	1334 <LED_Print>

		usleep(delay);
    15c0:	d0a00517 	ldw	r2,-32748(gp)
    15c4:	1009883a 	mov	r4,r2
    15c8:	000fb240 	call	fb24 <usleep>
		iterations = messageLength - 5;
	}


	// Actual scrolling loop
	for(int i = 0; i < iterations; i++) {
    15cc:	e0bffa17 	ldw	r2,-24(fp)
    15d0:	10800044 	addi	r2,r2,1
    15d4:	e0bffa15 	stw	r2,-24(fp)
    15d8:	e0fffa17 	ldw	r3,-24(fp)
    15dc:	e0bff917 	ldw	r2,-28(fp)
    15e0:	18bfdd16 	blt	r3,r2,1558 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152f558>
		LED_Print(i);

		usleep(delay);
	}

	return;
    15e4:	0001883a 	nop
}
    15e8:	e037883a 	mov	sp,fp
    15ec:	dfc00117 	ldw	ra,4(sp)
    15f0:	df000017 	ldw	fp,0(sp)
    15f4:	dec00204 	addi	sp,sp,8
    15f8:	f800283a 	ret

000015fc <Hex_Clear>:
 * Params:
 * 		Void
 * Returns:
 * 		Void
 */
void Hex_Clear() {
    15fc:	defffd04 	addi	sp,sp,-12
    1600:	df000215 	stw	fp,8(sp)
    1604:	df000204 	addi	fp,sp,8
	uint32_t* seg7_low = (uint32_t*) HEX3_HEX0_BASE;
    1608:	00bfc834 	movhi	r2,65312
    160c:	10800804 	addi	r2,r2,32
    1610:	e0bffe15 	stw	r2,-8(fp)
	uint16_t* seg7_hi = (uint16_t*) HEX5_HEX4_BASE;
    1614:	00bfc834 	movhi	r2,65312
    1618:	10800c04 	addi	r2,r2,48
    161c:	e0bfff15 	stw	r2,-4(fp)

	*seg7_low = 0;
    1620:	e0bffe17 	ldw	r2,-8(fp)
    1624:	10000015 	stw	zero,0(r2)
	*seg7_hi = 0;
    1628:	e0bfff17 	ldw	r2,-4(fp)
    162c:	1000000d 	sth	zero,0(r2)

	return;
    1630:	0001883a 	nop
}
    1634:	e037883a 	mov	sp,fp
    1638:	df000017 	ldw	fp,0(sp)
    163c:	dec00104 	addi	sp,sp,4
    1640:	f800283a 	ret

00001644 <delay_Set>:
 * Params:
 * 		useconds_t newDelay - new delay time between scrolls
 * Returns:
 * 		Void
 */
void delay_Set(useconds_t newDelay) {
    1644:	defffe04 	addi	sp,sp,-8
    1648:	df000115 	stw	fp,4(sp)
    164c:	df000104 	addi	fp,sp,4
    1650:	e13fff15 	stw	r4,-4(fp)
	delay = newDelay;
    1654:	e0bfff17 	ldw	r2,-4(fp)
    1658:	d0a00515 	stw	r2,-32748(gp)
	return;
    165c:	0001883a 	nop
}
    1660:	e037883a 	mov	sp,fp
    1664:	df000017 	ldw	fp,0(sp)
    1668:	dec00104 	addi	sp,sp,4
    166c:	f800283a 	ret

00001670 <delay_Get>:

useconds_t delay_Get() {
    1670:	deffff04 	addi	sp,sp,-4
    1674:	df000015 	stw	fp,0(sp)
    1678:	d839883a 	mov	fp,sp
	return delay;
    167c:	d0a00517 	ldw	r2,-32748(gp)
}
    1680:	e037883a 	mov	sp,fp
    1684:	df000017 	ldw	fp,0(sp)
    1688:	dec00104 	addi	sp,sp,4
    168c:	f800283a 	ret

00001690 <button_Read>:
 * 	Params:
 * 		void
 * 	Returns:
 * 		uint8_t: the read status of the pushbuttons
 */
uint8_t button_Read() {
    1690:	defffe04 	addi	sp,sp,-8
    1694:	df000115 	stw	fp,4(sp)
    1698:	df000104 	addi	fp,sp,4
	const uint8_t* KEYS = (uint8_t*) PUSHBUTTONS_BASE;
    169c:	00bfc834 	movhi	r2,65312
    16a0:	10801404 	addi	r2,r2,80
    16a4:	e0bfff15 	stw	r2,-4(fp)
	return *KEYS;
    16a8:	e0bfff17 	ldw	r2,-4(fp)
    16ac:	10800003 	ldbu	r2,0(r2)
}
    16b0:	e037883a 	mov	sp,fp
    16b4:	df000017 	ldw	fp,0(sp)
    16b8:	dec00104 	addi	sp,sp,4
    16bc:	f800283a 	ret

000016c0 <switch_Read>:
 * 	Params:
 * 		void
 * 	Returns:
 * 		uint16_t: the read status of the switches
 */
uint16_t switch_Read() {
    16c0:	defffe04 	addi	sp,sp,-8
    16c4:	df000115 	stw	fp,4(sp)
    16c8:	df000104 	addi	fp,sp,4
	const uint16_t* SWITCHES = (uint16_t*) SLIDER_SWITCHES_BASE;
    16cc:	00bfc834 	movhi	r2,65312
    16d0:	10801004 	addi	r2,r2,64
    16d4:	e0bfff15 	stw	r2,-4(fp)
	return *SWITCHES;
    16d8:	e0bfff17 	ldw	r2,-4(fp)
    16dc:	1080000b 	ldhu	r2,0(r2)
}
    16e0:	e037883a 	mov	sp,fp
    16e4:	df000017 	ldw	fp,0(sp)
    16e8:	dec00104 	addi	sp,sp,4
    16ec:	f800283a 	ret

000016f0 <notmain>:
#include "unistd.h"



int notmain()
{
    16f0:	deffdd04 	addi	sp,sp,-140
    16f4:	dfc02215 	stw	ra,136(sp)
    16f8:	df002115 	stw	fp,132(sp)
    16fc:	df002104 	addi	fp,sp,132
	char gyro[81] = "";
    1700:	e03fe015 	stw	zero,-128(fp)
    1704:	e0bfe104 	addi	r2,fp,-124
    1708:	00c01344 	movi	r3,77
    170c:	180d883a 	mov	r6,r3
    1710:	000b883a 	mov	r5,zero
    1714:	1009883a 	mov	r4,r2
    1718:	00030f40 	call	30f4 <memset>
	char clearLine[31] = "";
    171c:	e03ff445 	stb	zero,-47(fp)
    1720:	e03ff485 	stb	zero,-46(fp)
    1724:	e03ff4c5 	stb	zero,-45(fp)
    1728:	e03ff505 	stb	zero,-44(fp)
    172c:	e0bff544 	addi	r2,fp,-43
    1730:	00c006c4 	movi	r3,27
    1734:	180d883a 	mov	r6,r3
    1738:	000b883a 	mov	r5,zero
    173c:	1009883a 	mov	r4,r2
    1740:	00030f40 	call	30f4 <memset>
	char pos[7] = "";
    1744:	e03ffc15 	stw	zero,-16(fp)
    1748:	e03ffd0d 	sth	zero,-12(fp)
    174c:	e03ffd85 	stb	zero,-10(fp)
	accel_reading current;

	VGA_Pixelbuf_Init();
    1750:	0001c9c0 	call	1c9c <VGA_Pixelbuf_Init>
	VGA_Pixelbuf_Fill(0);
    1754:	0009883a 	mov	r4,zero
    1758:	0001d700 	call	1d70 <VGA_Pixelbuf_Fill>
	VGA_Pixelbuf_Fill(0);
    175c:	0009883a 	mov	r4,zero
    1760:	0001d700 	call	1d70 <VGA_Pixelbuf_Fill>
	VGA_Charbuf_Init();
    1764:	0001aac0 	call	1aac <VGA_Charbuf_Init>

	// Print a Hello World line
	VGA_Charbuf_String("Hello World! This is Evan's CE2820 V10 SoC!", 1, 1);
    1768:	01800044 	movi	r6,1
    176c:	01400044 	movi	r5,1
    1770:	01000074 	movhi	r4,1
    1774:	21133004 	addi	r4,r4,19648
    1778:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
	VGA_Charbuf_String("Accelerometer Readings:", 1, 3);
    177c:	018000c4 	movi	r6,3
    1780:	01400044 	movi	r5,1
    1784:	01000074 	movhi	r4,1
    1788:	21133b04 	addi	r4,r4,19692
    178c:	0001bd40 	call	1bd4 <VGA_Charbuf_String>

	// Prepare a string to clear any given line
	memset(clearLine, ' ', 30);
    1790:	e0bff444 	addi	r2,fp,-47
    1794:	01800784 	movi	r6,30
    1798:	01400804 	movi	r5,32
    179c:	1009883a 	mov	r4,r2
    17a0:	00030f40 	call	30f4 <memset>
	clearLine[31] = '\0';
    17a4:	e03ffc05 	stb	zero,-16(fp)

	Accel_Init();
    17a8:	00008380 	call	838 <Accel_Init>

	while(1) {
		current = Accel_getVals();
    17ac:	00009040 	call	904 <Accel_getVals>
    17b0:	1009883a 	mov	r4,r2
    17b4:	180b883a 	mov	r5,r3
    17b8:	e13ffe15 	stw	r4,-8(fp)
    17bc:	e17fff15 	stw	r5,-4(fp)

		if(current.valid) {
    17c0:	e0bffe03 	ldbu	r2,-8(fp)
    17c4:	10803fcc 	andi	r2,r2,255
    17c8:	10001726 	beq	r2,zero,1828 <notmain+0x138>
			sprintf(gyro, "X: %d   Y: %d   Z: %d", current.X, current.Y, current.Z);
    17cc:	e0bffe8b 	ldhu	r2,-6(fp)
    17d0:	10ffffcc 	andi	r3,r2,65535
    17d4:	18e0001c 	xori	r3,r3,32768
    17d8:	18e00004 	addi	r3,r3,-32768
    17dc:	e0bfff0b 	ldhu	r2,-4(fp)
    17e0:	113fffcc 	andi	r4,r2,65535
    17e4:	2120001c 	xori	r4,r4,32768
    17e8:	21200004 	addi	r4,r4,-32768
    17ec:	e0bfff8b 	ldhu	r2,-2(fp)
    17f0:	10bfffcc 	andi	r2,r2,65535
    17f4:	10a0001c 	xori	r2,r2,32768
    17f8:	10a00004 	addi	r2,r2,-32768
    17fc:	d8800015 	stw	r2,0(sp)
    1800:	200f883a 	mov	r7,r4
    1804:	180d883a 	mov	r6,r3
    1808:	01400074 	movhi	r5,1
    180c:	29534104 	addi	r5,r5,19716
    1810:	e13fe004 	addi	r4,fp,-128
    1814:	000339c0 	call	339c <sprintf>
			VGA_Charbuf_String(gyro, 1, 5);
    1818:	01800144 	movi	r6,5
    181c:	01400044 	movi	r5,1
    1820:	e13fe004 	addi	r4,fp,-128
    1824:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
		}

		usleep(20000);
    1828:	01138804 	movi	r4,20000
    182c:	000fb240 	call	fb24 <usleep>

		VGA_Charbuf_String(clearLine, 0, 5);
    1830:	e0bff444 	addi	r2,fp,-47
    1834:	01800144 	movi	r6,5
    1838:	000b883a 	mov	r5,zero
    183c:	1009883a 	mov	r4,r2
    1840:	0001bd40 	call	1bd4 <VGA_Charbuf_String>
	}
    1844:	003fd906 	br	17ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152f7ac>

00001848 <servo_move>:
 * Note:
 * 		The range of accepted values for servo position is [0,200]
 * 		If the input is greater than 200, the servos will disable,
 * 		meaning no holding torque will be applied
 */
void servo_move(uint8_t newpos, uint8_t sel) {
    1848:	defffd04 	addi	sp,sp,-12
    184c:	df000215 	stw	fp,8(sp)
    1850:	df000204 	addi	fp,sp,8
    1854:	2007883a 	mov	r3,r4
    1858:	2805883a 	mov	r2,r5
    185c:	e0fffe05 	stb	r3,-8(fp)
    1860:	e0bfff05 	stb	r2,-4(fp)

	if(sel == 1) {
    1864:	e0bfff03 	ldbu	r2,-4(fp)
    1868:	10800058 	cmpnei	r2,r2,1
    186c:	1000041e 	bne	r2,zero,1880 <servo_move+0x38>
		*PWMY = newpos;
    1870:	d0a00717 	ldw	r2,-32740(gp)
    1874:	e0fffe03 	ldbu	r3,-8(fp)
    1878:	10c00015 	stw	r3,0(r2)
	} else if(sel == 0) {
		*PWMX = newpos;
	}

}
    187c:	00000506 	br	1894 <servo_move+0x4c>
 */
void servo_move(uint8_t newpos, uint8_t sel) {

	if(sel == 1) {
		*PWMY = newpos;
	} else if(sel == 0) {
    1880:	e0bfff03 	ldbu	r2,-4(fp)
    1884:	1000031e 	bne	r2,zero,1894 <servo_move+0x4c>
		*PWMX = newpos;
    1888:	d0a00617 	ldw	r2,-32744(gp)
    188c:	e0fffe03 	ldbu	r3,-8(fp)
    1890:	10c00015 	stw	r3,0(r2)
	}

}
    1894:	0001883a 	nop
    1898:	e037883a 	mov	sp,fp
    189c:	df000017 	ldw	fp,0(sp)
    18a0:	dec00104 	addi	sp,sp,4
    18a4:	f800283a 	ret

000018a8 <servo_deg>:
 * Params:
 * 		uint8_t degrees: Desired degree position of the selected servo channel
 * 		uint8_t sel: 0 = X-channel, 1 = Y-channel
 *
 */
void servo_deg(uint8_t degrees, uint8_t sel) {
    18a8:	defffa04 	addi	sp,sp,-24
    18ac:	dfc00515 	stw	ra,20(sp)
    18b0:	df000415 	stw	fp,16(sp)
    18b4:	df000404 	addi	fp,sp,16
    18b8:	2007883a 	mov	r3,r4
    18bc:	2805883a 	mov	r2,r5
    18c0:	e0fffe05 	stb	r3,-8(fp)
    18c4:	e0bfff05 	stb	r2,-4(fp)
	const float conversion = 1.11;
    18c8:	008fe3b4 	movhi	r2,16270
    18cc:	10851ec4 	addi	r2,r2,5243
    18d0:	e0bffc15 	stw	r2,-16(fp)

	uint8_t newval = (uint8_t)(conversion*degrees);
    18d4:	e0bffe03 	ldbu	r2,-8(fp)
    18d8:	1009883a 	mov	r4,r2
    18dc:	00026480 	call	2648 <__floatsisf>
    18e0:	1007883a 	mov	r3,r2
    18e4:	e0bffc17 	ldw	r2,-16(fp)
    18e8:	1885ff32 	custom	252,r2,r3,r2
    18ec:	1009883a 	mov	r4,r2
    18f0:	0001fb00 	call	1fb0 <__fixunssfsi>
    18f4:	e0bffd05 	stb	r2,-12(fp)

	servo_move(newval,sel);
    18f8:	e0bffd03 	ldbu	r2,-12(fp)
    18fc:	e0ffff03 	ldbu	r3,-4(fp)
    1900:	180b883a 	mov	r5,r3
    1904:	1009883a 	mov	r4,r2
    1908:	00018480 	call	1848 <servo_move>

}
    190c:	0001883a 	nop
    1910:	e037883a 	mov	sp,fp
    1914:	dfc00117 	ldw	ra,4(sp)
    1918:	df000017 	ldw	fp,0(sp)
    191c:	dec00204 	addi	sp,sp,8
    1920:	f800283a 	ret

00001924 <servo_read>:
 * Params:
 * 		uint8_t sel: 0 = X-Servo, 1 = Y-Servo (other values will return 0)
 * Returns:
 * 		uint8_t value: The read value of the selected servo channel
 */
uint8_t servo_read(uint8_t sel) {
    1924:	defffd04 	addi	sp,sp,-12
    1928:	df000215 	stw	fp,8(sp)
    192c:	df000204 	addi	fp,sp,8
    1930:	2005883a 	mov	r2,r4
    1934:	e0bfff05 	stb	r2,-4(fp)
	uint8_t value = 0;
    1938:	e03ffe05 	stb	zero,-8(fp)

	if(sel == 0) {
    193c:	e0bfff03 	ldbu	r2,-4(fp)
    1940:	1000041e 	bne	r2,zero,1954 <servo_read+0x30>
		value = *PWMX;
    1944:	d0a00617 	ldw	r2,-32744(gp)
    1948:	10800017 	ldw	r2,0(r2)
    194c:	e0bffe05 	stb	r2,-8(fp)
    1950:	00000606 	br	196c <servo_read+0x48>
	} else if(sel == 1) {
    1954:	e0bfff03 	ldbu	r2,-4(fp)
    1958:	10800058 	cmpnei	r2,r2,1
    195c:	1000031e 	bne	r2,zero,196c <servo_read+0x48>
		value = *PWMY;
    1960:	d0a00717 	ldw	r2,-32740(gp)
    1964:	10800017 	ldw	r2,0(r2)
    1968:	e0bffe05 	stb	r2,-8(fp)
	}

	return value;
    196c:	e0bffe03 	ldbu	r2,-8(fp)
}
    1970:	e037883a 	mov	sp,fp
    1974:	df000017 	ldw	fp,0(sp)
    1978:	dec00104 	addi	sp,sp,4
    197c:	f800283a 	ret

00001980 <servo_disable>:
 * Disables a servo's holding torque by writing 255 to the
 * control register
 * Params:
 * 		uint8_t sel: 0 = X-channel, 1 = Y-channel (others ignored)
 */
void servo_disable(uint8_t sel) {
    1980:	defffe04 	addi	sp,sp,-8
    1984:	df000115 	stw	fp,4(sp)
    1988:	df000104 	addi	fp,sp,4
    198c:	2005883a 	mov	r2,r4
    1990:	e0bfff05 	stb	r2,-4(fp)
	if(sel == 0) {
    1994:	e0bfff03 	ldbu	r2,-4(fp)
    1998:	1000041e 	bne	r2,zero,19ac <servo_disable+0x2c>
		*PWMX = 255;
    199c:	d0a00617 	ldw	r2,-32744(gp)
    19a0:	00c03fc4 	movi	r3,255
    19a4:	10c00015 	stw	r3,0(r2)
	} else if(sel == 1) {
		*PWMY = 255;
	}
}
    19a8:	00000606 	br	19c4 <servo_disable+0x44>
 * 		uint8_t sel: 0 = X-channel, 1 = Y-channel (others ignored)
 */
void servo_disable(uint8_t sel) {
	if(sel == 0) {
		*PWMX = 255;
	} else if(sel == 1) {
    19ac:	e0bfff03 	ldbu	r2,-4(fp)
    19b0:	10800058 	cmpnei	r2,r2,1
    19b4:	1000031e 	bne	r2,zero,19c4 <servo_disable+0x44>
		*PWMY = 255;
    19b8:	d0a00717 	ldw	r2,-32740(gp)
    19bc:	00c03fc4 	movi	r3,255
    19c0:	10c00015 	stw	r3,0(r2)
	}
}
    19c4:	0001883a 	nop
    19c8:	e037883a 	mov	sp,fp
    19cc:	df000017 	ldw	fp,0(sp)
    19d0:	dec00104 	addi	sp,sp,4
    19d4:	f800283a 	ret

000019d8 <to565>:
/*
 * Converts an input RGB888 or ARGB8888 value
 * into RGB565 color space. Ignores alpha
 * in conversion.
 */
static uint16_t to565(uint32_t color) {
    19d8:	defffd04 	addi	sp,sp,-12
    19dc:	df000215 	stw	fp,8(sp)
    19e0:	df000204 	addi	fp,sp,8
    19e4:	e13fff15 	stw	r4,-4(fp)
	// Mask off color values
	uint8_t red = (color & 0x00FF0000)>>16;
    19e8:	e0bfff17 	ldw	r2,-4(fp)
    19ec:	10803fec 	andhi	r2,r2,255
    19f0:	1004d43a 	srli	r2,r2,16
    19f4:	e0bffe05 	stb	r2,-8(fp)
	uint8_t green = (color & 0x0000FF00)>>8;
    19f8:	e0bfff17 	ldw	r2,-4(fp)
    19fc:	10bfc00c 	andi	r2,r2,65280
    1a00:	1004d23a 	srli	r2,r2,8
    1a04:	e0bffe45 	stb	r2,-7(fp)
	uint8_t blue = (color & 0x000000FF);
    1a08:	e0bfff17 	ldw	r2,-4(fp)
    1a0c:	e0bffe85 	stb	r2,-6(fp)

	return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
    1a10:	e0bffe03 	ldbu	r2,-8(fp)
    1a14:	10803e0c 	andi	r2,r2,248
    1a18:	1004923a 	slli	r2,r2,8
    1a1c:	1007883a 	mov	r3,r2
    1a20:	e0bffe43 	ldbu	r2,-7(fp)
    1a24:	10803f0c 	andi	r2,r2,252
    1a28:	100490fa 	slli	r2,r2,3
    1a2c:	1884b03a 	or	r2,r3,r2
    1a30:	1007883a 	mov	r3,r2
    1a34:	e0bffe83 	ldbu	r2,-6(fp)
    1a38:	1004d0fa 	srli	r2,r2,3
    1a3c:	10803fcc 	andi	r2,r2,255
    1a40:	1884b03a 	or	r2,r3,r2
}
    1a44:	e037883a 	mov	sp,fp
    1a48:	df000017 	ldw	fp,0(sp)
    1a4c:	dec00104 	addi	sp,sp,4
    1a50:	f800283a 	ret

00001a54 <VGA_Pixelbuf_Swapframes>:
/*
 * Prompts the pixel buffer to swap frames after the current
 * frame finishes drawing. Blocks until the frame swap is
 * successful.
 */
void VGA_Pixelbuf_Swapframes() {
    1a54:	defffe04 	addi	sp,sp,-8
    1a58:	df000115 	stw	fp,4(sp)
    1a5c:	df000104 	addi	fp,sp,4
	// Front buffer is read-only, but writing any value
	// to the front buffer register triggers a swap
	// after the current frame finishes
	pixelbuf -> fBuffer = 1;
    1a60:	d0a77017 	ldw	r2,-25152(gp)
    1a64:	00c00044 	movi	r3,1
    1a68:	10c00015 	stw	r3,0(r2)

	// Wait until a frame is done drawing for timing reasons
	uint8_t framePending = (pixelbuf -> status)&(1);
    1a6c:	d0a77017 	ldw	r2,-25152(gp)
    1a70:	10800317 	ldw	r2,12(r2)
    1a74:	1080004c 	andi	r2,r2,1
    1a78:	e0bfff05 	stb	r2,-4(fp)
	while(framePending) {
    1a7c:	00000406 	br	1a90 <VGA_Pixelbuf_Swapframes+0x3c>
		framePending = (pixelbuf -> status)&(1);
    1a80:	d0a77017 	ldw	r2,-25152(gp)
    1a84:	10800317 	ldw	r2,12(r2)
    1a88:	1080004c 	andi	r2,r2,1
    1a8c:	e0bfff05 	stb	r2,-4(fp)
	// after the current frame finishes
	pixelbuf -> fBuffer = 1;

	// Wait until a frame is done drawing for timing reasons
	uint8_t framePending = (pixelbuf -> status)&(1);
	while(framePending) {
    1a90:	e0bfff03 	ldbu	r2,-4(fp)
    1a94:	103ffa1e 	bne	r2,zero,1a80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152fa80>
		framePending = (pixelbuf -> status)&(1);
	}
}
    1a98:	0001883a 	nop
    1a9c:	e037883a 	mov	sp,fp
    1aa0:	df000017 	ldw	fp,0(sp)
    1aa4:	dec00104 	addi	sp,sp,4
    1aa8:	f800283a 	ret

00001aac <VGA_Charbuf_Init>:

/*
 * Initializes the character buffer API and clears whatever may
 * be stored in the character buffer.
 */
void VGA_Charbuf_Init() {
    1aac:	defffe04 	addi	sp,sp,-8
    1ab0:	dfc00115 	stw	ra,4(sp)
    1ab4:	df000015 	stw	fp,0(sp)
    1ab8:	d839883a 	mov	fp,sp
	// Initialize the pointer
	charbuf = (uint8_t*) VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_ONCHIP_SRAM_BASE;
    1abc:	00b7ab74 	movhi	r2,57005
    1ac0:	10880004 	addi	r2,r2,8192
    1ac4:	d0a77115 	stw	r2,-25148(gp)

	// "Clear" the display by setting to spaces
	memset(charbuf, ' ', (1<<char_wBits)*(1<<char_vBits)*sizeof(uint8_t));
    1ac8:	d1277117 	ldw	r4,-25148(gp)
    1acc:	008001c4 	movi	r2,7
    1ad0:	00c00044 	movi	r3,1
    1ad4:	1886983a 	sll	r3,r3,r2
    1ad8:	00800184 	movi	r2,6
    1adc:	1884983a 	sll	r2,r3,r2
    1ae0:	100d883a 	mov	r6,r2
    1ae4:	01400804 	movi	r5,32
    1ae8:	00030f40 	call	30f4 <memset>

}
    1aec:	0001883a 	nop
    1af0:	e037883a 	mov	sp,fp
    1af4:	dfc00117 	ldw	ra,4(sp)
    1af8:	df000017 	ldw	fp,0(sp)
    1afc:	dec00204 	addi	sp,sp,8
    1b00:	f800283a 	ret

00001b04 <VGA_Charbuf_Clear>:

/*
 * Clears the character buffer by setting all entries to
 * the ASCII space character.
 */
void VGA_Charbuf_Clear() {
    1b04:	defffe04 	addi	sp,sp,-8
    1b08:	dfc00115 	stw	ra,4(sp)
    1b0c:	df000015 	stw	fp,0(sp)
    1b10:	d839883a 	mov	fp,sp
	memset(charbuf, ' ', (1<<char_wBits)*(1<<char_vBits)*sizeof(uint8_t));
    1b14:	d1277117 	ldw	r4,-25148(gp)
    1b18:	008001c4 	movi	r2,7
    1b1c:	00c00044 	movi	r3,1
    1b20:	1886983a 	sll	r3,r3,r2
    1b24:	00800184 	movi	r2,6
    1b28:	1884983a 	sll	r2,r3,r2
    1b2c:	100d883a 	mov	r6,r2
    1b30:	01400804 	movi	r5,32
    1b34:	00030f40 	call	30f4 <memset>
}
    1b38:	0001883a 	nop
    1b3c:	e037883a 	mov	sp,fp
    1b40:	dfc00117 	ldw	ra,4(sp)
    1b44:	df000017 	ldw	fp,0(sp)
    1b48:	dec00204 	addi	sp,sp,8
    1b4c:	f800283a 	ret

00001b50 <VGA_Charbuf_Char>:
 * Params:
 * 		const char print: ASCII character to be printed
 * 		uint32_t x: X coordinate of the character's position
 * 		uint32_t y: Y coordinate of the character's position
 */
void VGA_Charbuf_Char(const char print, uint32_t x, uint32_t y) {
    1b50:	defffc04 	addi	sp,sp,-16
    1b54:	df000315 	stw	fp,12(sp)
    1b58:	df000304 	addi	fp,sp,12
    1b5c:	2005883a 	mov	r2,r4
    1b60:	e17ffe15 	stw	r5,-8(fp)
    1b64:	e1bfff15 	stw	r6,-4(fp)
    1b68:	e0bffd05 	stb	r2,-12(fp)
	if(x < (1<<char_wBits) && y < (1<<char_vBits)) {
    1b6c:	008001c4 	movi	r2,7
    1b70:	00c00044 	movi	r3,1
    1b74:	1884983a 	sll	r2,r3,r2
    1b78:	1007883a 	mov	r3,r2
    1b7c:	e0bffe17 	ldw	r2,-8(fp)
    1b80:	10c00f2e 	bgeu	r2,r3,1bc0 <VGA_Charbuf_Char+0x70>
    1b84:	00800184 	movi	r2,6
    1b88:	00c00044 	movi	r3,1
    1b8c:	1884983a 	sll	r2,r3,r2
    1b90:	1007883a 	mov	r3,r2
    1b94:	e0bfff17 	ldw	r2,-4(fp)
    1b98:	10c0092e 	bgeu	r2,r3,1bc0 <VGA_Charbuf_Char+0x70>
		charbuf[(y<<char_wBits)+x] = print;
    1b9c:	d0e77117 	ldw	r3,-25148(gp)
    1ba0:	008001c4 	movi	r2,7
    1ba4:	e13fff17 	ldw	r4,-4(fp)
    1ba8:	2088983a 	sll	r4,r4,r2
    1bac:	e0bffe17 	ldw	r2,-8(fp)
    1bb0:	2085883a 	add	r2,r4,r2
    1bb4:	1885883a 	add	r2,r3,r2
    1bb8:	e0fffd03 	ldbu	r3,-12(fp)
    1bbc:	10c00005 	stb	r3,0(r2)
	}
}
    1bc0:	0001883a 	nop
    1bc4:	e037883a 	mov	sp,fp
    1bc8:	df000017 	ldw	fp,0(sp)
    1bcc:	dec00104 	addi	sp,sp,4
    1bd0:	f800283a 	ret

00001bd4 <VGA_Charbuf_String>:
 * row. Does not handle newline chars or tab chars.
 * Params:
 * 		const char* str: string to be printed
 * 		uint32_t x: Starting location x-coordinate
 */
void VGA_Charbuf_String(const char* str, uint32_t x, uint32_t y) {
    1bd4:	defff904 	addi	sp,sp,-28
    1bd8:	dfc00615 	stw	ra,24(sp)
    1bdc:	df000515 	stw	fp,20(sp)
    1be0:	df000504 	addi	fp,sp,20
    1be4:	e13ffd15 	stw	r4,-12(fp)
    1be8:	e17ffe15 	stw	r5,-8(fp)
    1bec:	e1bfff15 	stw	r6,-4(fp)
	uint32_t length = strlen(str);
    1bf0:	e13ffd17 	ldw	r4,-12(fp)
    1bf4:	00034080 	call	3408 <strlen>
    1bf8:	e0bffc15 	stw	r2,-16(fp)

	if((x+length) < (1<<char_wBits) && y < (1<<char_vBits)) {
    1bfc:	e0fffe17 	ldw	r3,-8(fp)
    1c00:	e0bffc17 	ldw	r2,-16(fp)
    1c04:	1887883a 	add	r3,r3,r2
    1c08:	008001c4 	movi	r2,7
    1c0c:	1884d83a 	srl	r2,r3,r2
    1c10:	10001c1e 	bne	r2,zero,1c84 <VGA_Charbuf_String+0xb0>
    1c14:	00800184 	movi	r2,6
    1c18:	00c00044 	movi	r3,1
    1c1c:	1884983a 	sll	r2,r3,r2
    1c20:	1007883a 	mov	r3,r2
    1c24:	e0bfff17 	ldw	r2,-4(fp)
    1c28:	10c0162e 	bgeu	r2,r3,1c84 <VGA_Charbuf_String+0xb0>
		for(int i = 0; i < length; i++) {
    1c2c:	e03ffb15 	stw	zero,-20(fp)
    1c30:	00001106 	br	1c78 <VGA_Charbuf_String+0xa4>
			charbuf[(y<<char_wBits)+(i+x)] = str[i];
    1c34:	d0e77117 	ldw	r3,-25148(gp)
    1c38:	008001c4 	movi	r2,7
    1c3c:	e13fff17 	ldw	r4,-4(fp)
    1c40:	2088983a 	sll	r4,r4,r2
    1c44:	e17ffb17 	ldw	r5,-20(fp)
    1c48:	e0bffe17 	ldw	r2,-8(fp)
    1c4c:	2885883a 	add	r2,r5,r2
    1c50:	2085883a 	add	r2,r4,r2
    1c54:	1885883a 	add	r2,r3,r2
    1c58:	e0fffb17 	ldw	r3,-20(fp)
    1c5c:	e13ffd17 	ldw	r4,-12(fp)
    1c60:	20c7883a 	add	r3,r4,r3
    1c64:	18c00003 	ldbu	r3,0(r3)
    1c68:	10c00005 	stb	r3,0(r2)
 */
void VGA_Charbuf_String(const char* str, uint32_t x, uint32_t y) {
	uint32_t length = strlen(str);

	if((x+length) < (1<<char_wBits) && y < (1<<char_vBits)) {
		for(int i = 0; i < length; i++) {
    1c6c:	e0bffb17 	ldw	r2,-20(fp)
    1c70:	10800044 	addi	r2,r2,1
    1c74:	e0bffb15 	stw	r2,-20(fp)
    1c78:	e0fffb17 	ldw	r3,-20(fp)
    1c7c:	e0bffc17 	ldw	r2,-16(fp)
    1c80:	18bfec36 	bltu	r3,r2,1c34 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152fc34>
			charbuf[(y<<char_wBits)+(i+x)] = str[i];
		}
	}
}
    1c84:	0001883a 	nop
    1c88:	e037883a 	mov	sp,fp
    1c8c:	dfc00117 	ldw	ra,4(sp)
    1c90:	df000017 	ldw	fp,0(sp)
    1c94:	dec00204 	addi	sp,sp,8
    1c98:	f800283a 	ret

00001c9c <VGA_Pixelbuf_Init>:

/*
 * Initializes the VGA screen's pixel buffer. Resolution should
 * be 160x120 pixels, upscaled to 640x480 in hardware.
 */
void VGA_Pixelbuf_Init() {
    1c9c:	defffc04 	addi	sp,sp,-16
    1ca0:	dfc00315 	stw	ra,12(sp)
    1ca4:	df000215 	stw	fp,8(sp)
    1ca8:	df000204 	addi	fp,sp,8
	// Attach the physical component to the struct
	pixelbuf = (VGA_Buff*)VGA_SUBSYSTEM_VGA_PIXEL_DMA_BASE;
    1cac:	00b7ab74 	movhi	r2,57005
    1cb0:	10840004 	addi	r2,r2,4096
    1cb4:	d0a77015 	stw	r2,-25152(gp)

	// Determine X/Y bit depth
	pixel_vBits = (pixelbuf->status >> 24) & 0xFF;
    1cb8:	d0a77017 	ldw	r2,-25152(gp)
    1cbc:	10800317 	ldw	r2,12(r2)
    1cc0:	1004d63a 	srli	r2,r2,24
    1cc4:	d0a77515 	stw	r2,-25132(gp)
	pixel_hBits = (pixelbuf->status >> 16) & 0xFF;
    1cc8:	d0a77017 	ldw	r2,-25152(gp)
    1ccc:	10800317 	ldw	r2,12(r2)
    1cd0:	1004d43a 	srli	r2,r2,16
    1cd4:	10803fcc 	andi	r2,r2,255
    1cd8:	d0a77415 	stw	r2,-25136(gp)

	// Calculate resolution from bit depth
	// Should be 256x128
	pixel_hRes = (1<<pixel_hBits);
    1cdc:	d0a77417 	ldw	r2,-25136(gp)
    1ce0:	00c00044 	movi	r3,1
    1ce4:	1884983a 	sll	r2,r3,r2
    1ce8:	d0a77215 	stw	r2,-25144(gp)
	pixel_vRes = (1<<pixel_vBits);
    1cec:	d0a77517 	ldw	r2,-25132(gp)
    1cf0:	00c00044 	movi	r3,1
    1cf4:	1884983a 	sll	r2,r3,r2
    1cf8:	d0a77315 	stw	r2,-25140(gp)

	numPixels = pixel_hRes*pixel_vRes;
    1cfc:	d0a77217 	ldw	r2,-25144(gp)
    1d00:	d0e77317 	ldw	r3,-25140(gp)
    1d04:	180b883a 	mov	r5,r3
    1d08:	1009883a 	mov	r4,r2
    1d0c:	00020100 	call	2010 <__mulsi3>
    1d10:	d0a77615 	stw	r2,-25128(gp)

	uint16_t* front = malloc(numPixels*sizeof(uint16_t));
    1d14:	d0a77617 	ldw	r2,-25128(gp)
    1d18:	1085883a 	add	r2,r2,r2
    1d1c:	1009883a 	mov	r4,r2
    1d20:	00028c00 	call	28c0 <malloc>
    1d24:	e0bffe15 	stw	r2,-8(fp)
	uint16_t* back = malloc(numPixels*sizeof(uint16_t));
    1d28:	d0a77617 	ldw	r2,-25128(gp)
    1d2c:	1085883a 	add	r2,r2,r2
    1d30:	1009883a 	mov	r4,r2
    1d34:	00028c00 	call	28c0 <malloc>
    1d38:	e0bfff15 	stw	r2,-4(fp)

	// Update the back buffer and swap it into the front
	pixelbuf->bBuffer = (uint32_t)front;
    1d3c:	d0a77017 	ldw	r2,-25152(gp)
    1d40:	e0fffe17 	ldw	r3,-8(fp)
    1d44:	10c00115 	stw	r3,4(r2)
	VGA_Pixelbuf_Swapframes();
    1d48:	0001a540 	call	1a54 <VGA_Pixelbuf_Swapframes>


	// Update the new back buffer
	pixelbuf->bBuffer = (uint32_t)back;
    1d4c:	d0a77017 	ldw	r2,-25152(gp)
    1d50:	e0ffff17 	ldw	r3,-4(fp)
    1d54:	10c00115 	stw	r3,4(r2)
}
    1d58:	0001883a 	nop
    1d5c:	e037883a 	mov	sp,fp
    1d60:	dfc00117 	ldw	ra,4(sp)
    1d64:	df000017 	ldw	fp,0(sp)
    1d68:	dec00204 	addi	sp,sp,8
    1d6c:	f800283a 	ret

00001d70 <VGA_Pixelbuf_Fill>:
 * Automatically swaps buffers.
 * Params:
 * 		uint32_t color: RGB888 or ARGB8888 color value. Converts to RGB565 for display.
 * 						ignores the alpha channel if present.
 */
void VGA_Pixelbuf_Fill(uint32_t color) {
    1d70:	defff904 	addi	sp,sp,-28
    1d74:	dfc00615 	stw	ra,24(sp)
    1d78:	df000515 	stw	fp,20(sp)
    1d7c:	df000504 	addi	fp,sp,20
    1d80:	e13fff15 	stw	r4,-4(fp)
	// Convert the RGB888 color to RGB565
	uint16_t newColor = to565(color);
    1d84:	e13fff17 	ldw	r4,-4(fp)
    1d88:	00019d80 	call	19d8 <to565>
    1d8c:	e0bffd0d 	sth	r2,-12(fp)

	// Get access to the back buffer
	uint16_t* frameBuffer = (uint16_t*)pixelbuf->bBuffer;
    1d90:	d0a77017 	ldw	r2,-25152(gp)
    1d94:	10800117 	ldw	r2,4(r2)
    1d98:	e0bffe15 	stw	r2,-8(fp)

	// Y-loop
	for(int y = 0; y < pixel_vRes; y++) {
    1d9c:	e03ffb15 	stw	zero,-20(fp)
    1da0:	00001606 	br	1dfc <VGA_Pixelbuf_Fill+0x8c>
		// X-loop
		for(int x = 0; x < pixel_hRes; x++) {
    1da4:	e03ffc15 	stw	zero,-16(fp)
    1da8:	00000e06 	br	1de4 <VGA_Pixelbuf_Fill+0x74>

			// Set the current pixel to the new color
			frameBuffer[((y<<pixel_hBits)+x)] = newColor;
    1dac:	d0a77417 	ldw	r2,-25136(gp)
    1db0:	e0fffb17 	ldw	r3,-20(fp)
    1db4:	1886983a 	sll	r3,r3,r2
    1db8:	e0bffc17 	ldw	r2,-16(fp)
    1dbc:	1885883a 	add	r2,r3,r2
    1dc0:	1085883a 	add	r2,r2,r2
    1dc4:	1007883a 	mov	r3,r2
    1dc8:	e0bffe17 	ldw	r2,-8(fp)
    1dcc:	10c5883a 	add	r2,r2,r3
    1dd0:	e0fffd0b 	ldhu	r3,-12(fp)
    1dd4:	10c0000d 	sth	r3,0(r2)
	uint16_t* frameBuffer = (uint16_t*)pixelbuf->bBuffer;

	// Y-loop
	for(int y = 0; y < pixel_vRes; y++) {
		// X-loop
		for(int x = 0; x < pixel_hRes; x++) {
    1dd8:	e0bffc17 	ldw	r2,-16(fp)
    1ddc:	10800044 	addi	r2,r2,1
    1de0:	e0bffc15 	stw	r2,-16(fp)
    1de4:	e0fffc17 	ldw	r3,-16(fp)
    1de8:	d0a77217 	ldw	r2,-25144(gp)
    1dec:	18bfef36 	bltu	r3,r2,1dac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152fdac>

	// Get access to the back buffer
	uint16_t* frameBuffer = (uint16_t*)pixelbuf->bBuffer;

	// Y-loop
	for(int y = 0; y < pixel_vRes; y++) {
    1df0:	e0bffb17 	ldw	r2,-20(fp)
    1df4:	10800044 	addi	r2,r2,1
    1df8:	e0bffb15 	stw	r2,-20(fp)
    1dfc:	e0fffb17 	ldw	r3,-20(fp)
    1e00:	d0a77317 	ldw	r2,-25140(gp)
    1e04:	18bfe736 	bltu	r3,r2,1da4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152fda4>
			frameBuffer[((y<<pixel_hBits)+x)] = newColor;
		}

	}

	VGA_Pixelbuf_Swapframes();
    1e08:	0001a540 	call	1a54 <VGA_Pixelbuf_Swapframes>
}
    1e0c:	0001883a 	nop
    1e10:	e037883a 	mov	sp,fp
    1e14:	dfc00117 	ldw	ra,4(sp)
    1e18:	df000017 	ldw	fp,0(sp)
    1e1c:	dec00204 	addi	sp,sp,8
    1e20:	f800283a 	ret

00001e24 <VGA_Pixelbuf_Pixel>:
 * 		uint32_t x: X coordinate of the target pixel
 * 		uint32_t y: Y coordinate of the target pixel
 * 		uint32_t color: RGB888 or ARGB8888 target color. Will be converted to RGB565 for display.
 * 						Will ignore alpha channel if present.
 */
void VGA_Pixelbuf_Pixel(uint32_t x, uint32_t y, uint32_t color) {
    1e24:	defff904 	addi	sp,sp,-28
    1e28:	dfc00615 	stw	ra,24(sp)
    1e2c:	df000515 	stw	fp,20(sp)
    1e30:	df000504 	addi	fp,sp,20
    1e34:	e13ffd15 	stw	r4,-12(fp)
    1e38:	e17ffe15 	stw	r5,-8(fp)
    1e3c:	e1bfff15 	stw	r6,-4(fp)
	// Dimension Check
	if(x < pixel_hRes && y < pixel_vRes) {
    1e40:	d0a77217 	ldw	r2,-25144(gp)
    1e44:	e0fffd17 	ldw	r3,-12(fp)
    1e48:	1880142e 	bgeu	r3,r2,1e9c <VGA_Pixelbuf_Pixel+0x78>
    1e4c:	d0a77317 	ldw	r2,-25140(gp)
    1e50:	e0fffe17 	ldw	r3,-8(fp)
    1e54:	1880112e 	bgeu	r3,r2,1e9c <VGA_Pixelbuf_Pixel+0x78>
		uint16_t newColor = to565(color);
    1e58:	e13fff17 	ldw	r4,-4(fp)
    1e5c:	00019d80 	call	19d8 <to565>
    1e60:	e0bffb0d 	sth	r2,-20(fp)
		uint16_t* frameBuffer = (uint16_t*)pixelbuf->bBuffer;
    1e64:	d0a77017 	ldw	r2,-25152(gp)
    1e68:	10800117 	ldw	r2,4(r2)
    1e6c:	e0bffc15 	stw	r2,-16(fp)
		frameBuffer[(y<<pixel_hBits)+x] = newColor;
    1e70:	d0a77417 	ldw	r2,-25136(gp)
    1e74:	e0fffe17 	ldw	r3,-8(fp)
    1e78:	1886983a 	sll	r3,r3,r2
    1e7c:	e0bffd17 	ldw	r2,-12(fp)
    1e80:	1885883a 	add	r2,r3,r2
    1e84:	1085883a 	add	r2,r2,r2
    1e88:	1007883a 	mov	r3,r2
    1e8c:	e0bffc17 	ldw	r2,-16(fp)
    1e90:	10c5883a 	add	r2,r2,r3
    1e94:	e0fffb0b 	ldhu	r3,-20(fp)
    1e98:	10c0000d 	sth	r3,0(r2)
	}
}
    1e9c:	0001883a 	nop
    1ea0:	e037883a 	mov	sp,fp
    1ea4:	dfc00117 	ldw	ra,4(sp)
    1ea8:	df000017 	ldw	fp,0(sp)
    1eac:	dec00204 	addi	sp,sp,8
    1eb0:	f800283a 	ret

00001eb4 <VGA_Pixelbuf_Rect>:
 * 		uint32_t xLen: width of the rectangle
 * 		uint32_t yLen: height of the rectangle
 * 		uint32_t color: RGB888 or ARGB8888 color. Will be converted to RGB565 ignoring alpha
 *
 */
void VGA_Pixelbuf_Rect(uint32_t anchorX, uint32_t anchorY, uint32_t xLen, uint32_t yLen, uint32_t Color) {
    1eb4:	defff604 	addi	sp,sp,-40
    1eb8:	dfc00915 	stw	ra,36(sp)
    1ebc:	df000815 	stw	fp,32(sp)
    1ec0:	df000804 	addi	fp,sp,32
    1ec4:	e13ffc15 	stw	r4,-16(fp)
    1ec8:	e17ffd15 	stw	r5,-12(fp)
    1ecc:	e1bffe15 	stw	r6,-8(fp)
    1ed0:	e1ffff15 	stw	r7,-4(fp)
	uint16_t newColor = to565(Color);
    1ed4:	e1000217 	ldw	r4,8(fp)
    1ed8:	00019d80 	call	19d8 <to565>
    1edc:	e0bffa0d 	sth	r2,-24(fp)
	uint16_t* frameBuffer = (uint16_t*)pixelbuf->bBuffer;
    1ee0:	d0a77017 	ldw	r2,-25152(gp)
    1ee4:	10800117 	ldw	r2,4(r2)
    1ee8:	e0bffb15 	stw	r2,-20(fp)

	// Dimension Check
	if(((anchorX+xLen) < pixel_hRes) && ((anchorY+yLen) < pixel_vRes)) {
    1eec:	e0fffc17 	ldw	r3,-16(fp)
    1ef0:	e0bffe17 	ldw	r2,-8(fp)
    1ef4:	1887883a 	add	r3,r3,r2
    1ef8:	d0a77217 	ldw	r2,-25144(gp)
    1efc:	1880262e 	bgeu	r3,r2,1f98 <VGA_Pixelbuf_Rect+0xe4>
    1f00:	e0fffd17 	ldw	r3,-12(fp)
    1f04:	e0bfff17 	ldw	r2,-4(fp)
    1f08:	1887883a 	add	r3,r3,r2
    1f0c:	d0a77317 	ldw	r2,-25140(gp)
    1f10:	1880212e 	bgeu	r3,r2,1f98 <VGA_Pixelbuf_Rect+0xe4>

		for(int y = anchorY; y < (anchorY+yLen); y++) {
    1f14:	e0bffd17 	ldw	r2,-12(fp)
    1f18:	e0bff815 	stw	r2,-32(fp)
    1f1c:	00001906 	br	1f84 <VGA_Pixelbuf_Rect+0xd0>
			for(int x = anchorX; x < (anchorX+xLen); x++) {
    1f20:	e0bffc17 	ldw	r2,-16(fp)
    1f24:	e0bff915 	stw	r2,-28(fp)
    1f28:	00000e06 	br	1f64 <VGA_Pixelbuf_Rect+0xb0>

				frameBuffer[((y<<pixel_hBits)+x)] = newColor;
    1f2c:	d0a77417 	ldw	r2,-25136(gp)
    1f30:	e0fff817 	ldw	r3,-32(fp)
    1f34:	1886983a 	sll	r3,r3,r2
    1f38:	e0bff917 	ldw	r2,-28(fp)
    1f3c:	1885883a 	add	r2,r3,r2
    1f40:	1085883a 	add	r2,r2,r2
    1f44:	1007883a 	mov	r3,r2
    1f48:	e0bffb17 	ldw	r2,-20(fp)
    1f4c:	10c5883a 	add	r2,r2,r3
    1f50:	e0fffa0b 	ldhu	r3,-24(fp)
    1f54:	10c0000d 	sth	r3,0(r2)

	// Dimension Check
	if(((anchorX+xLen) < pixel_hRes) && ((anchorY+yLen) < pixel_vRes)) {

		for(int y = anchorY; y < (anchorY+yLen); y++) {
			for(int x = anchorX; x < (anchorX+xLen); x++) {
    1f58:	e0bff917 	ldw	r2,-28(fp)
    1f5c:	10800044 	addi	r2,r2,1
    1f60:	e0bff915 	stw	r2,-28(fp)
    1f64:	e0fffc17 	ldw	r3,-16(fp)
    1f68:	e0bffe17 	ldw	r2,-8(fp)
    1f6c:	1885883a 	add	r2,r3,r2
    1f70:	e0fff917 	ldw	r3,-28(fp)
    1f74:	18bfed36 	bltu	r3,r2,1f2c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152ff2c>
	uint16_t* frameBuffer = (uint16_t*)pixelbuf->bBuffer;

	// Dimension Check
	if(((anchorX+xLen) < pixel_hRes) && ((anchorY+yLen) < pixel_vRes)) {

		for(int y = anchorY; y < (anchorY+yLen); y++) {
    1f78:	e0bff817 	ldw	r2,-32(fp)
    1f7c:	10800044 	addi	r2,r2,1
    1f80:	e0bff815 	stw	r2,-32(fp)
    1f84:	e0fffd17 	ldw	r3,-12(fp)
    1f88:	e0bfff17 	ldw	r2,-4(fp)
    1f8c:	1885883a 	add	r2,r3,r2
    1f90:	e0fff817 	ldw	r3,-32(fp)
    1f94:	18bfe236 	bltu	r3,r2,1f20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152ff20>

			}
		}
	}

}
    1f98:	0001883a 	nop
    1f9c:	e037883a 	mov	sp,fp
    1fa0:	dfc00117 	ldw	ra,4(sp)
    1fa4:	df000017 	ldw	fp,0(sp)
    1fa8:	dec00204 	addi	sp,sp,8
    1fac:	f800283a 	ret

00001fb0 <__fixunssfsi>:
    1fb0:	defffd04 	addi	sp,sp,-12
    1fb4:	dc000015 	stw	r16,0(sp)
    1fb8:	0413c034 	movhi	r16,20224
    1fbc:	800b883a 	mov	r5,r16
    1fc0:	dc400115 	stw	r17,4(sp)
    1fc4:	dfc00215 	stw	ra,8(sp)
    1fc8:	2023883a 	mov	r17,r4
    1fcc:	00020380 	call	2038 <__gesf2>
    1fd0:	1000070e 	bge	r2,zero,1ff0 <__fixunssfsi+0x40>
    1fd4:	8809883a 	mov	r4,r17
    1fd8:	00025d80 	call	25d8 <__fixsfsi>
    1fdc:	dfc00217 	ldw	ra,8(sp)
    1fe0:	dc400117 	ldw	r17,4(sp)
    1fe4:	dc000017 	ldw	r16,0(sp)
    1fe8:	dec00304 	addi	sp,sp,12
    1fec:	f800283a 	ret
    1ff0:	800b883a 	mov	r5,r16
    1ff4:	8809883a 	mov	r4,r17
    1ff8:	00020f40 	call	20f4 <__subsf3>
    1ffc:	1009883a 	mov	r4,r2
    2000:	00025d80 	call	25d8 <__fixsfsi>
    2004:	00e00034 	movhi	r3,32768
    2008:	10c5883a 	add	r2,r2,r3
    200c:	003ff306 	br	1fdc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2152ffdc>

00002010 <__mulsi3>:
    2010:	0005883a 	mov	r2,zero
    2014:	20000726 	beq	r4,zero,2034 <__mulsi3+0x24>
    2018:	20c0004c 	andi	r3,r4,1
    201c:	2008d07a 	srli	r4,r4,1
    2020:	18000126 	beq	r3,zero,2028 <__mulsi3+0x18>
    2024:	1145883a 	add	r2,r2,r5
    2028:	294b883a 	add	r5,r5,r5
    202c:	203ffa1e 	bne	r4,zero,2018 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530018>
    2030:	f800283a 	ret
    2034:	f800283a 	ret

00002038 <__gesf2>:
    2038:	2004d5fa 	srli	r2,r4,23
    203c:	2806d5fa 	srli	r3,r5,23
    2040:	01802034 	movhi	r6,128
    2044:	31bfffc4 	addi	r6,r6,-1
    2048:	10803fcc 	andi	r2,r2,255
    204c:	01c03fc4 	movi	r7,255
    2050:	3110703a 	and	r8,r6,r4
    2054:	18c03fcc 	andi	r3,r3,255
    2058:	314c703a 	and	r6,r6,r5
    205c:	2008d7fa 	srli	r4,r4,31
    2060:	280ad7fa 	srli	r5,r5,31
    2064:	11c01926 	beq	r2,r7,20cc <__gesf2+0x94>
    2068:	01c03fc4 	movi	r7,255
    206c:	19c00f26 	beq	r3,r7,20ac <__gesf2+0x74>
    2070:	1000061e 	bne	r2,zero,208c <__gesf2+0x54>
    2074:	400f003a 	cmpeq	r7,r8,zero
    2078:	1800071e 	bne	r3,zero,2098 <__gesf2+0x60>
    207c:	3000061e 	bne	r6,zero,2098 <__gesf2+0x60>
    2080:	0005883a 	mov	r2,zero
    2084:	40000e1e 	bne	r8,zero,20c0 <__gesf2+0x88>
    2088:	f800283a 	ret
    208c:	18000a1e 	bne	r3,zero,20b8 <__gesf2+0x80>
    2090:	30000b26 	beq	r6,zero,20c0 <__gesf2+0x88>
    2094:	000f883a 	mov	r7,zero
    2098:	29403fcc 	andi	r5,r5,255
    209c:	38000726 	beq	r7,zero,20bc <__gesf2+0x84>
    20a0:	28000826 	beq	r5,zero,20c4 <__gesf2+0x8c>
    20a4:	00800044 	movi	r2,1
    20a8:	f800283a 	ret
    20ac:	303ff026 	beq	r6,zero,2070 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530070>
    20b0:	00bfff84 	movi	r2,-2
    20b4:	f800283a 	ret
    20b8:	29403fcc 	andi	r5,r5,255
    20bc:	21400526 	beq	r4,r5,20d4 <__gesf2+0x9c>
    20c0:	203ff826 	beq	r4,zero,20a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215300a4>
    20c4:	00bfffc4 	movi	r2,-1
    20c8:	f800283a 	ret
    20cc:	403fe626 	beq	r8,zero,2068 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530068>
    20d0:	003ff706 	br	20b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215300b0>
    20d4:	18bffa16 	blt	r3,r2,20c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215300c0>
    20d8:	10c00216 	blt	r2,r3,20e4 <__gesf2+0xac>
    20dc:	323ff836 	bltu	r6,r8,20c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215300c0>
    20e0:	4180022e 	bgeu	r8,r6,20ec <__gesf2+0xb4>
    20e4:	203fef1e 	bne	r4,zero,20a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215300a4>
    20e8:	003ff606 	br	20c4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215300c4>
    20ec:	0005883a 	mov	r2,zero
    20f0:	f800283a 	ret

000020f4 <__subsf3>:
    20f4:	defffc04 	addi	sp,sp,-16
    20f8:	280cd5fa 	srli	r6,r5,23
    20fc:	dc000015 	stw	r16,0(sp)
    2100:	01c02034 	movhi	r7,128
    2104:	2020d5fa 	srli	r16,r4,23
    2108:	39ffffc4 	addi	r7,r7,-1
    210c:	3906703a 	and	r3,r7,r4
    2110:	dc400115 	stw	r17,4(sp)
    2114:	394e703a 	and	r7,r7,r5
    2118:	2022d7fa 	srli	r17,r4,31
    211c:	dfc00315 	stw	ra,12(sp)
    2120:	dc800215 	stw	r18,8(sp)
    2124:	31803fcc 	andi	r6,r6,255
    2128:	01003fc4 	movi	r4,255
    212c:	84003fcc 	andi	r16,r16,255
    2130:	180690fa 	slli	r3,r3,3
    2134:	2804d7fa 	srli	r2,r5,31
    2138:	380e90fa 	slli	r7,r7,3
    213c:	31006d26 	beq	r6,r4,22f4 <__subsf3+0x200>
    2140:	1080005c 	xori	r2,r2,1
    2144:	8189c83a 	sub	r4,r16,r6
    2148:	14404f26 	beq	r2,r17,2288 <__subsf3+0x194>
    214c:	0100770e 	bge	zero,r4,232c <__subsf3+0x238>
    2150:	30001e1e 	bne	r6,zero,21cc <__subsf3+0xd8>
    2154:	38006a1e 	bne	r7,zero,2300 <__subsf3+0x20c>
    2158:	188001cc 	andi	r2,r3,7
    215c:	10000426 	beq	r2,zero,2170 <__subsf3+0x7c>
    2160:	188003cc 	andi	r2,r3,15
    2164:	01000104 	movi	r4,4
    2168:	11000126 	beq	r2,r4,2170 <__subsf3+0x7c>
    216c:	1907883a 	add	r3,r3,r4
    2170:	1881002c 	andhi	r2,r3,1024
    2174:	10003926 	beq	r2,zero,225c <__subsf3+0x168>
    2178:	84000044 	addi	r16,r16,1
    217c:	00803fc4 	movi	r2,255
    2180:	80807526 	beq	r16,r2,2358 <__subsf3+0x264>
    2184:	180691ba 	slli	r3,r3,6
    2188:	8880004c 	andi	r2,r17,1
    218c:	180ad27a 	srli	r5,r3,9
    2190:	84003fcc 	andi	r16,r16,255
    2194:	800695fa 	slli	r3,r16,23
    2198:	10803fcc 	andi	r2,r2,255
    219c:	01002034 	movhi	r4,128
    21a0:	213fffc4 	addi	r4,r4,-1
    21a4:	100497fa 	slli	r2,r2,31
    21a8:	2920703a 	and	r16,r5,r4
    21ac:	80e0b03a 	or	r16,r16,r3
    21b0:	8084b03a 	or	r2,r16,r2
    21b4:	dfc00317 	ldw	ra,12(sp)
    21b8:	dc800217 	ldw	r18,8(sp)
    21bc:	dc400117 	ldw	r17,4(sp)
    21c0:	dc000017 	ldw	r16,0(sp)
    21c4:	dec00404 	addi	sp,sp,16
    21c8:	f800283a 	ret
    21cc:	00803fc4 	movi	r2,255
    21d0:	80bfe126 	beq	r16,r2,2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    21d4:	39c10034 	orhi	r7,r7,1024
    21d8:	008006c4 	movi	r2,27
    21dc:	11007416 	blt	r2,r4,23b0 <__subsf3+0x2bc>
    21e0:	00800804 	movi	r2,32
    21e4:	1105c83a 	sub	r2,r2,r4
    21e8:	3884983a 	sll	r2,r7,r2
    21ec:	390ed83a 	srl	r7,r7,r4
    21f0:	1008c03a 	cmpne	r4,r2,zero
    21f4:	390eb03a 	or	r7,r7,r4
    21f8:	19c7c83a 	sub	r3,r3,r7
    21fc:	1881002c 	andhi	r2,r3,1024
    2200:	10001426 	beq	r2,zero,2254 <__subsf3+0x160>
    2204:	04810034 	movhi	r18,1024
    2208:	94bfffc4 	addi	r18,r18,-1
    220c:	1ca4703a 	and	r18,r3,r18
    2210:	9009883a 	mov	r4,r18
    2214:	000285c0 	call	285c <__clzsi2>
    2218:	10bffec4 	addi	r2,r2,-5
    221c:	90a4983a 	sll	r18,r18,r2
    2220:	14005116 	blt	r2,r16,2368 <__subsf3+0x274>
    2224:	1405c83a 	sub	r2,r2,r16
    2228:	10c00044 	addi	r3,r2,1
    222c:	00800804 	movi	r2,32
    2230:	10c5c83a 	sub	r2,r2,r3
    2234:	9084983a 	sll	r2,r18,r2
    2238:	90e4d83a 	srl	r18,r18,r3
    223c:	0021883a 	mov	r16,zero
    2240:	1006c03a 	cmpne	r3,r2,zero
    2244:	90c6b03a 	or	r3,r18,r3
    2248:	003fc306 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    224c:	2000e026 	beq	r4,zero,25d0 <__subsf3+0x4dc>
    2250:	2007883a 	mov	r3,r4
    2254:	188001cc 	andi	r2,r3,7
    2258:	103fc11e 	bne	r2,zero,2160 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530160>
    225c:	180ad0fa 	srli	r5,r3,3
    2260:	00c03fc4 	movi	r3,255
    2264:	8880004c 	andi	r2,r17,1
    2268:	80c0031e 	bne	r16,r3,2278 <__subsf3+0x184>
    226c:	28006d26 	beq	r5,zero,2424 <__subsf3+0x330>
    2270:	29401034 	orhi	r5,r5,64
    2274:	043fffc4 	movi	r16,-1
    2278:	00c02034 	movhi	r3,128
    227c:	18ffffc4 	addi	r3,r3,-1
    2280:	28ca703a 	and	r5,r5,r3
    2284:	003fc206 	br	2190 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530190>
    2288:	01003c0e 	bge	zero,r4,237c <__subsf3+0x288>
    228c:	30002126 	beq	r6,zero,2314 <__subsf3+0x220>
    2290:	01403fc4 	movi	r5,255
    2294:	817fb026 	beq	r16,r5,2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2298:	39c10034 	orhi	r7,r7,1024
    229c:	014006c4 	movi	r5,27
    22a0:	29007416 	blt	r5,r4,2474 <__subsf3+0x380>
    22a4:	01400804 	movi	r5,32
    22a8:	290bc83a 	sub	r5,r5,r4
    22ac:	394a983a 	sll	r5,r7,r5
    22b0:	390ed83a 	srl	r7,r7,r4
    22b4:	2808c03a 	cmpne	r4,r5,zero
    22b8:	390eb03a 	or	r7,r7,r4
    22bc:	19c7883a 	add	r3,r3,r7
    22c0:	1901002c 	andhi	r4,r3,1024
    22c4:	20003826 	beq	r4,zero,23a8 <__subsf3+0x2b4>
    22c8:	84000044 	addi	r16,r16,1
    22cc:	01003fc4 	movi	r4,255
    22d0:	81005426 	beq	r16,r4,2424 <__subsf3+0x330>
    22d4:	1023883a 	mov	r17,r2
    22d8:	00bf0034 	movhi	r2,64512
    22dc:	10bfffc4 	addi	r2,r2,-1
    22e0:	1900004c 	andi	r4,r3,1
    22e4:	1886703a 	and	r3,r3,r2
    22e8:	1806d07a 	srli	r3,r3,1
    22ec:	1906b03a 	or	r3,r3,r4
    22f0:	003f9906 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    22f4:	383f9226 	beq	r7,zero,2140 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530140>
    22f8:	10803fcc 	andi	r2,r2,255
    22fc:	003f9106 	br	2144 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530144>
    2300:	213fffc4 	addi	r4,r4,-1
    2304:	203fbc26 	beq	r4,zero,21f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215301f8>
    2308:	00803fc4 	movi	r2,255
    230c:	80bfb21e 	bne	r16,r2,21d8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215301d8>
    2310:	003f9106 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2314:	383f9026 	beq	r7,zero,2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2318:	213fffc4 	addi	r4,r4,-1
    231c:	203fe726 	beq	r4,zero,22bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215302bc>
    2320:	01403fc4 	movi	r5,255
    2324:	817fdd1e 	bne	r16,r5,229c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153029c>
    2328:	003f8b06 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    232c:	2000221e 	bne	r4,zero,23b8 <__subsf3+0x2c4>
    2330:	81000044 	addi	r4,r16,1
    2334:	21003fcc 	andi	r4,r4,255
    2338:	01400044 	movi	r5,1
    233c:	2900470e 	bge	r5,r4,245c <__subsf3+0x368>
    2340:	19e5c83a 	sub	r18,r3,r7
    2344:	9141002c 	andhi	r5,r18,1024
    2348:	28002d26 	beq	r5,zero,2400 <__subsf3+0x30c>
    234c:	38e5c83a 	sub	r18,r7,r3
    2350:	1023883a 	mov	r17,r2
    2354:	003fae06 	br	2210 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530210>
    2358:	8880004c 	andi	r2,r17,1
    235c:	043fffc4 	movi	r16,-1
    2360:	000b883a 	mov	r5,zero
    2364:	003f8a06 	br	2190 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530190>
    2368:	00ff0034 	movhi	r3,64512
    236c:	18ffffc4 	addi	r3,r3,-1
    2370:	80a1c83a 	sub	r16,r16,r2
    2374:	90c6703a 	and	r3,r18,r3
    2378:	003f7706 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    237c:	2000431e 	bne	r4,zero,248c <__subsf3+0x398>
    2380:	81000044 	addi	r4,r16,1
    2384:	21803fcc 	andi	r6,r4,255
    2388:	01400044 	movi	r5,1
    238c:	2980280e 	bge	r5,r6,2430 <__subsf3+0x33c>
    2390:	01403fc4 	movi	r5,255
    2394:	21402326 	beq	r4,r5,2424 <__subsf3+0x330>
    2398:	19c7883a 	add	r3,r3,r7
    239c:	1806d07a 	srli	r3,r3,1
    23a0:	2021883a 	mov	r16,r4
    23a4:	003f6c06 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    23a8:	1023883a 	mov	r17,r2
    23ac:	003fa906 	br	2254 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530254>
    23b0:	01c00044 	movi	r7,1
    23b4:	003f9006 	br	21f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215301f8>
    23b8:	8000151e 	bne	r16,zero,2410 <__subsf3+0x31c>
    23bc:	18002f26 	beq	r3,zero,247c <__subsf3+0x388>
    23c0:	0108303a 	nor	r4,zero,r4
    23c4:	20000a26 	beq	r4,zero,23f0 <__subsf3+0x2fc>
    23c8:	01403fc4 	movi	r5,255
    23cc:	31402b26 	beq	r6,r5,247c <__subsf3+0x388>
    23d0:	014006c4 	movi	r5,27
    23d4:	29006e16 	blt	r5,r4,2590 <__subsf3+0x49c>
    23d8:	01400804 	movi	r5,32
    23dc:	290bc83a 	sub	r5,r5,r4
    23e0:	194a983a 	sll	r5,r3,r5
    23e4:	1908d83a 	srl	r4,r3,r4
    23e8:	2806c03a 	cmpne	r3,r5,zero
    23ec:	20c6b03a 	or	r3,r4,r3
    23f0:	38c7c83a 	sub	r3,r7,r3
    23f4:	3021883a 	mov	r16,r6
    23f8:	1023883a 	mov	r17,r2
    23fc:	003f7f06 	br	21fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215301fc>
    2400:	903f831e 	bne	r18,zero,2210 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530210>
    2404:	0005883a 	mov	r2,zero
    2408:	0021883a 	mov	r16,zero
    240c:	003f9a06 	br	2278 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530278>
    2410:	01403fc4 	movi	r5,255
    2414:	31401926 	beq	r6,r5,247c <__subsf3+0x388>
    2418:	0109c83a 	sub	r4,zero,r4
    241c:	18c10034 	orhi	r3,r3,1024
    2420:	003feb06 	br	23d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215303d0>
    2424:	043fffc4 	movi	r16,-1
    2428:	000b883a 	mov	r5,zero
    242c:	003f5806 	br	2190 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530190>
    2430:	8000481e 	bne	r16,zero,2554 <__subsf3+0x460>
    2434:	18006226 	beq	r3,zero,25c0 <__subsf3+0x4cc>
    2438:	383f4726 	beq	r7,zero,2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    243c:	19c7883a 	add	r3,r3,r7
    2440:	1881002c 	andhi	r2,r3,1024
    2444:	103f8326 	beq	r2,zero,2254 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530254>
    2448:	00bf0034 	movhi	r2,64512
    244c:	10bfffc4 	addi	r2,r2,-1
    2450:	2821883a 	mov	r16,r5
    2454:	1886703a 	and	r3,r3,r2
    2458:	003f3f06 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    245c:	80001c1e 	bne	r16,zero,24d0 <__subsf3+0x3dc>
    2460:	1800261e 	bne	r3,zero,24fc <__subsf3+0x408>
    2464:	38004c26 	beq	r7,zero,2598 <__subsf3+0x4a4>
    2468:	3807883a 	mov	r3,r7
    246c:	1023883a 	mov	r17,r2
    2470:	003f3906 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2474:	01c00044 	movi	r7,1
    2478:	003f9006 	br	22bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215302bc>
    247c:	3807883a 	mov	r3,r7
    2480:	3021883a 	mov	r16,r6
    2484:	1023883a 	mov	r17,r2
    2488:	003f3306 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    248c:	8000161e 	bne	r16,zero,24e8 <__subsf3+0x3f4>
    2490:	18002d26 	beq	r3,zero,2548 <__subsf3+0x454>
    2494:	0108303a 	nor	r4,zero,r4
    2498:	20000a26 	beq	r4,zero,24c4 <__subsf3+0x3d0>
    249c:	01403fc4 	movi	r5,255
    24a0:	31402926 	beq	r6,r5,2548 <__subsf3+0x454>
    24a4:	014006c4 	movi	r5,27
    24a8:	29004716 	blt	r5,r4,25c8 <__subsf3+0x4d4>
    24ac:	01400804 	movi	r5,32
    24b0:	290bc83a 	sub	r5,r5,r4
    24b4:	194a983a 	sll	r5,r3,r5
    24b8:	1908d83a 	srl	r4,r3,r4
    24bc:	2806c03a 	cmpne	r3,r5,zero
    24c0:	20c6b03a 	or	r3,r4,r3
    24c4:	19c7883a 	add	r3,r3,r7
    24c8:	3021883a 	mov	r16,r6
    24cc:	003f7c06 	br	22c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215302c0>
    24d0:	1800111e 	bne	r3,zero,2518 <__subsf3+0x424>
    24d4:	38003326 	beq	r7,zero,25a4 <__subsf3+0x4b0>
    24d8:	3807883a 	mov	r3,r7
    24dc:	1023883a 	mov	r17,r2
    24e0:	04003fc4 	movi	r16,255
    24e4:	003f1c06 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    24e8:	01403fc4 	movi	r5,255
    24ec:	31401626 	beq	r6,r5,2548 <__subsf3+0x454>
    24f0:	0109c83a 	sub	r4,zero,r4
    24f4:	18c10034 	orhi	r3,r3,1024
    24f8:	003fea06 	br	24a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215304a4>
    24fc:	383f1626 	beq	r7,zero,2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2500:	19c9c83a 	sub	r4,r3,r7
    2504:	2141002c 	andhi	r5,r4,1024
    2508:	283f5026 	beq	r5,zero,224c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153024c>
    250c:	38c7c83a 	sub	r3,r7,r3
    2510:	1023883a 	mov	r17,r2
    2514:	003f1006 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2518:	38001b26 	beq	r7,zero,2588 <__subsf3+0x494>
    251c:	1806d0fa 	srli	r3,r3,3
    2520:	1900102c 	andhi	r4,r3,64
    2524:	20000526 	beq	r4,zero,253c <__subsf3+0x448>
    2528:	380ed0fa 	srli	r7,r7,3
    252c:	3900102c 	andhi	r4,r7,64
    2530:	2000021e 	bne	r4,zero,253c <__subsf3+0x448>
    2534:	3807883a 	mov	r3,r7
    2538:	1023883a 	mov	r17,r2
    253c:	180690fa 	slli	r3,r3,3
    2540:	04003fc4 	movi	r16,255
    2544:	003f0406 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2548:	3807883a 	mov	r3,r7
    254c:	3021883a 	mov	r16,r6
    2550:	003f0106 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2554:	18001726 	beq	r3,zero,25b4 <__subsf3+0x4c0>
    2558:	38000b26 	beq	r7,zero,2588 <__subsf3+0x494>
    255c:	1806d0fa 	srli	r3,r3,3
    2560:	1900102c 	andhi	r4,r3,64
    2564:	20000426 	beq	r4,zero,2578 <__subsf3+0x484>
    2568:	380ed0fa 	srli	r7,r7,3
    256c:	3900102c 	andhi	r4,r7,64
    2570:	2000011e 	bne	r4,zero,2578 <__subsf3+0x484>
    2574:	3807883a 	mov	r3,r7
    2578:	180690fa 	slli	r3,r3,3
    257c:	1023883a 	mov	r17,r2
    2580:	04003fc4 	movi	r16,255
    2584:	003ef406 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2588:	04003fc4 	movi	r16,255
    258c:	003ef206 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    2590:	00c00044 	movi	r3,1
    2594:	003f9606 	br	23f0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215303f0>
    2598:	000b883a 	mov	r5,zero
    259c:	0005883a 	mov	r2,zero
    25a0:	003f3506 	br	2278 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530278>
    25a4:	01402034 	movhi	r5,128
    25a8:	297fffc4 	addi	r5,r5,-1
    25ac:	0005883a 	mov	r2,zero
    25b0:	003f2f06 	br	2270 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530270>
    25b4:	3807883a 	mov	r3,r7
    25b8:	04003fc4 	movi	r16,255
    25bc:	003ee606 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    25c0:	3807883a 	mov	r3,r7
    25c4:	003ee406 	br	2158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530158>
    25c8:	00c00044 	movi	r3,1
    25cc:	003fbd06 	br	24c4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215304c4>
    25d0:	0005883a 	mov	r2,zero
    25d4:	003f2806 	br	2278 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530278>

000025d8 <__fixsfsi>:
    25d8:	200ad5fa 	srli	r5,r4,23
    25dc:	00c02034 	movhi	r3,128
    25e0:	18ffffc4 	addi	r3,r3,-1
    25e4:	29403fcc 	andi	r5,r5,255
    25e8:	00801f84 	movi	r2,126
    25ec:	1906703a 	and	r3,r3,r4
    25f0:	2008d7fa 	srli	r4,r4,31
    25f4:	11400e0e 	bge	r2,r5,2630 <__fixsfsi+0x58>
    25f8:	00802744 	movi	r2,157
    25fc:	11400816 	blt	r2,r5,2620 <__fixsfsi+0x48>
    2600:	00802544 	movi	r2,149
    2604:	18c02034 	orhi	r3,r3,128
    2608:	11400b0e 	bge	r2,r5,2638 <__fixsfsi+0x60>
    260c:	28bfda84 	addi	r2,r5,-150
    2610:	1884983a 	sll	r2,r3,r2
    2614:	20000726 	beq	r4,zero,2634 <__fixsfsi+0x5c>
    2618:	0085c83a 	sub	r2,zero,r2
    261c:	f800283a 	ret
    2620:	00a00034 	movhi	r2,32768
    2624:	10bfffc4 	addi	r2,r2,-1
    2628:	2085883a 	add	r2,r4,r2
    262c:	f800283a 	ret
    2630:	0005883a 	mov	r2,zero
    2634:	f800283a 	ret
    2638:	00802584 	movi	r2,150
    263c:	1145c83a 	sub	r2,r2,r5
    2640:	1884d83a 	srl	r2,r3,r2
    2644:	003ff306 	br	2614 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530614>

00002648 <__floatsisf>:
    2648:	defffd04 	addi	sp,sp,-12
    264c:	dfc00215 	stw	ra,8(sp)
    2650:	dc400115 	stw	r17,4(sp)
    2654:	dc000015 	stw	r16,0(sp)
    2658:	20003526 	beq	r4,zero,2730 <__floatsisf+0xe8>
    265c:	2021883a 	mov	r16,r4
    2660:	2022d7fa 	srli	r17,r4,31
    2664:	20003616 	blt	r4,zero,2740 <__floatsisf+0xf8>
    2668:	8009883a 	mov	r4,r16
    266c:	000285c0 	call	285c <__clzsi2>
    2670:	00c02784 	movi	r3,158
    2674:	1887c83a 	sub	r3,r3,r2
    2678:	01002584 	movi	r4,150
    267c:	20c01416 	blt	r4,r3,26d0 <__floatsisf+0x88>
    2680:	20c9c83a 	sub	r4,r4,r3
    2684:	8120983a 	sll	r16,r16,r4
    2688:	00802034 	movhi	r2,128
    268c:	10bfffc4 	addi	r2,r2,-1
    2690:	8809883a 	mov	r4,r17
    2694:	80a0703a 	and	r16,r16,r2
    2698:	18803fcc 	andi	r2,r3,255
    269c:	100695fa 	slli	r3,r2,23
    26a0:	20803fcc 	andi	r2,r4,255
    26a4:	100897fa 	slli	r4,r2,31
    26a8:	00802034 	movhi	r2,128
    26ac:	10bfffc4 	addi	r2,r2,-1
    26b0:	8084703a 	and	r2,r16,r2
    26b4:	10c4b03a 	or	r2,r2,r3
    26b8:	1104b03a 	or	r2,r2,r4
    26bc:	dfc00217 	ldw	ra,8(sp)
    26c0:	dc400117 	ldw	r17,4(sp)
    26c4:	dc000017 	ldw	r16,0(sp)
    26c8:	dec00304 	addi	sp,sp,12
    26cc:	f800283a 	ret
    26d0:	01002644 	movi	r4,153
    26d4:	20c01c16 	blt	r4,r3,2748 <__floatsisf+0x100>
    26d8:	20c9c83a 	sub	r4,r4,r3
    26dc:	8120983a 	sll	r16,r16,r4
    26e0:	013f0034 	movhi	r4,64512
    26e4:	213fffc4 	addi	r4,r4,-1
    26e8:	814001cc 	andi	r5,r16,7
    26ec:	8108703a 	and	r4,r16,r4
    26f0:	28000426 	beq	r5,zero,2704 <__floatsisf+0xbc>
    26f4:	840003cc 	andi	r16,r16,15
    26f8:	01400104 	movi	r5,4
    26fc:	81400126 	beq	r16,r5,2704 <__floatsisf+0xbc>
    2700:	2149883a 	add	r4,r4,r5
    2704:	2141002c 	andhi	r5,r4,1024
    2708:	28000526 	beq	r5,zero,2720 <__floatsisf+0xd8>
    270c:	00c027c4 	movi	r3,159
    2710:	1887c83a 	sub	r3,r3,r2
    2714:	00bf0034 	movhi	r2,64512
    2718:	10bfffc4 	addi	r2,r2,-1
    271c:	2088703a 	and	r4,r4,r2
    2720:	202091ba 	slli	r16,r4,6
    2724:	8809883a 	mov	r4,r17
    2728:	8020d27a 	srli	r16,r16,9
    272c:	003fda06 	br	2698 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530698>
    2730:	0009883a 	mov	r4,zero
    2734:	0007883a 	mov	r3,zero
    2738:	0021883a 	mov	r16,zero
    273c:	003fd606 	br	2698 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530698>
    2740:	0121c83a 	sub	r16,zero,r4
    2744:	003fc806 	br	2668 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530668>
    2748:	01002e44 	movi	r4,185
    274c:	20c9c83a 	sub	r4,r4,r3
    2750:	01400144 	movi	r5,5
    2754:	8108983a 	sll	r4,r16,r4
    2758:	288bc83a 	sub	r5,r5,r2
    275c:	8160d83a 	srl	r16,r16,r5
    2760:	2008c03a 	cmpne	r4,r4,zero
    2764:	8120b03a 	or	r16,r16,r4
    2768:	003fdd06 	br	26e0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215306e0>

0000276c <__floatunsisf>:
    276c:	defffe04 	addi	sp,sp,-8
    2770:	dfc00115 	stw	ra,4(sp)
    2774:	dc000015 	stw	r16,0(sp)
    2778:	20002c26 	beq	r4,zero,282c <__floatunsisf+0xc0>
    277c:	2021883a 	mov	r16,r4
    2780:	000285c0 	call	285c <__clzsi2>
    2784:	00c02784 	movi	r3,158
    2788:	1887c83a 	sub	r3,r3,r2
    278c:	01002584 	movi	r4,150
    2790:	20c00f16 	blt	r4,r3,27d0 <__floatunsisf+0x64>
    2794:	20c9c83a 	sub	r4,r4,r3
    2798:	8108983a 	sll	r4,r16,r4
    279c:	00802034 	movhi	r2,128
    27a0:	10bfffc4 	addi	r2,r2,-1
    27a4:	2088703a 	and	r4,r4,r2
    27a8:	18803fcc 	andi	r2,r3,255
    27ac:	100695fa 	slli	r3,r2,23
    27b0:	00802034 	movhi	r2,128
    27b4:	10bfffc4 	addi	r2,r2,-1
    27b8:	2084703a 	and	r2,r4,r2
    27bc:	10c4b03a 	or	r2,r2,r3
    27c0:	dfc00117 	ldw	ra,4(sp)
    27c4:	dc000017 	ldw	r16,0(sp)
    27c8:	dec00204 	addi	sp,sp,8
    27cc:	f800283a 	ret
    27d0:	01002644 	movi	r4,153
    27d4:	20c01816 	blt	r4,r3,2838 <__floatunsisf+0xcc>
    27d8:	20c9c83a 	sub	r4,r4,r3
    27dc:	8108983a 	sll	r4,r16,r4
    27e0:	017f0034 	movhi	r5,64512
    27e4:	297fffc4 	addi	r5,r5,-1
    27e8:	218001cc 	andi	r6,r4,7
    27ec:	214a703a 	and	r5,r4,r5
    27f0:	30000426 	beq	r6,zero,2804 <__floatunsisf+0x98>
    27f4:	210003cc 	andi	r4,r4,15
    27f8:	01800104 	movi	r6,4
    27fc:	21800126 	beq	r4,r6,2804 <__floatunsisf+0x98>
    2800:	298b883a 	add	r5,r5,r6
    2804:	2901002c 	andhi	r4,r5,1024
    2808:	20000526 	beq	r4,zero,2820 <__floatunsisf+0xb4>
    280c:	00c027c4 	movi	r3,159
    2810:	1887c83a 	sub	r3,r3,r2
    2814:	00bf0034 	movhi	r2,64512
    2818:	10bfffc4 	addi	r2,r2,-1
    281c:	288a703a 	and	r5,r5,r2
    2820:	280891ba 	slli	r4,r5,6
    2824:	2008d27a 	srli	r4,r4,9
    2828:	003fdf06 	br	27a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215307a8>
    282c:	0007883a 	mov	r3,zero
    2830:	0009883a 	mov	r4,zero
    2834:	003fdc06 	br	27a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215307a8>
    2838:	01402e44 	movi	r5,185
    283c:	28cbc83a 	sub	r5,r5,r3
    2840:	01000144 	movi	r4,5
    2844:	2089c83a 	sub	r4,r4,r2
    2848:	814a983a 	sll	r5,r16,r5
    284c:	8108d83a 	srl	r4,r16,r4
    2850:	2820c03a 	cmpne	r16,r5,zero
    2854:	2408b03a 	or	r4,r4,r16
    2858:	003fe106 	br	27e0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215307e0>

0000285c <__clzsi2>:
    285c:	00bfffd4 	movui	r2,65535
    2860:	11000536 	bltu	r2,r4,2878 <__clzsi2+0x1c>
    2864:	00803fc4 	movi	r2,255
    2868:	11000f36 	bltu	r2,r4,28a8 <__clzsi2+0x4c>
    286c:	00800804 	movi	r2,32
    2870:	0007883a 	mov	r3,zero
    2874:	00000506 	br	288c <__clzsi2+0x30>
    2878:	00804034 	movhi	r2,256
    287c:	10bfffc4 	addi	r2,r2,-1
    2880:	11000c2e 	bgeu	r2,r4,28b4 <__clzsi2+0x58>
    2884:	00800204 	movi	r2,8
    2888:	00c00604 	movi	r3,24
    288c:	20c8d83a 	srl	r4,r4,r3
    2890:	00c00074 	movhi	r3,1
    2894:	18d34684 	addi	r3,r3,19738
    2898:	1909883a 	add	r4,r3,r4
    289c:	20c00003 	ldbu	r3,0(r4)
    28a0:	10c5c83a 	sub	r2,r2,r3
    28a4:	f800283a 	ret
    28a8:	00800604 	movi	r2,24
    28ac:	00c00204 	movi	r3,8
    28b0:	003ff606 	br	288c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153088c>
    28b4:	00800404 	movi	r2,16
    28b8:	1007883a 	mov	r3,r2
    28bc:	003ff306 	br	288c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153088c>

000028c0 <malloc>:
    28c0:	00800074 	movhi	r2,1
    28c4:	109b8d04 	addi	r2,r2,28212
    28c8:	200b883a 	mov	r5,r4
    28cc:	11000017 	ldw	r4,0(r2)
    28d0:	00028e81 	jmpi	28e8 <_malloc_r>

000028d4 <free>:
    28d4:	00800074 	movhi	r2,1
    28d8:	109b8d04 	addi	r2,r2,28212
    28dc:	200b883a 	mov	r5,r4
    28e0:	11000017 	ldw	r4,0(r2)
    28e4:	00074e01 	jmpi	74e0 <_free_r>

000028e8 <_malloc_r>:
    28e8:	defff504 	addi	sp,sp,-44
    28ec:	dc800315 	stw	r18,12(sp)
    28f0:	dfc00a15 	stw	ra,40(sp)
    28f4:	df000915 	stw	fp,36(sp)
    28f8:	ddc00815 	stw	r23,32(sp)
    28fc:	dd800715 	stw	r22,28(sp)
    2900:	dd400615 	stw	r21,24(sp)
    2904:	dd000515 	stw	r20,20(sp)
    2908:	dcc00415 	stw	r19,16(sp)
    290c:	dc400215 	stw	r17,8(sp)
    2910:	dc000115 	stw	r16,4(sp)
    2914:	288002c4 	addi	r2,r5,11
    2918:	00c00584 	movi	r3,22
    291c:	2025883a 	mov	r18,r4
    2920:	18807f2e 	bgeu	r3,r2,2b20 <_malloc_r+0x238>
    2924:	047ffe04 	movi	r17,-8
    2928:	1462703a 	and	r17,r2,r17
    292c:	8800a316 	blt	r17,zero,2bbc <_malloc_r+0x2d4>
    2930:	8940a236 	bltu	r17,r5,2bbc <_malloc_r+0x2d4>
    2934:	000f8680 	call	f868 <__malloc_lock>
    2938:	00807dc4 	movi	r2,503
    293c:	1441e92e 	bgeu	r2,r17,30e4 <_malloc_r+0x7fc>
    2940:	8804d27a 	srli	r2,r17,9
    2944:	1000a126 	beq	r2,zero,2bcc <_malloc_r+0x2e4>
    2948:	00c00104 	movi	r3,4
    294c:	18811e36 	bltu	r3,r2,2dc8 <_malloc_r+0x4e0>
    2950:	8804d1ba 	srli	r2,r17,6
    2954:	12000e44 	addi	r8,r2,57
    2958:	11c00e04 	addi	r7,r2,56
    295c:	4209883a 	add	r4,r8,r8
    2960:	04c00074 	movhi	r19,1
    2964:	2109883a 	add	r4,r4,r4
    2968:	9cd45304 	addi	r19,r19,20812
    296c:	2109883a 	add	r4,r4,r4
    2970:	9909883a 	add	r4,r19,r4
    2974:	24000117 	ldw	r16,4(r4)
    2978:	213ffe04 	addi	r4,r4,-8
    297c:	24009726 	beq	r4,r16,2bdc <_malloc_r+0x2f4>
    2980:	80800117 	ldw	r2,4(r16)
    2984:	01bfff04 	movi	r6,-4
    2988:	014003c4 	movi	r5,15
    298c:	1184703a 	and	r2,r2,r6
    2990:	1447c83a 	sub	r3,r2,r17
    2994:	28c00716 	blt	r5,r3,29b4 <_malloc_r+0xcc>
    2998:	1800920e 	bge	r3,zero,2be4 <_malloc_r+0x2fc>
    299c:	84000317 	ldw	r16,12(r16)
    29a0:	24008e26 	beq	r4,r16,2bdc <_malloc_r+0x2f4>
    29a4:	80800117 	ldw	r2,4(r16)
    29a8:	1184703a 	and	r2,r2,r6
    29ac:	1447c83a 	sub	r3,r2,r17
    29b0:	28fff90e 	bge	r5,r3,2998 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530998>
    29b4:	3809883a 	mov	r4,r7
    29b8:	01800074 	movhi	r6,1
    29bc:	9c000417 	ldw	r16,16(r19)
    29c0:	31945304 	addi	r6,r6,20812
    29c4:	32000204 	addi	r8,r6,8
    29c8:	82013426 	beq	r16,r8,2e9c <_malloc_r+0x5b4>
    29cc:	80c00117 	ldw	r3,4(r16)
    29d0:	00bfff04 	movi	r2,-4
    29d4:	188e703a 	and	r7,r3,r2
    29d8:	3c45c83a 	sub	r2,r7,r17
    29dc:	00c003c4 	movi	r3,15
    29e0:	18811f16 	blt	r3,r2,2e60 <_malloc_r+0x578>
    29e4:	32000515 	stw	r8,20(r6)
    29e8:	32000415 	stw	r8,16(r6)
    29ec:	10007f0e 	bge	r2,zero,2bec <_malloc_r+0x304>
    29f0:	00807fc4 	movi	r2,511
    29f4:	11c0fd36 	bltu	r2,r7,2dec <_malloc_r+0x504>
    29f8:	3806d0fa 	srli	r3,r7,3
    29fc:	01c00044 	movi	r7,1
    2a00:	30800117 	ldw	r2,4(r6)
    2a04:	19400044 	addi	r5,r3,1
    2a08:	294b883a 	add	r5,r5,r5
    2a0c:	1807d0ba 	srai	r3,r3,2
    2a10:	294b883a 	add	r5,r5,r5
    2a14:	294b883a 	add	r5,r5,r5
    2a18:	298b883a 	add	r5,r5,r6
    2a1c:	38c6983a 	sll	r3,r7,r3
    2a20:	29c00017 	ldw	r7,0(r5)
    2a24:	2a7ffe04 	addi	r9,r5,-8
    2a28:	1886b03a 	or	r3,r3,r2
    2a2c:	82400315 	stw	r9,12(r16)
    2a30:	81c00215 	stw	r7,8(r16)
    2a34:	30c00115 	stw	r3,4(r6)
    2a38:	2c000015 	stw	r16,0(r5)
    2a3c:	3c000315 	stw	r16,12(r7)
    2a40:	2005d0ba 	srai	r2,r4,2
    2a44:	01400044 	movi	r5,1
    2a48:	288a983a 	sll	r5,r5,r2
    2a4c:	19406f36 	bltu	r3,r5,2c0c <_malloc_r+0x324>
    2a50:	28c4703a 	and	r2,r5,r3
    2a54:	10000a1e 	bne	r2,zero,2a80 <_malloc_r+0x198>
    2a58:	00bfff04 	movi	r2,-4
    2a5c:	294b883a 	add	r5,r5,r5
    2a60:	2088703a 	and	r4,r4,r2
    2a64:	28c4703a 	and	r2,r5,r3
    2a68:	21000104 	addi	r4,r4,4
    2a6c:	1000041e 	bne	r2,zero,2a80 <_malloc_r+0x198>
    2a70:	294b883a 	add	r5,r5,r5
    2a74:	28c4703a 	and	r2,r5,r3
    2a78:	21000104 	addi	r4,r4,4
    2a7c:	103ffc26 	beq	r2,zero,2a70 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530a70>
    2a80:	02bfff04 	movi	r10,-4
    2a84:	024003c4 	movi	r9,15
    2a88:	21800044 	addi	r6,r4,1
    2a8c:	318d883a 	add	r6,r6,r6
    2a90:	318d883a 	add	r6,r6,r6
    2a94:	318d883a 	add	r6,r6,r6
    2a98:	998d883a 	add	r6,r19,r6
    2a9c:	333ffe04 	addi	r12,r6,-8
    2aa0:	2017883a 	mov	r11,r4
    2aa4:	31800104 	addi	r6,r6,4
    2aa8:	34000017 	ldw	r16,0(r6)
    2aac:	31fffd04 	addi	r7,r6,-12
    2ab0:	81c0041e 	bne	r16,r7,2ac4 <_malloc_r+0x1dc>
    2ab4:	0000fb06 	br	2ea4 <_malloc_r+0x5bc>
    2ab8:	1801030e 	bge	r3,zero,2ec8 <_malloc_r+0x5e0>
    2abc:	84000317 	ldw	r16,12(r16)
    2ac0:	81c0f826 	beq	r16,r7,2ea4 <_malloc_r+0x5bc>
    2ac4:	80800117 	ldw	r2,4(r16)
    2ac8:	1284703a 	and	r2,r2,r10
    2acc:	1447c83a 	sub	r3,r2,r17
    2ad0:	48fff90e 	bge	r9,r3,2ab8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530ab8>
    2ad4:	80800317 	ldw	r2,12(r16)
    2ad8:	81000217 	ldw	r4,8(r16)
    2adc:	89400054 	ori	r5,r17,1
    2ae0:	81400115 	stw	r5,4(r16)
    2ae4:	20800315 	stw	r2,12(r4)
    2ae8:	11000215 	stw	r4,8(r2)
    2aec:	8463883a 	add	r17,r16,r17
    2af0:	9c400515 	stw	r17,20(r19)
    2af4:	9c400415 	stw	r17,16(r19)
    2af8:	18800054 	ori	r2,r3,1
    2afc:	88800115 	stw	r2,4(r17)
    2b00:	8a000315 	stw	r8,12(r17)
    2b04:	8a000215 	stw	r8,8(r17)
    2b08:	88e3883a 	add	r17,r17,r3
    2b0c:	88c00015 	stw	r3,0(r17)
    2b10:	9009883a 	mov	r4,r18
    2b14:	000f88c0 	call	f88c <__malloc_unlock>
    2b18:	80800204 	addi	r2,r16,8
    2b1c:	00001b06 	br	2b8c <_malloc_r+0x2a4>
    2b20:	04400404 	movi	r17,16
    2b24:	89402536 	bltu	r17,r5,2bbc <_malloc_r+0x2d4>
    2b28:	000f8680 	call	f868 <__malloc_lock>
    2b2c:	00800184 	movi	r2,6
    2b30:	01000084 	movi	r4,2
    2b34:	04c00074 	movhi	r19,1
    2b38:	1085883a 	add	r2,r2,r2
    2b3c:	9cd45304 	addi	r19,r19,20812
    2b40:	1085883a 	add	r2,r2,r2
    2b44:	9885883a 	add	r2,r19,r2
    2b48:	14000117 	ldw	r16,4(r2)
    2b4c:	10fffe04 	addi	r3,r2,-8
    2b50:	80c0d926 	beq	r16,r3,2eb8 <_malloc_r+0x5d0>
    2b54:	80c00117 	ldw	r3,4(r16)
    2b58:	81000317 	ldw	r4,12(r16)
    2b5c:	00bfff04 	movi	r2,-4
    2b60:	1884703a 	and	r2,r3,r2
    2b64:	81400217 	ldw	r5,8(r16)
    2b68:	8085883a 	add	r2,r16,r2
    2b6c:	10c00117 	ldw	r3,4(r2)
    2b70:	29000315 	stw	r4,12(r5)
    2b74:	21400215 	stw	r5,8(r4)
    2b78:	18c00054 	ori	r3,r3,1
    2b7c:	10c00115 	stw	r3,4(r2)
    2b80:	9009883a 	mov	r4,r18
    2b84:	000f88c0 	call	f88c <__malloc_unlock>
    2b88:	80800204 	addi	r2,r16,8
    2b8c:	dfc00a17 	ldw	ra,40(sp)
    2b90:	df000917 	ldw	fp,36(sp)
    2b94:	ddc00817 	ldw	r23,32(sp)
    2b98:	dd800717 	ldw	r22,28(sp)
    2b9c:	dd400617 	ldw	r21,24(sp)
    2ba0:	dd000517 	ldw	r20,20(sp)
    2ba4:	dcc00417 	ldw	r19,16(sp)
    2ba8:	dc800317 	ldw	r18,12(sp)
    2bac:	dc400217 	ldw	r17,8(sp)
    2bb0:	dc000117 	ldw	r16,4(sp)
    2bb4:	dec00b04 	addi	sp,sp,44
    2bb8:	f800283a 	ret
    2bbc:	00800304 	movi	r2,12
    2bc0:	90800015 	stw	r2,0(r18)
    2bc4:	0005883a 	mov	r2,zero
    2bc8:	003ff006 	br	2b8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530b8c>
    2bcc:	01002004 	movi	r4,128
    2bd0:	02001004 	movi	r8,64
    2bd4:	01c00fc4 	movi	r7,63
    2bd8:	003f6106 	br	2960 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530960>
    2bdc:	4009883a 	mov	r4,r8
    2be0:	003f7506 	br	29b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215309b8>
    2be4:	81000317 	ldw	r4,12(r16)
    2be8:	003fde06 	br	2b64 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530b64>
    2bec:	81c5883a 	add	r2,r16,r7
    2bf0:	11400117 	ldw	r5,4(r2)
    2bf4:	9009883a 	mov	r4,r18
    2bf8:	29400054 	ori	r5,r5,1
    2bfc:	11400115 	stw	r5,4(r2)
    2c00:	000f88c0 	call	f88c <__malloc_unlock>
    2c04:	80800204 	addi	r2,r16,8
    2c08:	003fe006 	br	2b8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530b8c>
    2c0c:	9c000217 	ldw	r16,8(r19)
    2c10:	00bfff04 	movi	r2,-4
    2c14:	85800117 	ldw	r22,4(r16)
    2c18:	b0ac703a 	and	r22,r22,r2
    2c1c:	b4400336 	bltu	r22,r17,2c2c <_malloc_r+0x344>
    2c20:	b445c83a 	sub	r2,r22,r17
    2c24:	00c003c4 	movi	r3,15
    2c28:	18805d16 	blt	r3,r2,2da0 <_malloc_r+0x4b8>
    2c2c:	05c00074 	movhi	r23,1
    2c30:	008000b4 	movhi	r2,2
    2c34:	10a2f904 	addi	r2,r2,-29724
    2c38:	bddb8a04 	addi	r23,r23,28200
    2c3c:	15400017 	ldw	r21,0(r2)
    2c40:	b8c00017 	ldw	r3,0(r23)
    2c44:	00bfffc4 	movi	r2,-1
    2c48:	858d883a 	add	r6,r16,r22
    2c4c:	8d6b883a 	add	r21,r17,r21
    2c50:	1880ea26 	beq	r3,r2,2ffc <_malloc_r+0x714>
    2c54:	ad4403c4 	addi	r21,r21,4111
    2c58:	00bc0004 	movi	r2,-4096
    2c5c:	a8aa703a 	and	r21,r21,r2
    2c60:	a80b883a 	mov	r5,r21
    2c64:	9009883a 	mov	r4,r18
    2c68:	d9800015 	stw	r6,0(sp)
    2c6c:	00032f00 	call	32f0 <_sbrk_r>
    2c70:	1029883a 	mov	r20,r2
    2c74:	00bfffc4 	movi	r2,-1
    2c78:	d9800017 	ldw	r6,0(sp)
    2c7c:	a080e826 	beq	r20,r2,3020 <_malloc_r+0x738>
    2c80:	a180a636 	bltu	r20,r6,2f1c <_malloc_r+0x634>
    2c84:	070000b4 	movhi	fp,2
    2c88:	e7230504 	addi	fp,fp,-29676
    2c8c:	e0800017 	ldw	r2,0(fp)
    2c90:	a887883a 	add	r3,r21,r2
    2c94:	e0c00015 	stw	r3,0(fp)
    2c98:	3500e626 	beq	r6,r20,3034 <_malloc_r+0x74c>
    2c9c:	b9000017 	ldw	r4,0(r23)
    2ca0:	00bfffc4 	movi	r2,-1
    2ca4:	2080ee26 	beq	r4,r2,3060 <_malloc_r+0x778>
    2ca8:	a185c83a 	sub	r2,r20,r6
    2cac:	10c5883a 	add	r2,r2,r3
    2cb0:	e0800015 	stw	r2,0(fp)
    2cb4:	a0c001cc 	andi	r3,r20,7
    2cb8:	1800bc26 	beq	r3,zero,2fac <_malloc_r+0x6c4>
    2cbc:	a0e9c83a 	sub	r20,r20,r3
    2cc0:	00840204 	movi	r2,4104
    2cc4:	a5000204 	addi	r20,r20,8
    2cc8:	10c7c83a 	sub	r3,r2,r3
    2ccc:	a545883a 	add	r2,r20,r21
    2cd0:	1083ffcc 	andi	r2,r2,4095
    2cd4:	18abc83a 	sub	r21,r3,r2
    2cd8:	a80b883a 	mov	r5,r21
    2cdc:	9009883a 	mov	r4,r18
    2ce0:	00032f00 	call	32f0 <_sbrk_r>
    2ce4:	00ffffc4 	movi	r3,-1
    2ce8:	10c0e126 	beq	r2,r3,3070 <_malloc_r+0x788>
    2cec:	1505c83a 	sub	r2,r2,r20
    2cf0:	1545883a 	add	r2,r2,r21
    2cf4:	10800054 	ori	r2,r2,1
    2cf8:	e0c00017 	ldw	r3,0(fp)
    2cfc:	9d000215 	stw	r20,8(r19)
    2d00:	a0800115 	stw	r2,4(r20)
    2d04:	a8c7883a 	add	r3,r21,r3
    2d08:	e0c00015 	stw	r3,0(fp)
    2d0c:	84c00e26 	beq	r16,r19,2d48 <_malloc_r+0x460>
    2d10:	018003c4 	movi	r6,15
    2d14:	3580a72e 	bgeu	r6,r22,2fb4 <_malloc_r+0x6cc>
    2d18:	81400117 	ldw	r5,4(r16)
    2d1c:	013ffe04 	movi	r4,-8
    2d20:	b0bffd04 	addi	r2,r22,-12
    2d24:	1104703a 	and	r2,r2,r4
    2d28:	2900004c 	andi	r4,r5,1
    2d2c:	2088b03a 	or	r4,r4,r2
    2d30:	81000115 	stw	r4,4(r16)
    2d34:	01400144 	movi	r5,5
    2d38:	8089883a 	add	r4,r16,r2
    2d3c:	21400115 	stw	r5,4(r4)
    2d40:	21400215 	stw	r5,8(r4)
    2d44:	3080cd36 	bltu	r6,r2,307c <_malloc_r+0x794>
    2d48:	008000b4 	movhi	r2,2
    2d4c:	10a2f804 	addi	r2,r2,-29728
    2d50:	11000017 	ldw	r4,0(r2)
    2d54:	20c0012e 	bgeu	r4,r3,2d5c <_malloc_r+0x474>
    2d58:	10c00015 	stw	r3,0(r2)
    2d5c:	008000b4 	movhi	r2,2
    2d60:	10a2f704 	addi	r2,r2,-29732
    2d64:	11000017 	ldw	r4,0(r2)
    2d68:	9c000217 	ldw	r16,8(r19)
    2d6c:	20c0012e 	bgeu	r4,r3,2d74 <_malloc_r+0x48c>
    2d70:	10c00015 	stw	r3,0(r2)
    2d74:	80c00117 	ldw	r3,4(r16)
    2d78:	00bfff04 	movi	r2,-4
    2d7c:	1886703a 	and	r3,r3,r2
    2d80:	1c45c83a 	sub	r2,r3,r17
    2d84:	1c400236 	bltu	r3,r17,2d90 <_malloc_r+0x4a8>
    2d88:	00c003c4 	movi	r3,15
    2d8c:	18800416 	blt	r3,r2,2da0 <_malloc_r+0x4b8>
    2d90:	9009883a 	mov	r4,r18
    2d94:	000f88c0 	call	f88c <__malloc_unlock>
    2d98:	0005883a 	mov	r2,zero
    2d9c:	003f7b06 	br	2b8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530b8c>
    2da0:	88c00054 	ori	r3,r17,1
    2da4:	80c00115 	stw	r3,4(r16)
    2da8:	8463883a 	add	r17,r16,r17
    2dac:	10800054 	ori	r2,r2,1
    2db0:	9c400215 	stw	r17,8(r19)
    2db4:	88800115 	stw	r2,4(r17)
    2db8:	9009883a 	mov	r4,r18
    2dbc:	000f88c0 	call	f88c <__malloc_unlock>
    2dc0:	80800204 	addi	r2,r16,8
    2dc4:	003f7106 	br	2b8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530b8c>
    2dc8:	00c00504 	movi	r3,20
    2dcc:	18804a2e 	bgeu	r3,r2,2ef8 <_malloc_r+0x610>
    2dd0:	00c01504 	movi	r3,84
    2dd4:	18806e36 	bltu	r3,r2,2f90 <_malloc_r+0x6a8>
    2dd8:	8804d33a 	srli	r2,r17,12
    2ddc:	12001bc4 	addi	r8,r2,111
    2de0:	11c01b84 	addi	r7,r2,110
    2de4:	4209883a 	add	r4,r8,r8
    2de8:	003edd06 	br	2960 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530960>
    2dec:	3804d27a 	srli	r2,r7,9
    2df0:	00c00104 	movi	r3,4
    2df4:	1880442e 	bgeu	r3,r2,2f08 <_malloc_r+0x620>
    2df8:	00c00504 	movi	r3,20
    2dfc:	18808136 	bltu	r3,r2,3004 <_malloc_r+0x71c>
    2e00:	11401704 	addi	r5,r2,92
    2e04:	10c016c4 	addi	r3,r2,91
    2e08:	294b883a 	add	r5,r5,r5
    2e0c:	294b883a 	add	r5,r5,r5
    2e10:	294b883a 	add	r5,r5,r5
    2e14:	994b883a 	add	r5,r19,r5
    2e18:	28800017 	ldw	r2,0(r5)
    2e1c:	01800074 	movhi	r6,1
    2e20:	297ffe04 	addi	r5,r5,-8
    2e24:	31945304 	addi	r6,r6,20812
    2e28:	28806526 	beq	r5,r2,2fc0 <_malloc_r+0x6d8>
    2e2c:	01bfff04 	movi	r6,-4
    2e30:	10c00117 	ldw	r3,4(r2)
    2e34:	1986703a 	and	r3,r3,r6
    2e38:	38c0022e 	bgeu	r7,r3,2e44 <_malloc_r+0x55c>
    2e3c:	10800217 	ldw	r2,8(r2)
    2e40:	28bffb1e 	bne	r5,r2,2e30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530e30>
    2e44:	11400317 	ldw	r5,12(r2)
    2e48:	98c00117 	ldw	r3,4(r19)
    2e4c:	81400315 	stw	r5,12(r16)
    2e50:	80800215 	stw	r2,8(r16)
    2e54:	2c000215 	stw	r16,8(r5)
    2e58:	14000315 	stw	r16,12(r2)
    2e5c:	003ef806 	br	2a40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530a40>
    2e60:	88c00054 	ori	r3,r17,1
    2e64:	80c00115 	stw	r3,4(r16)
    2e68:	8463883a 	add	r17,r16,r17
    2e6c:	34400515 	stw	r17,20(r6)
    2e70:	34400415 	stw	r17,16(r6)
    2e74:	10c00054 	ori	r3,r2,1
    2e78:	8a000315 	stw	r8,12(r17)
    2e7c:	8a000215 	stw	r8,8(r17)
    2e80:	88c00115 	stw	r3,4(r17)
    2e84:	88a3883a 	add	r17,r17,r2
    2e88:	88800015 	stw	r2,0(r17)
    2e8c:	9009883a 	mov	r4,r18
    2e90:	000f88c0 	call	f88c <__malloc_unlock>
    2e94:	80800204 	addi	r2,r16,8
    2e98:	003f3c06 	br	2b8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530b8c>
    2e9c:	30c00117 	ldw	r3,4(r6)
    2ea0:	003ee706 	br	2a40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530a40>
    2ea4:	5ac00044 	addi	r11,r11,1
    2ea8:	588000cc 	andi	r2,r11,3
    2eac:	31800204 	addi	r6,r6,8
    2eb0:	103efd1e 	bne	r2,zero,2aa8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530aa8>
    2eb4:	00002406 	br	2f48 <_malloc_r+0x660>
    2eb8:	14000317 	ldw	r16,12(r2)
    2ebc:	143f251e 	bne	r2,r16,2b54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530b54>
    2ec0:	21000084 	addi	r4,r4,2
    2ec4:	003ebc06 	br	29b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215309b8>
    2ec8:	8085883a 	add	r2,r16,r2
    2ecc:	10c00117 	ldw	r3,4(r2)
    2ed0:	81000317 	ldw	r4,12(r16)
    2ed4:	81400217 	ldw	r5,8(r16)
    2ed8:	18c00054 	ori	r3,r3,1
    2edc:	10c00115 	stw	r3,4(r2)
    2ee0:	29000315 	stw	r4,12(r5)
    2ee4:	21400215 	stw	r5,8(r4)
    2ee8:	9009883a 	mov	r4,r18
    2eec:	000f88c0 	call	f88c <__malloc_unlock>
    2ef0:	80800204 	addi	r2,r16,8
    2ef4:	003f2506 	br	2b8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530b8c>
    2ef8:	12001704 	addi	r8,r2,92
    2efc:	11c016c4 	addi	r7,r2,91
    2f00:	4209883a 	add	r4,r8,r8
    2f04:	003e9606 	br	2960 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530960>
    2f08:	3804d1ba 	srli	r2,r7,6
    2f0c:	11400e44 	addi	r5,r2,57
    2f10:	10c00e04 	addi	r3,r2,56
    2f14:	294b883a 	add	r5,r5,r5
    2f18:	003fbc06 	br	2e0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530e0c>
    2f1c:	84ff5926 	beq	r16,r19,2c84 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530c84>
    2f20:	00800074 	movhi	r2,1
    2f24:	10945304 	addi	r2,r2,20812
    2f28:	14000217 	ldw	r16,8(r2)
    2f2c:	00bfff04 	movi	r2,-4
    2f30:	80c00117 	ldw	r3,4(r16)
    2f34:	1886703a 	and	r3,r3,r2
    2f38:	003f9106 	br	2d80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530d80>
    2f3c:	60800217 	ldw	r2,8(r12)
    2f40:	213fffc4 	addi	r4,r4,-1
    2f44:	1300651e 	bne	r2,r12,30dc <_malloc_r+0x7f4>
    2f48:	208000cc 	andi	r2,r4,3
    2f4c:	633ffe04 	addi	r12,r12,-8
    2f50:	103ffa1e 	bne	r2,zero,2f3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530f3c>
    2f54:	98800117 	ldw	r2,4(r19)
    2f58:	0146303a 	nor	r3,zero,r5
    2f5c:	1884703a 	and	r2,r3,r2
    2f60:	98800115 	stw	r2,4(r19)
    2f64:	294b883a 	add	r5,r5,r5
    2f68:	117f2836 	bltu	r2,r5,2c0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530c0c>
    2f6c:	283f2726 	beq	r5,zero,2c0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530c0c>
    2f70:	2886703a 	and	r3,r5,r2
    2f74:	5809883a 	mov	r4,r11
    2f78:	183ec31e 	bne	r3,zero,2a88 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530a88>
    2f7c:	294b883a 	add	r5,r5,r5
    2f80:	2886703a 	and	r3,r5,r2
    2f84:	21000104 	addi	r4,r4,4
    2f88:	183ffc26 	beq	r3,zero,2f7c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530f7c>
    2f8c:	003ebe06 	br	2a88 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530a88>
    2f90:	00c05504 	movi	r3,340
    2f94:	18801236 	bltu	r3,r2,2fe0 <_malloc_r+0x6f8>
    2f98:	8804d3fa 	srli	r2,r17,15
    2f9c:	12001e04 	addi	r8,r2,120
    2fa0:	11c01dc4 	addi	r7,r2,119
    2fa4:	4209883a 	add	r4,r8,r8
    2fa8:	003e6d06 	br	2960 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530960>
    2fac:	00c40004 	movi	r3,4096
    2fb0:	003f4606 	br	2ccc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530ccc>
    2fb4:	00800044 	movi	r2,1
    2fb8:	a0800115 	stw	r2,4(r20)
    2fbc:	003f7406 	br	2d90 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530d90>
    2fc0:	1805d0ba 	srai	r2,r3,2
    2fc4:	01c00044 	movi	r7,1
    2fc8:	30c00117 	ldw	r3,4(r6)
    2fcc:	388e983a 	sll	r7,r7,r2
    2fd0:	2805883a 	mov	r2,r5
    2fd4:	38c6b03a 	or	r3,r7,r3
    2fd8:	30c00115 	stw	r3,4(r6)
    2fdc:	003f9b06 	br	2e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530e4c>
    2fe0:	00c15504 	movi	r3,1364
    2fe4:	18801a36 	bltu	r3,r2,3050 <_malloc_r+0x768>
    2fe8:	8804d4ba 	srli	r2,r17,18
    2fec:	12001f44 	addi	r8,r2,125
    2ff0:	11c01f04 	addi	r7,r2,124
    2ff4:	4209883a 	add	r4,r8,r8
    2ff8:	003e5906 	br	2960 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530960>
    2ffc:	ad400404 	addi	r21,r21,16
    3000:	003f1706 	br	2c60 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530c60>
    3004:	00c01504 	movi	r3,84
    3008:	18802336 	bltu	r3,r2,3098 <_malloc_r+0x7b0>
    300c:	3804d33a 	srli	r2,r7,12
    3010:	11401bc4 	addi	r5,r2,111
    3014:	10c01b84 	addi	r3,r2,110
    3018:	294b883a 	add	r5,r5,r5
    301c:	003f7b06 	br	2e0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530e0c>
    3020:	9c000217 	ldw	r16,8(r19)
    3024:	00bfff04 	movi	r2,-4
    3028:	80c00117 	ldw	r3,4(r16)
    302c:	1886703a 	and	r3,r3,r2
    3030:	003f5306 	br	2d80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530d80>
    3034:	3083ffcc 	andi	r2,r6,4095
    3038:	103f181e 	bne	r2,zero,2c9c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530c9c>
    303c:	99000217 	ldw	r4,8(r19)
    3040:	b545883a 	add	r2,r22,r21
    3044:	10800054 	ori	r2,r2,1
    3048:	20800115 	stw	r2,4(r4)
    304c:	003f3e06 	br	2d48 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530d48>
    3050:	01003f84 	movi	r4,254
    3054:	02001fc4 	movi	r8,127
    3058:	01c01f84 	movi	r7,126
    305c:	003e4006 	br	2960 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530960>
    3060:	00800074 	movhi	r2,1
    3064:	109b8a04 	addi	r2,r2,28200
    3068:	15000015 	stw	r20,0(r2)
    306c:	003f1106 	br	2cb4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530cb4>
    3070:	00800044 	movi	r2,1
    3074:	002b883a 	mov	r21,zero
    3078:	003f1f06 	br	2cf8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530cf8>
    307c:	81400204 	addi	r5,r16,8
    3080:	9009883a 	mov	r4,r18
    3084:	00074e00 	call	74e0 <_free_r>
    3088:	008000b4 	movhi	r2,2
    308c:	10a30504 	addi	r2,r2,-29676
    3090:	10c00017 	ldw	r3,0(r2)
    3094:	003f2c06 	br	2d48 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530d48>
    3098:	00c05504 	movi	r3,340
    309c:	18800536 	bltu	r3,r2,30b4 <_malloc_r+0x7cc>
    30a0:	3804d3fa 	srli	r2,r7,15
    30a4:	11401e04 	addi	r5,r2,120
    30a8:	10c01dc4 	addi	r3,r2,119
    30ac:	294b883a 	add	r5,r5,r5
    30b0:	003f5606 	br	2e0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530e0c>
    30b4:	00c15504 	movi	r3,1364
    30b8:	18800536 	bltu	r3,r2,30d0 <_malloc_r+0x7e8>
    30bc:	3804d4ba 	srli	r2,r7,18
    30c0:	11401f44 	addi	r5,r2,125
    30c4:	10c01f04 	addi	r3,r2,124
    30c8:	294b883a 	add	r5,r5,r5
    30cc:	003f4f06 	br	2e0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530e0c>
    30d0:	01403f84 	movi	r5,254
    30d4:	00c01f84 	movi	r3,126
    30d8:	003f4c06 	br	2e0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530e0c>
    30dc:	98800117 	ldw	r2,4(r19)
    30e0:	003fa006 	br	2f64 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530f64>
    30e4:	8808d0fa 	srli	r4,r17,3
    30e8:	20800044 	addi	r2,r4,1
    30ec:	1085883a 	add	r2,r2,r2
    30f0:	003e9006 	br	2b34 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21530b34>

000030f4 <memset>:
    30f4:	20c000cc 	andi	r3,r4,3
    30f8:	2005883a 	mov	r2,r4
    30fc:	18004426 	beq	r3,zero,3210 <memset+0x11c>
    3100:	31ffffc4 	addi	r7,r6,-1
    3104:	30004026 	beq	r6,zero,3208 <memset+0x114>
    3108:	2813883a 	mov	r9,r5
    310c:	200d883a 	mov	r6,r4
    3110:	2007883a 	mov	r3,r4
    3114:	00000406 	br	3128 <memset+0x34>
    3118:	3a3fffc4 	addi	r8,r7,-1
    311c:	31800044 	addi	r6,r6,1
    3120:	38003926 	beq	r7,zero,3208 <memset+0x114>
    3124:	400f883a 	mov	r7,r8
    3128:	18c00044 	addi	r3,r3,1
    312c:	32400005 	stb	r9,0(r6)
    3130:	1a0000cc 	andi	r8,r3,3
    3134:	403ff81e 	bne	r8,zero,3118 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531118>
    3138:	010000c4 	movi	r4,3
    313c:	21c02d2e 	bgeu	r4,r7,31f4 <memset+0x100>
    3140:	29003fcc 	andi	r4,r5,255
    3144:	200c923a 	slli	r6,r4,8
    3148:	3108b03a 	or	r4,r6,r4
    314c:	200c943a 	slli	r6,r4,16
    3150:	218cb03a 	or	r6,r4,r6
    3154:	010003c4 	movi	r4,15
    3158:	21c0182e 	bgeu	r4,r7,31bc <memset+0xc8>
    315c:	3b3ffc04 	addi	r12,r7,-16
    3160:	6018d13a 	srli	r12,r12,4
    3164:	1a000104 	addi	r8,r3,4
    3168:	1ac00204 	addi	r11,r3,8
    316c:	6008913a 	slli	r4,r12,4
    3170:	1a800304 	addi	r10,r3,12
    3174:	1813883a 	mov	r9,r3
    3178:	21000504 	addi	r4,r4,20
    317c:	1909883a 	add	r4,r3,r4
    3180:	49800015 	stw	r6,0(r9)
    3184:	41800015 	stw	r6,0(r8)
    3188:	59800015 	stw	r6,0(r11)
    318c:	51800015 	stw	r6,0(r10)
    3190:	42000404 	addi	r8,r8,16
    3194:	4a400404 	addi	r9,r9,16
    3198:	5ac00404 	addi	r11,r11,16
    319c:	52800404 	addi	r10,r10,16
    31a0:	413ff71e 	bne	r8,r4,3180 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531180>
    31a4:	63000044 	addi	r12,r12,1
    31a8:	6018913a 	slli	r12,r12,4
    31ac:	39c003cc 	andi	r7,r7,15
    31b0:	010000c4 	movi	r4,3
    31b4:	1b07883a 	add	r3,r3,r12
    31b8:	21c00e2e 	bgeu	r4,r7,31f4 <memset+0x100>
    31bc:	1813883a 	mov	r9,r3
    31c0:	3811883a 	mov	r8,r7
    31c4:	010000c4 	movi	r4,3
    31c8:	49800015 	stw	r6,0(r9)
    31cc:	423fff04 	addi	r8,r8,-4
    31d0:	4a400104 	addi	r9,r9,4
    31d4:	223ffc36 	bltu	r4,r8,31c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215311c8>
    31d8:	393fff04 	addi	r4,r7,-4
    31dc:	2008d0ba 	srli	r4,r4,2
    31e0:	39c000cc 	andi	r7,r7,3
    31e4:	21000044 	addi	r4,r4,1
    31e8:	2109883a 	add	r4,r4,r4
    31ec:	2109883a 	add	r4,r4,r4
    31f0:	1907883a 	add	r3,r3,r4
    31f4:	38000526 	beq	r7,zero,320c <memset+0x118>
    31f8:	19cf883a 	add	r7,r3,r7
    31fc:	19400005 	stb	r5,0(r3)
    3200:	18c00044 	addi	r3,r3,1
    3204:	38fffd1e 	bne	r7,r3,31fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215311fc>
    3208:	f800283a 	ret
    320c:	f800283a 	ret
    3210:	2007883a 	mov	r3,r4
    3214:	300f883a 	mov	r7,r6
    3218:	003fc706 	br	3138 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531138>

0000321c <_puts_r>:
    321c:	defff604 	addi	sp,sp,-40
    3220:	dc000715 	stw	r16,28(sp)
    3224:	2021883a 	mov	r16,r4
    3228:	2809883a 	mov	r4,r5
    322c:	dc400815 	stw	r17,32(sp)
    3230:	dfc00915 	stw	ra,36(sp)
    3234:	2823883a 	mov	r17,r5
    3238:	00034080 	call	3408 <strlen>
    323c:	10c00044 	addi	r3,r2,1
    3240:	d8800115 	stw	r2,4(sp)
    3244:	00800074 	movhi	r2,1
    3248:	10938704 	addi	r2,r2,19996
    324c:	d8800215 	stw	r2,8(sp)
    3250:	00800044 	movi	r2,1
    3254:	d8800315 	stw	r2,12(sp)
    3258:	00800084 	movi	r2,2
    325c:	dc400015 	stw	r17,0(sp)
    3260:	d8c00615 	stw	r3,24(sp)
    3264:	dec00415 	stw	sp,16(sp)
    3268:	d8800515 	stw	r2,20(sp)
    326c:	80000226 	beq	r16,zero,3278 <_puts_r+0x5c>
    3270:	80800e17 	ldw	r2,56(r16)
    3274:	10001426 	beq	r2,zero,32c8 <_puts_r+0xac>
    3278:	81400217 	ldw	r5,8(r16)
    327c:	2880030b 	ldhu	r2,12(r5)
    3280:	10c8000c 	andi	r3,r2,8192
    3284:	1800061e 	bne	r3,zero,32a0 <_puts_r+0x84>
    3288:	29001917 	ldw	r4,100(r5)
    328c:	00f7ffc4 	movi	r3,-8193
    3290:	10880014 	ori	r2,r2,8192
    3294:	20c6703a 	and	r3,r4,r3
    3298:	2880030d 	sth	r2,12(r5)
    329c:	28c01915 	stw	r3,100(r5)
    32a0:	d9800404 	addi	r6,sp,16
    32a4:	8009883a 	mov	r4,r16
    32a8:	00077f00 	call	77f0 <__sfvwrite_r>
    32ac:	1000091e 	bne	r2,zero,32d4 <_puts_r+0xb8>
    32b0:	00800284 	movi	r2,10
    32b4:	dfc00917 	ldw	ra,36(sp)
    32b8:	dc400817 	ldw	r17,32(sp)
    32bc:	dc000717 	ldw	r16,28(sp)
    32c0:	dec00a04 	addi	sp,sp,40
    32c4:	f800283a 	ret
    32c8:	8009883a 	mov	r4,r16
    32cc:	000736c0 	call	736c <__sinit>
    32d0:	003fe906 	br	3278 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531278>
    32d4:	00bfffc4 	movi	r2,-1
    32d8:	003ff606 	br	32b4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215312b4>

000032dc <puts>:
    32dc:	00800074 	movhi	r2,1
    32e0:	109b8d04 	addi	r2,r2,28212
    32e4:	200b883a 	mov	r5,r4
    32e8:	11000017 	ldw	r4,0(r2)
    32ec:	000321c1 	jmpi	321c <_puts_r>

000032f0 <_sbrk_r>:
    32f0:	defffd04 	addi	sp,sp,-12
    32f4:	dc000015 	stw	r16,0(sp)
    32f8:	040000b4 	movhi	r16,2
    32fc:	dc400115 	stw	r17,4(sp)
    3300:	8422fa04 	addi	r16,r16,-29720
    3304:	2023883a 	mov	r17,r4
    3308:	2809883a 	mov	r4,r5
    330c:	dfc00215 	stw	ra,8(sp)
    3310:	80000015 	stw	zero,0(r16)
    3314:	000fa740 	call	fa74 <sbrk>
    3318:	00ffffc4 	movi	r3,-1
    331c:	10c00526 	beq	r2,r3,3334 <_sbrk_r+0x44>
    3320:	dfc00217 	ldw	ra,8(sp)
    3324:	dc400117 	ldw	r17,4(sp)
    3328:	dc000017 	ldw	r16,0(sp)
    332c:	dec00304 	addi	sp,sp,12
    3330:	f800283a 	ret
    3334:	80c00017 	ldw	r3,0(r16)
    3338:	183ff926 	beq	r3,zero,3320 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531320>
    333c:	88c00015 	stw	r3,0(r17)
    3340:	003ff706 	br	3320 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531320>

00003344 <_sprintf_r>:
    3344:	deffe404 	addi	sp,sp,-112
    3348:	2807883a 	mov	r3,r5
    334c:	dfc01a15 	stw	ra,104(sp)
    3350:	d9c01b15 	stw	r7,108(sp)
    3354:	00a00034 	movhi	r2,32768
    3358:	10bfffc4 	addi	r2,r2,-1
    335c:	02008204 	movi	r8,520
    3360:	d8800215 	stw	r2,8(sp)
    3364:	d8800515 	stw	r2,20(sp)
    3368:	d9c01b04 	addi	r7,sp,108
    336c:	d80b883a 	mov	r5,sp
    3370:	00bfffc4 	movi	r2,-1
    3374:	d8c00015 	stw	r3,0(sp)
    3378:	d8c00415 	stw	r3,16(sp)
    337c:	da00030d 	sth	r8,12(sp)
    3380:	d880038d 	sth	r2,14(sp)
    3384:	00034a00 	call	34a0 <___svfprintf_internal_r>
    3388:	d8c00017 	ldw	r3,0(sp)
    338c:	18000005 	stb	zero,0(r3)
    3390:	dfc01a17 	ldw	ra,104(sp)
    3394:	dec01c04 	addi	sp,sp,112
    3398:	f800283a 	ret

0000339c <sprintf>:
    339c:	deffe304 	addi	sp,sp,-116
    33a0:	2007883a 	mov	r3,r4
    33a4:	dfc01a15 	stw	ra,104(sp)
    33a8:	d9801b15 	stw	r6,108(sp)
    33ac:	d9c01c15 	stw	r7,112(sp)
    33b0:	01000074 	movhi	r4,1
    33b4:	211b8d04 	addi	r4,r4,28212
    33b8:	21000017 	ldw	r4,0(r4)
    33bc:	00a00034 	movhi	r2,32768
    33c0:	10bfffc4 	addi	r2,r2,-1
    33c4:	280d883a 	mov	r6,r5
    33c8:	02008204 	movi	r8,520
    33cc:	d8800215 	stw	r2,8(sp)
    33d0:	d8800515 	stw	r2,20(sp)
    33d4:	d9c01b04 	addi	r7,sp,108
    33d8:	d80b883a 	mov	r5,sp
    33dc:	00bfffc4 	movi	r2,-1
    33e0:	d8c00015 	stw	r3,0(sp)
    33e4:	d8c00415 	stw	r3,16(sp)
    33e8:	da00030d 	sth	r8,12(sp)
    33ec:	d880038d 	sth	r2,14(sp)
    33f0:	00034a00 	call	34a0 <___svfprintf_internal_r>
    33f4:	d8c00017 	ldw	r3,0(sp)
    33f8:	18000005 	stb	zero,0(r3)
    33fc:	dfc01a17 	ldw	ra,104(sp)
    3400:	dec01d04 	addi	sp,sp,116
    3404:	f800283a 	ret

00003408 <strlen>:
    3408:	208000cc 	andi	r2,r4,3
    340c:	10002026 	beq	r2,zero,3490 <strlen+0x88>
    3410:	20800007 	ldb	r2,0(r4)
    3414:	10002026 	beq	r2,zero,3498 <strlen+0x90>
    3418:	2005883a 	mov	r2,r4
    341c:	00000206 	br	3428 <strlen+0x20>
    3420:	10c00007 	ldb	r3,0(r2)
    3424:	18001826 	beq	r3,zero,3488 <strlen+0x80>
    3428:	10800044 	addi	r2,r2,1
    342c:	10c000cc 	andi	r3,r2,3
    3430:	183ffb1e 	bne	r3,zero,3420 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531420>
    3434:	10c00017 	ldw	r3,0(r2)
    3438:	01ffbff4 	movhi	r7,65279
    343c:	39ffbfc4 	addi	r7,r7,-257
    3440:	00ca303a 	nor	r5,zero,r3
    3444:	01a02074 	movhi	r6,32897
    3448:	19c7883a 	add	r3,r3,r7
    344c:	31a02004 	addi	r6,r6,-32640
    3450:	1946703a 	and	r3,r3,r5
    3454:	1986703a 	and	r3,r3,r6
    3458:	1800091e 	bne	r3,zero,3480 <strlen+0x78>
    345c:	10800104 	addi	r2,r2,4
    3460:	10c00017 	ldw	r3,0(r2)
    3464:	19cb883a 	add	r5,r3,r7
    3468:	00c6303a 	nor	r3,zero,r3
    346c:	28c6703a 	and	r3,r5,r3
    3470:	1986703a 	and	r3,r3,r6
    3474:	183ff926 	beq	r3,zero,345c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153145c>
    3478:	00000106 	br	3480 <strlen+0x78>
    347c:	10800044 	addi	r2,r2,1
    3480:	10c00007 	ldb	r3,0(r2)
    3484:	183ffd1e 	bne	r3,zero,347c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153147c>
    3488:	1105c83a 	sub	r2,r2,r4
    348c:	f800283a 	ret
    3490:	2005883a 	mov	r2,r4
    3494:	003fe706 	br	3434 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531434>
    3498:	0005883a 	mov	r2,zero
    349c:	f800283a 	ret

000034a0 <___svfprintf_internal_r>:
    34a0:	deffb704 	addi	sp,sp,-292
    34a4:	dfc04815 	stw	ra,288(sp)
    34a8:	ddc04615 	stw	r23,280(sp)
    34ac:	d9402d15 	stw	r5,180(sp)
    34b0:	d9003915 	stw	r4,228(sp)
    34b4:	302f883a 	mov	r23,r6
    34b8:	d9c02e15 	stw	r7,184(sp)
    34bc:	df004715 	stw	fp,284(sp)
    34c0:	dd804515 	stw	r22,276(sp)
    34c4:	dd404415 	stw	r21,272(sp)
    34c8:	dd004315 	stw	r20,268(sp)
    34cc:	dcc04215 	stw	r19,264(sp)
    34d0:	dc804115 	stw	r18,260(sp)
    34d4:	dc404015 	stw	r17,256(sp)
    34d8:	dc003f15 	stw	r16,252(sp)
    34dc:	0007eec0 	call	7eec <_localeconv_r>
    34e0:	10800017 	ldw	r2,0(r2)
    34e4:	1009883a 	mov	r4,r2
    34e8:	d8803415 	stw	r2,208(sp)
    34ec:	00034080 	call	3408 <strlen>
    34f0:	d8c02d17 	ldw	r3,180(sp)
    34f4:	d8803815 	stw	r2,224(sp)
    34f8:	1880030b 	ldhu	r2,12(r3)
    34fc:	1080200c 	andi	r2,r2,128
    3500:	10000226 	beq	r2,zero,350c <___svfprintf_internal_r+0x6c>
    3504:	18800417 	ldw	r2,16(r3)
    3508:	1006b126 	beq	r2,zero,4fd0 <___svfprintf_internal_r+0x1b30>
    350c:	dcc03917 	ldw	r19,228(sp)
    3510:	d8c00404 	addi	r3,sp,16
    3514:	05400074 	movhi	r21,1
    3518:	d9001e04 	addi	r4,sp,120
    351c:	ad539884 	addi	r21,r21,20066
    3520:	d8c01e15 	stw	r3,120(sp)
    3524:	d8002015 	stw	zero,128(sp)
    3528:	d8001f15 	stw	zero,124(sp)
    352c:	d8003315 	stw	zero,204(sp)
    3530:	d8003615 	stw	zero,216(sp)
    3534:	d8003715 	stw	zero,220(sp)
    3538:	1811883a 	mov	r8,r3
    353c:	d8003a15 	stw	zero,232(sp)
    3540:	d8003b15 	stw	zero,236(sp)
    3544:	d8002f15 	stw	zero,188(sp)
    3548:	d9002815 	stw	r4,160(sp)
    354c:	b8800007 	ldb	r2,0(r23)
    3550:	10027726 	beq	r2,zero,3f30 <___svfprintf_internal_r+0xa90>
    3554:	00c00944 	movi	r3,37
    3558:	b823883a 	mov	r17,r23
    355c:	10c0021e 	bne	r2,r3,3568 <___svfprintf_internal_r+0xc8>
    3560:	00001406 	br	35b4 <___svfprintf_internal_r+0x114>
    3564:	10c00326 	beq	r2,r3,3574 <___svfprintf_internal_r+0xd4>
    3568:	8c400044 	addi	r17,r17,1
    356c:	88800007 	ldb	r2,0(r17)
    3570:	103ffc1e 	bne	r2,zero,3564 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531564>
    3574:	8de1c83a 	sub	r16,r17,r23
    3578:	80000e26 	beq	r16,zero,35b4 <___svfprintf_internal_r+0x114>
    357c:	d8c02017 	ldw	r3,128(sp)
    3580:	d8801f17 	ldw	r2,124(sp)
    3584:	45c00015 	stw	r23,0(r8)
    3588:	1c07883a 	add	r3,r3,r16
    358c:	10800044 	addi	r2,r2,1
    3590:	d8c02015 	stw	r3,128(sp)
    3594:	44000115 	stw	r16,4(r8)
    3598:	d8801f15 	stw	r2,124(sp)
    359c:	00c001c4 	movi	r3,7
    35a0:	18809916 	blt	r3,r2,3808 <___svfprintf_internal_r+0x368>
    35a4:	42000204 	addi	r8,r8,8
    35a8:	d9402f17 	ldw	r5,188(sp)
    35ac:	2c0b883a 	add	r5,r5,r16
    35b0:	d9402f15 	stw	r5,188(sp)
    35b4:	88800007 	ldb	r2,0(r17)
    35b8:	10009a26 	beq	r2,zero,3824 <___svfprintf_internal_r+0x384>
    35bc:	8dc00044 	addi	r23,r17,1
    35c0:	8c400047 	ldb	r17,1(r17)
    35c4:	0021883a 	mov	r16,zero
    35c8:	00bfffc4 	movi	r2,-1
    35cc:	0025883a 	mov	r18,zero
    35d0:	dc002905 	stb	r16,164(sp)
    35d4:	d8002785 	stb	zero,158(sp)
    35d8:	d8002b05 	stb	zero,172(sp)
    35dc:	d8802a15 	stw	r2,168(sp)
    35e0:	d8003115 	stw	zero,196(sp)
    35e4:	05001604 	movi	r20,88
    35e8:	05800244 	movi	r22,9
    35ec:	4039883a 	mov	fp,r8
    35f0:	9021883a 	mov	r16,r18
    35f4:	bdc00044 	addi	r23,r23,1
    35f8:	88bff804 	addi	r2,r17,-32
    35fc:	a0831e36 	bltu	r20,r2,4278 <___svfprintf_internal_r+0xdd8>
    3600:	100490ba 	slli	r2,r2,2
    3604:	00c00034 	movhi	r3,0
    3608:	18cd8604 	addi	r3,r3,13848
    360c:	10c5883a 	add	r2,r2,r3
    3610:	10800017 	ldw	r2,0(r2)
    3614:	1000683a 	jmp	r2
    3618:	000041c0 	call	41c <LCD_Fill>
    361c:	00004278 	rdprs	zero,zero,265
    3620:	00004278 	rdprs	zero,zero,265
    3624:	000041b4 	movhi	zero,262
    3628:	00004278 	rdprs	zero,zero,265
    362c:	00004278 	rdprs	zero,zero,265
    3630:	00004278 	rdprs	zero,zero,265
    3634:	00004278 	rdprs	zero,zero,265
    3638:	00004278 	rdprs	zero,zero,265
    363c:	00004278 	rdprs	zero,zero,265
    3640:	00003880 	call	388 <LCD_Init+0x48>
    3644:	000040c4 	movi	zero,259
    3648:	00004278 	rdprs	zero,zero,265
    364c:	0000378c 	andi	zero,zero,222
    3650:	000038a4 	muli	zero,zero,226
    3654:	00004278 	rdprs	zero,zero,265
    3658:	00003930 	cmpltui	zero,zero,228
    365c:	000038f4 	movhi	zero,227
    3660:	000038f4 	movhi	zero,227
    3664:	000038f4 	movhi	zero,227
    3668:	000038f4 	movhi	zero,227
    366c:	000038f4 	movhi	zero,227
    3670:	000038f4 	movhi	zero,227
    3674:	000038f4 	movhi	zero,227
    3678:	000038f4 	movhi	zero,227
    367c:	000038f4 	movhi	zero,227
    3680:	00004278 	rdprs	zero,zero,265
    3684:	00004278 	rdprs	zero,zero,265
    3688:	00004278 	rdprs	zero,zero,265
    368c:	00004278 	rdprs	zero,zero,265
    3690:	00004278 	rdprs	zero,zero,265
    3694:	00004278 	rdprs	zero,zero,265
    3698:	00004278 	rdprs	zero,zero,265
    369c:	00004278 	rdprs	zero,zero,265
    36a0:	00004278 	rdprs	zero,zero,265
    36a4:	00004278 	rdprs	zero,zero,265
    36a8:	000039f4 	movhi	zero,231
    36ac:	0000393c 	xorhi	zero,zero,228
    36b0:	00004278 	rdprs	zero,zero,265
    36b4:	0000393c 	xorhi	zero,zero,228
    36b8:	00004278 	rdprs	zero,zero,265
    36bc:	00004278 	rdprs	zero,zero,265
    36c0:	00004278 	rdprs	zero,zero,265
    36c4:	00004278 	rdprs	zero,zero,265
    36c8:	000039e8 	cmpgeui	zero,zero,231
    36cc:	00004278 	rdprs	zero,zero,265
    36d0:	00004278 	rdprs	zero,zero,265
    36d4:	00003abc 	xorhi	zero,zero,234
    36d8:	00004278 	rdprs	zero,zero,265
    36dc:	00004278 	rdprs	zero,zero,265
    36e0:	00004278 	rdprs	zero,zero,265
    36e4:	00004278 	rdprs	zero,zero,265
    36e8:	00004278 	rdprs	zero,zero,265
    36ec:	00003f38 	rdprs	zero,zero,252
    36f0:	00004278 	rdprs	zero,zero,265
    36f4:	00004278 	rdprs	zero,zero,265
    36f8:	00003fa4 	muli	zero,zero,254
    36fc:	00004278 	rdprs	zero,zero,265
    3700:	00004278 	rdprs	zero,zero,265
    3704:	00004278 	rdprs	zero,zero,265
    3708:	00004278 	rdprs	zero,zero,265
    370c:	00004278 	rdprs	zero,zero,265
    3710:	00004278 	rdprs	zero,zero,265
    3714:	00004278 	rdprs	zero,zero,265
    3718:	00004278 	rdprs	zero,zero,265
    371c:	00004278 	rdprs	zero,zero,265
    3720:	00004278 	rdprs	zero,zero,265
    3724:	00004060 	cmpeqi	zero,zero,257
    3728:	000041e0 	cmpeqi	zero,zero,263
    372c:	0000393c 	xorhi	zero,zero,228
    3730:	0000393c 	xorhi	zero,zero,228
    3734:	0000393c 	xorhi	zero,zero,228
    3738:	00004254 	movui	zero,265
    373c:	000041e0 	cmpeqi	zero,zero,263
    3740:	00004278 	rdprs	zero,zero,265
    3744:	00004278 	rdprs	zero,zero,265
    3748:	00004200 	call	420 <LCD_Fill+0x4>
    374c:	00004278 	rdprs	zero,zero,265
    3750:	00004214 	movui	zero,264
    3754:	000040a4 	muli	zero,zero,258
    3758:	00003798 	cmpnei	zero,zero,222
    375c:	000040dc 	xori	zero,zero,259
    3760:	00004278 	rdprs	zero,zero,265
    3764:	000040e8 	cmpgeui	zero,zero,259
    3768:	00004278 	rdprs	zero,zero,265
    376c:	0000414c 	andi	zero,zero,261
    3770:	00004278 	rdprs	zero,zero,265
    3774:	00004278 	rdprs	zero,zero,265
    3778:	0000416c 	andhi	zero,zero,261
    377c:	d8c03117 	ldw	r3,196(sp)
    3780:	d8802e15 	stw	r2,184(sp)
    3784:	00c7c83a 	sub	r3,zero,r3
    3788:	d8c03115 	stw	r3,196(sp)
    378c:	84000114 	ori	r16,r16,4
    3790:	bc400007 	ldb	r17,0(r23)
    3794:	003f9706 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    3798:	00800c04 	movi	r2,48
    379c:	d8802705 	stb	r2,156(sp)
    37a0:	00801e04 	movi	r2,120
    37a4:	d8802745 	stb	r2,157(sp)
    37a8:	d9002a17 	ldw	r4,168(sp)
    37ac:	d8802e17 	ldw	r2,184(sp)
    37b0:	d8002785 	stb	zero,158(sp)
    37b4:	e011883a 	mov	r8,fp
    37b8:	10c00104 	addi	r3,r2,4
    37bc:	15000017 	ldw	r20,0(r2)
    37c0:	002d883a 	mov	r22,zero
    37c4:	80800094 	ori	r2,r16,2
    37c8:	2002b616 	blt	r4,zero,42a4 <___svfprintf_internal_r+0xe04>
    37cc:	00bfdfc4 	movi	r2,-129
    37d0:	80a4703a 	and	r18,r16,r2
    37d4:	d8c02e15 	stw	r3,184(sp)
    37d8:	94800094 	ori	r18,r18,2
    37dc:	a002a01e 	bne	r20,zero,4260 <___svfprintf_internal_r+0xdc0>
    37e0:	01400074 	movhi	r5,1
    37e4:	29539104 	addi	r5,r5,20036
    37e8:	d9403a15 	stw	r5,232(sp)
    37ec:	04401e04 	movi	r17,120
    37f0:	d8c02a17 	ldw	r3,168(sp)
    37f4:	0039883a 	mov	fp,zero
    37f8:	1801e626 	beq	r3,zero,3f94 <___svfprintf_internal_r+0xaf4>
    37fc:	0029883a 	mov	r20,zero
    3800:	002d883a 	mov	r22,zero
    3804:	00020506 	br	401c <___svfprintf_internal_r+0xb7c>
    3808:	d9402d17 	ldw	r5,180(sp)
    380c:	d9801e04 	addi	r6,sp,120
    3810:	9809883a 	mov	r4,r19
    3814:	0009b4c0 	call	9b4c <__ssprint_r>
    3818:	1000081e 	bne	r2,zero,383c <___svfprintf_internal_r+0x39c>
    381c:	da000404 	addi	r8,sp,16
    3820:	003f6106 	br	35a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315a8>
    3824:	d8802017 	ldw	r2,128(sp)
    3828:	10000426 	beq	r2,zero,383c <___svfprintf_internal_r+0x39c>
    382c:	d9402d17 	ldw	r5,180(sp)
    3830:	d9003917 	ldw	r4,228(sp)
    3834:	d9801e04 	addi	r6,sp,120
    3838:	0009b4c0 	call	9b4c <__ssprint_r>
    383c:	d8802d17 	ldw	r2,180(sp)
    3840:	10c0030b 	ldhu	r3,12(r2)
    3844:	d8802f17 	ldw	r2,188(sp)
    3848:	18c0100c 	andi	r3,r3,64
    384c:	1806251e 	bne	r3,zero,50e4 <___svfprintf_internal_r+0x1c44>
    3850:	dfc04817 	ldw	ra,288(sp)
    3854:	df004717 	ldw	fp,284(sp)
    3858:	ddc04617 	ldw	r23,280(sp)
    385c:	dd804517 	ldw	r22,276(sp)
    3860:	dd404417 	ldw	r21,272(sp)
    3864:	dd004317 	ldw	r20,268(sp)
    3868:	dcc04217 	ldw	r19,264(sp)
    386c:	dc804117 	ldw	r18,260(sp)
    3870:	dc404017 	ldw	r17,256(sp)
    3874:	dc003f17 	ldw	r16,252(sp)
    3878:	dec04904 	addi	sp,sp,292
    387c:	f800283a 	ret
    3880:	d9002e17 	ldw	r4,184(sp)
    3884:	d9402e17 	ldw	r5,184(sp)
    3888:	21000017 	ldw	r4,0(r4)
    388c:	28800104 	addi	r2,r5,4
    3890:	d9003115 	stw	r4,196(sp)
    3894:	203fb916 	blt	r4,zero,377c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153177c>
    3898:	d8802e15 	stw	r2,184(sp)
    389c:	bc400007 	ldb	r17,0(r23)
    38a0:	003f5406 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    38a4:	bc400007 	ldb	r17,0(r23)
    38a8:	01000a84 	movi	r4,42
    38ac:	b8c00044 	addi	r3,r23,1
    38b0:	89076926 	beq	r17,r4,5658 <___svfprintf_internal_r+0x21b8>
    38b4:	8cbff404 	addi	r18,r17,-48
    38b8:	b486b936 	bltu	r22,r18,53a0 <___svfprintf_internal_r+0x1f00>
    38bc:	0009883a 	mov	r4,zero
    38c0:	1823883a 	mov	r17,r3
    38c4:	01400284 	movi	r5,10
    38c8:	00020100 	call	2010 <__mulsi3>
    38cc:	88c00007 	ldb	r3,0(r17)
    38d0:	1489883a 	add	r4,r2,r18
    38d4:	8dc00044 	addi	r23,r17,1
    38d8:	1cbff404 	addi	r18,r3,-48
    38dc:	b823883a 	mov	r17,r23
    38e0:	b4bff82e 	bgeu	r22,r18,38c4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215318c4>
    38e4:	1823883a 	mov	r17,r3
    38e8:	20060416 	blt	r4,zero,50fc <___svfprintf_internal_r+0x1c5c>
    38ec:	d9002a15 	stw	r4,168(sp)
    38f0:	003f4106 	br	35f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f8>
    38f4:	8cbff404 	addi	r18,r17,-48
    38f8:	d8003115 	stw	zero,196(sp)
    38fc:	0009883a 	mov	r4,zero
    3900:	b823883a 	mov	r17,r23
    3904:	01400284 	movi	r5,10
    3908:	00020100 	call	2010 <__mulsi3>
    390c:	88c00007 	ldb	r3,0(r17)
    3910:	9089883a 	add	r4,r18,r2
    3914:	bdc00044 	addi	r23,r23,1
    3918:	1cbff404 	addi	r18,r3,-48
    391c:	b823883a 	mov	r17,r23
    3920:	b4bff82e 	bgeu	r22,r18,3904 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531904>
    3924:	1823883a 	mov	r17,r3
    3928:	d9003115 	stw	r4,196(sp)
    392c:	003f3206 	br	35f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f8>
    3930:	84002014 	ori	r16,r16,128
    3934:	bc400007 	ldb	r17,0(r23)
    3938:	003f2e06 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    393c:	8025883a 	mov	r18,r16
    3940:	dc002903 	ldbu	r16,164(sp)
    3944:	e011883a 	mov	r8,fp
    3948:	84003fcc 	andi	r16,r16,255
    394c:	8007721e 	bne	r16,zero,5718 <___svfprintf_internal_r+0x2278>
    3950:	9080020c 	andi	r2,r18,8
    3954:	1004a526 	beq	r2,zero,4bec <___svfprintf_internal_r+0x174c>
    3958:	d9002e17 	ldw	r4,184(sp)
    395c:	d9402e17 	ldw	r5,184(sp)
    3960:	d8802e17 	ldw	r2,184(sp)
    3964:	21000017 	ldw	r4,0(r4)
    3968:	29400117 	ldw	r5,4(r5)
    396c:	10800204 	addi	r2,r2,8
    3970:	d9003615 	stw	r4,216(sp)
    3974:	d9403715 	stw	r5,220(sp)
    3978:	d8802e15 	stw	r2,184(sp)
    397c:	d9003617 	ldw	r4,216(sp)
    3980:	d9403717 	ldw	r5,220(sp)
    3984:	da003e15 	stw	r8,248(sp)
    3988:	04000044 	movi	r16,1
    398c:	00098c00 	call	98c0 <__fpclassifyd>
    3990:	da003e17 	ldw	r8,248(sp)
    3994:	1404731e 	bne	r2,r16,4b64 <___svfprintf_internal_r+0x16c4>
    3998:	d9003617 	ldw	r4,216(sp)
    399c:	d9403717 	ldw	r5,220(sp)
    39a0:	000d883a 	mov	r6,zero
    39a4:	000f883a 	mov	r7,zero
    39a8:	000dbcc0 	call	dbcc <__ledf2>
    39ac:	da003e17 	ldw	r8,248(sp)
    39b0:	10061b16 	blt	r2,zero,5220 <___svfprintf_internal_r+0x1d80>
    39b4:	df002783 	ldbu	fp,158(sp)
    39b8:	008011c4 	movi	r2,71
    39bc:	1445810e 	bge	r2,r17,4fc4 <___svfprintf_internal_r+0x1b24>
    39c0:	04000074 	movhi	r16,1
    39c4:	84138904 	addi	r16,r16,20004
    39c8:	00c000c4 	movi	r3,3
    39cc:	00bfdfc4 	movi	r2,-129
    39d0:	d8c02915 	stw	r3,164(sp)
    39d4:	90a4703a 	and	r18,r18,r2
    39d8:	d8c02b15 	stw	r3,172(sp)
    39dc:	d8002a15 	stw	zero,168(sp)
    39e0:	d8003215 	stw	zero,200(sp)
    39e4:	00006c06 	br	3b98 <___svfprintf_internal_r+0x6f8>
    39e8:	84000214 	ori	r16,r16,8
    39ec:	bc400007 	ldb	r17,0(r23)
    39f0:	003f0006 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    39f4:	8025883a 	mov	r18,r16
    39f8:	dc002903 	ldbu	r16,164(sp)
    39fc:	e011883a 	mov	r8,fp
    3a00:	84003fcc 	andi	r16,r16,255
    3a04:	80073f1e 	bne	r16,zero,5704 <___svfprintf_internal_r+0x2264>
    3a08:	94800414 	ori	r18,r18,16
    3a0c:	9080080c 	andi	r2,r18,32
    3a10:	1003bb26 	beq	r2,zero,4900 <___svfprintf_internal_r+0x1460>
    3a14:	d9002e17 	ldw	r4,184(sp)
    3a18:	20800117 	ldw	r2,4(r4)
    3a1c:	25000017 	ldw	r20,0(r4)
    3a20:	21000204 	addi	r4,r4,8
    3a24:	d9002e15 	stw	r4,184(sp)
    3a28:	102d883a 	mov	r22,r2
    3a2c:	1003bd16 	blt	r2,zero,4924 <___svfprintf_internal_r+0x1484>
    3a30:	d9002a17 	ldw	r4,168(sp)
    3a34:	df002783 	ldbu	fp,158(sp)
    3a38:	2003d016 	blt	r4,zero,497c <___svfprintf_internal_r+0x14dc>
    3a3c:	00ffdfc4 	movi	r3,-129
    3a40:	a584b03a 	or	r2,r20,r22
    3a44:	90e4703a 	and	r18,r18,r3
    3a48:	10015026 	beq	r2,zero,3f8c <___svfprintf_internal_r+0xaec>
    3a4c:	b0037026 	beq	r22,zero,4810 <___svfprintf_internal_r+0x1370>
    3a50:	dc402915 	stw	r17,164(sp)
    3a54:	dc001e04 	addi	r16,sp,120
    3a58:	b023883a 	mov	r17,r22
    3a5c:	402d883a 	mov	r22,r8
    3a60:	a009883a 	mov	r4,r20
    3a64:	880b883a 	mov	r5,r17
    3a68:	01800284 	movi	r6,10
    3a6c:	000f883a 	mov	r7,zero
    3a70:	000c0740 	call	c074 <__umoddi3>
    3a74:	10800c04 	addi	r2,r2,48
    3a78:	843fffc4 	addi	r16,r16,-1
    3a7c:	a009883a 	mov	r4,r20
    3a80:	880b883a 	mov	r5,r17
    3a84:	80800005 	stb	r2,0(r16)
    3a88:	01800284 	movi	r6,10
    3a8c:	000f883a 	mov	r7,zero
    3a90:	000ba780 	call	ba78 <__udivdi3>
    3a94:	1029883a 	mov	r20,r2
    3a98:	10c4b03a 	or	r2,r2,r3
    3a9c:	1823883a 	mov	r17,r3
    3aa0:	103fef1e 	bne	r2,zero,3a60 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a60>
    3aa4:	d8c02817 	ldw	r3,160(sp)
    3aa8:	dc402917 	ldw	r17,164(sp)
    3aac:	b011883a 	mov	r8,r22
    3ab0:	1c07c83a 	sub	r3,r3,r16
    3ab4:	d8c02b15 	stw	r3,172(sp)
    3ab8:	00003106 	br	3b80 <___svfprintf_internal_r+0x6e0>
    3abc:	8025883a 	mov	r18,r16
    3ac0:	dc002903 	ldbu	r16,164(sp)
    3ac4:	e011883a 	mov	r8,fp
    3ac8:	84003fcc 	andi	r16,r16,255
    3acc:	80070a1e 	bne	r16,zero,56f8 <___svfprintf_internal_r+0x2258>
    3ad0:	94800414 	ori	r18,r18,16
    3ad4:	9080080c 	andi	r2,r18,32
    3ad8:	1002f626 	beq	r2,zero,46b4 <___svfprintf_internal_r+0x1214>
    3adc:	d9002e17 	ldw	r4,184(sp)
    3ae0:	d9402a17 	ldw	r5,168(sp)
    3ae4:	d8002785 	stb	zero,158(sp)
    3ae8:	20800204 	addi	r2,r4,8
    3aec:	25000017 	ldw	r20,0(r4)
    3af0:	25800117 	ldw	r22,4(r4)
    3af4:	28043716 	blt	r5,zero,4bd4 <___svfprintf_internal_r+0x1734>
    3af8:	013fdfc4 	movi	r4,-129
    3afc:	a586b03a 	or	r3,r20,r22
    3b00:	d8802e15 	stw	r2,184(sp)
    3b04:	9124703a 	and	r18,r18,r4
    3b08:	1802f71e 	bne	r3,zero,46e8 <___svfprintf_internal_r+0x1248>
    3b0c:	d9402a17 	ldw	r5,168(sp)
    3b10:	0039883a 	mov	fp,zero
    3b14:	2806df26 	beq	r5,zero,5694 <___svfprintf_internal_r+0x21f4>
    3b18:	0029883a 	mov	r20,zero
    3b1c:	002d883a 	mov	r22,zero
    3b20:	dc001e04 	addi	r16,sp,120
    3b24:	a006d0fa 	srli	r3,r20,3
    3b28:	b008977a 	slli	r4,r22,29
    3b2c:	b02cd0fa 	srli	r22,r22,3
    3b30:	a50001cc 	andi	r20,r20,7
    3b34:	a0800c04 	addi	r2,r20,48
    3b38:	843fffc4 	addi	r16,r16,-1
    3b3c:	20e8b03a 	or	r20,r4,r3
    3b40:	80800005 	stb	r2,0(r16)
    3b44:	a586b03a 	or	r3,r20,r22
    3b48:	183ff61e 	bne	r3,zero,3b24 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b24>
    3b4c:	90c0004c 	andi	r3,r18,1
    3b50:	18013f26 	beq	r3,zero,4050 <___svfprintf_internal_r+0xbb0>
    3b54:	10803fcc 	andi	r2,r2,255
    3b58:	1080201c 	xori	r2,r2,128
    3b5c:	10bfe004 	addi	r2,r2,-128
    3b60:	00c00c04 	movi	r3,48
    3b64:	10c13a26 	beq	r2,r3,4050 <___svfprintf_internal_r+0xbb0>
    3b68:	80ffffc5 	stb	r3,-1(r16)
    3b6c:	d8c02817 	ldw	r3,160(sp)
    3b70:	80bfffc4 	addi	r2,r16,-1
    3b74:	1021883a 	mov	r16,r2
    3b78:	1887c83a 	sub	r3,r3,r2
    3b7c:	d8c02b15 	stw	r3,172(sp)
    3b80:	d8802b17 	ldw	r2,172(sp)
    3b84:	d9002a17 	ldw	r4,168(sp)
    3b88:	1100010e 	bge	r2,r4,3b90 <___svfprintf_internal_r+0x6f0>
    3b8c:	2005883a 	mov	r2,r4
    3b90:	d8802915 	stw	r2,164(sp)
    3b94:	d8003215 	stw	zero,200(sp)
    3b98:	e7003fcc 	andi	fp,fp,255
    3b9c:	e700201c 	xori	fp,fp,128
    3ba0:	e73fe004 	addi	fp,fp,-128
    3ba4:	e0000326 	beq	fp,zero,3bb4 <___svfprintf_internal_r+0x714>
    3ba8:	d8c02917 	ldw	r3,164(sp)
    3bac:	18c00044 	addi	r3,r3,1
    3bb0:	d8c02915 	stw	r3,164(sp)
    3bb4:	90c0008c 	andi	r3,r18,2
    3bb8:	d8c02c15 	stw	r3,176(sp)
    3bbc:	18000326 	beq	r3,zero,3bcc <___svfprintf_internal_r+0x72c>
    3bc0:	d8c02917 	ldw	r3,164(sp)
    3bc4:	18c00084 	addi	r3,r3,2
    3bc8:	d8c02915 	stw	r3,164(sp)
    3bcc:	90c0210c 	andi	r3,r18,132
    3bd0:	d8c03015 	stw	r3,192(sp)
    3bd4:	1801c31e 	bne	r3,zero,42e4 <___svfprintf_internal_r+0xe44>
    3bd8:	d9003117 	ldw	r4,196(sp)
    3bdc:	d8c02917 	ldw	r3,164(sp)
    3be0:	20e9c83a 	sub	r20,r4,r3
    3be4:	0501bf0e 	bge	zero,r20,42e4 <___svfprintf_internal_r+0xe44>
    3be8:	02400404 	movi	r9,16
    3bec:	d8c02017 	ldw	r3,128(sp)
    3bf0:	d8801f17 	ldw	r2,124(sp)
    3bf4:	4d053d0e 	bge	r9,r20,50ec <___svfprintf_internal_r+0x1c4c>
    3bf8:	01400074 	movhi	r5,1
    3bfc:	29539c84 	addi	r5,r5,20082
    3c00:	dc403c15 	stw	r17,240(sp)
    3c04:	d9403515 	stw	r5,212(sp)
    3c08:	a023883a 	mov	r17,r20
    3c0c:	482d883a 	mov	r22,r9
    3c10:	9029883a 	mov	r20,r18
    3c14:	070001c4 	movi	fp,7
    3c18:	8025883a 	mov	r18,r16
    3c1c:	dc002d17 	ldw	r16,180(sp)
    3c20:	00000306 	br	3c30 <___svfprintf_internal_r+0x790>
    3c24:	8c7ffc04 	addi	r17,r17,-16
    3c28:	42000204 	addi	r8,r8,8
    3c2c:	b440130e 	bge	r22,r17,3c7c <___svfprintf_internal_r+0x7dc>
    3c30:	01000074 	movhi	r4,1
    3c34:	18c00404 	addi	r3,r3,16
    3c38:	10800044 	addi	r2,r2,1
    3c3c:	21139c84 	addi	r4,r4,20082
    3c40:	41000015 	stw	r4,0(r8)
    3c44:	45800115 	stw	r22,4(r8)
    3c48:	d8c02015 	stw	r3,128(sp)
    3c4c:	d8801f15 	stw	r2,124(sp)
    3c50:	e0bff40e 	bge	fp,r2,3c24 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531c24>
    3c54:	d9801e04 	addi	r6,sp,120
    3c58:	800b883a 	mov	r5,r16
    3c5c:	9809883a 	mov	r4,r19
    3c60:	0009b4c0 	call	9b4c <__ssprint_r>
    3c64:	103ef51e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    3c68:	8c7ffc04 	addi	r17,r17,-16
    3c6c:	d8c02017 	ldw	r3,128(sp)
    3c70:	d8801f17 	ldw	r2,124(sp)
    3c74:	da000404 	addi	r8,sp,16
    3c78:	b47fed16 	blt	r22,r17,3c30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531c30>
    3c7c:	9021883a 	mov	r16,r18
    3c80:	a025883a 	mov	r18,r20
    3c84:	8829883a 	mov	r20,r17
    3c88:	dc403c17 	ldw	r17,240(sp)
    3c8c:	d9403517 	ldw	r5,212(sp)
    3c90:	a0c7883a 	add	r3,r20,r3
    3c94:	10800044 	addi	r2,r2,1
    3c98:	41400015 	stw	r5,0(r8)
    3c9c:	45000115 	stw	r20,4(r8)
    3ca0:	d8c02015 	stw	r3,128(sp)
    3ca4:	d8801f15 	stw	r2,124(sp)
    3ca8:	010001c4 	movi	r4,7
    3cac:	2082c116 	blt	r4,r2,47b4 <___svfprintf_internal_r+0x1314>
    3cb0:	df002787 	ldb	fp,158(sp)
    3cb4:	42000204 	addi	r8,r8,8
    3cb8:	e0000c26 	beq	fp,zero,3cec <___svfprintf_internal_r+0x84c>
    3cbc:	d8801f17 	ldw	r2,124(sp)
    3cc0:	d9002784 	addi	r4,sp,158
    3cc4:	18c00044 	addi	r3,r3,1
    3cc8:	10800044 	addi	r2,r2,1
    3ccc:	41000015 	stw	r4,0(r8)
    3cd0:	01000044 	movi	r4,1
    3cd4:	41000115 	stw	r4,4(r8)
    3cd8:	d8c02015 	stw	r3,128(sp)
    3cdc:	d8801f15 	stw	r2,124(sp)
    3ce0:	010001c4 	movi	r4,7
    3ce4:	20825a16 	blt	r4,r2,4650 <___svfprintf_internal_r+0x11b0>
    3ce8:	42000204 	addi	r8,r8,8
    3cec:	d8802c17 	ldw	r2,176(sp)
    3cf0:	10000c26 	beq	r2,zero,3d24 <___svfprintf_internal_r+0x884>
    3cf4:	d8801f17 	ldw	r2,124(sp)
    3cf8:	d9002704 	addi	r4,sp,156
    3cfc:	18c00084 	addi	r3,r3,2
    3d00:	10800044 	addi	r2,r2,1
    3d04:	41000015 	stw	r4,0(r8)
    3d08:	01000084 	movi	r4,2
    3d0c:	41000115 	stw	r4,4(r8)
    3d10:	d8c02015 	stw	r3,128(sp)
    3d14:	d8801f15 	stw	r2,124(sp)
    3d18:	010001c4 	movi	r4,7
    3d1c:	20825416 	blt	r4,r2,4670 <___svfprintf_internal_r+0x11d0>
    3d20:	42000204 	addi	r8,r8,8
    3d24:	d9003017 	ldw	r4,192(sp)
    3d28:	00802004 	movi	r2,128
    3d2c:	2081b926 	beq	r4,r2,4414 <___svfprintf_internal_r+0xf74>
    3d30:	d9402a17 	ldw	r5,168(sp)
    3d34:	d8802b17 	ldw	r2,172(sp)
    3d38:	28adc83a 	sub	r22,r5,r2
    3d3c:	05802f0e 	bge	zero,r22,3dfc <___svfprintf_internal_r+0x95c>
    3d40:	07000404 	movi	fp,16
    3d44:	d8801f17 	ldw	r2,124(sp)
    3d48:	e583e20e 	bge	fp,r22,4cd4 <___svfprintf_internal_r+0x1834>
    3d4c:	01400074 	movhi	r5,1
    3d50:	29539884 	addi	r5,r5,20066
    3d54:	dc402a15 	stw	r17,168(sp)
    3d58:	d9402c15 	stw	r5,176(sp)
    3d5c:	b023883a 	mov	r17,r22
    3d60:	050001c4 	movi	r20,7
    3d64:	902d883a 	mov	r22,r18
    3d68:	8025883a 	mov	r18,r16
    3d6c:	dc002d17 	ldw	r16,180(sp)
    3d70:	00000306 	br	3d80 <___svfprintf_internal_r+0x8e0>
    3d74:	8c7ffc04 	addi	r17,r17,-16
    3d78:	42000204 	addi	r8,r8,8
    3d7c:	e440110e 	bge	fp,r17,3dc4 <___svfprintf_internal_r+0x924>
    3d80:	18c00404 	addi	r3,r3,16
    3d84:	10800044 	addi	r2,r2,1
    3d88:	45400015 	stw	r21,0(r8)
    3d8c:	47000115 	stw	fp,4(r8)
    3d90:	d8c02015 	stw	r3,128(sp)
    3d94:	d8801f15 	stw	r2,124(sp)
    3d98:	a0bff60e 	bge	r20,r2,3d74 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531d74>
    3d9c:	d9801e04 	addi	r6,sp,120
    3da0:	800b883a 	mov	r5,r16
    3da4:	9809883a 	mov	r4,r19
    3da8:	0009b4c0 	call	9b4c <__ssprint_r>
    3dac:	103ea31e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    3db0:	8c7ffc04 	addi	r17,r17,-16
    3db4:	d8c02017 	ldw	r3,128(sp)
    3db8:	d8801f17 	ldw	r2,124(sp)
    3dbc:	da000404 	addi	r8,sp,16
    3dc0:	e47fef16 	blt	fp,r17,3d80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531d80>
    3dc4:	9021883a 	mov	r16,r18
    3dc8:	b025883a 	mov	r18,r22
    3dcc:	882d883a 	mov	r22,r17
    3dd0:	dc402a17 	ldw	r17,168(sp)
    3dd4:	d9002c17 	ldw	r4,176(sp)
    3dd8:	1d87883a 	add	r3,r3,r22
    3ddc:	10800044 	addi	r2,r2,1
    3de0:	41000015 	stw	r4,0(r8)
    3de4:	45800115 	stw	r22,4(r8)
    3de8:	d8c02015 	stw	r3,128(sp)
    3dec:	d8801f15 	stw	r2,124(sp)
    3df0:	010001c4 	movi	r4,7
    3df4:	20820e16 	blt	r4,r2,4630 <___svfprintf_internal_r+0x1190>
    3df8:	42000204 	addi	r8,r8,8
    3dfc:	9080400c 	andi	r2,r18,256
    3e00:	10013a1e 	bne	r2,zero,42ec <___svfprintf_internal_r+0xe4c>
    3e04:	d9402b17 	ldw	r5,172(sp)
    3e08:	d8801f17 	ldw	r2,124(sp)
    3e0c:	44000015 	stw	r16,0(r8)
    3e10:	1947883a 	add	r3,r3,r5
    3e14:	10800044 	addi	r2,r2,1
    3e18:	41400115 	stw	r5,4(r8)
    3e1c:	d8c02015 	stw	r3,128(sp)
    3e20:	d8801f15 	stw	r2,124(sp)
    3e24:	010001c4 	movi	r4,7
    3e28:	2081f316 	blt	r4,r2,45f8 <___svfprintf_internal_r+0x1158>
    3e2c:	42000204 	addi	r8,r8,8
    3e30:	9480010c 	andi	r18,r18,4
    3e34:	90003226 	beq	r18,zero,3f00 <___svfprintf_internal_r+0xa60>
    3e38:	d9403117 	ldw	r5,196(sp)
    3e3c:	d8802917 	ldw	r2,164(sp)
    3e40:	28a1c83a 	sub	r16,r5,r2
    3e44:	04002e0e 	bge	zero,r16,3f00 <___svfprintf_internal_r+0xa60>
    3e48:	04400404 	movi	r17,16
    3e4c:	d8801f17 	ldw	r2,124(sp)
    3e50:	8c04db0e 	bge	r17,r16,51c0 <___svfprintf_internal_r+0x1d20>
    3e54:	01400074 	movhi	r5,1
    3e58:	29539c84 	addi	r5,r5,20082
    3e5c:	d9403515 	stw	r5,212(sp)
    3e60:	048001c4 	movi	r18,7
    3e64:	dd002d17 	ldw	r20,180(sp)
    3e68:	00000306 	br	3e78 <___svfprintf_internal_r+0x9d8>
    3e6c:	843ffc04 	addi	r16,r16,-16
    3e70:	42000204 	addi	r8,r8,8
    3e74:	8c00130e 	bge	r17,r16,3ec4 <___svfprintf_internal_r+0xa24>
    3e78:	01000074 	movhi	r4,1
    3e7c:	18c00404 	addi	r3,r3,16
    3e80:	10800044 	addi	r2,r2,1
    3e84:	21139c84 	addi	r4,r4,20082
    3e88:	41000015 	stw	r4,0(r8)
    3e8c:	44400115 	stw	r17,4(r8)
    3e90:	d8c02015 	stw	r3,128(sp)
    3e94:	d8801f15 	stw	r2,124(sp)
    3e98:	90bff40e 	bge	r18,r2,3e6c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e6c>
    3e9c:	d9801e04 	addi	r6,sp,120
    3ea0:	a00b883a 	mov	r5,r20
    3ea4:	9809883a 	mov	r4,r19
    3ea8:	0009b4c0 	call	9b4c <__ssprint_r>
    3eac:	103e631e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    3eb0:	843ffc04 	addi	r16,r16,-16
    3eb4:	d8c02017 	ldw	r3,128(sp)
    3eb8:	d8801f17 	ldw	r2,124(sp)
    3ebc:	da000404 	addi	r8,sp,16
    3ec0:	8c3fed16 	blt	r17,r16,3e78 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e78>
    3ec4:	d9403517 	ldw	r5,212(sp)
    3ec8:	1c07883a 	add	r3,r3,r16
    3ecc:	10800044 	addi	r2,r2,1
    3ed0:	41400015 	stw	r5,0(r8)
    3ed4:	44000115 	stw	r16,4(r8)
    3ed8:	d8c02015 	stw	r3,128(sp)
    3edc:	d8801f15 	stw	r2,124(sp)
    3ee0:	010001c4 	movi	r4,7
    3ee4:	2080060e 	bge	r4,r2,3f00 <___svfprintf_internal_r+0xa60>
    3ee8:	d9402d17 	ldw	r5,180(sp)
    3eec:	d9801e04 	addi	r6,sp,120
    3ef0:	9809883a 	mov	r4,r19
    3ef4:	0009b4c0 	call	9b4c <__ssprint_r>
    3ef8:	103e501e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    3efc:	d8c02017 	ldw	r3,128(sp)
    3f00:	d8803117 	ldw	r2,196(sp)
    3f04:	d9002917 	ldw	r4,164(sp)
    3f08:	1100010e 	bge	r2,r4,3f10 <___svfprintf_internal_r+0xa70>
    3f0c:	2005883a 	mov	r2,r4
    3f10:	d9402f17 	ldw	r5,188(sp)
    3f14:	288b883a 	add	r5,r5,r2
    3f18:	d9402f15 	stw	r5,188(sp)
    3f1c:	1801be1e 	bne	r3,zero,4618 <___svfprintf_internal_r+0x1178>
    3f20:	b8800007 	ldb	r2,0(r23)
    3f24:	d8001f15 	stw	zero,124(sp)
    3f28:	da000404 	addi	r8,sp,16
    3f2c:	103d891e 	bne	r2,zero,3554 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531554>
    3f30:	b823883a 	mov	r17,r23
    3f34:	003d9f06 	br	35b4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315b4>
    3f38:	8025883a 	mov	r18,r16
    3f3c:	dc002903 	ldbu	r16,164(sp)
    3f40:	e011883a 	mov	r8,fp
    3f44:	84003fcc 	andi	r16,r16,255
    3f48:	8005e61e 	bne	r16,zero,56e4 <___svfprintf_internal_r+0x2244>
    3f4c:	94800414 	ori	r18,r18,16
    3f50:	9080080c 	andi	r2,r18,32
    3f54:	10022026 	beq	r2,zero,47d8 <___svfprintf_internal_r+0x1338>
    3f58:	d9002e17 	ldw	r4,184(sp)
    3f5c:	d9402a17 	ldw	r5,168(sp)
    3f60:	d8002785 	stb	zero,158(sp)
    3f64:	20c00204 	addi	r3,r4,8
    3f68:	25000017 	ldw	r20,0(r4)
    3f6c:	25800117 	ldw	r22,4(r4)
    3f70:	2803ad16 	blt	r5,zero,4e28 <___svfprintf_internal_r+0x1988>
    3f74:	013fdfc4 	movi	r4,-129
    3f78:	a584b03a 	or	r2,r20,r22
    3f7c:	d8c02e15 	stw	r3,184(sp)
    3f80:	9124703a 	and	r18,r18,r4
    3f84:	0039883a 	mov	fp,zero
    3f88:	103eb01e 	bne	r2,zero,3a4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a4c>
    3f8c:	d8802a17 	ldw	r2,168(sp)
    3f90:	1002e71e 	bne	r2,zero,4b30 <___svfprintf_internal_r+0x1690>
    3f94:	d8002a15 	stw	zero,168(sp)
    3f98:	d8002b15 	stw	zero,172(sp)
    3f9c:	dc001e04 	addi	r16,sp,120
    3fa0:	003ef706 	br	3b80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b80>
    3fa4:	8025883a 	mov	r18,r16
    3fa8:	dc002903 	ldbu	r16,164(sp)
    3fac:	e011883a 	mov	r8,fp
    3fb0:	84003fcc 	andi	r16,r16,255
    3fb4:	8005c81e 	bne	r16,zero,56d8 <___svfprintf_internal_r+0x2238>
    3fb8:	01000074 	movhi	r4,1
    3fbc:	21138c04 	addi	r4,r4,20016
    3fc0:	d9003a15 	stw	r4,232(sp)
    3fc4:	9080080c 	andi	r2,r18,32
    3fc8:	10007226 	beq	r2,zero,4194 <___svfprintf_internal_r+0xcf4>
    3fcc:	d9402e17 	ldw	r5,184(sp)
    3fd0:	2d000017 	ldw	r20,0(r5)
    3fd4:	2d800117 	ldw	r22,4(r5)
    3fd8:	29400204 	addi	r5,r5,8
    3fdc:	d9402e15 	stw	r5,184(sp)
    3fe0:	9080004c 	andi	r2,r18,1
    3fe4:	1001aa26 	beq	r2,zero,4690 <___svfprintf_internal_r+0x11f0>
    3fe8:	a584b03a 	or	r2,r20,r22
    3fec:	10032526 	beq	r2,zero,4c84 <___svfprintf_internal_r+0x17e4>
    3ff0:	d8c02a17 	ldw	r3,168(sp)
    3ff4:	00800c04 	movi	r2,48
    3ff8:	d8802705 	stb	r2,156(sp)
    3ffc:	dc402745 	stb	r17,157(sp)
    4000:	d8002785 	stb	zero,158(sp)
    4004:	90800094 	ori	r2,r18,2
    4008:	1804a316 	blt	r3,zero,5298 <___svfprintf_internal_r+0x1df8>
    400c:	00bfdfc4 	movi	r2,-129
    4010:	90a4703a 	and	r18,r18,r2
    4014:	94800094 	ori	r18,r18,2
    4018:	0039883a 	mov	fp,zero
    401c:	d9003a17 	ldw	r4,232(sp)
    4020:	dc001e04 	addi	r16,sp,120
    4024:	a08003cc 	andi	r2,r20,15
    4028:	b006973a 	slli	r3,r22,28
    402c:	2085883a 	add	r2,r4,r2
    4030:	a028d13a 	srli	r20,r20,4
    4034:	10800003 	ldbu	r2,0(r2)
    4038:	b02cd13a 	srli	r22,r22,4
    403c:	843fffc4 	addi	r16,r16,-1
    4040:	1d28b03a 	or	r20,r3,r20
    4044:	80800005 	stb	r2,0(r16)
    4048:	a584b03a 	or	r2,r20,r22
    404c:	103ff51e 	bne	r2,zero,4024 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532024>
    4050:	d8c02817 	ldw	r3,160(sp)
    4054:	1c07c83a 	sub	r3,r3,r16
    4058:	d8c02b15 	stw	r3,172(sp)
    405c:	003ec806 	br	3b80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b80>
    4060:	d8c02e17 	ldw	r3,184(sp)
    4064:	d9002e17 	ldw	r4,184(sp)
    4068:	8025883a 	mov	r18,r16
    406c:	18800017 	ldw	r2,0(r3)
    4070:	21000104 	addi	r4,r4,4
    4074:	00c00044 	movi	r3,1
    4078:	e011883a 	mov	r8,fp
    407c:	d8c02915 	stw	r3,164(sp)
    4080:	d8002785 	stb	zero,158(sp)
    4084:	d8801405 	stb	r2,80(sp)
    4088:	d9002e15 	stw	r4,184(sp)
    408c:	d8c02b15 	stw	r3,172(sp)
    4090:	d8002a15 	stw	zero,168(sp)
    4094:	d8003215 	stw	zero,200(sp)
    4098:	dc001404 	addi	r16,sp,80
    409c:	0039883a 	mov	fp,zero
    40a0:	003ec406 	br	3bb4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531bb4>
    40a4:	8025883a 	mov	r18,r16
    40a8:	dc002903 	ldbu	r16,164(sp)
    40ac:	e011883a 	mov	r8,fp
    40b0:	84003fcc 	andi	r16,r16,255
    40b4:	803e8726 	beq	r16,zero,3ad4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531ad4>
    40b8:	d8c02b03 	ldbu	r3,172(sp)
    40bc:	d8c02785 	stb	r3,158(sp)
    40c0:	003e8406 	br	3ad4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531ad4>
    40c4:	00c00044 	movi	r3,1
    40c8:	d8c02905 	stb	r3,164(sp)
    40cc:	00c00ac4 	movi	r3,43
    40d0:	d8c02b05 	stb	r3,172(sp)
    40d4:	bc400007 	ldb	r17,0(r23)
    40d8:	003d4606 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    40dc:	84000814 	ori	r16,r16,32
    40e0:	bc400007 	ldb	r17,0(r23)
    40e4:	003d4306 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    40e8:	d8802e17 	ldw	r2,184(sp)
    40ec:	8025883a 	mov	r18,r16
    40f0:	d8002785 	stb	zero,158(sp)
    40f4:	14000017 	ldw	r16,0(r2)
    40f8:	e011883a 	mov	r8,fp
    40fc:	15000104 	addi	r20,r2,4
    4100:	80042126 	beq	r16,zero,5188 <___svfprintf_internal_r+0x1ce8>
    4104:	d8c02a17 	ldw	r3,168(sp)
    4108:	1803ee16 	blt	r3,zero,50c4 <___svfprintf_internal_r+0x1c24>
    410c:	180d883a 	mov	r6,r3
    4110:	000b883a 	mov	r5,zero
    4114:	8009883a 	mov	r4,r16
    4118:	df003e15 	stw	fp,248(sp)
    411c:	0007f1c0 	call	7f1c <memchr>
    4120:	da003e17 	ldw	r8,248(sp)
    4124:	10046a26 	beq	r2,zero,52d0 <___svfprintf_internal_r+0x1e30>
    4128:	1405c83a 	sub	r2,r2,r16
    412c:	d8802b15 	stw	r2,172(sp)
    4130:	1003ea16 	blt	r2,zero,50dc <___svfprintf_internal_r+0x1c3c>
    4134:	df002783 	ldbu	fp,158(sp)
    4138:	d8802915 	stw	r2,164(sp)
    413c:	dd002e15 	stw	r20,184(sp)
    4140:	d8002a15 	stw	zero,168(sp)
    4144:	d8003215 	stw	zero,200(sp)
    4148:	003e9306 	br	3b98 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b98>
    414c:	8025883a 	mov	r18,r16
    4150:	dc002903 	ldbu	r16,164(sp)
    4154:	e011883a 	mov	r8,fp
    4158:	84003fcc 	andi	r16,r16,255
    415c:	803f7c26 	beq	r16,zero,3f50 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531f50>
    4160:	d8c02b03 	ldbu	r3,172(sp)
    4164:	d8c02785 	stb	r3,158(sp)
    4168:	003f7906 	br	3f50 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531f50>
    416c:	8025883a 	mov	r18,r16
    4170:	dc002903 	ldbu	r16,164(sp)
    4174:	e011883a 	mov	r8,fp
    4178:	84003fcc 	andi	r16,r16,255
    417c:	8005741e 	bne	r16,zero,5750 <___svfprintf_internal_r+0x22b0>
    4180:	01000074 	movhi	r4,1
    4184:	21139104 	addi	r4,r4,20036
    4188:	d9003a15 	stw	r4,232(sp)
    418c:	9080080c 	andi	r2,r18,32
    4190:	103f8e1e 	bne	r2,zero,3fcc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531fcc>
    4194:	9080040c 	andi	r2,r18,16
    4198:	1002a726 	beq	r2,zero,4c38 <___svfprintf_internal_r+0x1798>
    419c:	d8802e17 	ldw	r2,184(sp)
    41a0:	002d883a 	mov	r22,zero
    41a4:	15000017 	ldw	r20,0(r2)
    41a8:	10800104 	addi	r2,r2,4
    41ac:	d8802e15 	stw	r2,184(sp)
    41b0:	003f8b06 	br	3fe0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531fe0>
    41b4:	84000054 	ori	r16,r16,1
    41b8:	bc400007 	ldb	r17,0(r23)
    41bc:	003d0d06 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    41c0:	d8802b07 	ldb	r2,172(sp)
    41c4:	1002a41e 	bne	r2,zero,4c58 <___svfprintf_internal_r+0x17b8>
    41c8:	00c00044 	movi	r3,1
    41cc:	d8c02905 	stb	r3,164(sp)
    41d0:	00c00804 	movi	r3,32
    41d4:	d8c02b05 	stb	r3,172(sp)
    41d8:	bc400007 	ldb	r17,0(r23)
    41dc:	003d0506 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    41e0:	8025883a 	mov	r18,r16
    41e4:	dc002903 	ldbu	r16,164(sp)
    41e8:	e011883a 	mov	r8,fp
    41ec:	84003fcc 	andi	r16,r16,255
    41f0:	803e0626 	beq	r16,zero,3a0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a0c>
    41f4:	d8c02b03 	ldbu	r3,172(sp)
    41f8:	d8c02785 	stb	r3,158(sp)
    41fc:	003e0306 	br	3a0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a0c>
    4200:	bc400007 	ldb	r17,0(r23)
    4204:	00801b04 	movi	r2,108
    4208:	88830a26 	beq	r17,r2,4e34 <___svfprintf_internal_r+0x1994>
    420c:	84000414 	ori	r16,r16,16
    4210:	003cf806 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    4214:	8025883a 	mov	r18,r16
    4218:	dc002903 	ldbu	r16,164(sp)
    421c:	e011883a 	mov	r8,fp
    4220:	84003fcc 	andi	r16,r16,255
    4224:	8005471e 	bne	r16,zero,5744 <___svfprintf_internal_r+0x22a4>
    4228:	9080080c 	andi	r2,r18,32
    422c:	10028c26 	beq	r2,zero,4c60 <___svfprintf_internal_r+0x17c0>
    4230:	d9002e17 	ldw	r4,184(sp)
    4234:	d9402f17 	ldw	r5,188(sp)
    4238:	20800017 	ldw	r2,0(r4)
    423c:	2807d7fa 	srai	r3,r5,31
    4240:	21000104 	addi	r4,r4,4
    4244:	d9002e15 	stw	r4,184(sp)
    4248:	11400015 	stw	r5,0(r2)
    424c:	10c00115 	stw	r3,4(r2)
    4250:	003cbe06 	br	354c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153154c>
    4254:	84001014 	ori	r16,r16,64
    4258:	bc400007 	ldb	r17,0(r23)
    425c:	003ce506 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    4260:	01000074 	movhi	r4,1
    4264:	21139104 	addi	r4,r4,20036
    4268:	0039883a 	mov	fp,zero
    426c:	d9003a15 	stw	r4,232(sp)
    4270:	04401e04 	movi	r17,120
    4274:	003f6906 	br	401c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153201c>
    4278:	8025883a 	mov	r18,r16
    427c:	dc002903 	ldbu	r16,164(sp)
    4280:	e011883a 	mov	r8,fp
    4284:	84003fcc 	andi	r16,r16,255
    4288:	8005261e 	bne	r16,zero,5724 <___svfprintf_internal_r+0x2284>
    428c:	883d6526 	beq	r17,zero,3824 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531824>
    4290:	00c00044 	movi	r3,1
    4294:	d8c02915 	stw	r3,164(sp)
    4298:	dc401405 	stb	r17,80(sp)
    429c:	d8002785 	stb	zero,158(sp)
    42a0:	003f7a06 	br	408c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153208c>
    42a4:	01000074 	movhi	r4,1
    42a8:	21139104 	addi	r4,r4,20036
    42ac:	d9003a15 	stw	r4,232(sp)
    42b0:	d8c02e15 	stw	r3,184(sp)
    42b4:	1025883a 	mov	r18,r2
    42b8:	04401e04 	movi	r17,120
    42bc:	a584b03a 	or	r2,r20,r22
    42c0:	1000fa1e 	bne	r2,zero,46ac <___svfprintf_internal_r+0x120c>
    42c4:	0039883a 	mov	fp,zero
    42c8:	00800084 	movi	r2,2
    42cc:	10803fcc 	andi	r2,r2,255
    42d0:	00c00044 	movi	r3,1
    42d4:	10c21626 	beq	r2,r3,4b30 <___svfprintf_internal_r+0x1690>
    42d8:	00c00084 	movi	r3,2
    42dc:	10fe0e1e 	bne	r2,r3,3b18 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b18>
    42e0:	003d4606 	br	37fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215317fc>
    42e4:	d8c02017 	ldw	r3,128(sp)
    42e8:	003e7306 	br	3cb8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531cb8>
    42ec:	00801944 	movi	r2,101
    42f0:	14407c0e 	bge	r2,r17,44e4 <___svfprintf_internal_r+0x1044>
    42f4:	d9003617 	ldw	r4,216(sp)
    42f8:	d9403717 	ldw	r5,220(sp)
    42fc:	000d883a 	mov	r6,zero
    4300:	000f883a 	mov	r7,zero
    4304:	d8c03d15 	stw	r3,244(sp)
    4308:	da003e15 	stw	r8,248(sp)
    430c:	000da680 	call	da68 <__eqdf2>
    4310:	d8c03d17 	ldw	r3,244(sp)
    4314:	da003e17 	ldw	r8,248(sp)
    4318:	1000f51e 	bne	r2,zero,46f0 <___svfprintf_internal_r+0x1250>
    431c:	d8801f17 	ldw	r2,124(sp)
    4320:	01000074 	movhi	r4,1
    4324:	21139804 	addi	r4,r4,20064
    4328:	18c00044 	addi	r3,r3,1
    432c:	10800044 	addi	r2,r2,1
    4330:	41000015 	stw	r4,0(r8)
    4334:	01000044 	movi	r4,1
    4338:	41000115 	stw	r4,4(r8)
    433c:	d8c02015 	stw	r3,128(sp)
    4340:	d8801f15 	stw	r2,124(sp)
    4344:	010001c4 	movi	r4,7
    4348:	20826616 	blt	r4,r2,4ce4 <___svfprintf_internal_r+0x1844>
    434c:	42000204 	addi	r8,r8,8
    4350:	d8802617 	ldw	r2,152(sp)
    4354:	d9403317 	ldw	r5,204(sp)
    4358:	11400216 	blt	r2,r5,4364 <___svfprintf_internal_r+0xec4>
    435c:	9080004c 	andi	r2,r18,1
    4360:	103eb326 	beq	r2,zero,3e30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e30>
    4364:	d8803817 	ldw	r2,224(sp)
    4368:	d9003417 	ldw	r4,208(sp)
    436c:	d9403817 	ldw	r5,224(sp)
    4370:	1887883a 	add	r3,r3,r2
    4374:	d8801f17 	ldw	r2,124(sp)
    4378:	41000015 	stw	r4,0(r8)
    437c:	41400115 	stw	r5,4(r8)
    4380:	10800044 	addi	r2,r2,1
    4384:	d8c02015 	stw	r3,128(sp)
    4388:	d8801f15 	stw	r2,124(sp)
    438c:	010001c4 	movi	r4,7
    4390:	2082af16 	blt	r4,r2,4e50 <___svfprintf_internal_r+0x19b0>
    4394:	42000204 	addi	r8,r8,8
    4398:	d8803317 	ldw	r2,204(sp)
    439c:	143fffc4 	addi	r16,r2,-1
    43a0:	043ea30e 	bge	zero,r16,3e30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e30>
    43a4:	04400404 	movi	r17,16
    43a8:	d8801f17 	ldw	r2,124(sp)
    43ac:	8c00860e 	bge	r17,r16,45c8 <___svfprintf_internal_r+0x1128>
    43b0:	01400074 	movhi	r5,1
    43b4:	29539884 	addi	r5,r5,20066
    43b8:	d9402c15 	stw	r5,176(sp)
    43bc:	058001c4 	movi	r22,7
    43c0:	dd002d17 	ldw	r20,180(sp)
    43c4:	00000306 	br	43d4 <___svfprintf_internal_r+0xf34>
    43c8:	42000204 	addi	r8,r8,8
    43cc:	843ffc04 	addi	r16,r16,-16
    43d0:	8c00800e 	bge	r17,r16,45d4 <___svfprintf_internal_r+0x1134>
    43d4:	18c00404 	addi	r3,r3,16
    43d8:	10800044 	addi	r2,r2,1
    43dc:	45400015 	stw	r21,0(r8)
    43e0:	44400115 	stw	r17,4(r8)
    43e4:	d8c02015 	stw	r3,128(sp)
    43e8:	d8801f15 	stw	r2,124(sp)
    43ec:	b0bff60e 	bge	r22,r2,43c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215323c8>
    43f0:	d9801e04 	addi	r6,sp,120
    43f4:	a00b883a 	mov	r5,r20
    43f8:	9809883a 	mov	r4,r19
    43fc:	0009b4c0 	call	9b4c <__ssprint_r>
    4400:	103d0e1e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4404:	d8c02017 	ldw	r3,128(sp)
    4408:	d8801f17 	ldw	r2,124(sp)
    440c:	da000404 	addi	r8,sp,16
    4410:	003fee06 	br	43cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215323cc>
    4414:	d9403117 	ldw	r5,196(sp)
    4418:	d8802917 	ldw	r2,164(sp)
    441c:	28adc83a 	sub	r22,r5,r2
    4420:	05be430e 	bge	zero,r22,3d30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531d30>
    4424:	07000404 	movi	fp,16
    4428:	d8801f17 	ldw	r2,124(sp)
    442c:	e583a20e 	bge	fp,r22,52b8 <___svfprintf_internal_r+0x1e18>
    4430:	01400074 	movhi	r5,1
    4434:	29539884 	addi	r5,r5,20066
    4438:	dc403015 	stw	r17,192(sp)
    443c:	d9402c15 	stw	r5,176(sp)
    4440:	b023883a 	mov	r17,r22
    4444:	050001c4 	movi	r20,7
    4448:	902d883a 	mov	r22,r18
    444c:	8025883a 	mov	r18,r16
    4450:	dc002d17 	ldw	r16,180(sp)
    4454:	00000306 	br	4464 <___svfprintf_internal_r+0xfc4>
    4458:	8c7ffc04 	addi	r17,r17,-16
    445c:	42000204 	addi	r8,r8,8
    4460:	e440110e 	bge	fp,r17,44a8 <___svfprintf_internal_r+0x1008>
    4464:	18c00404 	addi	r3,r3,16
    4468:	10800044 	addi	r2,r2,1
    446c:	45400015 	stw	r21,0(r8)
    4470:	47000115 	stw	fp,4(r8)
    4474:	d8c02015 	stw	r3,128(sp)
    4478:	d8801f15 	stw	r2,124(sp)
    447c:	a0bff60e 	bge	r20,r2,4458 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532458>
    4480:	d9801e04 	addi	r6,sp,120
    4484:	800b883a 	mov	r5,r16
    4488:	9809883a 	mov	r4,r19
    448c:	0009b4c0 	call	9b4c <__ssprint_r>
    4490:	103cea1e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4494:	8c7ffc04 	addi	r17,r17,-16
    4498:	d8c02017 	ldw	r3,128(sp)
    449c:	d8801f17 	ldw	r2,124(sp)
    44a0:	da000404 	addi	r8,sp,16
    44a4:	e47fef16 	blt	fp,r17,4464 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532464>
    44a8:	9021883a 	mov	r16,r18
    44ac:	b025883a 	mov	r18,r22
    44b0:	882d883a 	mov	r22,r17
    44b4:	dc403017 	ldw	r17,192(sp)
    44b8:	d9002c17 	ldw	r4,176(sp)
    44bc:	1d87883a 	add	r3,r3,r22
    44c0:	10800044 	addi	r2,r2,1
    44c4:	41000015 	stw	r4,0(r8)
    44c8:	45800115 	stw	r22,4(r8)
    44cc:	d8c02015 	stw	r3,128(sp)
    44d0:	d8801f15 	stw	r2,124(sp)
    44d4:	010001c4 	movi	r4,7
    44d8:	20819a16 	blt	r4,r2,4b44 <___svfprintf_internal_r+0x16a4>
    44dc:	42000204 	addi	r8,r8,8
    44e0:	003e1306 	br	3d30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531d30>
    44e4:	d9403317 	ldw	r5,204(sp)
    44e8:	00800044 	movi	r2,1
    44ec:	18c00044 	addi	r3,r3,1
    44f0:	1141710e 	bge	r2,r5,4ab8 <___svfprintf_internal_r+0x1618>
    44f4:	dc401f17 	ldw	r17,124(sp)
    44f8:	00800044 	movi	r2,1
    44fc:	40800115 	stw	r2,4(r8)
    4500:	8c400044 	addi	r17,r17,1
    4504:	44000015 	stw	r16,0(r8)
    4508:	d8c02015 	stw	r3,128(sp)
    450c:	dc401f15 	stw	r17,124(sp)
    4510:	008001c4 	movi	r2,7
    4514:	14417416 	blt	r2,r17,4ae8 <___svfprintf_internal_r+0x1648>
    4518:	42000204 	addi	r8,r8,8
    451c:	d8803817 	ldw	r2,224(sp)
    4520:	d9003417 	ldw	r4,208(sp)
    4524:	8c400044 	addi	r17,r17,1
    4528:	10c7883a 	add	r3,r2,r3
    452c:	40800115 	stw	r2,4(r8)
    4530:	41000015 	stw	r4,0(r8)
    4534:	d8c02015 	stw	r3,128(sp)
    4538:	dc401f15 	stw	r17,124(sp)
    453c:	008001c4 	movi	r2,7
    4540:	14417216 	blt	r2,r17,4b0c <___svfprintf_internal_r+0x166c>
    4544:	45800204 	addi	r22,r8,8
    4548:	d9003617 	ldw	r4,216(sp)
    454c:	d9403717 	ldw	r5,220(sp)
    4550:	000d883a 	mov	r6,zero
    4554:	000f883a 	mov	r7,zero
    4558:	d8c03d15 	stw	r3,244(sp)
    455c:	000da680 	call	da68 <__eqdf2>
    4560:	d8c03d17 	ldw	r3,244(sp)
    4564:	1000b326 	beq	r2,zero,4834 <___svfprintf_internal_r+0x1394>
    4568:	d9403317 	ldw	r5,204(sp)
    456c:	84000044 	addi	r16,r16,1
    4570:	8c400044 	addi	r17,r17,1
    4574:	28bfffc4 	addi	r2,r5,-1
    4578:	1887883a 	add	r3,r3,r2
    457c:	b0800115 	stw	r2,4(r22)
    4580:	b4000015 	stw	r16,0(r22)
    4584:	d8c02015 	stw	r3,128(sp)
    4588:	dc401f15 	stw	r17,124(sp)
    458c:	008001c4 	movi	r2,7
    4590:	1440d216 	blt	r2,r17,48dc <___svfprintf_internal_r+0x143c>
    4594:	b5800204 	addi	r22,r22,8
    4598:	d9003b17 	ldw	r4,236(sp)
    459c:	df0022c4 	addi	fp,sp,139
    45a0:	8c400044 	addi	r17,r17,1
    45a4:	20c7883a 	add	r3,r4,r3
    45a8:	b7000015 	stw	fp,0(r22)
    45ac:	b1000115 	stw	r4,4(r22)
    45b0:	d8c02015 	stw	r3,128(sp)
    45b4:	dc401f15 	stw	r17,124(sp)
    45b8:	008001c4 	movi	r2,7
    45bc:	14400e16 	blt	r2,r17,45f8 <___svfprintf_internal_r+0x1158>
    45c0:	b2000204 	addi	r8,r22,8
    45c4:	003e1a06 	br	3e30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e30>
    45c8:	01000074 	movhi	r4,1
    45cc:	21139884 	addi	r4,r4,20066
    45d0:	d9002c15 	stw	r4,176(sp)
    45d4:	d9002c17 	ldw	r4,176(sp)
    45d8:	1c07883a 	add	r3,r3,r16
    45dc:	44000115 	stw	r16,4(r8)
    45e0:	41000015 	stw	r4,0(r8)
    45e4:	10800044 	addi	r2,r2,1
    45e8:	d8c02015 	stw	r3,128(sp)
    45ec:	d8801f15 	stw	r2,124(sp)
    45f0:	010001c4 	movi	r4,7
    45f4:	20be0d0e 	bge	r4,r2,3e2c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e2c>
    45f8:	d9402d17 	ldw	r5,180(sp)
    45fc:	d9801e04 	addi	r6,sp,120
    4600:	9809883a 	mov	r4,r19
    4604:	0009b4c0 	call	9b4c <__ssprint_r>
    4608:	103c8c1e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    460c:	d8c02017 	ldw	r3,128(sp)
    4610:	da000404 	addi	r8,sp,16
    4614:	003e0606 	br	3e30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e30>
    4618:	d9402d17 	ldw	r5,180(sp)
    461c:	d9801e04 	addi	r6,sp,120
    4620:	9809883a 	mov	r4,r19
    4624:	0009b4c0 	call	9b4c <__ssprint_r>
    4628:	103e3d26 	beq	r2,zero,3f20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531f20>
    462c:	003c8306 	br	383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4630:	d9402d17 	ldw	r5,180(sp)
    4634:	d9801e04 	addi	r6,sp,120
    4638:	9809883a 	mov	r4,r19
    463c:	0009b4c0 	call	9b4c <__ssprint_r>
    4640:	103c7e1e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4644:	d8c02017 	ldw	r3,128(sp)
    4648:	da000404 	addi	r8,sp,16
    464c:	003deb06 	br	3dfc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531dfc>
    4650:	d9402d17 	ldw	r5,180(sp)
    4654:	d9801e04 	addi	r6,sp,120
    4658:	9809883a 	mov	r4,r19
    465c:	0009b4c0 	call	9b4c <__ssprint_r>
    4660:	103c761e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4664:	d8c02017 	ldw	r3,128(sp)
    4668:	da000404 	addi	r8,sp,16
    466c:	003d9f06 	br	3cec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531cec>
    4670:	d9402d17 	ldw	r5,180(sp)
    4674:	d9801e04 	addi	r6,sp,120
    4678:	9809883a 	mov	r4,r19
    467c:	0009b4c0 	call	9b4c <__ssprint_r>
    4680:	103c6e1e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4684:	d8c02017 	ldw	r3,128(sp)
    4688:	da000404 	addi	r8,sp,16
    468c:	003da506 	br	3d24 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531d24>
    4690:	d9402a17 	ldw	r5,168(sp)
    4694:	d8002785 	stb	zero,158(sp)
    4698:	283f0816 	blt	r5,zero,42bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215322bc>
    469c:	00ffdfc4 	movi	r3,-129
    46a0:	a584b03a 	or	r2,r20,r22
    46a4:	90e4703a 	and	r18,r18,r3
    46a8:	103c5126 	beq	r2,zero,37f0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215317f0>
    46ac:	0039883a 	mov	fp,zero
    46b0:	003e5a06 	br	401c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153201c>
    46b4:	9080040c 	andi	r2,r18,16
    46b8:	10013d26 	beq	r2,zero,4bb0 <___svfprintf_internal_r+0x1710>
    46bc:	d8c02e17 	ldw	r3,184(sp)
    46c0:	d9002a17 	ldw	r4,168(sp)
    46c4:	d8002785 	stb	zero,158(sp)
    46c8:	18800104 	addi	r2,r3,4
    46cc:	1d000017 	ldw	r20,0(r3)
    46d0:	002d883a 	mov	r22,zero
    46d4:	20013f16 	blt	r4,zero,4bd4 <___svfprintf_internal_r+0x1734>
    46d8:	00ffdfc4 	movi	r3,-129
    46dc:	d8802e15 	stw	r2,184(sp)
    46e0:	90e4703a 	and	r18,r18,r3
    46e4:	a03d0926 	beq	r20,zero,3b0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b0c>
    46e8:	0039883a 	mov	fp,zero
    46ec:	003d0c06 	br	3b20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b20>
    46f0:	dc402617 	ldw	r17,152(sp)
    46f4:	0441830e 	bge	zero,r17,4d04 <___svfprintf_internal_r+0x1864>
    46f8:	dc403217 	ldw	r17,200(sp)
    46fc:	d8803317 	ldw	r2,204(sp)
    4700:	1440010e 	bge	r2,r17,4708 <___svfprintf_internal_r+0x1268>
    4704:	1023883a 	mov	r17,r2
    4708:	04400a0e 	bge	zero,r17,4734 <___svfprintf_internal_r+0x1294>
    470c:	d8801f17 	ldw	r2,124(sp)
    4710:	1c47883a 	add	r3,r3,r17
    4714:	44000015 	stw	r16,0(r8)
    4718:	10800044 	addi	r2,r2,1
    471c:	44400115 	stw	r17,4(r8)
    4720:	d8c02015 	stw	r3,128(sp)
    4724:	d8801f15 	stw	r2,124(sp)
    4728:	010001c4 	movi	r4,7
    472c:	20827516 	blt	r4,r2,5104 <___svfprintf_internal_r+0x1c64>
    4730:	42000204 	addi	r8,r8,8
    4734:	88027b16 	blt	r17,zero,5124 <___svfprintf_internal_r+0x1c84>
    4738:	d9003217 	ldw	r4,200(sp)
    473c:	2463c83a 	sub	r17,r4,r17
    4740:	0440990e 	bge	zero,r17,49a8 <___svfprintf_internal_r+0x1508>
    4744:	05800404 	movi	r22,16
    4748:	d8801f17 	ldw	r2,124(sp)
    474c:	b441530e 	bge	r22,r17,4c9c <___svfprintf_internal_r+0x17fc>
    4750:	01000074 	movhi	r4,1
    4754:	21139884 	addi	r4,r4,20066
    4758:	d9002c15 	stw	r4,176(sp)
    475c:	070001c4 	movi	fp,7
    4760:	dd002d17 	ldw	r20,180(sp)
    4764:	00000306 	br	4774 <___svfprintf_internal_r+0x12d4>
    4768:	42000204 	addi	r8,r8,8
    476c:	8c7ffc04 	addi	r17,r17,-16
    4770:	b4414d0e 	bge	r22,r17,4ca8 <___svfprintf_internal_r+0x1808>
    4774:	18c00404 	addi	r3,r3,16
    4778:	10800044 	addi	r2,r2,1
    477c:	45400015 	stw	r21,0(r8)
    4780:	45800115 	stw	r22,4(r8)
    4784:	d8c02015 	stw	r3,128(sp)
    4788:	d8801f15 	stw	r2,124(sp)
    478c:	e0bff60e 	bge	fp,r2,4768 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532768>
    4790:	d9801e04 	addi	r6,sp,120
    4794:	a00b883a 	mov	r5,r20
    4798:	9809883a 	mov	r4,r19
    479c:	0009b4c0 	call	9b4c <__ssprint_r>
    47a0:	103c261e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    47a4:	d8c02017 	ldw	r3,128(sp)
    47a8:	d8801f17 	ldw	r2,124(sp)
    47ac:	da000404 	addi	r8,sp,16
    47b0:	003fee06 	br	476c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153276c>
    47b4:	d9402d17 	ldw	r5,180(sp)
    47b8:	d9801e04 	addi	r6,sp,120
    47bc:	9809883a 	mov	r4,r19
    47c0:	0009b4c0 	call	9b4c <__ssprint_r>
    47c4:	103c1d1e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    47c8:	d8c02017 	ldw	r3,128(sp)
    47cc:	df002787 	ldb	fp,158(sp)
    47d0:	da000404 	addi	r8,sp,16
    47d4:	003d3806 	br	3cb8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531cb8>
    47d8:	9080040c 	andi	r2,r18,16
    47dc:	10005c26 	beq	r2,zero,4950 <___svfprintf_internal_r+0x14b0>
    47e0:	d8c02e17 	ldw	r3,184(sp)
    47e4:	d9002a17 	ldw	r4,168(sp)
    47e8:	d8002785 	stb	zero,158(sp)
    47ec:	18800104 	addi	r2,r3,4
    47f0:	1d000017 	ldw	r20,0(r3)
    47f4:	002d883a 	mov	r22,zero
    47f8:	20005e16 	blt	r4,zero,4974 <___svfprintf_internal_r+0x14d4>
    47fc:	00ffdfc4 	movi	r3,-129
    4800:	d8802e15 	stw	r2,184(sp)
    4804:	90e4703a 	and	r18,r18,r3
    4808:	0039883a 	mov	fp,zero
    480c:	a03ddf26 	beq	r20,zero,3f8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531f8c>
    4810:	00800244 	movi	r2,9
    4814:	153c8e36 	bltu	r2,r20,3a50 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a50>
    4818:	a5000c04 	addi	r20,r20,48
    481c:	dc001dc4 	addi	r16,sp,119
    4820:	dd001dc5 	stb	r20,119(sp)
    4824:	d8c02817 	ldw	r3,160(sp)
    4828:	1c07c83a 	sub	r3,r3,r16
    482c:	d8c02b15 	stw	r3,172(sp)
    4830:	003cd306 	br	3b80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b80>
    4834:	d8803317 	ldw	r2,204(sp)
    4838:	143fffc4 	addi	r16,r2,-1
    483c:	043f560e 	bge	zero,r16,4598 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532598>
    4840:	07000404 	movi	fp,16
    4844:	e403530e 	bge	fp,r16,5594 <___svfprintf_internal_r+0x20f4>
    4848:	01400074 	movhi	r5,1
    484c:	29539884 	addi	r5,r5,20066
    4850:	d9402c15 	stw	r5,176(sp)
    4854:	01c001c4 	movi	r7,7
    4858:	dd002d17 	ldw	r20,180(sp)
    485c:	00000306 	br	486c <___svfprintf_internal_r+0x13cc>
    4860:	843ffc04 	addi	r16,r16,-16
    4864:	b5800204 	addi	r22,r22,8
    4868:	e400130e 	bge	fp,r16,48b8 <___svfprintf_internal_r+0x1418>
    486c:	18c00404 	addi	r3,r3,16
    4870:	8c400044 	addi	r17,r17,1
    4874:	b5400015 	stw	r21,0(r22)
    4878:	b7000115 	stw	fp,4(r22)
    487c:	d8c02015 	stw	r3,128(sp)
    4880:	dc401f15 	stw	r17,124(sp)
    4884:	3c7ff60e 	bge	r7,r17,4860 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532860>
    4888:	d9801e04 	addi	r6,sp,120
    488c:	a00b883a 	mov	r5,r20
    4890:	9809883a 	mov	r4,r19
    4894:	d9c03d15 	stw	r7,244(sp)
    4898:	0009b4c0 	call	9b4c <__ssprint_r>
    489c:	d9c03d17 	ldw	r7,244(sp)
    48a0:	103be61e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    48a4:	843ffc04 	addi	r16,r16,-16
    48a8:	d8c02017 	ldw	r3,128(sp)
    48ac:	dc401f17 	ldw	r17,124(sp)
    48b0:	dd800404 	addi	r22,sp,16
    48b4:	e43fed16 	blt	fp,r16,486c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153286c>
    48b8:	d8802c17 	ldw	r2,176(sp)
    48bc:	1c07883a 	add	r3,r3,r16
    48c0:	8c400044 	addi	r17,r17,1
    48c4:	b0800015 	stw	r2,0(r22)
    48c8:	b4000115 	stw	r16,4(r22)
    48cc:	d8c02015 	stw	r3,128(sp)
    48d0:	dc401f15 	stw	r17,124(sp)
    48d4:	008001c4 	movi	r2,7
    48d8:	147f2e0e 	bge	r2,r17,4594 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532594>
    48dc:	d9402d17 	ldw	r5,180(sp)
    48e0:	d9801e04 	addi	r6,sp,120
    48e4:	9809883a 	mov	r4,r19
    48e8:	0009b4c0 	call	9b4c <__ssprint_r>
    48ec:	103bd31e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    48f0:	d8c02017 	ldw	r3,128(sp)
    48f4:	dc401f17 	ldw	r17,124(sp)
    48f8:	dd800404 	addi	r22,sp,16
    48fc:	003f2606 	br	4598 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532598>
    4900:	9080040c 	andi	r2,r18,16
    4904:	1000c326 	beq	r2,zero,4c14 <___svfprintf_internal_r+0x1774>
    4908:	d9402e17 	ldw	r5,184(sp)
    490c:	2d000017 	ldw	r20,0(r5)
    4910:	29400104 	addi	r5,r5,4
    4914:	d9402e15 	stw	r5,184(sp)
    4918:	a02dd7fa 	srai	r22,r20,31
    491c:	b005883a 	mov	r2,r22
    4920:	103c430e 	bge	r2,zero,3a30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a30>
    4924:	d9402a17 	ldw	r5,168(sp)
    4928:	0529c83a 	sub	r20,zero,r20
    492c:	07000b44 	movi	fp,45
    4930:	a004c03a 	cmpne	r2,r20,zero
    4934:	05adc83a 	sub	r22,zero,r22
    4938:	df002785 	stb	fp,158(sp)
    493c:	b0adc83a 	sub	r22,r22,r2
    4940:	28022e16 	blt	r5,zero,51fc <___svfprintf_internal_r+0x1d5c>
    4944:	00bfdfc4 	movi	r2,-129
    4948:	90a4703a 	and	r18,r18,r2
    494c:	003c3f06 	br	3a4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a4c>
    4950:	9080100c 	andi	r2,r18,64
    4954:	d8002785 	stb	zero,158(sp)
    4958:	10012526 	beq	r2,zero,4df0 <___svfprintf_internal_r+0x1950>
    495c:	d9402e17 	ldw	r5,184(sp)
    4960:	d8c02a17 	ldw	r3,168(sp)
    4964:	002d883a 	mov	r22,zero
    4968:	28800104 	addi	r2,r5,4
    496c:	2d00000b 	ldhu	r20,0(r5)
    4970:	183fa20e 	bge	r3,zero,47fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215327fc>
    4974:	d8802e15 	stw	r2,184(sp)
    4978:	0039883a 	mov	fp,zero
    497c:	a584b03a 	or	r2,r20,r22
    4980:	103c321e 	bne	r2,zero,3a4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a4c>
    4984:	00800044 	movi	r2,1
    4988:	003e5006 	br	42cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215322cc>
    498c:	d9402d17 	ldw	r5,180(sp)
    4990:	d9801e04 	addi	r6,sp,120
    4994:	9809883a 	mov	r4,r19
    4998:	0009b4c0 	call	9b4c <__ssprint_r>
    499c:	103ba71e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    49a0:	d8c02017 	ldw	r3,128(sp)
    49a4:	da000404 	addi	r8,sp,16
    49a8:	d9003217 	ldw	r4,200(sp)
    49ac:	d8802617 	ldw	r2,152(sp)
    49b0:	d9403317 	ldw	r5,204(sp)
    49b4:	8123883a 	add	r17,r16,r4
    49b8:	11400216 	blt	r2,r5,49c4 <___svfprintf_internal_r+0x1524>
    49bc:	9100004c 	andi	r4,r18,1
    49c0:	20000d26 	beq	r4,zero,49f8 <___svfprintf_internal_r+0x1558>
    49c4:	d9003817 	ldw	r4,224(sp)
    49c8:	d9403417 	ldw	r5,208(sp)
    49cc:	1907883a 	add	r3,r3,r4
    49d0:	d9001f17 	ldw	r4,124(sp)
    49d4:	41400015 	stw	r5,0(r8)
    49d8:	d9403817 	ldw	r5,224(sp)
    49dc:	21000044 	addi	r4,r4,1
    49e0:	d8c02015 	stw	r3,128(sp)
    49e4:	41400115 	stw	r5,4(r8)
    49e8:	d9001f15 	stw	r4,124(sp)
    49ec:	014001c4 	movi	r5,7
    49f0:	2901dc16 	blt	r5,r4,5164 <___svfprintf_internal_r+0x1cc4>
    49f4:	42000204 	addi	r8,r8,8
    49f8:	d9003317 	ldw	r4,204(sp)
    49fc:	8121883a 	add	r16,r16,r4
    4a00:	2085c83a 	sub	r2,r4,r2
    4a04:	8461c83a 	sub	r16,r16,r17
    4a08:	1400010e 	bge	r2,r16,4a10 <___svfprintf_internal_r+0x1570>
    4a0c:	1021883a 	mov	r16,r2
    4a10:	04000a0e 	bge	zero,r16,4a3c <___svfprintf_internal_r+0x159c>
    4a14:	d9001f17 	ldw	r4,124(sp)
    4a18:	1c07883a 	add	r3,r3,r16
    4a1c:	44400015 	stw	r17,0(r8)
    4a20:	21000044 	addi	r4,r4,1
    4a24:	44000115 	stw	r16,4(r8)
    4a28:	d8c02015 	stw	r3,128(sp)
    4a2c:	d9001f15 	stw	r4,124(sp)
    4a30:	014001c4 	movi	r5,7
    4a34:	2901e616 	blt	r5,r4,51d0 <___svfprintf_internal_r+0x1d30>
    4a38:	42000204 	addi	r8,r8,8
    4a3c:	8001f616 	blt	r16,zero,5218 <___svfprintf_internal_r+0x1d78>
    4a40:	1421c83a 	sub	r16,r2,r16
    4a44:	043cfa0e 	bge	zero,r16,3e30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e30>
    4a48:	04400404 	movi	r17,16
    4a4c:	d8801f17 	ldw	r2,124(sp)
    4a50:	8c3edd0e 	bge	r17,r16,45c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215325c8>
    4a54:	01400074 	movhi	r5,1
    4a58:	29539884 	addi	r5,r5,20066
    4a5c:	d9402c15 	stw	r5,176(sp)
    4a60:	058001c4 	movi	r22,7
    4a64:	dd002d17 	ldw	r20,180(sp)
    4a68:	00000306 	br	4a78 <___svfprintf_internal_r+0x15d8>
    4a6c:	42000204 	addi	r8,r8,8
    4a70:	843ffc04 	addi	r16,r16,-16
    4a74:	8c3ed70e 	bge	r17,r16,45d4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215325d4>
    4a78:	18c00404 	addi	r3,r3,16
    4a7c:	10800044 	addi	r2,r2,1
    4a80:	45400015 	stw	r21,0(r8)
    4a84:	44400115 	stw	r17,4(r8)
    4a88:	d8c02015 	stw	r3,128(sp)
    4a8c:	d8801f15 	stw	r2,124(sp)
    4a90:	b0bff60e 	bge	r22,r2,4a6c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532a6c>
    4a94:	d9801e04 	addi	r6,sp,120
    4a98:	a00b883a 	mov	r5,r20
    4a9c:	9809883a 	mov	r4,r19
    4aa0:	0009b4c0 	call	9b4c <__ssprint_r>
    4aa4:	103b651e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4aa8:	d8c02017 	ldw	r3,128(sp)
    4aac:	d8801f17 	ldw	r2,124(sp)
    4ab0:	da000404 	addi	r8,sp,16
    4ab4:	003fee06 	br	4a70 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532a70>
    4ab8:	9088703a 	and	r4,r18,r2
    4abc:	203e8d1e 	bne	r4,zero,44f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215324f4>
    4ac0:	dc401f17 	ldw	r17,124(sp)
    4ac4:	40800115 	stw	r2,4(r8)
    4ac8:	44000015 	stw	r16,0(r8)
    4acc:	8c400044 	addi	r17,r17,1
    4ad0:	d8c02015 	stw	r3,128(sp)
    4ad4:	dc401f15 	stw	r17,124(sp)
    4ad8:	008001c4 	movi	r2,7
    4adc:	147f7f16 	blt	r2,r17,48dc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215328dc>
    4ae0:	45800204 	addi	r22,r8,8
    4ae4:	003eac06 	br	4598 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532598>
    4ae8:	d9402d17 	ldw	r5,180(sp)
    4aec:	d9801e04 	addi	r6,sp,120
    4af0:	9809883a 	mov	r4,r19
    4af4:	0009b4c0 	call	9b4c <__ssprint_r>
    4af8:	103b501e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4afc:	d8c02017 	ldw	r3,128(sp)
    4b00:	dc401f17 	ldw	r17,124(sp)
    4b04:	da000404 	addi	r8,sp,16
    4b08:	003e8406 	br	451c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153251c>
    4b0c:	d9402d17 	ldw	r5,180(sp)
    4b10:	d9801e04 	addi	r6,sp,120
    4b14:	9809883a 	mov	r4,r19
    4b18:	0009b4c0 	call	9b4c <__ssprint_r>
    4b1c:	103b471e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4b20:	d8c02017 	ldw	r3,128(sp)
    4b24:	dc401f17 	ldw	r17,124(sp)
    4b28:	dd800404 	addi	r22,sp,16
    4b2c:	003e8606 	br	4548 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532548>
    4b30:	0029883a 	mov	r20,zero
    4b34:	a5000c04 	addi	r20,r20,48
    4b38:	dc001dc4 	addi	r16,sp,119
    4b3c:	dd001dc5 	stb	r20,119(sp)
    4b40:	003f3806 	br	4824 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532824>
    4b44:	d9402d17 	ldw	r5,180(sp)
    4b48:	d9801e04 	addi	r6,sp,120
    4b4c:	9809883a 	mov	r4,r19
    4b50:	0009b4c0 	call	9b4c <__ssprint_r>
    4b54:	103b391e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4b58:	d8c02017 	ldw	r3,128(sp)
    4b5c:	da000404 	addi	r8,sp,16
    4b60:	003c7306 	br	3d30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531d30>
    4b64:	d9003617 	ldw	r4,216(sp)
    4b68:	d9403717 	ldw	r5,220(sp)
    4b6c:	da003e15 	stw	r8,248(sp)
    4b70:	00098c00 	call	98c0 <__fpclassifyd>
    4b74:	da003e17 	ldw	r8,248(sp)
    4b78:	1000bd1e 	bne	r2,zero,4e70 <___svfprintf_internal_r+0x19d0>
    4b7c:	008011c4 	movi	r2,71
    4b80:	14411e0e 	bge	r2,r17,4ffc <___svfprintf_internal_r+0x1b5c>
    4b84:	04000074 	movhi	r16,1
    4b88:	84138b04 	addi	r16,r16,20012
    4b8c:	00c000c4 	movi	r3,3
    4b90:	00bfdfc4 	movi	r2,-129
    4b94:	d8c02915 	stw	r3,164(sp)
    4b98:	90a4703a 	and	r18,r18,r2
    4b9c:	df002783 	ldbu	fp,158(sp)
    4ba0:	d8c02b15 	stw	r3,172(sp)
    4ba4:	d8002a15 	stw	zero,168(sp)
    4ba8:	d8003215 	stw	zero,200(sp)
    4bac:	003bfa06 	br	3b98 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b98>
    4bb0:	9080100c 	andi	r2,r18,64
    4bb4:	d8002785 	stb	zero,158(sp)
    4bb8:	10009426 	beq	r2,zero,4e0c <___svfprintf_internal_r+0x196c>
    4bbc:	d9402e17 	ldw	r5,184(sp)
    4bc0:	d8c02a17 	ldw	r3,168(sp)
    4bc4:	002d883a 	mov	r22,zero
    4bc8:	28800104 	addi	r2,r5,4
    4bcc:	2d00000b 	ldhu	r20,0(r5)
    4bd0:	183ec10e 	bge	r3,zero,46d8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215326d8>
    4bd4:	a586b03a 	or	r3,r20,r22
    4bd8:	d8802e15 	stw	r2,184(sp)
    4bdc:	183ec21e 	bne	r3,zero,46e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215326e8>
    4be0:	0039883a 	mov	fp,zero
    4be4:	0005883a 	mov	r2,zero
    4be8:	003db806 	br	42cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215322cc>
    4bec:	d8c02e17 	ldw	r3,184(sp)
    4bf0:	d9002e17 	ldw	r4,184(sp)
    4bf4:	d9402e17 	ldw	r5,184(sp)
    4bf8:	18c00017 	ldw	r3,0(r3)
    4bfc:	21000117 	ldw	r4,4(r4)
    4c00:	29400204 	addi	r5,r5,8
    4c04:	d8c03615 	stw	r3,216(sp)
    4c08:	d9003715 	stw	r4,220(sp)
    4c0c:	d9402e15 	stw	r5,184(sp)
    4c10:	003b5a06 	br	397c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153197c>
    4c14:	9080100c 	andi	r2,r18,64
    4c18:	10010726 	beq	r2,zero,5038 <___svfprintf_internal_r+0x1b98>
    4c1c:	d8802e17 	ldw	r2,184(sp)
    4c20:	1500000f 	ldh	r20,0(r2)
    4c24:	10800104 	addi	r2,r2,4
    4c28:	d8802e15 	stw	r2,184(sp)
    4c2c:	a02dd7fa 	srai	r22,r20,31
    4c30:	b005883a 	mov	r2,r22
    4c34:	003b7d06 	br	3a2c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a2c>
    4c38:	9080100c 	andi	r2,r18,64
    4c3c:	10010526 	beq	r2,zero,5054 <___svfprintf_internal_r+0x1bb4>
    4c40:	d8c02e17 	ldw	r3,184(sp)
    4c44:	002d883a 	mov	r22,zero
    4c48:	1d00000b 	ldhu	r20,0(r3)
    4c4c:	18c00104 	addi	r3,r3,4
    4c50:	d8c02e15 	stw	r3,184(sp)
    4c54:	003ce206 	br	3fe0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531fe0>
    4c58:	bc400007 	ldb	r17,0(r23)
    4c5c:	003a6506 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    4c60:	9080040c 	andi	r2,r18,16
    4c64:	10010126 	beq	r2,zero,506c <___svfprintf_internal_r+0x1bcc>
    4c68:	d8c02e17 	ldw	r3,184(sp)
    4c6c:	d9002f17 	ldw	r4,188(sp)
    4c70:	18800017 	ldw	r2,0(r3)
    4c74:	18c00104 	addi	r3,r3,4
    4c78:	d8c02e15 	stw	r3,184(sp)
    4c7c:	11000015 	stw	r4,0(r2)
    4c80:	003a3206 	br	354c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153154c>
    4c84:	d9002a17 	ldw	r4,168(sp)
    4c88:	d8002785 	stb	zero,158(sp)
    4c8c:	203d8d16 	blt	r4,zero,42c4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215322c4>
    4c90:	00bfdfc4 	movi	r2,-129
    4c94:	90a4703a 	and	r18,r18,r2
    4c98:	003ad506 	br	37f0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215317f0>
    4c9c:	01400074 	movhi	r5,1
    4ca0:	29539884 	addi	r5,r5,20066
    4ca4:	d9402c15 	stw	r5,176(sp)
    4ca8:	d9402c17 	ldw	r5,176(sp)
    4cac:	1c47883a 	add	r3,r3,r17
    4cb0:	10800044 	addi	r2,r2,1
    4cb4:	41400015 	stw	r5,0(r8)
    4cb8:	44400115 	stw	r17,4(r8)
    4cbc:	d8c02015 	stw	r3,128(sp)
    4cc0:	d8801f15 	stw	r2,124(sp)
    4cc4:	010001c4 	movi	r4,7
    4cc8:	20bf3016 	blt	r4,r2,498c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153298c>
    4ccc:	42000204 	addi	r8,r8,8
    4cd0:	003f3506 	br	49a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215329a8>
    4cd4:	01000074 	movhi	r4,1
    4cd8:	21139884 	addi	r4,r4,20066
    4cdc:	d9002c15 	stw	r4,176(sp)
    4ce0:	003c3c06 	br	3dd4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531dd4>
    4ce4:	d9402d17 	ldw	r5,180(sp)
    4ce8:	d9801e04 	addi	r6,sp,120
    4cec:	9809883a 	mov	r4,r19
    4cf0:	0009b4c0 	call	9b4c <__ssprint_r>
    4cf4:	103ad11e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4cf8:	d8c02017 	ldw	r3,128(sp)
    4cfc:	da000404 	addi	r8,sp,16
    4d00:	003d9306 	br	4350 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532350>
    4d04:	d8801f17 	ldw	r2,124(sp)
    4d08:	01400074 	movhi	r5,1
    4d0c:	01000044 	movi	r4,1
    4d10:	18c00044 	addi	r3,r3,1
    4d14:	10800044 	addi	r2,r2,1
    4d18:	29539804 	addi	r5,r5,20064
    4d1c:	41000115 	stw	r4,4(r8)
    4d20:	41400015 	stw	r5,0(r8)
    4d24:	d8c02015 	stw	r3,128(sp)
    4d28:	d8801f15 	stw	r2,124(sp)
    4d2c:	010001c4 	movi	r4,7
    4d30:	2080b516 	blt	r4,r2,5008 <___svfprintf_internal_r+0x1b68>
    4d34:	42000204 	addi	r8,r8,8
    4d38:	8800041e 	bne	r17,zero,4d4c <___svfprintf_internal_r+0x18ac>
    4d3c:	d8803317 	ldw	r2,204(sp)
    4d40:	1000021e 	bne	r2,zero,4d4c <___svfprintf_internal_r+0x18ac>
    4d44:	9080004c 	andi	r2,r18,1
    4d48:	103c3926 	beq	r2,zero,3e30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e30>
    4d4c:	d9003817 	ldw	r4,224(sp)
    4d50:	d8801f17 	ldw	r2,124(sp)
    4d54:	d9403417 	ldw	r5,208(sp)
    4d58:	20c7883a 	add	r3,r4,r3
    4d5c:	10800044 	addi	r2,r2,1
    4d60:	41000115 	stw	r4,4(r8)
    4d64:	41400015 	stw	r5,0(r8)
    4d68:	d8c02015 	stw	r3,128(sp)
    4d6c:	d8801f15 	stw	r2,124(sp)
    4d70:	010001c4 	movi	r4,7
    4d74:	20818016 	blt	r4,r2,5378 <___svfprintf_internal_r+0x1ed8>
    4d78:	42000204 	addi	r8,r8,8
    4d7c:	0463c83a 	sub	r17,zero,r17
    4d80:	0440cb0e 	bge	zero,r17,50b0 <___svfprintf_internal_r+0x1c10>
    4d84:	05800404 	movi	r22,16
    4d88:	b440e80e 	bge	r22,r17,512c <___svfprintf_internal_r+0x1c8c>
    4d8c:	01400074 	movhi	r5,1
    4d90:	29539884 	addi	r5,r5,20066
    4d94:	d9402c15 	stw	r5,176(sp)
    4d98:	070001c4 	movi	fp,7
    4d9c:	dd002d17 	ldw	r20,180(sp)
    4da0:	00000306 	br	4db0 <___svfprintf_internal_r+0x1910>
    4da4:	42000204 	addi	r8,r8,8
    4da8:	8c7ffc04 	addi	r17,r17,-16
    4dac:	b440e20e 	bge	r22,r17,5138 <___svfprintf_internal_r+0x1c98>
    4db0:	18c00404 	addi	r3,r3,16
    4db4:	10800044 	addi	r2,r2,1
    4db8:	45400015 	stw	r21,0(r8)
    4dbc:	45800115 	stw	r22,4(r8)
    4dc0:	d8c02015 	stw	r3,128(sp)
    4dc4:	d8801f15 	stw	r2,124(sp)
    4dc8:	e0bff60e 	bge	fp,r2,4da4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532da4>
    4dcc:	d9801e04 	addi	r6,sp,120
    4dd0:	a00b883a 	mov	r5,r20
    4dd4:	9809883a 	mov	r4,r19
    4dd8:	0009b4c0 	call	9b4c <__ssprint_r>
    4ddc:	103a971e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4de0:	d8c02017 	ldw	r3,128(sp)
    4de4:	d8801f17 	ldw	r2,124(sp)
    4de8:	da000404 	addi	r8,sp,16
    4dec:	003fee06 	br	4da8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532da8>
    4df0:	d9002e17 	ldw	r4,184(sp)
    4df4:	d9402a17 	ldw	r5,168(sp)
    4df8:	002d883a 	mov	r22,zero
    4dfc:	20800104 	addi	r2,r4,4
    4e00:	25000017 	ldw	r20,0(r4)
    4e04:	283e7d0e 	bge	r5,zero,47fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215327fc>
    4e08:	003eda06 	br	4974 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532974>
    4e0c:	d9002e17 	ldw	r4,184(sp)
    4e10:	d9402a17 	ldw	r5,168(sp)
    4e14:	002d883a 	mov	r22,zero
    4e18:	20800104 	addi	r2,r4,4
    4e1c:	25000017 	ldw	r20,0(r4)
    4e20:	283e2d0e 	bge	r5,zero,46d8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215326d8>
    4e24:	003f6b06 	br	4bd4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532bd4>
    4e28:	d8c02e15 	stw	r3,184(sp)
    4e2c:	0039883a 	mov	fp,zero
    4e30:	003ed206 	br	497c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153297c>
    4e34:	bc400043 	ldbu	r17,1(r23)
    4e38:	84000814 	ori	r16,r16,32
    4e3c:	bdc00044 	addi	r23,r23,1
    4e40:	8c403fcc 	andi	r17,r17,255
    4e44:	8c40201c 	xori	r17,r17,128
    4e48:	8c7fe004 	addi	r17,r17,-128
    4e4c:	0039e906 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    4e50:	d9402d17 	ldw	r5,180(sp)
    4e54:	d9801e04 	addi	r6,sp,120
    4e58:	9809883a 	mov	r4,r19
    4e5c:	0009b4c0 	call	9b4c <__ssprint_r>
    4e60:	103a761e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    4e64:	d8c02017 	ldw	r3,128(sp)
    4e68:	da000404 	addi	r8,sp,16
    4e6c:	003d4a06 	br	4398 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532398>
    4e70:	d9002a17 	ldw	r4,168(sp)
    4e74:	05bff7c4 	movi	r22,-33
    4e78:	00bfffc4 	movi	r2,-1
    4e7c:	8dac703a 	and	r22,r17,r22
    4e80:	20806a26 	beq	r4,r2,502c <___svfprintf_internal_r+0x1b8c>
    4e84:	008011c4 	movi	r2,71
    4e88:	b0813726 	beq	r22,r2,5368 <___svfprintf_internal_r+0x1ec8>
    4e8c:	d9003717 	ldw	r4,220(sp)
    4e90:	90c04014 	ori	r3,r18,256
    4e94:	d8c02c15 	stw	r3,176(sp)
    4e98:	20015d16 	blt	r4,zero,5410 <___svfprintf_internal_r+0x1f70>
    4e9c:	dd003717 	ldw	r20,220(sp)
    4ea0:	d8002905 	stb	zero,164(sp)
    4ea4:	00801984 	movi	r2,102
    4ea8:	88814026 	beq	r17,r2,53ac <___svfprintf_internal_r+0x1f0c>
    4eac:	00801184 	movi	r2,70
    4eb0:	88817126 	beq	r17,r2,5478 <___svfprintf_internal_r+0x1fd8>
    4eb4:	00801144 	movi	r2,69
    4eb8:	b0816226 	beq	r22,r2,5444 <___svfprintf_internal_r+0x1fa4>
    4ebc:	d8c02a17 	ldw	r3,168(sp)
    4ec0:	d8802104 	addi	r2,sp,132
    4ec4:	d8800315 	stw	r2,12(sp)
    4ec8:	d9403617 	ldw	r5,216(sp)
    4ecc:	d8802504 	addi	r2,sp,148
    4ed0:	d8800215 	stw	r2,8(sp)
    4ed4:	d8802604 	addi	r2,sp,152
    4ed8:	d8c00015 	stw	r3,0(sp)
    4edc:	d8800115 	stw	r2,4(sp)
    4ee0:	01c00084 	movi	r7,2
    4ee4:	a00d883a 	mov	r6,r20
    4ee8:	9809883a 	mov	r4,r19
    4eec:	d8c03d15 	stw	r3,244(sp)
    4ef0:	da003e15 	stw	r8,248(sp)
    4ef4:	00059840 	call	5984 <_dtoa_r>
    4ef8:	1021883a 	mov	r16,r2
    4efc:	008019c4 	movi	r2,103
    4f00:	d8c03d17 	ldw	r3,244(sp)
    4f04:	da003e17 	ldw	r8,248(sp)
    4f08:	8880e726 	beq	r17,r2,52a8 <___svfprintf_internal_r+0x1e08>
    4f0c:	008011c4 	movi	r2,71
    4f10:	8880d426 	beq	r17,r2,5264 <___svfprintf_internal_r+0x1dc4>
    4f14:	80f9883a 	add	fp,r16,r3
    4f18:	d9003617 	ldw	r4,216(sp)
    4f1c:	000d883a 	mov	r6,zero
    4f20:	000f883a 	mov	r7,zero
    4f24:	a00b883a 	mov	r5,r20
    4f28:	da003e15 	stw	r8,248(sp)
    4f2c:	000da680 	call	da68 <__eqdf2>
    4f30:	da003e17 	ldw	r8,248(sp)
    4f34:	1000e426 	beq	r2,zero,52c8 <___svfprintf_internal_r+0x1e28>
    4f38:	d8802117 	ldw	r2,132(sp)
    4f3c:	1700062e 	bgeu	r2,fp,4f58 <___svfprintf_internal_r+0x1ab8>
    4f40:	01000c04 	movi	r4,48
    4f44:	10c00044 	addi	r3,r2,1
    4f48:	d8c02115 	stw	r3,132(sp)
    4f4c:	11000005 	stb	r4,0(r2)
    4f50:	d8802117 	ldw	r2,132(sp)
    4f54:	173ffb36 	bltu	r2,fp,4f44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532f44>
    4f58:	1405c83a 	sub	r2,r2,r16
    4f5c:	d8803315 	stw	r2,204(sp)
    4f60:	008011c4 	movi	r2,71
    4f64:	b080c526 	beq	r22,r2,527c <___svfprintf_internal_r+0x1ddc>
    4f68:	00801944 	movi	r2,101
    4f6c:	1441d80e 	bge	r2,r17,56d0 <___svfprintf_internal_r+0x2230>
    4f70:	d8c02617 	ldw	r3,152(sp)
    4f74:	00801984 	movi	r2,102
    4f78:	d8c03215 	stw	r3,200(sp)
    4f7c:	88813426 	beq	r17,r2,5450 <___svfprintf_internal_r+0x1fb0>
    4f80:	d8c03217 	ldw	r3,200(sp)
    4f84:	d9003317 	ldw	r4,204(sp)
    4f88:	19012516 	blt	r3,r4,5420 <___svfprintf_internal_r+0x1f80>
    4f8c:	9480004c 	andi	r18,r18,1
    4f90:	9001841e 	bne	r18,zero,55a4 <___svfprintf_internal_r+0x2104>
    4f94:	1805883a 	mov	r2,r3
    4f98:	1801cb16 	blt	r3,zero,56c8 <___svfprintf_internal_r+0x2228>
    4f9c:	d8c03217 	ldw	r3,200(sp)
    4fa0:	044019c4 	movi	r17,103
    4fa4:	d8c02b15 	stw	r3,172(sp)
    4fa8:	df002907 	ldb	fp,164(sp)
    4fac:	e000a61e 	bne	fp,zero,5248 <___svfprintf_internal_r+0x1da8>
    4fb0:	df002783 	ldbu	fp,158(sp)
    4fb4:	d8802915 	stw	r2,164(sp)
    4fb8:	dc802c17 	ldw	r18,176(sp)
    4fbc:	d8002a15 	stw	zero,168(sp)
    4fc0:	003af506 	br	3b98 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b98>
    4fc4:	04000074 	movhi	r16,1
    4fc8:	84138804 	addi	r16,r16,20000
    4fcc:	003a7e06 	br	39c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215319c8>
    4fd0:	d9003917 	ldw	r4,228(sp)
    4fd4:	04001004 	movi	r16,64
    4fd8:	800b883a 	mov	r5,r16
    4fdc:	00028e80 	call	28e8 <_malloc_r>
    4fe0:	d9002d17 	ldw	r4,180(sp)
    4fe4:	20800015 	stw	r2,0(r4)
    4fe8:	20800415 	stw	r2,16(r4)
    4fec:	1001d026 	beq	r2,zero,5730 <___svfprintf_internal_r+0x2290>
    4ff0:	d8802d17 	ldw	r2,180(sp)
    4ff4:	14000515 	stw	r16,20(r2)
    4ff8:	00394406 	br	350c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153150c>
    4ffc:	04000074 	movhi	r16,1
    5000:	84138a04 	addi	r16,r16,20008
    5004:	003ee106 	br	4b8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532b8c>
    5008:	d9402d17 	ldw	r5,180(sp)
    500c:	d9801e04 	addi	r6,sp,120
    5010:	9809883a 	mov	r4,r19
    5014:	0009b4c0 	call	9b4c <__ssprint_r>
    5018:	103a081e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    501c:	dc402617 	ldw	r17,152(sp)
    5020:	d8c02017 	ldw	r3,128(sp)
    5024:	da000404 	addi	r8,sp,16
    5028:	003f4306 	br	4d38 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532d38>
    502c:	01400184 	movi	r5,6
    5030:	d9402a15 	stw	r5,168(sp)
    5034:	003f9506 	br	4e8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532e8c>
    5038:	d8c02e17 	ldw	r3,184(sp)
    503c:	1d000017 	ldw	r20,0(r3)
    5040:	18c00104 	addi	r3,r3,4
    5044:	d8c02e15 	stw	r3,184(sp)
    5048:	a02dd7fa 	srai	r22,r20,31
    504c:	b005883a 	mov	r2,r22
    5050:	003a7606 	br	3a2c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a2c>
    5054:	d9002e17 	ldw	r4,184(sp)
    5058:	002d883a 	mov	r22,zero
    505c:	25000017 	ldw	r20,0(r4)
    5060:	21000104 	addi	r4,r4,4
    5064:	d9002e15 	stw	r4,184(sp)
    5068:	003bdd06 	br	3fe0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531fe0>
    506c:	9480100c 	andi	r18,r18,64
    5070:	90006e26 	beq	r18,zero,522c <___svfprintf_internal_r+0x1d8c>
    5074:	d9402e17 	ldw	r5,184(sp)
    5078:	d8c02f17 	ldw	r3,188(sp)
    507c:	28800017 	ldw	r2,0(r5)
    5080:	29400104 	addi	r5,r5,4
    5084:	d9402e15 	stw	r5,184(sp)
    5088:	10c0000d 	sth	r3,0(r2)
    508c:	00392f06 	br	354c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153154c>
    5090:	d9402d17 	ldw	r5,180(sp)
    5094:	d9801e04 	addi	r6,sp,120
    5098:	9809883a 	mov	r4,r19
    509c:	0009b4c0 	call	9b4c <__ssprint_r>
    50a0:	1039e61e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    50a4:	d8c02017 	ldw	r3,128(sp)
    50a8:	d8801f17 	ldw	r2,124(sp)
    50ac:	da000404 	addi	r8,sp,16
    50b0:	d9403317 	ldw	r5,204(sp)
    50b4:	10800044 	addi	r2,r2,1
    50b8:	44000015 	stw	r16,0(r8)
    50bc:	28c7883a 	add	r3,r5,r3
    50c0:	003b5506 	br	3e18 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531e18>
    50c4:	8009883a 	mov	r4,r16
    50c8:	df003e15 	stw	fp,248(sp)
    50cc:	00034080 	call	3408 <strlen>
    50d0:	d8802b15 	stw	r2,172(sp)
    50d4:	da003e17 	ldw	r8,248(sp)
    50d8:	103c160e 	bge	r2,zero,4134 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532134>
    50dc:	0005883a 	mov	r2,zero
    50e0:	003c1406 	br	4134 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532134>
    50e4:	00bfffc4 	movi	r2,-1
    50e8:	0039d906 	br	3850 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531850>
    50ec:	01000074 	movhi	r4,1
    50f0:	21139c84 	addi	r4,r4,20082
    50f4:	d9003515 	stw	r4,212(sp)
    50f8:	003ae406 	br	3c8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531c8c>
    50fc:	013fffc4 	movi	r4,-1
    5100:	0039fa06 	br	38ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215318ec>
    5104:	d9402d17 	ldw	r5,180(sp)
    5108:	d9801e04 	addi	r6,sp,120
    510c:	9809883a 	mov	r4,r19
    5110:	0009b4c0 	call	9b4c <__ssprint_r>
    5114:	1039c91e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    5118:	d8c02017 	ldw	r3,128(sp)
    511c:	da000404 	addi	r8,sp,16
    5120:	003d8406 	br	4734 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532734>
    5124:	0023883a 	mov	r17,zero
    5128:	003d8306 	br	4738 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532738>
    512c:	01000074 	movhi	r4,1
    5130:	21139884 	addi	r4,r4,20066
    5134:	d9002c15 	stw	r4,176(sp)
    5138:	d9002c17 	ldw	r4,176(sp)
    513c:	1c47883a 	add	r3,r3,r17
    5140:	10800044 	addi	r2,r2,1
    5144:	41000015 	stw	r4,0(r8)
    5148:	44400115 	stw	r17,4(r8)
    514c:	d8c02015 	stw	r3,128(sp)
    5150:	d8801f15 	stw	r2,124(sp)
    5154:	010001c4 	movi	r4,7
    5158:	20bfcd16 	blt	r4,r2,5090 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533090>
    515c:	42000204 	addi	r8,r8,8
    5160:	003fd306 	br	50b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215330b0>
    5164:	d9402d17 	ldw	r5,180(sp)
    5168:	d9801e04 	addi	r6,sp,120
    516c:	9809883a 	mov	r4,r19
    5170:	0009b4c0 	call	9b4c <__ssprint_r>
    5174:	1039b11e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    5178:	d8802617 	ldw	r2,152(sp)
    517c:	d8c02017 	ldw	r3,128(sp)
    5180:	da000404 	addi	r8,sp,16
    5184:	003e1c06 	br	49f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215329f8>
    5188:	d8802a17 	ldw	r2,168(sp)
    518c:	00c00184 	movi	r3,6
    5190:	1880012e 	bgeu	r3,r2,5198 <___svfprintf_internal_r+0x1cf8>
    5194:	1805883a 	mov	r2,r3
    5198:	d8802b15 	stw	r2,172(sp)
    519c:	1000f316 	blt	r2,zero,556c <___svfprintf_internal_r+0x20cc>
    51a0:	04000074 	movhi	r16,1
    51a4:	d8802915 	stw	r2,164(sp)
    51a8:	dd002e15 	stw	r20,184(sp)
    51ac:	d8002a15 	stw	zero,168(sp)
    51b0:	d8003215 	stw	zero,200(sp)
    51b4:	84139604 	addi	r16,r16,20056
    51b8:	0039883a 	mov	fp,zero
    51bc:	003a7d06 	br	3bb4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531bb4>
    51c0:	01000074 	movhi	r4,1
    51c4:	21139c84 	addi	r4,r4,20082
    51c8:	d9003515 	stw	r4,212(sp)
    51cc:	003b3d06 	br	3ec4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531ec4>
    51d0:	d9402d17 	ldw	r5,180(sp)
    51d4:	d9801e04 	addi	r6,sp,120
    51d8:	9809883a 	mov	r4,r19
    51dc:	0009b4c0 	call	9b4c <__ssprint_r>
    51e0:	1039961e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    51e4:	d8802617 	ldw	r2,152(sp)
    51e8:	d9403317 	ldw	r5,204(sp)
    51ec:	d8c02017 	ldw	r3,128(sp)
    51f0:	da000404 	addi	r8,sp,16
    51f4:	2885c83a 	sub	r2,r5,r2
    51f8:	003e1006 	br	4a3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532a3c>
    51fc:	00800044 	movi	r2,1
    5200:	10803fcc 	andi	r2,r2,255
    5204:	00c00044 	movi	r3,1
    5208:	10fa1026 	beq	r2,r3,3a4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a4c>
    520c:	00c00084 	movi	r3,2
    5210:	10fb8226 	beq	r2,r3,401c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153201c>
    5214:	003a4206 	br	3b20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b20>
    5218:	0021883a 	mov	r16,zero
    521c:	003e0806 	br	4a40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532a40>
    5220:	07000b44 	movi	fp,45
    5224:	df002785 	stb	fp,158(sp)
    5228:	0039e306 	br	39b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215319b8>
    522c:	d9002e17 	ldw	r4,184(sp)
    5230:	d9402f17 	ldw	r5,188(sp)
    5234:	20800017 	ldw	r2,0(r4)
    5238:	21000104 	addi	r4,r4,4
    523c:	d9002e15 	stw	r4,184(sp)
    5240:	11400015 	stw	r5,0(r2)
    5244:	0038c106 	br	354c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153154c>
    5248:	00c00b44 	movi	r3,45
    524c:	d8c02785 	stb	r3,158(sp)
    5250:	d8802915 	stw	r2,164(sp)
    5254:	dc802c17 	ldw	r18,176(sp)
    5258:	d8002a15 	stw	zero,168(sp)
    525c:	07000b44 	movi	fp,45
    5260:	003a5106 	br	3ba8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531ba8>
    5264:	9080004c 	andi	r2,r18,1
    5268:	1000941e 	bne	r2,zero,54bc <___svfprintf_internal_r+0x201c>
    526c:	d8802117 	ldw	r2,132(sp)
    5270:	1405c83a 	sub	r2,r2,r16
    5274:	d8803315 	stw	r2,204(sp)
    5278:	b441151e 	bne	r22,r17,56d0 <___svfprintf_internal_r+0x2230>
    527c:	dd802617 	ldw	r22,152(sp)
    5280:	00bfff44 	movi	r2,-3
    5284:	b0801a16 	blt	r22,r2,52f0 <___svfprintf_internal_r+0x1e50>
    5288:	d9402a17 	ldw	r5,168(sp)
    528c:	2d801816 	blt	r5,r22,52f0 <___svfprintf_internal_r+0x1e50>
    5290:	dd803215 	stw	r22,200(sp)
    5294:	003f3a06 	br	4f80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532f80>
    5298:	1025883a 	mov	r18,r2
    529c:	0039883a 	mov	fp,zero
    52a0:	00800084 	movi	r2,2
    52a4:	003fd606 	br	5200 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533200>
    52a8:	9080004c 	andi	r2,r18,1
    52ac:	103f191e 	bne	r2,zero,4f14 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532f14>
    52b0:	d8802117 	ldw	r2,132(sp)
    52b4:	003f2806 	br	4f58 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532f58>
    52b8:	01000074 	movhi	r4,1
    52bc:	21139884 	addi	r4,r4,20066
    52c0:	d9002c15 	stw	r4,176(sp)
    52c4:	003c7c06 	br	44b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215324b8>
    52c8:	e005883a 	mov	r2,fp
    52cc:	003f2206 	br	4f58 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532f58>
    52d0:	d9002a17 	ldw	r4,168(sp)
    52d4:	df002783 	ldbu	fp,158(sp)
    52d8:	dd002e15 	stw	r20,184(sp)
    52dc:	d9002915 	stw	r4,164(sp)
    52e0:	d9002b15 	stw	r4,172(sp)
    52e4:	d8002a15 	stw	zero,168(sp)
    52e8:	d8003215 	stw	zero,200(sp)
    52ec:	003a2a06 	br	3b98 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b98>
    52f0:	8c7fff84 	addi	r17,r17,-2
    52f4:	b5bfffc4 	addi	r22,r22,-1
    52f8:	dd802615 	stw	r22,152(sp)
    52fc:	dc4022c5 	stb	r17,139(sp)
    5300:	b000c316 	blt	r22,zero,5610 <___svfprintf_internal_r+0x2170>
    5304:	00800ac4 	movi	r2,43
    5308:	d8802305 	stb	r2,140(sp)
    530c:	00800244 	movi	r2,9
    5310:	15806e16 	blt	r2,r22,54cc <___svfprintf_internal_r+0x202c>
    5314:	00800c04 	movi	r2,48
    5318:	b5800c04 	addi	r22,r22,48
    531c:	d8802345 	stb	r2,141(sp)
    5320:	dd802385 	stb	r22,142(sp)
    5324:	d88023c4 	addi	r2,sp,143
    5328:	df0022c4 	addi	fp,sp,139
    532c:	d8c03317 	ldw	r3,204(sp)
    5330:	1739c83a 	sub	fp,r2,fp
    5334:	d9003317 	ldw	r4,204(sp)
    5338:	e0c7883a 	add	r3,fp,r3
    533c:	df003b15 	stw	fp,236(sp)
    5340:	d8c02b15 	stw	r3,172(sp)
    5344:	00800044 	movi	r2,1
    5348:	1100b70e 	bge	r2,r4,5628 <___svfprintf_internal_r+0x2188>
    534c:	d8c02b17 	ldw	r3,172(sp)
    5350:	18c00044 	addi	r3,r3,1
    5354:	d8c02b15 	stw	r3,172(sp)
    5358:	1805883a 	mov	r2,r3
    535c:	1800b016 	blt	r3,zero,5620 <___svfprintf_internal_r+0x2180>
    5360:	d8003215 	stw	zero,200(sp)
    5364:	003f1006 	br	4fa8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532fa8>
    5368:	d8802a17 	ldw	r2,168(sp)
    536c:	103ec71e 	bne	r2,zero,4e8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532e8c>
    5370:	dc002a15 	stw	r16,168(sp)
    5374:	003ec506 	br	4e8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532e8c>
    5378:	d9402d17 	ldw	r5,180(sp)
    537c:	d9801e04 	addi	r6,sp,120
    5380:	9809883a 	mov	r4,r19
    5384:	0009b4c0 	call	9b4c <__ssprint_r>
    5388:	10392c1e 	bne	r2,zero,383c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153183c>
    538c:	dc402617 	ldw	r17,152(sp)
    5390:	d8c02017 	ldw	r3,128(sp)
    5394:	d8801f17 	ldw	r2,124(sp)
    5398:	da000404 	addi	r8,sp,16
    539c:	003e7706 	br	4d7c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532d7c>
    53a0:	182f883a 	mov	r23,r3
    53a4:	d8002a15 	stw	zero,168(sp)
    53a8:	00389306 	br	35f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f8>
    53ac:	d8c02a17 	ldw	r3,168(sp)
    53b0:	d8802104 	addi	r2,sp,132
    53b4:	d8800315 	stw	r2,12(sp)
    53b8:	d9403617 	ldw	r5,216(sp)
    53bc:	d8802504 	addi	r2,sp,148
    53c0:	d8800215 	stw	r2,8(sp)
    53c4:	d8802604 	addi	r2,sp,152
    53c8:	d8c00015 	stw	r3,0(sp)
    53cc:	9809883a 	mov	r4,r19
    53d0:	d8800115 	stw	r2,4(sp)
    53d4:	01c000c4 	movi	r7,3
    53d8:	a00d883a 	mov	r6,r20
    53dc:	da003e15 	stw	r8,248(sp)
    53e0:	00059840 	call	5984 <_dtoa_r>
    53e4:	d9002a17 	ldw	r4,168(sp)
    53e8:	da003e17 	ldw	r8,248(sp)
    53ec:	1021883a 	mov	r16,r2
    53f0:	1139883a 	add	fp,r2,r4
    53f4:	2007883a 	mov	r3,r4
    53f8:	81000007 	ldb	r4,0(r16)
    53fc:	00800c04 	movi	r2,48
    5400:	20806f26 	beq	r4,r2,55c0 <___svfprintf_internal_r+0x2120>
    5404:	d8c02617 	ldw	r3,152(sp)
    5408:	e0f9883a 	add	fp,fp,r3
    540c:	003ec206 	br	4f18 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532f18>
    5410:	00c00b44 	movi	r3,45
    5414:	2520003c 	xorhi	r20,r4,32768
    5418:	d8c02905 	stb	r3,164(sp)
    541c:	003ea106 	br	4ea4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532ea4>
    5420:	d8c03217 	ldw	r3,200(sp)
    5424:	00c0890e 	bge	zero,r3,564c <___svfprintf_internal_r+0x21ac>
    5428:	00800044 	movi	r2,1
    542c:	d9003317 	ldw	r4,204(sp)
    5430:	1105883a 	add	r2,r2,r4
    5434:	d8802b15 	stw	r2,172(sp)
    5438:	10005f16 	blt	r2,zero,55b8 <___svfprintf_internal_r+0x2118>
    543c:	044019c4 	movi	r17,103
    5440:	003ed906 	br	4fa8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532fa8>
    5444:	d9002a17 	ldw	r4,168(sp)
    5448:	20c00044 	addi	r3,r4,1
    544c:	003e9c06 	br	4ec0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532ec0>
    5450:	d9002a17 	ldw	r4,168(sp)
    5454:	00c0680e 	bge	zero,r3,55f8 <___svfprintf_internal_r+0x2158>
    5458:	2000461e 	bne	r4,zero,5574 <___svfprintf_internal_r+0x20d4>
    545c:	9480004c 	andi	r18,r18,1
    5460:	9000441e 	bne	r18,zero,5574 <___svfprintf_internal_r+0x20d4>
    5464:	1805883a 	mov	r2,r3
    5468:	1800a116 	blt	r3,zero,56f0 <___svfprintf_internal_r+0x2250>
    546c:	d8c03217 	ldw	r3,200(sp)
    5470:	d8c02b15 	stw	r3,172(sp)
    5474:	003ecc06 	br	4fa8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532fa8>
    5478:	d9402a17 	ldw	r5,168(sp)
    547c:	d8802104 	addi	r2,sp,132
    5480:	d8800315 	stw	r2,12(sp)
    5484:	d9400015 	stw	r5,0(sp)
    5488:	d8802504 	addi	r2,sp,148
    548c:	d9403617 	ldw	r5,216(sp)
    5490:	d8800215 	stw	r2,8(sp)
    5494:	d8802604 	addi	r2,sp,152
    5498:	d8800115 	stw	r2,4(sp)
    549c:	01c000c4 	movi	r7,3
    54a0:	a00d883a 	mov	r6,r20
    54a4:	9809883a 	mov	r4,r19
    54a8:	da003e15 	stw	r8,248(sp)
    54ac:	00059840 	call	5984 <_dtoa_r>
    54b0:	d8c02a17 	ldw	r3,168(sp)
    54b4:	da003e17 	ldw	r8,248(sp)
    54b8:	1021883a 	mov	r16,r2
    54bc:	00801184 	movi	r2,70
    54c0:	80f9883a 	add	fp,r16,r3
    54c4:	88bfcc26 	beq	r17,r2,53f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215333f8>
    54c8:	003e9306 	br	4f18 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532f18>
    54cc:	df0022c4 	addi	fp,sp,139
    54d0:	dc002a15 	stw	r16,168(sp)
    54d4:	9829883a 	mov	r20,r19
    54d8:	e021883a 	mov	r16,fp
    54dc:	4027883a 	mov	r19,r8
    54e0:	b009883a 	mov	r4,r22
    54e4:	01400284 	movi	r5,10
    54e8:	000c6bc0 	call	c6bc <__modsi3>
    54ec:	10800c04 	addi	r2,r2,48
    54f0:	843fffc4 	addi	r16,r16,-1
    54f4:	b009883a 	mov	r4,r22
    54f8:	01400284 	movi	r5,10
    54fc:	80800005 	stb	r2,0(r16)
    5500:	000c6380 	call	c638 <__divsi3>
    5504:	102d883a 	mov	r22,r2
    5508:	00800244 	movi	r2,9
    550c:	15bff416 	blt	r2,r22,54e0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215334e0>
    5510:	9811883a 	mov	r8,r19
    5514:	b0800c04 	addi	r2,r22,48
    5518:	a027883a 	mov	r19,r20
    551c:	8029883a 	mov	r20,r16
    5520:	a17fffc4 	addi	r5,r20,-1
    5524:	a0bfffc5 	stb	r2,-1(r20)
    5528:	dc002a17 	ldw	r16,168(sp)
    552c:	2f00782e 	bgeu	r5,fp,5710 <___svfprintf_internal_r+0x2270>
    5530:	d9c02384 	addi	r7,sp,142
    5534:	3d0fc83a 	sub	r7,r7,r20
    5538:	d9002344 	addi	r4,sp,141
    553c:	e1cf883a 	add	r7,fp,r7
    5540:	00000106 	br	5548 <___svfprintf_internal_r+0x20a8>
    5544:	28800003 	ldbu	r2,0(r5)
    5548:	20800005 	stb	r2,0(r4)
    554c:	21000044 	addi	r4,r4,1
    5550:	29400044 	addi	r5,r5,1
    5554:	21fffb1e 	bne	r4,r7,5544 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533544>
    5558:	d8802304 	addi	r2,sp,140
    555c:	1505c83a 	sub	r2,r2,r20
    5560:	d8c02344 	addi	r3,sp,141
    5564:	1885883a 	add	r2,r3,r2
    5568:	003f7006 	br	532c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153332c>
    556c:	0005883a 	mov	r2,zero
    5570:	003f0b06 	br	51a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215331a0>
    5574:	d9002a17 	ldw	r4,168(sp)
    5578:	d8c03217 	ldw	r3,200(sp)
    557c:	20800044 	addi	r2,r4,1
    5580:	1885883a 	add	r2,r3,r2
    5584:	d8802b15 	stw	r2,172(sp)
    5588:	103e870e 	bge	r2,zero,4fa8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532fa8>
    558c:	0005883a 	mov	r2,zero
    5590:	003e8506 	br	4fa8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532fa8>
    5594:	01000074 	movhi	r4,1
    5598:	21139884 	addi	r4,r4,20066
    559c:	d9002c15 	stw	r4,176(sp)
    55a0:	003cc506 	br	48b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215328b8>
    55a4:	d8c03217 	ldw	r3,200(sp)
    55a8:	18c00044 	addi	r3,r3,1
    55ac:	d8c02b15 	stw	r3,172(sp)
    55b0:	1805883a 	mov	r2,r3
    55b4:	183fa10e 	bge	r3,zero,543c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153343c>
    55b8:	0005883a 	mov	r2,zero
    55bc:	003f9f06 	br	543c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153343c>
    55c0:	d9003617 	ldw	r4,216(sp)
    55c4:	000d883a 	mov	r6,zero
    55c8:	000f883a 	mov	r7,zero
    55cc:	a00b883a 	mov	r5,r20
    55d0:	d8c03d15 	stw	r3,244(sp)
    55d4:	da003e15 	stw	r8,248(sp)
    55d8:	000da680 	call	da68 <__eqdf2>
    55dc:	d8c03d17 	ldw	r3,244(sp)
    55e0:	da003e17 	ldw	r8,248(sp)
    55e4:	103f8726 	beq	r2,zero,5404 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533404>
    55e8:	00800044 	movi	r2,1
    55ec:	10c7c83a 	sub	r3,r2,r3
    55f0:	d8c02615 	stw	r3,152(sp)
    55f4:	003f8406 	br	5408 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533408>
    55f8:	20000e1e 	bne	r4,zero,5634 <___svfprintf_internal_r+0x2194>
    55fc:	9480004c 	andi	r18,r18,1
    5600:	90000c1e 	bne	r18,zero,5634 <___svfprintf_internal_r+0x2194>
    5604:	00800044 	movi	r2,1
    5608:	d8802b15 	stw	r2,172(sp)
    560c:	003e6606 	br	4fa8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532fa8>
    5610:	00800b44 	movi	r2,45
    5614:	05adc83a 	sub	r22,zero,r22
    5618:	d8802305 	stb	r2,140(sp)
    561c:	003f3b06 	br	530c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153330c>
    5620:	0005883a 	mov	r2,zero
    5624:	003f4e06 	br	5360 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533360>
    5628:	90a4703a 	and	r18,r18,r2
    562c:	903f4a26 	beq	r18,zero,5358 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533358>
    5630:	003f4606 	br	534c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153334c>
    5634:	d8c02a17 	ldw	r3,168(sp)
    5638:	18c00084 	addi	r3,r3,2
    563c:	d8c02b15 	stw	r3,172(sp)
    5640:	1805883a 	mov	r2,r3
    5644:	183e580e 	bge	r3,zero,4fa8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532fa8>
    5648:	003fd006 	br	558c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153358c>
    564c:	00800084 	movi	r2,2
    5650:	10c5c83a 	sub	r2,r2,r3
    5654:	003f7506 	br	542c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153342c>
    5658:	d9402e17 	ldw	r5,184(sp)
    565c:	d9002e17 	ldw	r4,184(sp)
    5660:	bc400043 	ldbu	r17,1(r23)
    5664:	29400017 	ldw	r5,0(r5)
    5668:	20800104 	addi	r2,r4,4
    566c:	d8802e15 	stw	r2,184(sp)
    5670:	d9402a15 	stw	r5,168(sp)
    5674:	182f883a 	mov	r23,r3
    5678:	283df10e 	bge	r5,zero,4e40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532e40>
    567c:	8c403fcc 	andi	r17,r17,255
    5680:	017fffc4 	movi	r5,-1
    5684:	8c40201c 	xori	r17,r17,128
    5688:	d9402a15 	stw	r5,168(sp)
    568c:	8c7fe004 	addi	r17,r17,-128
    5690:	0037d806 	br	35f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215315f4>
    5694:	9080004c 	andi	r2,r18,1
    5698:	0039883a 	mov	fp,zero
    569c:	10000726 	beq	r2,zero,56bc <___svfprintf_internal_r+0x221c>
    56a0:	d8c02817 	ldw	r3,160(sp)
    56a4:	dc001dc4 	addi	r16,sp,119
    56a8:	00800c04 	movi	r2,48
    56ac:	1c07c83a 	sub	r3,r3,r16
    56b0:	d8801dc5 	stb	r2,119(sp)
    56b4:	d8c02b15 	stw	r3,172(sp)
    56b8:	00393106 	br	3b80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b80>
    56bc:	d8002b15 	stw	zero,172(sp)
    56c0:	dc001e04 	addi	r16,sp,120
    56c4:	00392e06 	br	3b80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531b80>
    56c8:	0005883a 	mov	r2,zero
    56cc:	003e3306 	br	4f9c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532f9c>
    56d0:	dd802617 	ldw	r22,152(sp)
    56d4:	003f0706 	br	52f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215332f4>
    56d8:	d8c02b03 	ldbu	r3,172(sp)
    56dc:	d8c02785 	stb	r3,158(sp)
    56e0:	003a3506 	br	3fb8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531fb8>
    56e4:	d8c02b03 	ldbu	r3,172(sp)
    56e8:	d8c02785 	stb	r3,158(sp)
    56ec:	003a1706 	br	3f4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531f4c>
    56f0:	0005883a 	mov	r2,zero
    56f4:	003f5d06 	br	546c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153346c>
    56f8:	d8c02b03 	ldbu	r3,172(sp)
    56fc:	d8c02785 	stb	r3,158(sp)
    5700:	0038f306 	br	3ad0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531ad0>
    5704:	d8c02b03 	ldbu	r3,172(sp)
    5708:	d8c02785 	stb	r3,158(sp)
    570c:	0038be06 	br	3a08 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531a08>
    5710:	d8802344 	addi	r2,sp,141
    5714:	003f0506 	br	532c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153332c>
    5718:	d8c02b03 	ldbu	r3,172(sp)
    571c:	d8c02785 	stb	r3,158(sp)
    5720:	00388b06 	br	3950 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531950>
    5724:	d8c02b03 	ldbu	r3,172(sp)
    5728:	d8c02785 	stb	r3,158(sp)
    572c:	003ad706 	br	428c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153228c>
    5730:	d9403917 	ldw	r5,228(sp)
    5734:	00800304 	movi	r2,12
    5738:	28800015 	stw	r2,0(r5)
    573c:	00bfffc4 	movi	r2,-1
    5740:	00384306 	br	3850 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21531850>
    5744:	d8c02b03 	ldbu	r3,172(sp)
    5748:	d8c02785 	stb	r3,158(sp)
    574c:	003ab606 	br	4228 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532228>
    5750:	d8c02b03 	ldbu	r3,172(sp)
    5754:	d8c02785 	stb	r3,158(sp)
    5758:	003a8906 	br	4180 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21532180>

0000575c <quorem>:
    575c:	defff204 	addi	sp,sp,-56
    5760:	ddc00b15 	stw	r23,44(sp)
    5764:	20800417 	ldw	r2,16(r4)
    5768:	2dc00417 	ldw	r23,16(r5)
    576c:	dfc00d15 	stw	ra,52(sp)
    5770:	df000c15 	stw	fp,48(sp)
    5774:	dd800a15 	stw	r22,40(sp)
    5778:	dd400915 	stw	r21,36(sp)
    577c:	dd000815 	stw	r20,32(sp)
    5780:	dcc00715 	stw	r19,28(sp)
    5784:	dc800615 	stw	r18,24(sp)
    5788:	dc400515 	stw	r17,20(sp)
    578c:	dc000415 	stw	r16,16(sp)
    5790:	15c07a16 	blt	r2,r23,597c <quorem+0x220>
    5794:	bdffffc4 	addi	r23,r23,-1
    5798:	bde9883a 	add	r20,r23,r23
    579c:	28c00504 	addi	r3,r5,20
    57a0:	a529883a 	add	r20,r20,r20
    57a4:	1d39883a 	add	fp,r3,r20
    57a8:	24c00504 	addi	r19,r4,20
    57ac:	d9400215 	stw	r5,8(sp)
    57b0:	9d29883a 	add	r20,r19,r20
    57b4:	e1400017 	ldw	r5,0(fp)
    57b8:	d9000015 	stw	r4,0(sp)
    57bc:	a1000017 	ldw	r4,0(r20)
    57c0:	29400044 	addi	r5,r5,1
    57c4:	d8c00115 	stw	r3,4(sp)
    57c8:	dd000315 	stw	r20,12(sp)
    57cc:	000c7300 	call	c730 <__udivsi3>
    57d0:	1025883a 	mov	r18,r2
    57d4:	10003026 	beq	r2,zero,5898 <quorem+0x13c>
    57d8:	dc400117 	ldw	r17,4(sp)
    57dc:	9829883a 	mov	r20,r19
    57e0:	002d883a 	mov	r22,zero
    57e4:	0021883a 	mov	r16,zero
    57e8:	8d400017 	ldw	r21,0(r17)
    57ec:	900b883a 	mov	r5,r18
    57f0:	8c400104 	addi	r17,r17,4
    57f4:	a93fffcc 	andi	r4,r21,65535
    57f8:	00020100 	call	2010 <__mulsi3>
    57fc:	a808d43a 	srli	r4,r21,16
    5800:	900b883a 	mov	r5,r18
    5804:	15ad883a 	add	r22,r2,r22
    5808:	00020100 	call	2010 <__mulsi3>
    580c:	a1000017 	ldw	r4,0(r20)
    5810:	b00cd43a 	srli	r6,r22,16
    5814:	b0ffffcc 	andi	r3,r22,65535
    5818:	217fffcc 	andi	r5,r4,65535
    581c:	2c21883a 	add	r16,r5,r16
    5820:	80c7c83a 	sub	r3,r16,r3
    5824:	2008d43a 	srli	r4,r4,16
    5828:	1185883a 	add	r2,r2,r6
    582c:	1821d43a 	srai	r16,r3,16
    5830:	117fffcc 	andi	r5,r2,65535
    5834:	2149c83a 	sub	r4,r4,r5
    5838:	2421883a 	add	r16,r4,r16
    583c:	8008943a 	slli	r4,r16,16
    5840:	18ffffcc 	andi	r3,r3,65535
    5844:	102cd43a 	srli	r22,r2,16
    5848:	20c8b03a 	or	r4,r4,r3
    584c:	a1000015 	stw	r4,0(r20)
    5850:	8021d43a 	srai	r16,r16,16
    5854:	a5000104 	addi	r20,r20,4
    5858:	e47fe32e 	bgeu	fp,r17,57e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215337e8>
    585c:	d8c00317 	ldw	r3,12(sp)
    5860:	18800017 	ldw	r2,0(r3)
    5864:	10000c1e 	bne	r2,zero,5898 <quorem+0x13c>
    5868:	18bfff04 	addi	r2,r3,-4
    586c:	9880082e 	bgeu	r19,r2,5890 <quorem+0x134>
    5870:	18ffff17 	ldw	r3,-4(r3)
    5874:	18000326 	beq	r3,zero,5884 <quorem+0x128>
    5878:	00000506 	br	5890 <quorem+0x134>
    587c:	10c00017 	ldw	r3,0(r2)
    5880:	1800031e 	bne	r3,zero,5890 <quorem+0x134>
    5884:	10bfff04 	addi	r2,r2,-4
    5888:	bdffffc4 	addi	r23,r23,-1
    588c:	98bffb36 	bltu	r19,r2,587c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153387c>
    5890:	d8c00017 	ldw	r3,0(sp)
    5894:	1dc00415 	stw	r23,16(r3)
    5898:	d9400217 	ldw	r5,8(sp)
    589c:	d9000017 	ldw	r4,0(sp)
    58a0:	0008c280 	call	8c28 <__mcmp>
    58a4:	10002816 	blt	r2,zero,5948 <quorem+0x1ec>
    58a8:	dc400117 	ldw	r17,4(sp)
    58ac:	94800044 	addi	r18,r18,1
    58b0:	980d883a 	mov	r6,r19
    58b4:	0007883a 	mov	r3,zero
    58b8:	31000017 	ldw	r4,0(r6)
    58bc:	89400017 	ldw	r5,0(r17)
    58c0:	31800104 	addi	r6,r6,4
    58c4:	20bfffcc 	andi	r2,r4,65535
    58c8:	10c7883a 	add	r3,r2,r3
    58cc:	28bfffcc 	andi	r2,r5,65535
    58d0:	1885c83a 	sub	r2,r3,r2
    58d4:	280ad43a 	srli	r5,r5,16
    58d8:	2008d43a 	srli	r4,r4,16
    58dc:	1007d43a 	srai	r3,r2,16
    58e0:	10bfffcc 	andi	r2,r2,65535
    58e4:	2149c83a 	sub	r4,r4,r5
    58e8:	20c9883a 	add	r4,r4,r3
    58ec:	200a943a 	slli	r5,r4,16
    58f0:	8c400104 	addi	r17,r17,4
    58f4:	2007d43a 	srai	r3,r4,16
    58f8:	2884b03a 	or	r2,r5,r2
    58fc:	30bfff15 	stw	r2,-4(r6)
    5900:	e47fed2e 	bgeu	fp,r17,58b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215338b8>
    5904:	bdc5883a 	add	r2,r23,r23
    5908:	1085883a 	add	r2,r2,r2
    590c:	9887883a 	add	r3,r19,r2
    5910:	18800017 	ldw	r2,0(r3)
    5914:	10000c1e 	bne	r2,zero,5948 <quorem+0x1ec>
    5918:	18bfff04 	addi	r2,r3,-4
    591c:	9880082e 	bgeu	r19,r2,5940 <quorem+0x1e4>
    5920:	18ffff17 	ldw	r3,-4(r3)
    5924:	18000326 	beq	r3,zero,5934 <quorem+0x1d8>
    5928:	00000506 	br	5940 <quorem+0x1e4>
    592c:	10c00017 	ldw	r3,0(r2)
    5930:	1800031e 	bne	r3,zero,5940 <quorem+0x1e4>
    5934:	10bfff04 	addi	r2,r2,-4
    5938:	bdffffc4 	addi	r23,r23,-1
    593c:	98bffb36 	bltu	r19,r2,592c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153392c>
    5940:	d8c00017 	ldw	r3,0(sp)
    5944:	1dc00415 	stw	r23,16(r3)
    5948:	9005883a 	mov	r2,r18
    594c:	dfc00d17 	ldw	ra,52(sp)
    5950:	df000c17 	ldw	fp,48(sp)
    5954:	ddc00b17 	ldw	r23,44(sp)
    5958:	dd800a17 	ldw	r22,40(sp)
    595c:	dd400917 	ldw	r21,36(sp)
    5960:	dd000817 	ldw	r20,32(sp)
    5964:	dcc00717 	ldw	r19,28(sp)
    5968:	dc800617 	ldw	r18,24(sp)
    596c:	dc400517 	ldw	r17,20(sp)
    5970:	dc000417 	ldw	r16,16(sp)
    5974:	dec00e04 	addi	sp,sp,56
    5978:	f800283a 	ret
    597c:	0005883a 	mov	r2,zero
    5980:	003ff206 	br	594c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153394c>

00005984 <_dtoa_r>:
    5984:	20801017 	ldw	r2,64(r4)
    5988:	deffde04 	addi	sp,sp,-136
    598c:	df002015 	stw	fp,128(sp)
    5990:	dcc01b15 	stw	r19,108(sp)
    5994:	dc801a15 	stw	r18,104(sp)
    5998:	dc401915 	stw	r17,100(sp)
    599c:	dc001815 	stw	r16,96(sp)
    59a0:	dfc02115 	stw	ra,132(sp)
    59a4:	ddc01f15 	stw	r23,124(sp)
    59a8:	dd801e15 	stw	r22,120(sp)
    59ac:	dd401d15 	stw	r21,116(sp)
    59b0:	dd001c15 	stw	r20,112(sp)
    59b4:	d9c00315 	stw	r7,12(sp)
    59b8:	2039883a 	mov	fp,r4
    59bc:	3023883a 	mov	r17,r6
    59c0:	2825883a 	mov	r18,r5
    59c4:	dc002417 	ldw	r16,144(sp)
    59c8:	3027883a 	mov	r19,r6
    59cc:	10000826 	beq	r2,zero,59f0 <_dtoa_r+0x6c>
    59d0:	21801117 	ldw	r6,68(r4)
    59d4:	00c00044 	movi	r3,1
    59d8:	100b883a 	mov	r5,r2
    59dc:	1986983a 	sll	r3,r3,r6
    59e0:	11800115 	stw	r6,4(r2)
    59e4:	10c00215 	stw	r3,8(r2)
    59e8:	000834c0 	call	834c <_Bfree>
    59ec:	e0001015 	stw	zero,64(fp)
    59f0:	88002e16 	blt	r17,zero,5aac <_dtoa_r+0x128>
    59f4:	80000015 	stw	zero,0(r16)
    59f8:	889ffc2c 	andhi	r2,r17,32752
    59fc:	00dffc34 	movhi	r3,32752
    5a00:	10c01c26 	beq	r2,r3,5a74 <_dtoa_r+0xf0>
    5a04:	000d883a 	mov	r6,zero
    5a08:	000f883a 	mov	r7,zero
    5a0c:	9009883a 	mov	r4,r18
    5a10:	980b883a 	mov	r5,r19
    5a14:	000da680 	call	da68 <__eqdf2>
    5a18:	10002b1e 	bne	r2,zero,5ac8 <_dtoa_r+0x144>
    5a1c:	d9c02317 	ldw	r7,140(sp)
    5a20:	00800044 	movi	r2,1
    5a24:	38800015 	stw	r2,0(r7)
    5a28:	d8802517 	ldw	r2,148(sp)
    5a2c:	10019e26 	beq	r2,zero,60a8 <_dtoa_r+0x724>
    5a30:	d8c02517 	ldw	r3,148(sp)
    5a34:	00800074 	movhi	r2,1
    5a38:	10939844 	addi	r2,r2,20065
    5a3c:	18800015 	stw	r2,0(r3)
    5a40:	10bfffc4 	addi	r2,r2,-1
    5a44:	dfc02117 	ldw	ra,132(sp)
    5a48:	df002017 	ldw	fp,128(sp)
    5a4c:	ddc01f17 	ldw	r23,124(sp)
    5a50:	dd801e17 	ldw	r22,120(sp)
    5a54:	dd401d17 	ldw	r21,116(sp)
    5a58:	dd001c17 	ldw	r20,112(sp)
    5a5c:	dcc01b17 	ldw	r19,108(sp)
    5a60:	dc801a17 	ldw	r18,104(sp)
    5a64:	dc401917 	ldw	r17,100(sp)
    5a68:	dc001817 	ldw	r16,96(sp)
    5a6c:	dec02204 	addi	sp,sp,136
    5a70:	f800283a 	ret
    5a74:	d8c02317 	ldw	r3,140(sp)
    5a78:	0089c3c4 	movi	r2,9999
    5a7c:	18800015 	stw	r2,0(r3)
    5a80:	90017726 	beq	r18,zero,6060 <_dtoa_r+0x6dc>
    5a84:	00800074 	movhi	r2,1
    5a88:	1093a404 	addi	r2,r2,20112
    5a8c:	d9002517 	ldw	r4,148(sp)
    5a90:	203fec26 	beq	r4,zero,5a44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533a44>
    5a94:	10c000c7 	ldb	r3,3(r2)
    5a98:	1801781e 	bne	r3,zero,607c <_dtoa_r+0x6f8>
    5a9c:	10c000c4 	addi	r3,r2,3
    5aa0:	d9802517 	ldw	r6,148(sp)
    5aa4:	30c00015 	stw	r3,0(r6)
    5aa8:	003fe606 	br	5a44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533a44>
    5aac:	04e00034 	movhi	r19,32768
    5ab0:	9cffffc4 	addi	r19,r19,-1
    5ab4:	00800044 	movi	r2,1
    5ab8:	8ce6703a 	and	r19,r17,r19
    5abc:	80800015 	stw	r2,0(r16)
    5ac0:	9823883a 	mov	r17,r19
    5ac4:	003fcc06 	br	59f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215339f8>
    5ac8:	d8800204 	addi	r2,sp,8
    5acc:	d8800015 	stw	r2,0(sp)
    5ad0:	d9c00104 	addi	r7,sp,4
    5ad4:	900b883a 	mov	r5,r18
    5ad8:	980d883a 	mov	r6,r19
    5adc:	e009883a 	mov	r4,fp
    5ae0:	8820d53a 	srli	r16,r17,20
    5ae4:	0008ff40 	call	8ff4 <__d2b>
    5ae8:	d8800915 	stw	r2,36(sp)
    5aec:	8001651e 	bne	r16,zero,6084 <_dtoa_r+0x700>
    5af0:	dd800217 	ldw	r22,8(sp)
    5af4:	dc000117 	ldw	r16,4(sp)
    5af8:	00800804 	movi	r2,32
    5afc:	b421883a 	add	r16,r22,r16
    5b00:	80c10c84 	addi	r3,r16,1074
    5b04:	10c2d10e 	bge	r2,r3,664c <_dtoa_r+0xcc8>
    5b08:	00801004 	movi	r2,64
    5b0c:	81010484 	addi	r4,r16,1042
    5b10:	10c7c83a 	sub	r3,r2,r3
    5b14:	9108d83a 	srl	r4,r18,r4
    5b18:	88e2983a 	sll	r17,r17,r3
    5b1c:	2448b03a 	or	r4,r4,r17
    5b20:	000ef840 	call	ef84 <__floatunsidf>
    5b24:	017f8434 	movhi	r5,65040
    5b28:	01800044 	movi	r6,1
    5b2c:	1009883a 	mov	r4,r2
    5b30:	194b883a 	add	r5,r3,r5
    5b34:	843fffc4 	addi	r16,r16,-1
    5b38:	d9801115 	stw	r6,68(sp)
    5b3c:	000d883a 	mov	r6,zero
    5b40:	01cffe34 	movhi	r7,16376
    5b44:	000e52c0 	call	e52c <__subdf3>
    5b48:	0198dbf4 	movhi	r6,25455
    5b4c:	01cff4f4 	movhi	r7,16339
    5b50:	3190d844 	addi	r6,r6,17249
    5b54:	39e1e9c4 	addi	r7,r7,-30809
    5b58:	1009883a 	mov	r4,r2
    5b5c:	180b883a 	mov	r5,r3
    5b60:	000dcc00 	call	dcc0 <__muldf3>
    5b64:	01a2d874 	movhi	r6,35681
    5b68:	01cff1f4 	movhi	r7,16327
    5b6c:	31b22cc4 	addi	r6,r6,-14157
    5b70:	39e28a04 	addi	r7,r7,-30168
    5b74:	180b883a 	mov	r5,r3
    5b78:	1009883a 	mov	r4,r2
    5b7c:	000c7ec0 	call	c7ec <__adddf3>
    5b80:	8009883a 	mov	r4,r16
    5b84:	1029883a 	mov	r20,r2
    5b88:	1823883a 	mov	r17,r3
    5b8c:	000eea80 	call	eea8 <__floatsidf>
    5b90:	019427f4 	movhi	r6,20639
    5b94:	01cff4f4 	movhi	r7,16339
    5b98:	319e7ec4 	addi	r6,r6,31227
    5b9c:	39d104c4 	addi	r7,r7,17427
    5ba0:	1009883a 	mov	r4,r2
    5ba4:	180b883a 	mov	r5,r3
    5ba8:	000dcc00 	call	dcc0 <__muldf3>
    5bac:	100d883a 	mov	r6,r2
    5bb0:	180f883a 	mov	r7,r3
    5bb4:	a009883a 	mov	r4,r20
    5bb8:	880b883a 	mov	r5,r17
    5bbc:	000c7ec0 	call	c7ec <__adddf3>
    5bc0:	1009883a 	mov	r4,r2
    5bc4:	180b883a 	mov	r5,r3
    5bc8:	1029883a 	mov	r20,r2
    5bcc:	1823883a 	mov	r17,r3
    5bd0:	000ee280 	call	ee28 <__fixdfsi>
    5bd4:	000d883a 	mov	r6,zero
    5bd8:	000f883a 	mov	r7,zero
    5bdc:	a009883a 	mov	r4,r20
    5be0:	880b883a 	mov	r5,r17
    5be4:	d8800515 	stw	r2,20(sp)
    5be8:	000dbcc0 	call	dbcc <__ledf2>
    5bec:	10028716 	blt	r2,zero,660c <_dtoa_r+0xc88>
    5bf0:	d8c00517 	ldw	r3,20(sp)
    5bf4:	00800584 	movi	r2,22
    5bf8:	10c27536 	bltu	r2,r3,65d0 <_dtoa_r+0xc4c>
    5bfc:	180490fa 	slli	r2,r3,3
    5c00:	00c00074 	movhi	r3,1
    5c04:	18d3c004 	addi	r3,r3,20224
    5c08:	1885883a 	add	r2,r3,r2
    5c0c:	11000017 	ldw	r4,0(r2)
    5c10:	11400117 	ldw	r5,4(r2)
    5c14:	900d883a 	mov	r6,r18
    5c18:	980f883a 	mov	r7,r19
    5c1c:	000daf00 	call	daf0 <__gedf2>
    5c20:	00828d0e 	bge	zero,r2,6658 <_dtoa_r+0xcd4>
    5c24:	d9000517 	ldw	r4,20(sp)
    5c28:	d8000e15 	stw	zero,56(sp)
    5c2c:	213fffc4 	addi	r4,r4,-1
    5c30:	d9000515 	stw	r4,20(sp)
    5c34:	b42dc83a 	sub	r22,r22,r16
    5c38:	b5bfffc4 	addi	r22,r22,-1
    5c3c:	b0026f16 	blt	r22,zero,65fc <_dtoa_r+0xc78>
    5c40:	d8000815 	stw	zero,32(sp)
    5c44:	d9c00517 	ldw	r7,20(sp)
    5c48:	38026416 	blt	r7,zero,65dc <_dtoa_r+0xc58>
    5c4c:	b1ed883a 	add	r22,r22,r7
    5c50:	d9c00d15 	stw	r7,52(sp)
    5c54:	d8000a15 	stw	zero,40(sp)
    5c58:	d9800317 	ldw	r6,12(sp)
    5c5c:	00800244 	movi	r2,9
    5c60:	11811436 	bltu	r2,r6,60b4 <_dtoa_r+0x730>
    5c64:	00800144 	movi	r2,5
    5c68:	1184e10e 	bge	r2,r6,6ff0 <_dtoa_r+0x166c>
    5c6c:	31bfff04 	addi	r6,r6,-4
    5c70:	d9800315 	stw	r6,12(sp)
    5c74:	0023883a 	mov	r17,zero
    5c78:	d9800317 	ldw	r6,12(sp)
    5c7c:	008000c4 	movi	r2,3
    5c80:	30836726 	beq	r6,r2,6a20 <_dtoa_r+0x109c>
    5c84:	1183410e 	bge	r2,r6,698c <_dtoa_r+0x1008>
    5c88:	d9c00317 	ldw	r7,12(sp)
    5c8c:	00800104 	movi	r2,4
    5c90:	38827c26 	beq	r7,r2,6684 <_dtoa_r+0xd00>
    5c94:	00800144 	movi	r2,5
    5c98:	3884c41e 	bne	r7,r2,6fac <_dtoa_r+0x1628>
    5c9c:	00800044 	movi	r2,1
    5ca0:	d8800b15 	stw	r2,44(sp)
    5ca4:	d8c00517 	ldw	r3,20(sp)
    5ca8:	d9002217 	ldw	r4,136(sp)
    5cac:	1907883a 	add	r3,r3,r4
    5cb0:	19800044 	addi	r6,r3,1
    5cb4:	d8c00c15 	stw	r3,48(sp)
    5cb8:	d9800615 	stw	r6,24(sp)
    5cbc:	0183a40e 	bge	zero,r6,6b50 <_dtoa_r+0x11cc>
    5cc0:	d9800617 	ldw	r6,24(sp)
    5cc4:	3021883a 	mov	r16,r6
    5cc8:	e0001115 	stw	zero,68(fp)
    5ccc:	008005c4 	movi	r2,23
    5cd0:	1184c92e 	bgeu	r2,r6,6ff8 <_dtoa_r+0x1674>
    5cd4:	00c00044 	movi	r3,1
    5cd8:	00800104 	movi	r2,4
    5cdc:	1085883a 	add	r2,r2,r2
    5ce0:	11000504 	addi	r4,r2,20
    5ce4:	180b883a 	mov	r5,r3
    5ce8:	18c00044 	addi	r3,r3,1
    5cec:	313ffb2e 	bgeu	r6,r4,5cdc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533cdc>
    5cf0:	e1401115 	stw	r5,68(fp)
    5cf4:	e009883a 	mov	r4,fp
    5cf8:	00082a40 	call	82a4 <_Balloc>
    5cfc:	d8800715 	stw	r2,28(sp)
    5d00:	e0801015 	stw	r2,64(fp)
    5d04:	00800384 	movi	r2,14
    5d08:	1400f736 	bltu	r2,r16,60e8 <_dtoa_r+0x764>
    5d0c:	8800f626 	beq	r17,zero,60e8 <_dtoa_r+0x764>
    5d10:	d9c00517 	ldw	r7,20(sp)
    5d14:	01c39a0e 	bge	zero,r7,6b80 <_dtoa_r+0x11fc>
    5d18:	388003cc 	andi	r2,r7,15
    5d1c:	100490fa 	slli	r2,r2,3
    5d20:	382bd13a 	srai	r21,r7,4
    5d24:	00c00074 	movhi	r3,1
    5d28:	18d3c004 	addi	r3,r3,20224
    5d2c:	1885883a 	add	r2,r3,r2
    5d30:	a8c0040c 	andi	r3,r21,16
    5d34:	12400017 	ldw	r9,0(r2)
    5d38:	12000117 	ldw	r8,4(r2)
    5d3c:	18037926 	beq	r3,zero,6b24 <_dtoa_r+0x11a0>
    5d40:	00800074 	movhi	r2,1
    5d44:	1093b604 	addi	r2,r2,20184
    5d48:	11800817 	ldw	r6,32(r2)
    5d4c:	11c00917 	ldw	r7,36(r2)
    5d50:	9009883a 	mov	r4,r18
    5d54:	980b883a 	mov	r5,r19
    5d58:	da001715 	stw	r8,92(sp)
    5d5c:	da401615 	stw	r9,88(sp)
    5d60:	000d0980 	call	d098 <__divdf3>
    5d64:	da001717 	ldw	r8,92(sp)
    5d68:	da401617 	ldw	r9,88(sp)
    5d6c:	ad4003cc 	andi	r21,r21,15
    5d70:	040000c4 	movi	r16,3
    5d74:	1023883a 	mov	r17,r2
    5d78:	1829883a 	mov	r20,r3
    5d7c:	a8001126 	beq	r21,zero,5dc4 <_dtoa_r+0x440>
    5d80:	05c00074 	movhi	r23,1
    5d84:	bdd3b604 	addi	r23,r23,20184
    5d88:	4805883a 	mov	r2,r9
    5d8c:	4007883a 	mov	r3,r8
    5d90:	a980004c 	andi	r6,r21,1
    5d94:	1009883a 	mov	r4,r2
    5d98:	a82bd07a 	srai	r21,r21,1
    5d9c:	180b883a 	mov	r5,r3
    5da0:	30000426 	beq	r6,zero,5db4 <_dtoa_r+0x430>
    5da4:	b9800017 	ldw	r6,0(r23)
    5da8:	b9c00117 	ldw	r7,4(r23)
    5dac:	84000044 	addi	r16,r16,1
    5db0:	000dcc00 	call	dcc0 <__muldf3>
    5db4:	bdc00204 	addi	r23,r23,8
    5db8:	a83ff51e 	bne	r21,zero,5d90 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533d90>
    5dbc:	1013883a 	mov	r9,r2
    5dc0:	1811883a 	mov	r8,r3
    5dc4:	480d883a 	mov	r6,r9
    5dc8:	400f883a 	mov	r7,r8
    5dcc:	8809883a 	mov	r4,r17
    5dd0:	a00b883a 	mov	r5,r20
    5dd4:	000d0980 	call	d098 <__divdf3>
    5dd8:	d8800f15 	stw	r2,60(sp)
    5ddc:	d8c01015 	stw	r3,64(sp)
    5de0:	d8c00e17 	ldw	r3,56(sp)
    5de4:	18000626 	beq	r3,zero,5e00 <_dtoa_r+0x47c>
    5de8:	d9000f17 	ldw	r4,60(sp)
    5dec:	d9401017 	ldw	r5,64(sp)
    5df0:	000d883a 	mov	r6,zero
    5df4:	01cffc34 	movhi	r7,16368
    5df8:	000dbcc0 	call	dbcc <__ledf2>
    5dfc:	10040b16 	blt	r2,zero,6e2c <_dtoa_r+0x14a8>
    5e00:	8009883a 	mov	r4,r16
    5e04:	000eea80 	call	eea8 <__floatsidf>
    5e08:	d9800f17 	ldw	r6,60(sp)
    5e0c:	d9c01017 	ldw	r7,64(sp)
    5e10:	1009883a 	mov	r4,r2
    5e14:	180b883a 	mov	r5,r3
    5e18:	000dcc00 	call	dcc0 <__muldf3>
    5e1c:	000d883a 	mov	r6,zero
    5e20:	01d00734 	movhi	r7,16412
    5e24:	1009883a 	mov	r4,r2
    5e28:	180b883a 	mov	r5,r3
    5e2c:	000c7ec0 	call	c7ec <__adddf3>
    5e30:	1021883a 	mov	r16,r2
    5e34:	d8800617 	ldw	r2,24(sp)
    5e38:	047f3034 	movhi	r17,64704
    5e3c:	1c63883a 	add	r17,r3,r17
    5e40:	10031826 	beq	r2,zero,6aa4 <_dtoa_r+0x1120>
    5e44:	d8c00517 	ldw	r3,20(sp)
    5e48:	db000617 	ldw	r12,24(sp)
    5e4c:	d8c01315 	stw	r3,76(sp)
    5e50:	d9000b17 	ldw	r4,44(sp)
    5e54:	20038f26 	beq	r4,zero,6c94 <_dtoa_r+0x1310>
    5e58:	60bfffc4 	addi	r2,r12,-1
    5e5c:	100490fa 	slli	r2,r2,3
    5e60:	00c00074 	movhi	r3,1
    5e64:	18d3c004 	addi	r3,r3,20224
    5e68:	1885883a 	add	r2,r3,r2
    5e6c:	11800017 	ldw	r6,0(r2)
    5e70:	11c00117 	ldw	r7,4(r2)
    5e74:	d8800717 	ldw	r2,28(sp)
    5e78:	0009883a 	mov	r4,zero
    5e7c:	014ff834 	movhi	r5,16352
    5e80:	db001615 	stw	r12,88(sp)
    5e84:	15c00044 	addi	r23,r2,1
    5e88:	000d0980 	call	d098 <__divdf3>
    5e8c:	800d883a 	mov	r6,r16
    5e90:	880f883a 	mov	r7,r17
    5e94:	1009883a 	mov	r4,r2
    5e98:	180b883a 	mov	r5,r3
    5e9c:	000e52c0 	call	e52c <__subdf3>
    5ea0:	d9401017 	ldw	r5,64(sp)
    5ea4:	d9000f17 	ldw	r4,60(sp)
    5ea8:	102b883a 	mov	r21,r2
    5eac:	d8c01215 	stw	r3,72(sp)
    5eb0:	000ee280 	call	ee28 <__fixdfsi>
    5eb4:	1009883a 	mov	r4,r2
    5eb8:	1029883a 	mov	r20,r2
    5ebc:	000eea80 	call	eea8 <__floatsidf>
    5ec0:	d9000f17 	ldw	r4,60(sp)
    5ec4:	d9401017 	ldw	r5,64(sp)
    5ec8:	100d883a 	mov	r6,r2
    5ecc:	180f883a 	mov	r7,r3
    5ed0:	000e52c0 	call	e52c <__subdf3>
    5ed4:	1823883a 	mov	r17,r3
    5ed8:	d8c00717 	ldw	r3,28(sp)
    5edc:	d9401217 	ldw	r5,72(sp)
    5ee0:	a2000c04 	addi	r8,r20,48
    5ee4:	1021883a 	mov	r16,r2
    5ee8:	1a000005 	stb	r8,0(r3)
    5eec:	800d883a 	mov	r6,r16
    5ef0:	880f883a 	mov	r7,r17
    5ef4:	a809883a 	mov	r4,r21
    5ef8:	4029883a 	mov	r20,r8
    5efc:	000daf00 	call	daf0 <__gedf2>
    5f00:	00841d16 	blt	zero,r2,6f78 <_dtoa_r+0x15f4>
    5f04:	800d883a 	mov	r6,r16
    5f08:	880f883a 	mov	r7,r17
    5f0c:	0009883a 	mov	r4,zero
    5f10:	014ffc34 	movhi	r5,16368
    5f14:	000e52c0 	call	e52c <__subdf3>
    5f18:	d9401217 	ldw	r5,72(sp)
    5f1c:	100d883a 	mov	r6,r2
    5f20:	180f883a 	mov	r7,r3
    5f24:	a809883a 	mov	r4,r21
    5f28:	000daf00 	call	daf0 <__gedf2>
    5f2c:	db001617 	ldw	r12,88(sp)
    5f30:	00840e16 	blt	zero,r2,6f6c <_dtoa_r+0x15e8>
    5f34:	00800044 	movi	r2,1
    5f38:	13006b0e 	bge	r2,r12,60e8 <_dtoa_r+0x764>
    5f3c:	d9000717 	ldw	r4,28(sp)
    5f40:	dd800f15 	stw	r22,60(sp)
    5f44:	dcc01015 	stw	r19,64(sp)
    5f48:	2319883a 	add	r12,r4,r12
    5f4c:	dcc01217 	ldw	r19,72(sp)
    5f50:	602d883a 	mov	r22,r12
    5f54:	dc801215 	stw	r18,72(sp)
    5f58:	b825883a 	mov	r18,r23
    5f5c:	00000906 	br	5f84 <_dtoa_r+0x600>
    5f60:	000e52c0 	call	e52c <__subdf3>
    5f64:	a80d883a 	mov	r6,r21
    5f68:	980f883a 	mov	r7,r19
    5f6c:	1009883a 	mov	r4,r2
    5f70:	180b883a 	mov	r5,r3
    5f74:	000dbcc0 	call	dbcc <__ledf2>
    5f78:	1003e816 	blt	r2,zero,6f1c <_dtoa_r+0x1598>
    5f7c:	b825883a 	mov	r18,r23
    5f80:	bd83e926 	beq	r23,r22,6f28 <_dtoa_r+0x15a4>
    5f84:	a809883a 	mov	r4,r21
    5f88:	980b883a 	mov	r5,r19
    5f8c:	000d883a 	mov	r6,zero
    5f90:	01d00934 	movhi	r7,16420
    5f94:	000dcc00 	call	dcc0 <__muldf3>
    5f98:	000d883a 	mov	r6,zero
    5f9c:	01d00934 	movhi	r7,16420
    5fa0:	8009883a 	mov	r4,r16
    5fa4:	880b883a 	mov	r5,r17
    5fa8:	102b883a 	mov	r21,r2
    5fac:	1827883a 	mov	r19,r3
    5fb0:	000dcc00 	call	dcc0 <__muldf3>
    5fb4:	180b883a 	mov	r5,r3
    5fb8:	1009883a 	mov	r4,r2
    5fbc:	1821883a 	mov	r16,r3
    5fc0:	1023883a 	mov	r17,r2
    5fc4:	000ee280 	call	ee28 <__fixdfsi>
    5fc8:	1009883a 	mov	r4,r2
    5fcc:	1029883a 	mov	r20,r2
    5fd0:	000eea80 	call	eea8 <__floatsidf>
    5fd4:	8809883a 	mov	r4,r17
    5fd8:	800b883a 	mov	r5,r16
    5fdc:	100d883a 	mov	r6,r2
    5fe0:	180f883a 	mov	r7,r3
    5fe4:	000e52c0 	call	e52c <__subdf3>
    5fe8:	a5000c04 	addi	r20,r20,48
    5fec:	a80d883a 	mov	r6,r21
    5ff0:	980f883a 	mov	r7,r19
    5ff4:	1009883a 	mov	r4,r2
    5ff8:	180b883a 	mov	r5,r3
    5ffc:	95000005 	stb	r20,0(r18)
    6000:	1021883a 	mov	r16,r2
    6004:	1823883a 	mov	r17,r3
    6008:	000dbcc0 	call	dbcc <__ledf2>
    600c:	bdc00044 	addi	r23,r23,1
    6010:	800d883a 	mov	r6,r16
    6014:	880f883a 	mov	r7,r17
    6018:	0009883a 	mov	r4,zero
    601c:	014ffc34 	movhi	r5,16368
    6020:	103fcf0e 	bge	r2,zero,5f60 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533f60>
    6024:	d8c01317 	ldw	r3,76(sp)
    6028:	d8c00515 	stw	r3,20(sp)
    602c:	d9400917 	ldw	r5,36(sp)
    6030:	e009883a 	mov	r4,fp
    6034:	000834c0 	call	834c <_Bfree>
    6038:	d9000517 	ldw	r4,20(sp)
    603c:	d9802317 	ldw	r6,140(sp)
    6040:	d9c02517 	ldw	r7,148(sp)
    6044:	b8000005 	stb	zero,0(r23)
    6048:	20800044 	addi	r2,r4,1
    604c:	30800015 	stw	r2,0(r6)
    6050:	3802aa26 	beq	r7,zero,6afc <_dtoa_r+0x1178>
    6054:	3dc00015 	stw	r23,0(r7)
    6058:	d8800717 	ldw	r2,28(sp)
    605c:	003e7906 	br	5a44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533a44>
    6060:	00800434 	movhi	r2,16
    6064:	10bfffc4 	addi	r2,r2,-1
    6068:	88a2703a 	and	r17,r17,r2
    606c:	883e851e 	bne	r17,zero,5a84 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533a84>
    6070:	00800074 	movhi	r2,1
    6074:	1093a104 	addi	r2,r2,20100
    6078:	003e8406 	br	5a8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533a8c>
    607c:	10c00204 	addi	r3,r2,8
    6080:	003e8706 	br	5aa0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533aa0>
    6084:	01400434 	movhi	r5,16
    6088:	297fffc4 	addi	r5,r5,-1
    608c:	994a703a 	and	r5,r19,r5
    6090:	9009883a 	mov	r4,r18
    6094:	843f0044 	addi	r16,r16,-1023
    6098:	294ffc34 	orhi	r5,r5,16368
    609c:	dd800217 	ldw	r22,8(sp)
    60a0:	d8001115 	stw	zero,68(sp)
    60a4:	003ea506 	br	5b3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533b3c>
    60a8:	00800074 	movhi	r2,1
    60ac:	10939804 	addi	r2,r2,20064
    60b0:	003e6406 	br	5a44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533a44>
    60b4:	e0001115 	stw	zero,68(fp)
    60b8:	000b883a 	mov	r5,zero
    60bc:	e009883a 	mov	r4,fp
    60c0:	00082a40 	call	82a4 <_Balloc>
    60c4:	01bfffc4 	movi	r6,-1
    60c8:	01c00044 	movi	r7,1
    60cc:	d8800715 	stw	r2,28(sp)
    60d0:	d9800c15 	stw	r6,48(sp)
    60d4:	e0801015 	stw	r2,64(fp)
    60d8:	d8000315 	stw	zero,12(sp)
    60dc:	d9c00b15 	stw	r7,44(sp)
    60e0:	d9800615 	stw	r6,24(sp)
    60e4:	d8002215 	stw	zero,136(sp)
    60e8:	d8800117 	ldw	r2,4(sp)
    60ec:	10008916 	blt	r2,zero,6314 <_dtoa_r+0x990>
    60f0:	d9000517 	ldw	r4,20(sp)
    60f4:	00c00384 	movi	r3,14
    60f8:	19008616 	blt	r3,r4,6314 <_dtoa_r+0x990>
    60fc:	200490fa 	slli	r2,r4,3
    6100:	00c00074 	movhi	r3,1
    6104:	d9802217 	ldw	r6,136(sp)
    6108:	18d3c004 	addi	r3,r3,20224
    610c:	1885883a 	add	r2,r3,r2
    6110:	14000017 	ldw	r16,0(r2)
    6114:	14400117 	ldw	r17,4(r2)
    6118:	30016316 	blt	r6,zero,66a8 <_dtoa_r+0xd24>
    611c:	800d883a 	mov	r6,r16
    6120:	880f883a 	mov	r7,r17
    6124:	9009883a 	mov	r4,r18
    6128:	980b883a 	mov	r5,r19
    612c:	000d0980 	call	d098 <__divdf3>
    6130:	180b883a 	mov	r5,r3
    6134:	1009883a 	mov	r4,r2
    6138:	000ee280 	call	ee28 <__fixdfsi>
    613c:	1009883a 	mov	r4,r2
    6140:	102b883a 	mov	r21,r2
    6144:	000eea80 	call	eea8 <__floatsidf>
    6148:	800d883a 	mov	r6,r16
    614c:	880f883a 	mov	r7,r17
    6150:	1009883a 	mov	r4,r2
    6154:	180b883a 	mov	r5,r3
    6158:	000dcc00 	call	dcc0 <__muldf3>
    615c:	100d883a 	mov	r6,r2
    6160:	180f883a 	mov	r7,r3
    6164:	9009883a 	mov	r4,r18
    6168:	980b883a 	mov	r5,r19
    616c:	000e52c0 	call	e52c <__subdf3>
    6170:	d9c00717 	ldw	r7,28(sp)
    6174:	1009883a 	mov	r4,r2
    6178:	a8800c04 	addi	r2,r21,48
    617c:	38800005 	stb	r2,0(r7)
    6180:	3dc00044 	addi	r23,r7,1
    6184:	d9c00617 	ldw	r7,24(sp)
    6188:	01800044 	movi	r6,1
    618c:	180b883a 	mov	r5,r3
    6190:	2005883a 	mov	r2,r4
    6194:	39803826 	beq	r7,r6,6278 <_dtoa_r+0x8f4>
    6198:	000d883a 	mov	r6,zero
    619c:	01d00934 	movhi	r7,16420
    61a0:	000dcc00 	call	dcc0 <__muldf3>
    61a4:	000d883a 	mov	r6,zero
    61a8:	000f883a 	mov	r7,zero
    61ac:	1009883a 	mov	r4,r2
    61b0:	180b883a 	mov	r5,r3
    61b4:	1025883a 	mov	r18,r2
    61b8:	1827883a 	mov	r19,r3
    61bc:	000da680 	call	da68 <__eqdf2>
    61c0:	103f9a26 	beq	r2,zero,602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    61c4:	d9c00617 	ldw	r7,24(sp)
    61c8:	d8c00717 	ldw	r3,28(sp)
    61cc:	b829883a 	mov	r20,r23
    61d0:	38bfffc4 	addi	r2,r7,-1
    61d4:	18ad883a 	add	r22,r3,r2
    61d8:	00000a06 	br	6204 <_dtoa_r+0x880>
    61dc:	000dcc00 	call	dcc0 <__muldf3>
    61e0:	000d883a 	mov	r6,zero
    61e4:	000f883a 	mov	r7,zero
    61e8:	1009883a 	mov	r4,r2
    61ec:	180b883a 	mov	r5,r3
    61f0:	1025883a 	mov	r18,r2
    61f4:	1827883a 	mov	r19,r3
    61f8:	b829883a 	mov	r20,r23
    61fc:	000da680 	call	da68 <__eqdf2>
    6200:	103f8a26 	beq	r2,zero,602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    6204:	800d883a 	mov	r6,r16
    6208:	880f883a 	mov	r7,r17
    620c:	9009883a 	mov	r4,r18
    6210:	980b883a 	mov	r5,r19
    6214:	000d0980 	call	d098 <__divdf3>
    6218:	180b883a 	mov	r5,r3
    621c:	1009883a 	mov	r4,r2
    6220:	000ee280 	call	ee28 <__fixdfsi>
    6224:	1009883a 	mov	r4,r2
    6228:	102b883a 	mov	r21,r2
    622c:	000eea80 	call	eea8 <__floatsidf>
    6230:	800d883a 	mov	r6,r16
    6234:	880f883a 	mov	r7,r17
    6238:	1009883a 	mov	r4,r2
    623c:	180b883a 	mov	r5,r3
    6240:	000dcc00 	call	dcc0 <__muldf3>
    6244:	100d883a 	mov	r6,r2
    6248:	180f883a 	mov	r7,r3
    624c:	9009883a 	mov	r4,r18
    6250:	980b883a 	mov	r5,r19
    6254:	000e52c0 	call	e52c <__subdf3>
    6258:	aa000c04 	addi	r8,r21,48
    625c:	a2000005 	stb	r8,0(r20)
    6260:	000d883a 	mov	r6,zero
    6264:	01d00934 	movhi	r7,16420
    6268:	1009883a 	mov	r4,r2
    626c:	180b883a 	mov	r5,r3
    6270:	a5c00044 	addi	r23,r20,1
    6274:	b53fd91e 	bne	r22,r20,61dc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215341dc>
    6278:	100d883a 	mov	r6,r2
    627c:	180f883a 	mov	r7,r3
    6280:	1009883a 	mov	r4,r2
    6284:	180b883a 	mov	r5,r3
    6288:	000c7ec0 	call	c7ec <__adddf3>
    628c:	100d883a 	mov	r6,r2
    6290:	180f883a 	mov	r7,r3
    6294:	8009883a 	mov	r4,r16
    6298:	880b883a 	mov	r5,r17
    629c:	1027883a 	mov	r19,r2
    62a0:	1825883a 	mov	r18,r3
    62a4:	000dbcc0 	call	dbcc <__ledf2>
    62a8:	10000816 	blt	r2,zero,62cc <_dtoa_r+0x948>
    62ac:	980d883a 	mov	r6,r19
    62b0:	900f883a 	mov	r7,r18
    62b4:	8009883a 	mov	r4,r16
    62b8:	880b883a 	mov	r5,r17
    62bc:	000da680 	call	da68 <__eqdf2>
    62c0:	103f5a1e 	bne	r2,zero,602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    62c4:	ad40004c 	andi	r21,r21,1
    62c8:	a83f5826 	beq	r21,zero,602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    62cc:	bd3fffc3 	ldbu	r20,-1(r23)
    62d0:	b8bfffc4 	addi	r2,r23,-1
    62d4:	1007883a 	mov	r3,r2
    62d8:	01400e44 	movi	r5,57
    62dc:	d9800717 	ldw	r6,28(sp)
    62e0:	00000506 	br	62f8 <_dtoa_r+0x974>
    62e4:	18ffffc4 	addi	r3,r3,-1
    62e8:	11824726 	beq	r2,r6,6c08 <_dtoa_r+0x1284>
    62ec:	1d000003 	ldbu	r20,0(r3)
    62f0:	102f883a 	mov	r23,r2
    62f4:	10bfffc4 	addi	r2,r2,-1
    62f8:	a1003fcc 	andi	r4,r20,255
    62fc:	2100201c 	xori	r4,r4,128
    6300:	213fe004 	addi	r4,r4,-128
    6304:	217ff726 	beq	r4,r5,62e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215342e4>
    6308:	a2000044 	addi	r8,r20,1
    630c:	12000005 	stb	r8,0(r2)
    6310:	003f4606 	br	602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    6314:	d9000b17 	ldw	r4,44(sp)
    6318:	2000c826 	beq	r4,zero,663c <_dtoa_r+0xcb8>
    631c:	d9800317 	ldw	r6,12(sp)
    6320:	00c00044 	movi	r3,1
    6324:	1980f90e 	bge	r3,r6,670c <_dtoa_r+0xd88>
    6328:	d8800617 	ldw	r2,24(sp)
    632c:	d8c00a17 	ldw	r3,40(sp)
    6330:	157fffc4 	addi	r21,r2,-1
    6334:	1d41f316 	blt	r3,r21,6b04 <_dtoa_r+0x1180>
    6338:	1d6bc83a 	sub	r21,r3,r21
    633c:	d9c00617 	ldw	r7,24(sp)
    6340:	3802aa16 	blt	r7,zero,6dec <_dtoa_r+0x1468>
    6344:	dd000817 	ldw	r20,32(sp)
    6348:	d8800617 	ldw	r2,24(sp)
    634c:	d8c00817 	ldw	r3,32(sp)
    6350:	01400044 	movi	r5,1
    6354:	e009883a 	mov	r4,fp
    6358:	1887883a 	add	r3,r3,r2
    635c:	d8c00815 	stw	r3,32(sp)
    6360:	b0ad883a 	add	r22,r22,r2
    6364:	00086d80 	call	86d8 <__i2b>
    6368:	1023883a 	mov	r17,r2
    636c:	a0000826 	beq	r20,zero,6390 <_dtoa_r+0xa0c>
    6370:	0580070e 	bge	zero,r22,6390 <_dtoa_r+0xa0c>
    6374:	a005883a 	mov	r2,r20
    6378:	b500b916 	blt	r22,r20,6660 <_dtoa_r+0xcdc>
    637c:	d9000817 	ldw	r4,32(sp)
    6380:	a0a9c83a 	sub	r20,r20,r2
    6384:	b0adc83a 	sub	r22,r22,r2
    6388:	2089c83a 	sub	r4,r4,r2
    638c:	d9000815 	stw	r4,32(sp)
    6390:	d9800a17 	ldw	r6,40(sp)
    6394:	0181810e 	bge	zero,r6,699c <_dtoa_r+0x1018>
    6398:	d9c00b17 	ldw	r7,44(sp)
    639c:	3800b326 	beq	r7,zero,666c <_dtoa_r+0xce8>
    63a0:	a800b226 	beq	r21,zero,666c <_dtoa_r+0xce8>
    63a4:	880b883a 	mov	r5,r17
    63a8:	a80d883a 	mov	r6,r21
    63ac:	e009883a 	mov	r4,fp
    63b0:	00089a00 	call	89a0 <__pow5mult>
    63b4:	d9800917 	ldw	r6,36(sp)
    63b8:	100b883a 	mov	r5,r2
    63bc:	e009883a 	mov	r4,fp
    63c0:	1023883a 	mov	r17,r2
    63c4:	00087140 	call	8714 <__multiply>
    63c8:	1021883a 	mov	r16,r2
    63cc:	d8800a17 	ldw	r2,40(sp)
    63d0:	d9400917 	ldw	r5,36(sp)
    63d4:	e009883a 	mov	r4,fp
    63d8:	1545c83a 	sub	r2,r2,r21
    63dc:	d8800a15 	stw	r2,40(sp)
    63e0:	000834c0 	call	834c <_Bfree>
    63e4:	d8c00a17 	ldw	r3,40(sp)
    63e8:	18009f1e 	bne	r3,zero,6668 <_dtoa_r+0xce4>
    63ec:	05c00044 	movi	r23,1
    63f0:	e009883a 	mov	r4,fp
    63f4:	b80b883a 	mov	r5,r23
    63f8:	00086d80 	call	86d8 <__i2b>
    63fc:	d9000d17 	ldw	r4,52(sp)
    6400:	102b883a 	mov	r21,r2
    6404:	2000ce26 	beq	r4,zero,6740 <_dtoa_r+0xdbc>
    6408:	200d883a 	mov	r6,r4
    640c:	100b883a 	mov	r5,r2
    6410:	e009883a 	mov	r4,fp
    6414:	00089a00 	call	89a0 <__pow5mult>
    6418:	d9800317 	ldw	r6,12(sp)
    641c:	102b883a 	mov	r21,r2
    6420:	b981810e 	bge	r23,r6,6a28 <_dtoa_r+0x10a4>
    6424:	0027883a 	mov	r19,zero
    6428:	a8800417 	ldw	r2,16(r21)
    642c:	05c00804 	movi	r23,32
    6430:	10800104 	addi	r2,r2,4
    6434:	1085883a 	add	r2,r2,r2
    6438:	1085883a 	add	r2,r2,r2
    643c:	a885883a 	add	r2,r21,r2
    6440:	11000017 	ldw	r4,0(r2)
    6444:	00085c00 	call	85c0 <__hi0bits>
    6448:	b885c83a 	sub	r2,r23,r2
    644c:	1585883a 	add	r2,r2,r22
    6450:	108007cc 	andi	r2,r2,31
    6454:	1000b326 	beq	r2,zero,6724 <_dtoa_r+0xda0>
    6458:	00c00804 	movi	r3,32
    645c:	1887c83a 	sub	r3,r3,r2
    6460:	01000104 	movi	r4,4
    6464:	20c2cd0e 	bge	r4,r3,6f9c <_dtoa_r+0x1618>
    6468:	00c00704 	movi	r3,28
    646c:	1885c83a 	sub	r2,r3,r2
    6470:	d8c00817 	ldw	r3,32(sp)
    6474:	a0a9883a 	add	r20,r20,r2
    6478:	b0ad883a 	add	r22,r22,r2
    647c:	1887883a 	add	r3,r3,r2
    6480:	d8c00815 	stw	r3,32(sp)
    6484:	d9800817 	ldw	r6,32(sp)
    6488:	0180040e 	bge	zero,r6,649c <_dtoa_r+0xb18>
    648c:	800b883a 	mov	r5,r16
    6490:	e009883a 	mov	r4,fp
    6494:	0008ae00 	call	8ae0 <__lshift>
    6498:	1021883a 	mov	r16,r2
    649c:	0580050e 	bge	zero,r22,64b4 <_dtoa_r+0xb30>
    64a0:	a80b883a 	mov	r5,r21
    64a4:	b00d883a 	mov	r6,r22
    64a8:	e009883a 	mov	r4,fp
    64ac:	0008ae00 	call	8ae0 <__lshift>
    64b0:	102b883a 	mov	r21,r2
    64b4:	d9c00e17 	ldw	r7,56(sp)
    64b8:	3801211e 	bne	r7,zero,6940 <_dtoa_r+0xfbc>
    64bc:	d9800617 	ldw	r6,24(sp)
    64c0:	0181380e 	bge	zero,r6,69a4 <_dtoa_r+0x1020>
    64c4:	d8c00b17 	ldw	r3,44(sp)
    64c8:	1800ab1e 	bne	r3,zero,6778 <_dtoa_r+0xdf4>
    64cc:	dc800717 	ldw	r18,28(sp)
    64d0:	dcc00617 	ldw	r19,24(sp)
    64d4:	9029883a 	mov	r20,r18
    64d8:	00000206 	br	64e4 <_dtoa_r+0xb60>
    64dc:	00083740 	call	8374 <__multadd>
    64e0:	1021883a 	mov	r16,r2
    64e4:	a80b883a 	mov	r5,r21
    64e8:	8009883a 	mov	r4,r16
    64ec:	000575c0 	call	575c <quorem>
    64f0:	10800c04 	addi	r2,r2,48
    64f4:	90800005 	stb	r2,0(r18)
    64f8:	94800044 	addi	r18,r18,1
    64fc:	9507c83a 	sub	r3,r18,r20
    6500:	000f883a 	mov	r7,zero
    6504:	01800284 	movi	r6,10
    6508:	800b883a 	mov	r5,r16
    650c:	e009883a 	mov	r4,fp
    6510:	1cfff216 	blt	r3,r19,64dc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215344dc>
    6514:	1011883a 	mov	r8,r2
    6518:	d8800617 	ldw	r2,24(sp)
    651c:	0082370e 	bge	zero,r2,6dfc <_dtoa_r+0x1478>
    6520:	d9000717 	ldw	r4,28(sp)
    6524:	0025883a 	mov	r18,zero
    6528:	20af883a 	add	r23,r4,r2
    652c:	01800044 	movi	r6,1
    6530:	800b883a 	mov	r5,r16
    6534:	e009883a 	mov	r4,fp
    6538:	da001715 	stw	r8,92(sp)
    653c:	0008ae00 	call	8ae0 <__lshift>
    6540:	a80b883a 	mov	r5,r21
    6544:	1009883a 	mov	r4,r2
    6548:	d8800915 	stw	r2,36(sp)
    654c:	0008c280 	call	8c28 <__mcmp>
    6550:	da001717 	ldw	r8,92(sp)
    6554:	0081800e 	bge	zero,r2,6b58 <_dtoa_r+0x11d4>
    6558:	b93fffc3 	ldbu	r4,-1(r23)
    655c:	b8bfffc4 	addi	r2,r23,-1
    6560:	1007883a 	mov	r3,r2
    6564:	01800e44 	movi	r6,57
    6568:	d9c00717 	ldw	r7,28(sp)
    656c:	00000506 	br	6584 <_dtoa_r+0xc00>
    6570:	18ffffc4 	addi	r3,r3,-1
    6574:	11c12326 	beq	r2,r7,6a04 <_dtoa_r+0x1080>
    6578:	19000003 	ldbu	r4,0(r3)
    657c:	102f883a 	mov	r23,r2
    6580:	10bfffc4 	addi	r2,r2,-1
    6584:	21403fcc 	andi	r5,r4,255
    6588:	2940201c 	xori	r5,r5,128
    658c:	297fe004 	addi	r5,r5,-128
    6590:	29bff726 	beq	r5,r6,6570 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534570>
    6594:	21000044 	addi	r4,r4,1
    6598:	11000005 	stb	r4,0(r2)
    659c:	a80b883a 	mov	r5,r21
    65a0:	e009883a 	mov	r4,fp
    65a4:	000834c0 	call	834c <_Bfree>
    65a8:	883ea026 	beq	r17,zero,602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    65ac:	90000426 	beq	r18,zero,65c0 <_dtoa_r+0xc3c>
    65b0:	94400326 	beq	r18,r17,65c0 <_dtoa_r+0xc3c>
    65b4:	900b883a 	mov	r5,r18
    65b8:	e009883a 	mov	r4,fp
    65bc:	000834c0 	call	834c <_Bfree>
    65c0:	880b883a 	mov	r5,r17
    65c4:	e009883a 	mov	r4,fp
    65c8:	000834c0 	call	834c <_Bfree>
    65cc:	003e9706 	br	602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    65d0:	01800044 	movi	r6,1
    65d4:	d9800e15 	stw	r6,56(sp)
    65d8:	003d9606 	br	5c34 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533c34>
    65dc:	d8800817 	ldw	r2,32(sp)
    65e0:	d8c00517 	ldw	r3,20(sp)
    65e4:	d8000d15 	stw	zero,52(sp)
    65e8:	10c5c83a 	sub	r2,r2,r3
    65ec:	00c9c83a 	sub	r4,zero,r3
    65f0:	d8800815 	stw	r2,32(sp)
    65f4:	d9000a15 	stw	r4,40(sp)
    65f8:	003d9706 	br	5c58 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533c58>
    65fc:	05adc83a 	sub	r22,zero,r22
    6600:	dd800815 	stw	r22,32(sp)
    6604:	002d883a 	mov	r22,zero
    6608:	003d8e06 	br	5c44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533c44>
    660c:	d9000517 	ldw	r4,20(sp)
    6610:	000eea80 	call	eea8 <__floatsidf>
    6614:	100d883a 	mov	r6,r2
    6618:	180f883a 	mov	r7,r3
    661c:	a009883a 	mov	r4,r20
    6620:	880b883a 	mov	r5,r17
    6624:	000da680 	call	da68 <__eqdf2>
    6628:	103d7126 	beq	r2,zero,5bf0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533bf0>
    662c:	d9c00517 	ldw	r7,20(sp)
    6630:	39ffffc4 	addi	r7,r7,-1
    6634:	d9c00515 	stw	r7,20(sp)
    6638:	003d6d06 	br	5bf0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533bf0>
    663c:	dd400a17 	ldw	r21,40(sp)
    6640:	dd000817 	ldw	r20,32(sp)
    6644:	0023883a 	mov	r17,zero
    6648:	003f4806 	br	636c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153436c>
    664c:	10e3c83a 	sub	r17,r2,r3
    6650:	9448983a 	sll	r4,r18,r17
    6654:	003d3206 	br	5b20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533b20>
    6658:	d8000e15 	stw	zero,56(sp)
    665c:	003d7506 	br	5c34 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533c34>
    6660:	b005883a 	mov	r2,r22
    6664:	003f4506 	br	637c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153437c>
    6668:	dc000915 	stw	r16,36(sp)
    666c:	d9800a17 	ldw	r6,40(sp)
    6670:	d9400917 	ldw	r5,36(sp)
    6674:	e009883a 	mov	r4,fp
    6678:	00089a00 	call	89a0 <__pow5mult>
    667c:	1021883a 	mov	r16,r2
    6680:	003f5a06 	br	63ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215343ec>
    6684:	01c00044 	movi	r7,1
    6688:	d9c00b15 	stw	r7,44(sp)
    668c:	d8802217 	ldw	r2,136(sp)
    6690:	0081280e 	bge	zero,r2,6b34 <_dtoa_r+0x11b0>
    6694:	100d883a 	mov	r6,r2
    6698:	1021883a 	mov	r16,r2
    669c:	d8800c15 	stw	r2,48(sp)
    66a0:	d8800615 	stw	r2,24(sp)
    66a4:	003d8806 	br	5cc8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533cc8>
    66a8:	d8800617 	ldw	r2,24(sp)
    66ac:	00be9b16 	blt	zero,r2,611c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153411c>
    66b0:	10010f1e 	bne	r2,zero,6af0 <_dtoa_r+0x116c>
    66b4:	880b883a 	mov	r5,r17
    66b8:	000d883a 	mov	r6,zero
    66bc:	01d00534 	movhi	r7,16404
    66c0:	8009883a 	mov	r4,r16
    66c4:	000dcc00 	call	dcc0 <__muldf3>
    66c8:	900d883a 	mov	r6,r18
    66cc:	980f883a 	mov	r7,r19
    66d0:	1009883a 	mov	r4,r2
    66d4:	180b883a 	mov	r5,r3
    66d8:	000daf00 	call	daf0 <__gedf2>
    66dc:	002b883a 	mov	r21,zero
    66e0:	0023883a 	mov	r17,zero
    66e4:	1000bf16 	blt	r2,zero,69e4 <_dtoa_r+0x1060>
    66e8:	d9802217 	ldw	r6,136(sp)
    66ec:	ddc00717 	ldw	r23,28(sp)
    66f0:	018c303a 	nor	r6,zero,r6
    66f4:	d9800515 	stw	r6,20(sp)
    66f8:	a80b883a 	mov	r5,r21
    66fc:	e009883a 	mov	r4,fp
    6700:	000834c0 	call	834c <_Bfree>
    6704:	883e4926 	beq	r17,zero,602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    6708:	003fad06 	br	65c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215345c0>
    670c:	d9c01117 	ldw	r7,68(sp)
    6710:	3801bc26 	beq	r7,zero,6e04 <_dtoa_r+0x1480>
    6714:	10810cc4 	addi	r2,r2,1075
    6718:	dd400a17 	ldw	r21,40(sp)
    671c:	dd000817 	ldw	r20,32(sp)
    6720:	003f0a06 	br	634c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153434c>
    6724:	00800704 	movi	r2,28
    6728:	d9000817 	ldw	r4,32(sp)
    672c:	a0a9883a 	add	r20,r20,r2
    6730:	b0ad883a 	add	r22,r22,r2
    6734:	2089883a 	add	r4,r4,r2
    6738:	d9000815 	stw	r4,32(sp)
    673c:	003f5106 	br	6484 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534484>
    6740:	d8c00317 	ldw	r3,12(sp)
    6744:	b8c1fc0e 	bge	r23,r3,6f38 <_dtoa_r+0x15b4>
    6748:	0027883a 	mov	r19,zero
    674c:	b805883a 	mov	r2,r23
    6750:	003f3e06 	br	644c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153444c>
    6754:	880b883a 	mov	r5,r17
    6758:	e009883a 	mov	r4,fp
    675c:	000f883a 	mov	r7,zero
    6760:	01800284 	movi	r6,10
    6764:	00083740 	call	8374 <__multadd>
    6768:	d9000c17 	ldw	r4,48(sp)
    676c:	1023883a 	mov	r17,r2
    6770:	0102040e 	bge	zero,r4,6f84 <_dtoa_r+0x1600>
    6774:	d9000615 	stw	r4,24(sp)
    6778:	0500050e 	bge	zero,r20,6790 <_dtoa_r+0xe0c>
    677c:	880b883a 	mov	r5,r17
    6780:	a00d883a 	mov	r6,r20
    6784:	e009883a 	mov	r4,fp
    6788:	0008ae00 	call	8ae0 <__lshift>
    678c:	1023883a 	mov	r17,r2
    6790:	9801241e 	bne	r19,zero,6c24 <_dtoa_r+0x12a0>
    6794:	8829883a 	mov	r20,r17
    6798:	d9000617 	ldw	r4,24(sp)
    679c:	dcc00717 	ldw	r19,28(sp)
    67a0:	9480004c 	andi	r18,r18,1
    67a4:	20bfffc4 	addi	r2,r4,-1
    67a8:	9885883a 	add	r2,r19,r2
    67ac:	d8800415 	stw	r2,16(sp)
    67b0:	dc800615 	stw	r18,24(sp)
    67b4:	a80b883a 	mov	r5,r21
    67b8:	8009883a 	mov	r4,r16
    67bc:	000575c0 	call	575c <quorem>
    67c0:	880b883a 	mov	r5,r17
    67c4:	8009883a 	mov	r4,r16
    67c8:	102f883a 	mov	r23,r2
    67cc:	0008c280 	call	8c28 <__mcmp>
    67d0:	a80b883a 	mov	r5,r21
    67d4:	a00d883a 	mov	r6,r20
    67d8:	e009883a 	mov	r4,fp
    67dc:	102d883a 	mov	r22,r2
    67e0:	0008c880 	call	8c88 <__mdiff>
    67e4:	1007883a 	mov	r3,r2
    67e8:	10800317 	ldw	r2,12(r2)
    67ec:	bc800c04 	addi	r18,r23,48
    67f0:	180b883a 	mov	r5,r3
    67f4:	10004e1e 	bne	r2,zero,6930 <_dtoa_r+0xfac>
    67f8:	8009883a 	mov	r4,r16
    67fc:	d8c01615 	stw	r3,88(sp)
    6800:	0008c280 	call	8c28 <__mcmp>
    6804:	d8c01617 	ldw	r3,88(sp)
    6808:	e009883a 	mov	r4,fp
    680c:	d8801615 	stw	r2,88(sp)
    6810:	180b883a 	mov	r5,r3
    6814:	000834c0 	call	834c <_Bfree>
    6818:	d8801617 	ldw	r2,88(sp)
    681c:	1000041e 	bne	r2,zero,6830 <_dtoa_r+0xeac>
    6820:	d9800317 	ldw	r6,12(sp)
    6824:	3000021e 	bne	r6,zero,6830 <_dtoa_r+0xeac>
    6828:	d8c00617 	ldw	r3,24(sp)
    682c:	18003726 	beq	r3,zero,690c <_dtoa_r+0xf88>
    6830:	b0002016 	blt	r22,zero,68b4 <_dtoa_r+0xf30>
    6834:	b000041e 	bne	r22,zero,6848 <_dtoa_r+0xec4>
    6838:	d9000317 	ldw	r4,12(sp)
    683c:	2000021e 	bne	r4,zero,6848 <_dtoa_r+0xec4>
    6840:	d8c00617 	ldw	r3,24(sp)
    6844:	18001b26 	beq	r3,zero,68b4 <_dtoa_r+0xf30>
    6848:	00810716 	blt	zero,r2,6c68 <_dtoa_r+0x12e4>
    684c:	d8c00417 	ldw	r3,16(sp)
    6850:	9d800044 	addi	r22,r19,1
    6854:	9c800005 	stb	r18,0(r19)
    6858:	b02f883a 	mov	r23,r22
    685c:	98c10626 	beq	r19,r3,6c78 <_dtoa_r+0x12f4>
    6860:	800b883a 	mov	r5,r16
    6864:	000f883a 	mov	r7,zero
    6868:	01800284 	movi	r6,10
    686c:	e009883a 	mov	r4,fp
    6870:	00083740 	call	8374 <__multadd>
    6874:	1021883a 	mov	r16,r2
    6878:	000f883a 	mov	r7,zero
    687c:	01800284 	movi	r6,10
    6880:	880b883a 	mov	r5,r17
    6884:	e009883a 	mov	r4,fp
    6888:	8d002526 	beq	r17,r20,6920 <_dtoa_r+0xf9c>
    688c:	00083740 	call	8374 <__multadd>
    6890:	a00b883a 	mov	r5,r20
    6894:	000f883a 	mov	r7,zero
    6898:	01800284 	movi	r6,10
    689c:	e009883a 	mov	r4,fp
    68a0:	1023883a 	mov	r17,r2
    68a4:	00083740 	call	8374 <__multadd>
    68a8:	1029883a 	mov	r20,r2
    68ac:	b027883a 	mov	r19,r22
    68b0:	003fc006 	br	67b4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215347b4>
    68b4:	9011883a 	mov	r8,r18
    68b8:	00800e0e 	bge	zero,r2,68f4 <_dtoa_r+0xf70>
    68bc:	800b883a 	mov	r5,r16
    68c0:	01800044 	movi	r6,1
    68c4:	e009883a 	mov	r4,fp
    68c8:	da001715 	stw	r8,92(sp)
    68cc:	0008ae00 	call	8ae0 <__lshift>
    68d0:	a80b883a 	mov	r5,r21
    68d4:	1009883a 	mov	r4,r2
    68d8:	1021883a 	mov	r16,r2
    68dc:	0008c280 	call	8c28 <__mcmp>
    68e0:	da001717 	ldw	r8,92(sp)
    68e4:	0081960e 	bge	zero,r2,6f40 <_dtoa_r+0x15bc>
    68e8:	00800e44 	movi	r2,57
    68ec:	40817026 	beq	r8,r2,6eb0 <_dtoa_r+0x152c>
    68f0:	ba000c44 	addi	r8,r23,49
    68f4:	8825883a 	mov	r18,r17
    68f8:	9dc00044 	addi	r23,r19,1
    68fc:	9a000005 	stb	r8,0(r19)
    6900:	a023883a 	mov	r17,r20
    6904:	dc000915 	stw	r16,36(sp)
    6908:	003f2406 	br	659c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153459c>
    690c:	00800e44 	movi	r2,57
    6910:	9011883a 	mov	r8,r18
    6914:	90816626 	beq	r18,r2,6eb0 <_dtoa_r+0x152c>
    6918:	05bff516 	blt	zero,r22,68f0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215348f0>
    691c:	003ff506 	br	68f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215348f4>
    6920:	00083740 	call	8374 <__multadd>
    6924:	1023883a 	mov	r17,r2
    6928:	1029883a 	mov	r20,r2
    692c:	003fdf06 	br	68ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215348ac>
    6930:	e009883a 	mov	r4,fp
    6934:	000834c0 	call	834c <_Bfree>
    6938:	00800044 	movi	r2,1
    693c:	003fbc06 	br	6830 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534830>
    6940:	a80b883a 	mov	r5,r21
    6944:	8009883a 	mov	r4,r16
    6948:	0008c280 	call	8c28 <__mcmp>
    694c:	103edb0e 	bge	r2,zero,64bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215344bc>
    6950:	800b883a 	mov	r5,r16
    6954:	000f883a 	mov	r7,zero
    6958:	01800284 	movi	r6,10
    695c:	e009883a 	mov	r4,fp
    6960:	00083740 	call	8374 <__multadd>
    6964:	1021883a 	mov	r16,r2
    6968:	d8800517 	ldw	r2,20(sp)
    696c:	d8c00b17 	ldw	r3,44(sp)
    6970:	10bfffc4 	addi	r2,r2,-1
    6974:	d8800515 	stw	r2,20(sp)
    6978:	183f761e 	bne	r3,zero,6754 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534754>
    697c:	d9000c17 	ldw	r4,48(sp)
    6980:	0101730e 	bge	zero,r4,6f50 <_dtoa_r+0x15cc>
    6984:	d9000615 	stw	r4,24(sp)
    6988:	003ed006 	br	64cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215344cc>
    698c:	00800084 	movi	r2,2
    6990:	3081861e 	bne	r6,r2,6fac <_dtoa_r+0x1628>
    6994:	d8000b15 	stw	zero,44(sp)
    6998:	003f3c06 	br	668c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153468c>
    699c:	dc000917 	ldw	r16,36(sp)
    69a0:	003e9206 	br	63ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215343ec>
    69a4:	d9c00317 	ldw	r7,12(sp)
    69a8:	00800084 	movi	r2,2
    69ac:	11fec50e 	bge	r2,r7,64c4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215344c4>
    69b0:	d9000617 	ldw	r4,24(sp)
    69b4:	20013c1e 	bne	r4,zero,6ea8 <_dtoa_r+0x1524>
    69b8:	a80b883a 	mov	r5,r21
    69bc:	000f883a 	mov	r7,zero
    69c0:	01800144 	movi	r6,5
    69c4:	e009883a 	mov	r4,fp
    69c8:	00083740 	call	8374 <__multadd>
    69cc:	100b883a 	mov	r5,r2
    69d0:	8009883a 	mov	r4,r16
    69d4:	102b883a 	mov	r21,r2
    69d8:	0008c280 	call	8c28 <__mcmp>
    69dc:	dc000915 	stw	r16,36(sp)
    69e0:	00bf410e 	bge	zero,r2,66e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215346e8>
    69e4:	d9c00717 	ldw	r7,28(sp)
    69e8:	00800c44 	movi	r2,49
    69ec:	38800005 	stb	r2,0(r7)
    69f0:	d8800517 	ldw	r2,20(sp)
    69f4:	3dc00044 	addi	r23,r7,1
    69f8:	10800044 	addi	r2,r2,1
    69fc:	d8800515 	stw	r2,20(sp)
    6a00:	003f3d06 	br	66f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215346f8>
    6a04:	d9800517 	ldw	r6,20(sp)
    6a08:	d9c00717 	ldw	r7,28(sp)
    6a0c:	00800c44 	movi	r2,49
    6a10:	31800044 	addi	r6,r6,1
    6a14:	d9800515 	stw	r6,20(sp)
    6a18:	38800005 	stb	r2,0(r7)
    6a1c:	003edf06 	br	659c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153459c>
    6a20:	d8000b15 	stw	zero,44(sp)
    6a24:	003c9f06 	br	5ca4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533ca4>
    6a28:	903e7e1e 	bne	r18,zero,6424 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534424>
    6a2c:	00800434 	movhi	r2,16
    6a30:	10bfffc4 	addi	r2,r2,-1
    6a34:	9884703a 	and	r2,r19,r2
    6a38:	1000ea1e 	bne	r2,zero,6de4 <_dtoa_r+0x1460>
    6a3c:	9cdffc2c 	andhi	r19,r19,32752
    6a40:	9800e826 	beq	r19,zero,6de4 <_dtoa_r+0x1460>
    6a44:	d9c00817 	ldw	r7,32(sp)
    6a48:	b5800044 	addi	r22,r22,1
    6a4c:	04c00044 	movi	r19,1
    6a50:	39c00044 	addi	r7,r7,1
    6a54:	d9c00815 	stw	r7,32(sp)
    6a58:	d8800d17 	ldw	r2,52(sp)
    6a5c:	103e721e 	bne	r2,zero,6428 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534428>
    6a60:	00800044 	movi	r2,1
    6a64:	003e7906 	br	644c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153444c>
    6a68:	8009883a 	mov	r4,r16
    6a6c:	000eea80 	call	eea8 <__floatsidf>
    6a70:	d9800f17 	ldw	r6,60(sp)
    6a74:	d9c01017 	ldw	r7,64(sp)
    6a78:	1009883a 	mov	r4,r2
    6a7c:	180b883a 	mov	r5,r3
    6a80:	000dcc00 	call	dcc0 <__muldf3>
    6a84:	000d883a 	mov	r6,zero
    6a88:	01d00734 	movhi	r7,16412
    6a8c:	1009883a 	mov	r4,r2
    6a90:	180b883a 	mov	r5,r3
    6a94:	000c7ec0 	call	c7ec <__adddf3>
    6a98:	047f3034 	movhi	r17,64704
    6a9c:	1021883a 	mov	r16,r2
    6aa0:	1c63883a 	add	r17,r3,r17
    6aa4:	d9000f17 	ldw	r4,60(sp)
    6aa8:	d9401017 	ldw	r5,64(sp)
    6aac:	000d883a 	mov	r6,zero
    6ab0:	01d00534 	movhi	r7,16404
    6ab4:	000e52c0 	call	e52c <__subdf3>
    6ab8:	800d883a 	mov	r6,r16
    6abc:	880f883a 	mov	r7,r17
    6ac0:	1009883a 	mov	r4,r2
    6ac4:	180b883a 	mov	r5,r3
    6ac8:	102b883a 	mov	r21,r2
    6acc:	1829883a 	mov	r20,r3
    6ad0:	000daf00 	call	daf0 <__gedf2>
    6ad4:	00806c16 	blt	zero,r2,6c88 <_dtoa_r+0x1304>
    6ad8:	89e0003c 	xorhi	r7,r17,32768
    6adc:	800d883a 	mov	r6,r16
    6ae0:	a809883a 	mov	r4,r21
    6ae4:	a00b883a 	mov	r5,r20
    6ae8:	000dbcc0 	call	dbcc <__ledf2>
    6aec:	103d7e0e 	bge	r2,zero,60e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215340e8>
    6af0:	002b883a 	mov	r21,zero
    6af4:	0023883a 	mov	r17,zero
    6af8:	003efb06 	br	66e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215346e8>
    6afc:	d8800717 	ldw	r2,28(sp)
    6b00:	003bd006 	br	5a44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533a44>
    6b04:	d9000a17 	ldw	r4,40(sp)
    6b08:	d9800d17 	ldw	r6,52(sp)
    6b0c:	dd400a15 	stw	r21,40(sp)
    6b10:	a905c83a 	sub	r2,r21,r4
    6b14:	308d883a 	add	r6,r6,r2
    6b18:	d9800d15 	stw	r6,52(sp)
    6b1c:	002b883a 	mov	r21,zero
    6b20:	003e0606 	br	633c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153433c>
    6b24:	9023883a 	mov	r17,r18
    6b28:	9829883a 	mov	r20,r19
    6b2c:	04000084 	movi	r16,2
    6b30:	003c9206 	br	5d7c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533d7c>
    6b34:	04000044 	movi	r16,1
    6b38:	dc000c15 	stw	r16,48(sp)
    6b3c:	dc000615 	stw	r16,24(sp)
    6b40:	dc002215 	stw	r16,136(sp)
    6b44:	e0001115 	stw	zero,68(fp)
    6b48:	000b883a 	mov	r5,zero
    6b4c:	003c6906 	br	5cf4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533cf4>
    6b50:	3021883a 	mov	r16,r6
    6b54:	003ffb06 	br	6b44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534b44>
    6b58:	1000021e 	bne	r2,zero,6b64 <_dtoa_r+0x11e0>
    6b5c:	4200004c 	andi	r8,r8,1
    6b60:	403e7d1e 	bne	r8,zero,6558 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534558>
    6b64:	01000c04 	movi	r4,48
    6b68:	00000106 	br	6b70 <_dtoa_r+0x11ec>
    6b6c:	102f883a 	mov	r23,r2
    6b70:	b8bfffc4 	addi	r2,r23,-1
    6b74:	10c00007 	ldb	r3,0(r2)
    6b78:	193ffc26 	beq	r3,r4,6b6c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534b6c>
    6b7c:	003e8706 	br	659c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153459c>
    6b80:	d8800517 	ldw	r2,20(sp)
    6b84:	00a3c83a 	sub	r17,zero,r2
    6b88:	8800a426 	beq	r17,zero,6e1c <_dtoa_r+0x1498>
    6b8c:	888003cc 	andi	r2,r17,15
    6b90:	100490fa 	slli	r2,r2,3
    6b94:	00c00074 	movhi	r3,1
    6b98:	18d3c004 	addi	r3,r3,20224
    6b9c:	1885883a 	add	r2,r3,r2
    6ba0:	11800017 	ldw	r6,0(r2)
    6ba4:	11c00117 	ldw	r7,4(r2)
    6ba8:	9009883a 	mov	r4,r18
    6bac:	980b883a 	mov	r5,r19
    6bb0:	8823d13a 	srai	r17,r17,4
    6bb4:	000dcc00 	call	dcc0 <__muldf3>
    6bb8:	d8800f15 	stw	r2,60(sp)
    6bbc:	d8c01015 	stw	r3,64(sp)
    6bc0:	8800e826 	beq	r17,zero,6f64 <_dtoa_r+0x15e0>
    6bc4:	05000074 	movhi	r20,1
    6bc8:	a513b604 	addi	r20,r20,20184
    6bcc:	04000084 	movi	r16,2
    6bd0:	8980004c 	andi	r6,r17,1
    6bd4:	1009883a 	mov	r4,r2
    6bd8:	8823d07a 	srai	r17,r17,1
    6bdc:	180b883a 	mov	r5,r3
    6be0:	30000426 	beq	r6,zero,6bf4 <_dtoa_r+0x1270>
    6be4:	a1800017 	ldw	r6,0(r20)
    6be8:	a1c00117 	ldw	r7,4(r20)
    6bec:	84000044 	addi	r16,r16,1
    6bf0:	000dcc00 	call	dcc0 <__muldf3>
    6bf4:	a5000204 	addi	r20,r20,8
    6bf8:	883ff51e 	bne	r17,zero,6bd0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534bd0>
    6bfc:	d8800f15 	stw	r2,60(sp)
    6c00:	d8c01015 	stw	r3,64(sp)
    6c04:	003c7606 	br	5de0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533de0>
    6c08:	00c00c04 	movi	r3,48
    6c0c:	10c00005 	stb	r3,0(r2)
    6c10:	d8c00517 	ldw	r3,20(sp)
    6c14:	bd3fffc3 	ldbu	r20,-1(r23)
    6c18:	18c00044 	addi	r3,r3,1
    6c1c:	d8c00515 	stw	r3,20(sp)
    6c20:	003db906 	br	6308 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534308>
    6c24:	89400117 	ldw	r5,4(r17)
    6c28:	e009883a 	mov	r4,fp
    6c2c:	00082a40 	call	82a4 <_Balloc>
    6c30:	89800417 	ldw	r6,16(r17)
    6c34:	89400304 	addi	r5,r17,12
    6c38:	11000304 	addi	r4,r2,12
    6c3c:	31800084 	addi	r6,r6,2
    6c40:	318d883a 	add	r6,r6,r6
    6c44:	318d883a 	add	r6,r6,r6
    6c48:	1027883a 	mov	r19,r2
    6c4c:	00080000 	call	8000 <memcpy>
    6c50:	01800044 	movi	r6,1
    6c54:	980b883a 	mov	r5,r19
    6c58:	e009883a 	mov	r4,fp
    6c5c:	0008ae00 	call	8ae0 <__lshift>
    6c60:	1029883a 	mov	r20,r2
    6c64:	003ecc06 	br	6798 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534798>
    6c68:	00800e44 	movi	r2,57
    6c6c:	90809026 	beq	r18,r2,6eb0 <_dtoa_r+0x152c>
    6c70:	92000044 	addi	r8,r18,1
    6c74:	003f1f06 	br	68f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215348f4>
    6c78:	9011883a 	mov	r8,r18
    6c7c:	8825883a 	mov	r18,r17
    6c80:	a023883a 	mov	r17,r20
    6c84:	003e2906 	br	652c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153452c>
    6c88:	002b883a 	mov	r21,zero
    6c8c:	0023883a 	mov	r17,zero
    6c90:	003f5406 	br	69e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215349e4>
    6c94:	61bfffc4 	addi	r6,r12,-1
    6c98:	300490fa 	slli	r2,r6,3
    6c9c:	00c00074 	movhi	r3,1
    6ca0:	18d3c004 	addi	r3,r3,20224
    6ca4:	1885883a 	add	r2,r3,r2
    6ca8:	11000017 	ldw	r4,0(r2)
    6cac:	11400117 	ldw	r5,4(r2)
    6cb0:	d8800717 	ldw	r2,28(sp)
    6cb4:	880f883a 	mov	r7,r17
    6cb8:	d9801215 	stw	r6,72(sp)
    6cbc:	800d883a 	mov	r6,r16
    6cc0:	db001615 	stw	r12,88(sp)
    6cc4:	15c00044 	addi	r23,r2,1
    6cc8:	000dcc00 	call	dcc0 <__muldf3>
    6ccc:	d9401017 	ldw	r5,64(sp)
    6cd0:	d9000f17 	ldw	r4,60(sp)
    6cd4:	d8c01515 	stw	r3,84(sp)
    6cd8:	d8801415 	stw	r2,80(sp)
    6cdc:	000ee280 	call	ee28 <__fixdfsi>
    6ce0:	1009883a 	mov	r4,r2
    6ce4:	1021883a 	mov	r16,r2
    6ce8:	000eea80 	call	eea8 <__floatsidf>
    6cec:	d9000f17 	ldw	r4,60(sp)
    6cf0:	d9401017 	ldw	r5,64(sp)
    6cf4:	100d883a 	mov	r6,r2
    6cf8:	180f883a 	mov	r7,r3
    6cfc:	000e52c0 	call	e52c <__subdf3>
    6d00:	1829883a 	mov	r20,r3
    6d04:	d8c00717 	ldw	r3,28(sp)
    6d08:	84000c04 	addi	r16,r16,48
    6d0c:	1023883a 	mov	r17,r2
    6d10:	1c000005 	stb	r16,0(r3)
    6d14:	db001617 	ldw	r12,88(sp)
    6d18:	00800044 	movi	r2,1
    6d1c:	60802226 	beq	r12,r2,6da8 <_dtoa_r+0x1424>
    6d20:	d9c00717 	ldw	r7,28(sp)
    6d24:	8805883a 	mov	r2,r17
    6d28:	b82b883a 	mov	r21,r23
    6d2c:	3b19883a 	add	r12,r7,r12
    6d30:	6023883a 	mov	r17,r12
    6d34:	a007883a 	mov	r3,r20
    6d38:	dc800f15 	stw	r18,60(sp)
    6d3c:	000d883a 	mov	r6,zero
    6d40:	01d00934 	movhi	r7,16420
    6d44:	1009883a 	mov	r4,r2
    6d48:	180b883a 	mov	r5,r3
    6d4c:	000dcc00 	call	dcc0 <__muldf3>
    6d50:	180b883a 	mov	r5,r3
    6d54:	1009883a 	mov	r4,r2
    6d58:	1829883a 	mov	r20,r3
    6d5c:	1025883a 	mov	r18,r2
    6d60:	000ee280 	call	ee28 <__fixdfsi>
    6d64:	1009883a 	mov	r4,r2
    6d68:	1021883a 	mov	r16,r2
    6d6c:	000eea80 	call	eea8 <__floatsidf>
    6d70:	100d883a 	mov	r6,r2
    6d74:	180f883a 	mov	r7,r3
    6d78:	9009883a 	mov	r4,r18
    6d7c:	a00b883a 	mov	r5,r20
    6d80:	84000c04 	addi	r16,r16,48
    6d84:	000e52c0 	call	e52c <__subdf3>
    6d88:	ad400044 	addi	r21,r21,1
    6d8c:	ac3fffc5 	stb	r16,-1(r21)
    6d90:	ac7fea1e 	bne	r21,r17,6d3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534d3c>
    6d94:	1023883a 	mov	r17,r2
    6d98:	d8801217 	ldw	r2,72(sp)
    6d9c:	dc800f17 	ldw	r18,60(sp)
    6da0:	1829883a 	mov	r20,r3
    6da4:	b8af883a 	add	r23,r23,r2
    6da8:	d9001417 	ldw	r4,80(sp)
    6dac:	d9401517 	ldw	r5,84(sp)
    6db0:	000d883a 	mov	r6,zero
    6db4:	01cff834 	movhi	r7,16352
    6db8:	000c7ec0 	call	c7ec <__adddf3>
    6dbc:	880d883a 	mov	r6,r17
    6dc0:	a00f883a 	mov	r7,r20
    6dc4:	1009883a 	mov	r4,r2
    6dc8:	180b883a 	mov	r5,r3
    6dcc:	000dbcc0 	call	dbcc <__ledf2>
    6dd0:	10003e0e 	bge	r2,zero,6ecc <_dtoa_r+0x1548>
    6dd4:	d9001317 	ldw	r4,76(sp)
    6dd8:	bd3fffc3 	ldbu	r20,-1(r23)
    6ddc:	d9000515 	stw	r4,20(sp)
    6de0:	003d3b06 	br	62d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215342d0>
    6de4:	0027883a 	mov	r19,zero
    6de8:	003f1b06 	br	6a58 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534a58>
    6dec:	d8800817 	ldw	r2,32(sp)
    6df0:	11e9c83a 	sub	r20,r2,r7
    6df4:	0005883a 	mov	r2,zero
    6df8:	003d5406 	br	634c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153434c>
    6dfc:	00800044 	movi	r2,1
    6e00:	003dc706 	br	6520 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534520>
    6e04:	d8c00217 	ldw	r3,8(sp)
    6e08:	00800d84 	movi	r2,54
    6e0c:	dd400a17 	ldw	r21,40(sp)
    6e10:	10c5c83a 	sub	r2,r2,r3
    6e14:	dd000817 	ldw	r20,32(sp)
    6e18:	003d4c06 	br	634c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153434c>
    6e1c:	dc800f15 	stw	r18,60(sp)
    6e20:	dcc01015 	stw	r19,64(sp)
    6e24:	04000084 	movi	r16,2
    6e28:	003bed06 	br	5de0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533de0>
    6e2c:	d9000617 	ldw	r4,24(sp)
    6e30:	203f0d26 	beq	r4,zero,6a68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534a68>
    6e34:	d9800c17 	ldw	r6,48(sp)
    6e38:	01bcab0e 	bge	zero,r6,60e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215340e8>
    6e3c:	d9401017 	ldw	r5,64(sp)
    6e40:	d9000f17 	ldw	r4,60(sp)
    6e44:	000d883a 	mov	r6,zero
    6e48:	01d00934 	movhi	r7,16420
    6e4c:	000dcc00 	call	dcc0 <__muldf3>
    6e50:	81000044 	addi	r4,r16,1
    6e54:	d8800f15 	stw	r2,60(sp)
    6e58:	d8c01015 	stw	r3,64(sp)
    6e5c:	000eea80 	call	eea8 <__floatsidf>
    6e60:	d9800f17 	ldw	r6,60(sp)
    6e64:	d9c01017 	ldw	r7,64(sp)
    6e68:	1009883a 	mov	r4,r2
    6e6c:	180b883a 	mov	r5,r3
    6e70:	000dcc00 	call	dcc0 <__muldf3>
    6e74:	01d00734 	movhi	r7,16412
    6e78:	000d883a 	mov	r6,zero
    6e7c:	1009883a 	mov	r4,r2
    6e80:	180b883a 	mov	r5,r3
    6e84:	000c7ec0 	call	c7ec <__adddf3>
    6e88:	d9c00517 	ldw	r7,20(sp)
    6e8c:	047f3034 	movhi	r17,64704
    6e90:	1021883a 	mov	r16,r2
    6e94:	39ffffc4 	addi	r7,r7,-1
    6e98:	d9c01315 	stw	r7,76(sp)
    6e9c:	1c63883a 	add	r17,r3,r17
    6ea0:	db000c17 	ldw	r12,48(sp)
    6ea4:	003bea06 	br	5e50 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533e50>
    6ea8:	dc000915 	stw	r16,36(sp)
    6eac:	003e0e06 	br	66e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215346e8>
    6eb0:	01000e44 	movi	r4,57
    6eb4:	8825883a 	mov	r18,r17
    6eb8:	9dc00044 	addi	r23,r19,1
    6ebc:	99000005 	stb	r4,0(r19)
    6ec0:	a023883a 	mov	r17,r20
    6ec4:	dc000915 	stw	r16,36(sp)
    6ec8:	003da406 	br	655c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153455c>
    6ecc:	d9801417 	ldw	r6,80(sp)
    6ed0:	d9c01517 	ldw	r7,84(sp)
    6ed4:	0009883a 	mov	r4,zero
    6ed8:	014ff834 	movhi	r5,16352
    6edc:	000e52c0 	call	e52c <__subdf3>
    6ee0:	880d883a 	mov	r6,r17
    6ee4:	a00f883a 	mov	r7,r20
    6ee8:	1009883a 	mov	r4,r2
    6eec:	180b883a 	mov	r5,r3
    6ef0:	000daf00 	call	daf0 <__gedf2>
    6ef4:	00bc7c0e 	bge	zero,r2,60e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215340e8>
    6ef8:	01000c04 	movi	r4,48
    6efc:	00000106 	br	6f04 <_dtoa_r+0x1580>
    6f00:	102f883a 	mov	r23,r2
    6f04:	b8bfffc4 	addi	r2,r23,-1
    6f08:	10c00007 	ldb	r3,0(r2)
    6f0c:	193ffc26 	beq	r3,r4,6f00 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534f00>
    6f10:	d9801317 	ldw	r6,76(sp)
    6f14:	d9800515 	stw	r6,20(sp)
    6f18:	003c4406 	br	602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    6f1c:	d9801317 	ldw	r6,76(sp)
    6f20:	d9800515 	stw	r6,20(sp)
    6f24:	003cea06 	br	62d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215342d0>
    6f28:	dd800f17 	ldw	r22,60(sp)
    6f2c:	dcc01017 	ldw	r19,64(sp)
    6f30:	dc801217 	ldw	r18,72(sp)
    6f34:	003c6c06 	br	60e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215340e8>
    6f38:	903e031e 	bne	r18,zero,6748 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534748>
    6f3c:	003ebb06 	br	6a2c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534a2c>
    6f40:	103e6c1e 	bne	r2,zero,68f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215348f4>
    6f44:	4080004c 	andi	r2,r8,1
    6f48:	103e6a26 	beq	r2,zero,68f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215348f4>
    6f4c:	003e6606 	br	68e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215348e8>
    6f50:	d8c00317 	ldw	r3,12(sp)
    6f54:	00800084 	movi	r2,2
    6f58:	10c02916 	blt	r2,r3,7000 <_dtoa_r+0x167c>
    6f5c:	d9000c17 	ldw	r4,48(sp)
    6f60:	003e8806 	br	6984 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534984>
    6f64:	04000084 	movi	r16,2
    6f68:	003b9d06 	br	5de0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533de0>
    6f6c:	d9001317 	ldw	r4,76(sp)
    6f70:	d9000515 	stw	r4,20(sp)
    6f74:	003cd606 	br	62d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215342d0>
    6f78:	d8801317 	ldw	r2,76(sp)
    6f7c:	d8800515 	stw	r2,20(sp)
    6f80:	003c2a06 	br	602c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153402c>
    6f84:	d9800317 	ldw	r6,12(sp)
    6f88:	00800084 	movi	r2,2
    6f8c:	11801516 	blt	r2,r6,6fe4 <_dtoa_r+0x1660>
    6f90:	d9c00c17 	ldw	r7,48(sp)
    6f94:	d9c00615 	stw	r7,24(sp)
    6f98:	003df706 	br	6778 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534778>
    6f9c:	193d3926 	beq	r3,r4,6484 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534484>
    6fa0:	00c00f04 	movi	r3,60
    6fa4:	1885c83a 	sub	r2,r3,r2
    6fa8:	003ddf06 	br	6728 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21534728>
    6fac:	e009883a 	mov	r4,fp
    6fb0:	e0001115 	stw	zero,68(fp)
    6fb4:	000b883a 	mov	r5,zero
    6fb8:	00082a40 	call	82a4 <_Balloc>
    6fbc:	d8800715 	stw	r2,28(sp)
    6fc0:	d8c00717 	ldw	r3,28(sp)
    6fc4:	00bfffc4 	movi	r2,-1
    6fc8:	01000044 	movi	r4,1
    6fcc:	d8800c15 	stw	r2,48(sp)
    6fd0:	e0c01015 	stw	r3,64(fp)
    6fd4:	d9000b15 	stw	r4,44(sp)
    6fd8:	d8800615 	stw	r2,24(sp)
    6fdc:	d8002215 	stw	zero,136(sp)
    6fe0:	003c4106 	br	60e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215340e8>
    6fe4:	d8c00c17 	ldw	r3,48(sp)
    6fe8:	d8c00615 	stw	r3,24(sp)
    6fec:	003e7006 	br	69b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215349b0>
    6ff0:	04400044 	movi	r17,1
    6ff4:	003b2006 	br	5c78 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533c78>
    6ff8:	000b883a 	mov	r5,zero
    6ffc:	003b3d06 	br	5cf4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21533cf4>
    7000:	d8800c17 	ldw	r2,48(sp)
    7004:	d8800615 	stw	r2,24(sp)
    7008:	003e6906 	br	69b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215349b0>

0000700c <__fp_unlock>:
    700c:	0005883a 	mov	r2,zero
    7010:	f800283a 	ret

00007014 <_cleanup_r>:
    7014:	01400074 	movhi	r5,1
    7018:	296ce804 	addi	r5,r5,-19552
    701c:	0007d7c1 	jmpi	7d7c <_fwalk_reent>

00007020 <__sinit.part.1>:
    7020:	defff704 	addi	sp,sp,-36
    7024:	00c00034 	movhi	r3,0
    7028:	dfc00815 	stw	ra,32(sp)
    702c:	ddc00715 	stw	r23,28(sp)
    7030:	dd800615 	stw	r22,24(sp)
    7034:	dd400515 	stw	r21,20(sp)
    7038:	dd000415 	stw	r20,16(sp)
    703c:	dcc00315 	stw	r19,12(sp)
    7040:	dc800215 	stw	r18,8(sp)
    7044:	dc400115 	stw	r17,4(sp)
    7048:	dc000015 	stw	r16,0(sp)
    704c:	18dc0504 	addi	r3,r3,28692
    7050:	24000117 	ldw	r16,4(r4)
    7054:	20c00f15 	stw	r3,60(r4)
    7058:	2080bb04 	addi	r2,r4,748
    705c:	00c000c4 	movi	r3,3
    7060:	20c0b915 	stw	r3,740(r4)
    7064:	2080ba15 	stw	r2,744(r4)
    7068:	2000b815 	stw	zero,736(r4)
    706c:	05c00204 	movi	r23,8
    7070:	00800104 	movi	r2,4
    7074:	2025883a 	mov	r18,r4
    7078:	b80d883a 	mov	r6,r23
    707c:	81001704 	addi	r4,r16,92
    7080:	000b883a 	mov	r5,zero
    7084:	80000015 	stw	zero,0(r16)
    7088:	80000115 	stw	zero,4(r16)
    708c:	80000215 	stw	zero,8(r16)
    7090:	8080030d 	sth	r2,12(r16)
    7094:	80001915 	stw	zero,100(r16)
    7098:	8000038d 	sth	zero,14(r16)
    709c:	80000415 	stw	zero,16(r16)
    70a0:	80000515 	stw	zero,20(r16)
    70a4:	80000615 	stw	zero,24(r16)
    70a8:	00030f40 	call	30f4 <memset>
    70ac:	05800074 	movhi	r22,1
    70b0:	94400217 	ldw	r17,8(r18)
    70b4:	05400074 	movhi	r21,1
    70b8:	05000074 	movhi	r20,1
    70bc:	04c00074 	movhi	r19,1
    70c0:	b5a64d04 	addi	r22,r22,-26316
    70c4:	ad666404 	addi	r21,r21,-26224
    70c8:	a5268304 	addi	r20,r20,-26100
    70cc:	9ce69a04 	addi	r19,r19,-26008
    70d0:	85800815 	stw	r22,32(r16)
    70d4:	85400915 	stw	r21,36(r16)
    70d8:	85000a15 	stw	r20,40(r16)
    70dc:	84c00b15 	stw	r19,44(r16)
    70e0:	84000715 	stw	r16,28(r16)
    70e4:	00800284 	movi	r2,10
    70e8:	8880030d 	sth	r2,12(r17)
    70ec:	00800044 	movi	r2,1
    70f0:	b80d883a 	mov	r6,r23
    70f4:	89001704 	addi	r4,r17,92
    70f8:	000b883a 	mov	r5,zero
    70fc:	88000015 	stw	zero,0(r17)
    7100:	88000115 	stw	zero,4(r17)
    7104:	88000215 	stw	zero,8(r17)
    7108:	88001915 	stw	zero,100(r17)
    710c:	8880038d 	sth	r2,14(r17)
    7110:	88000415 	stw	zero,16(r17)
    7114:	88000515 	stw	zero,20(r17)
    7118:	88000615 	stw	zero,24(r17)
    711c:	00030f40 	call	30f4 <memset>
    7120:	94000317 	ldw	r16,12(r18)
    7124:	00800484 	movi	r2,18
    7128:	8c400715 	stw	r17,28(r17)
    712c:	8d800815 	stw	r22,32(r17)
    7130:	8d400915 	stw	r21,36(r17)
    7134:	8d000a15 	stw	r20,40(r17)
    7138:	8cc00b15 	stw	r19,44(r17)
    713c:	8080030d 	sth	r2,12(r16)
    7140:	00800084 	movi	r2,2
    7144:	80000015 	stw	zero,0(r16)
    7148:	80000115 	stw	zero,4(r16)
    714c:	80000215 	stw	zero,8(r16)
    7150:	80001915 	stw	zero,100(r16)
    7154:	8080038d 	sth	r2,14(r16)
    7158:	80000415 	stw	zero,16(r16)
    715c:	80000515 	stw	zero,20(r16)
    7160:	80000615 	stw	zero,24(r16)
    7164:	b80d883a 	mov	r6,r23
    7168:	000b883a 	mov	r5,zero
    716c:	81001704 	addi	r4,r16,92
    7170:	00030f40 	call	30f4 <memset>
    7174:	00800044 	movi	r2,1
    7178:	84000715 	stw	r16,28(r16)
    717c:	85800815 	stw	r22,32(r16)
    7180:	85400915 	stw	r21,36(r16)
    7184:	85000a15 	stw	r20,40(r16)
    7188:	84c00b15 	stw	r19,44(r16)
    718c:	90800e15 	stw	r2,56(r18)
    7190:	dfc00817 	ldw	ra,32(sp)
    7194:	ddc00717 	ldw	r23,28(sp)
    7198:	dd800617 	ldw	r22,24(sp)
    719c:	dd400517 	ldw	r21,20(sp)
    71a0:	dd000417 	ldw	r20,16(sp)
    71a4:	dcc00317 	ldw	r19,12(sp)
    71a8:	dc800217 	ldw	r18,8(sp)
    71ac:	dc400117 	ldw	r17,4(sp)
    71b0:	dc000017 	ldw	r16,0(sp)
    71b4:	dec00904 	addi	sp,sp,36
    71b8:	f800283a 	ret

000071bc <__fp_lock>:
    71bc:	0005883a 	mov	r2,zero
    71c0:	f800283a 	ret

000071c4 <__sfmoreglue>:
    71c4:	defffc04 	addi	sp,sp,-16
    71c8:	dc800215 	stw	r18,8(sp)
    71cc:	2825883a 	mov	r18,r5
    71d0:	dc000015 	stw	r16,0(sp)
    71d4:	01401a04 	movi	r5,104
    71d8:	2021883a 	mov	r16,r4
    71dc:	913fffc4 	addi	r4,r18,-1
    71e0:	dfc00315 	stw	ra,12(sp)
    71e4:	dc400115 	stw	r17,4(sp)
    71e8:	00020100 	call	2010 <__mulsi3>
    71ec:	8009883a 	mov	r4,r16
    71f0:	11401d04 	addi	r5,r2,116
    71f4:	1023883a 	mov	r17,r2
    71f8:	00028e80 	call	28e8 <_malloc_r>
    71fc:	1021883a 	mov	r16,r2
    7200:	10000726 	beq	r2,zero,7220 <__sfmoreglue+0x5c>
    7204:	11000304 	addi	r4,r2,12
    7208:	10000015 	stw	zero,0(r2)
    720c:	14800115 	stw	r18,4(r2)
    7210:	11000215 	stw	r4,8(r2)
    7214:	89801a04 	addi	r6,r17,104
    7218:	000b883a 	mov	r5,zero
    721c:	00030f40 	call	30f4 <memset>
    7220:	8005883a 	mov	r2,r16
    7224:	dfc00317 	ldw	ra,12(sp)
    7228:	dc800217 	ldw	r18,8(sp)
    722c:	dc400117 	ldw	r17,4(sp)
    7230:	dc000017 	ldw	r16,0(sp)
    7234:	dec00404 	addi	sp,sp,16
    7238:	f800283a 	ret

0000723c <__sfp>:
    723c:	defffb04 	addi	sp,sp,-20
    7240:	dc000015 	stw	r16,0(sp)
    7244:	04000074 	movhi	r16,1
    7248:	841b8c04 	addi	r16,r16,28208
    724c:	dcc00315 	stw	r19,12(sp)
    7250:	2027883a 	mov	r19,r4
    7254:	81000017 	ldw	r4,0(r16)
    7258:	dfc00415 	stw	ra,16(sp)
    725c:	dc800215 	stw	r18,8(sp)
    7260:	20800e17 	ldw	r2,56(r4)
    7264:	dc400115 	stw	r17,4(sp)
    7268:	1000021e 	bne	r2,zero,7274 <__sfp+0x38>
    726c:	00070200 	call	7020 <__sinit.part.1>
    7270:	81000017 	ldw	r4,0(r16)
    7274:	2480b804 	addi	r18,r4,736
    7278:	047fffc4 	movi	r17,-1
    727c:	91000117 	ldw	r4,4(r18)
    7280:	94000217 	ldw	r16,8(r18)
    7284:	213fffc4 	addi	r4,r4,-1
    7288:	20000a16 	blt	r4,zero,72b4 <__sfp+0x78>
    728c:	8080030f 	ldh	r2,12(r16)
    7290:	10000c26 	beq	r2,zero,72c4 <__sfp+0x88>
    7294:	80c01d04 	addi	r3,r16,116
    7298:	00000206 	br	72a4 <__sfp+0x68>
    729c:	18bfe60f 	ldh	r2,-104(r3)
    72a0:	10000826 	beq	r2,zero,72c4 <__sfp+0x88>
    72a4:	213fffc4 	addi	r4,r4,-1
    72a8:	1c3ffd04 	addi	r16,r3,-12
    72ac:	18c01a04 	addi	r3,r3,104
    72b0:	247ffa1e 	bne	r4,r17,729c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153529c>
    72b4:	90800017 	ldw	r2,0(r18)
    72b8:	10001d26 	beq	r2,zero,7330 <__sfp+0xf4>
    72bc:	1025883a 	mov	r18,r2
    72c0:	003fee06 	br	727c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153527c>
    72c4:	00bfffc4 	movi	r2,-1
    72c8:	8080038d 	sth	r2,14(r16)
    72cc:	00800044 	movi	r2,1
    72d0:	8080030d 	sth	r2,12(r16)
    72d4:	80001915 	stw	zero,100(r16)
    72d8:	80000015 	stw	zero,0(r16)
    72dc:	80000215 	stw	zero,8(r16)
    72e0:	80000115 	stw	zero,4(r16)
    72e4:	80000415 	stw	zero,16(r16)
    72e8:	80000515 	stw	zero,20(r16)
    72ec:	80000615 	stw	zero,24(r16)
    72f0:	01800204 	movi	r6,8
    72f4:	000b883a 	mov	r5,zero
    72f8:	81001704 	addi	r4,r16,92
    72fc:	00030f40 	call	30f4 <memset>
    7300:	8005883a 	mov	r2,r16
    7304:	80000c15 	stw	zero,48(r16)
    7308:	80000d15 	stw	zero,52(r16)
    730c:	80001115 	stw	zero,68(r16)
    7310:	80001215 	stw	zero,72(r16)
    7314:	dfc00417 	ldw	ra,16(sp)
    7318:	dcc00317 	ldw	r19,12(sp)
    731c:	dc800217 	ldw	r18,8(sp)
    7320:	dc400117 	ldw	r17,4(sp)
    7324:	dc000017 	ldw	r16,0(sp)
    7328:	dec00504 	addi	sp,sp,20
    732c:	f800283a 	ret
    7330:	01400104 	movi	r5,4
    7334:	9809883a 	mov	r4,r19
    7338:	00071c40 	call	71c4 <__sfmoreglue>
    733c:	90800015 	stw	r2,0(r18)
    7340:	103fde1e 	bne	r2,zero,72bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215352bc>
    7344:	00800304 	movi	r2,12
    7348:	98800015 	stw	r2,0(r19)
    734c:	0005883a 	mov	r2,zero
    7350:	003ff006 	br	7314 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535314>

00007354 <_cleanup>:
    7354:	00800074 	movhi	r2,1
    7358:	109b8c04 	addi	r2,r2,28208
    735c:	11000017 	ldw	r4,0(r2)
    7360:	01400074 	movhi	r5,1
    7364:	296ce804 	addi	r5,r5,-19552
    7368:	0007d7c1 	jmpi	7d7c <_fwalk_reent>

0000736c <__sinit>:
    736c:	20800e17 	ldw	r2,56(r4)
    7370:	10000126 	beq	r2,zero,7378 <__sinit+0xc>
    7374:	f800283a 	ret
    7378:	00070201 	jmpi	7020 <__sinit.part.1>

0000737c <__sfp_lock_acquire>:
    737c:	f800283a 	ret

00007380 <__sfp_lock_release>:
    7380:	f800283a 	ret

00007384 <__sinit_lock_acquire>:
    7384:	f800283a 	ret

00007388 <__sinit_lock_release>:
    7388:	f800283a 	ret

0000738c <__fp_lock_all>:
    738c:	00800074 	movhi	r2,1
    7390:	109b8d04 	addi	r2,r2,28212
    7394:	11000017 	ldw	r4,0(r2)
    7398:	01400034 	movhi	r5,0
    739c:	295c6f04 	addi	r5,r5,29116
    73a0:	0007cb81 	jmpi	7cb8 <_fwalk>

000073a4 <__fp_unlock_all>:
    73a4:	00800074 	movhi	r2,1
    73a8:	109b8d04 	addi	r2,r2,28212
    73ac:	11000017 	ldw	r4,0(r2)
    73b0:	01400034 	movhi	r5,0
    73b4:	295c0304 	addi	r5,r5,28684
    73b8:	0007cb81 	jmpi	7cb8 <_fwalk>

000073bc <_malloc_trim_r>:
    73bc:	defffb04 	addi	sp,sp,-20
    73c0:	dcc00315 	stw	r19,12(sp)
    73c4:	04c00074 	movhi	r19,1
    73c8:	dc800215 	stw	r18,8(sp)
    73cc:	dc400115 	stw	r17,4(sp)
    73d0:	dc000015 	stw	r16,0(sp)
    73d4:	dfc00415 	stw	ra,16(sp)
    73d8:	2821883a 	mov	r16,r5
    73dc:	9cd45304 	addi	r19,r19,20812
    73e0:	2025883a 	mov	r18,r4
    73e4:	000f8680 	call	f868 <__malloc_lock>
    73e8:	98800217 	ldw	r2,8(r19)
    73ec:	14400117 	ldw	r17,4(r2)
    73f0:	00bfff04 	movi	r2,-4
    73f4:	88a2703a 	and	r17,r17,r2
    73f8:	8c21c83a 	sub	r16,r17,r16
    73fc:	8403fbc4 	addi	r16,r16,4079
    7400:	8020d33a 	srli	r16,r16,12
    7404:	0083ffc4 	movi	r2,4095
    7408:	843fffc4 	addi	r16,r16,-1
    740c:	8020933a 	slli	r16,r16,12
    7410:	1400060e 	bge	r2,r16,742c <_malloc_trim_r+0x70>
    7414:	000b883a 	mov	r5,zero
    7418:	9009883a 	mov	r4,r18
    741c:	00032f00 	call	32f0 <_sbrk_r>
    7420:	98c00217 	ldw	r3,8(r19)
    7424:	1c47883a 	add	r3,r3,r17
    7428:	10c00a26 	beq	r2,r3,7454 <_malloc_trim_r+0x98>
    742c:	9009883a 	mov	r4,r18
    7430:	000f88c0 	call	f88c <__malloc_unlock>
    7434:	0005883a 	mov	r2,zero
    7438:	dfc00417 	ldw	ra,16(sp)
    743c:	dcc00317 	ldw	r19,12(sp)
    7440:	dc800217 	ldw	r18,8(sp)
    7444:	dc400117 	ldw	r17,4(sp)
    7448:	dc000017 	ldw	r16,0(sp)
    744c:	dec00504 	addi	sp,sp,20
    7450:	f800283a 	ret
    7454:	040bc83a 	sub	r5,zero,r16
    7458:	9009883a 	mov	r4,r18
    745c:	00032f00 	call	32f0 <_sbrk_r>
    7460:	00ffffc4 	movi	r3,-1
    7464:	10c00d26 	beq	r2,r3,749c <_malloc_trim_r+0xe0>
    7468:	00c000b4 	movhi	r3,2
    746c:	18e30504 	addi	r3,r3,-29676
    7470:	18800017 	ldw	r2,0(r3)
    7474:	99000217 	ldw	r4,8(r19)
    7478:	8c23c83a 	sub	r17,r17,r16
    747c:	8c400054 	ori	r17,r17,1
    7480:	1421c83a 	sub	r16,r2,r16
    7484:	24400115 	stw	r17,4(r4)
    7488:	9009883a 	mov	r4,r18
    748c:	1c000015 	stw	r16,0(r3)
    7490:	000f88c0 	call	f88c <__malloc_unlock>
    7494:	00800044 	movi	r2,1
    7498:	003fe706 	br	7438 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535438>
    749c:	000b883a 	mov	r5,zero
    74a0:	9009883a 	mov	r4,r18
    74a4:	00032f00 	call	32f0 <_sbrk_r>
    74a8:	99000217 	ldw	r4,8(r19)
    74ac:	014003c4 	movi	r5,15
    74b0:	1107c83a 	sub	r3,r2,r4
    74b4:	28ffdd0e 	bge	r5,r3,742c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153542c>
    74b8:	01400074 	movhi	r5,1
    74bc:	295b8a04 	addi	r5,r5,28200
    74c0:	29400017 	ldw	r5,0(r5)
    74c4:	18c00054 	ori	r3,r3,1
    74c8:	20c00115 	stw	r3,4(r4)
    74cc:	00c000b4 	movhi	r3,2
    74d0:	1145c83a 	sub	r2,r2,r5
    74d4:	18e30504 	addi	r3,r3,-29676
    74d8:	18800015 	stw	r2,0(r3)
    74dc:	003fd306 	br	742c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153542c>

000074e0 <_free_r>:
    74e0:	28004126 	beq	r5,zero,75e8 <_free_r+0x108>
    74e4:	defffd04 	addi	sp,sp,-12
    74e8:	dc400115 	stw	r17,4(sp)
    74ec:	dc000015 	stw	r16,0(sp)
    74f0:	2023883a 	mov	r17,r4
    74f4:	2821883a 	mov	r16,r5
    74f8:	dfc00215 	stw	ra,8(sp)
    74fc:	000f8680 	call	f868 <__malloc_lock>
    7500:	81ffff17 	ldw	r7,-4(r16)
    7504:	00bfff84 	movi	r2,-2
    7508:	01000074 	movhi	r4,1
    750c:	81bffe04 	addi	r6,r16,-8
    7510:	3884703a 	and	r2,r7,r2
    7514:	21145304 	addi	r4,r4,20812
    7518:	308b883a 	add	r5,r6,r2
    751c:	2a400117 	ldw	r9,4(r5)
    7520:	22000217 	ldw	r8,8(r4)
    7524:	00ffff04 	movi	r3,-4
    7528:	48c6703a 	and	r3,r9,r3
    752c:	2a005726 	beq	r5,r8,768c <_free_r+0x1ac>
    7530:	28c00115 	stw	r3,4(r5)
    7534:	39c0004c 	andi	r7,r7,1
    7538:	3800091e 	bne	r7,zero,7560 <_free_r+0x80>
    753c:	823ffe17 	ldw	r8,-8(r16)
    7540:	22400204 	addi	r9,r4,8
    7544:	320dc83a 	sub	r6,r6,r8
    7548:	31c00217 	ldw	r7,8(r6)
    754c:	1205883a 	add	r2,r2,r8
    7550:	3a406526 	beq	r7,r9,76e8 <_free_r+0x208>
    7554:	32000317 	ldw	r8,12(r6)
    7558:	3a000315 	stw	r8,12(r7)
    755c:	41c00215 	stw	r7,8(r8)
    7560:	28cf883a 	add	r7,r5,r3
    7564:	39c00117 	ldw	r7,4(r7)
    7568:	39c0004c 	andi	r7,r7,1
    756c:	38003a26 	beq	r7,zero,7658 <_free_r+0x178>
    7570:	10c00054 	ori	r3,r2,1
    7574:	30c00115 	stw	r3,4(r6)
    7578:	3087883a 	add	r3,r6,r2
    757c:	18800015 	stw	r2,0(r3)
    7580:	00c07fc4 	movi	r3,511
    7584:	18801936 	bltu	r3,r2,75ec <_free_r+0x10c>
    7588:	1004d0fa 	srli	r2,r2,3
    758c:	01c00044 	movi	r7,1
    7590:	21400117 	ldw	r5,4(r4)
    7594:	10c00044 	addi	r3,r2,1
    7598:	18c7883a 	add	r3,r3,r3
    759c:	1005d0ba 	srai	r2,r2,2
    75a0:	18c7883a 	add	r3,r3,r3
    75a4:	18c7883a 	add	r3,r3,r3
    75a8:	1907883a 	add	r3,r3,r4
    75ac:	3884983a 	sll	r2,r7,r2
    75b0:	19c00017 	ldw	r7,0(r3)
    75b4:	1a3ffe04 	addi	r8,r3,-8
    75b8:	1144b03a 	or	r2,r2,r5
    75bc:	32000315 	stw	r8,12(r6)
    75c0:	31c00215 	stw	r7,8(r6)
    75c4:	20800115 	stw	r2,4(r4)
    75c8:	19800015 	stw	r6,0(r3)
    75cc:	39800315 	stw	r6,12(r7)
    75d0:	8809883a 	mov	r4,r17
    75d4:	dfc00217 	ldw	ra,8(sp)
    75d8:	dc400117 	ldw	r17,4(sp)
    75dc:	dc000017 	ldw	r16,0(sp)
    75e0:	dec00304 	addi	sp,sp,12
    75e4:	000f88c1 	jmpi	f88c <__malloc_unlock>
    75e8:	f800283a 	ret
    75ec:	100ad27a 	srli	r5,r2,9
    75f0:	00c00104 	movi	r3,4
    75f4:	19404a36 	bltu	r3,r5,7720 <_free_r+0x240>
    75f8:	100ad1ba 	srli	r5,r2,6
    75fc:	28c00e44 	addi	r3,r5,57
    7600:	18c7883a 	add	r3,r3,r3
    7604:	29400e04 	addi	r5,r5,56
    7608:	18c7883a 	add	r3,r3,r3
    760c:	18c7883a 	add	r3,r3,r3
    7610:	1909883a 	add	r4,r3,r4
    7614:	20c00017 	ldw	r3,0(r4)
    7618:	01c00074 	movhi	r7,1
    761c:	213ffe04 	addi	r4,r4,-8
    7620:	39d45304 	addi	r7,r7,20812
    7624:	20c04426 	beq	r4,r3,7738 <_free_r+0x258>
    7628:	01ffff04 	movi	r7,-4
    762c:	19400117 	ldw	r5,4(r3)
    7630:	29ca703a 	and	r5,r5,r7
    7634:	1140022e 	bgeu	r2,r5,7640 <_free_r+0x160>
    7638:	18c00217 	ldw	r3,8(r3)
    763c:	20fffb1e 	bne	r4,r3,762c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153562c>
    7640:	19000317 	ldw	r4,12(r3)
    7644:	31000315 	stw	r4,12(r6)
    7648:	30c00215 	stw	r3,8(r6)
    764c:	21800215 	stw	r6,8(r4)
    7650:	19800315 	stw	r6,12(r3)
    7654:	003fde06 	br	75d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215355d0>
    7658:	29c00217 	ldw	r7,8(r5)
    765c:	10c5883a 	add	r2,r2,r3
    7660:	00c00074 	movhi	r3,1
    7664:	18d45504 	addi	r3,r3,20820
    7668:	38c03b26 	beq	r7,r3,7758 <_free_r+0x278>
    766c:	2a000317 	ldw	r8,12(r5)
    7670:	11400054 	ori	r5,r2,1
    7674:	3087883a 	add	r3,r6,r2
    7678:	3a000315 	stw	r8,12(r7)
    767c:	41c00215 	stw	r7,8(r8)
    7680:	31400115 	stw	r5,4(r6)
    7684:	18800015 	stw	r2,0(r3)
    7688:	003fbd06 	br	7580 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535580>
    768c:	39c0004c 	andi	r7,r7,1
    7690:	10c5883a 	add	r2,r2,r3
    7694:	3800071e 	bne	r7,zero,76b4 <_free_r+0x1d4>
    7698:	81fffe17 	ldw	r7,-8(r16)
    769c:	31cdc83a 	sub	r6,r6,r7
    76a0:	30c00317 	ldw	r3,12(r6)
    76a4:	31400217 	ldw	r5,8(r6)
    76a8:	11c5883a 	add	r2,r2,r7
    76ac:	28c00315 	stw	r3,12(r5)
    76b0:	19400215 	stw	r5,8(r3)
    76b4:	10c00054 	ori	r3,r2,1
    76b8:	30c00115 	stw	r3,4(r6)
    76bc:	00c00074 	movhi	r3,1
    76c0:	18db8b04 	addi	r3,r3,28204
    76c4:	18c00017 	ldw	r3,0(r3)
    76c8:	21800215 	stw	r6,8(r4)
    76cc:	10ffc036 	bltu	r2,r3,75d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215355d0>
    76d0:	008000b4 	movhi	r2,2
    76d4:	10a2f904 	addi	r2,r2,-29724
    76d8:	11400017 	ldw	r5,0(r2)
    76dc:	8809883a 	mov	r4,r17
    76e0:	00073bc0 	call	73bc <_malloc_trim_r>
    76e4:	003fba06 	br	75d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215355d0>
    76e8:	28c9883a 	add	r4,r5,r3
    76ec:	21000117 	ldw	r4,4(r4)
    76f0:	2100004c 	andi	r4,r4,1
    76f4:	2000391e 	bne	r4,zero,77dc <_free_r+0x2fc>
    76f8:	29c00217 	ldw	r7,8(r5)
    76fc:	29000317 	ldw	r4,12(r5)
    7700:	1885883a 	add	r2,r3,r2
    7704:	10c00054 	ori	r3,r2,1
    7708:	39000315 	stw	r4,12(r7)
    770c:	21c00215 	stw	r7,8(r4)
    7710:	30c00115 	stw	r3,4(r6)
    7714:	308d883a 	add	r6,r6,r2
    7718:	30800015 	stw	r2,0(r6)
    771c:	003fac06 	br	75d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215355d0>
    7720:	00c00504 	movi	r3,20
    7724:	19401536 	bltu	r3,r5,777c <_free_r+0x29c>
    7728:	28c01704 	addi	r3,r5,92
    772c:	18c7883a 	add	r3,r3,r3
    7730:	294016c4 	addi	r5,r5,91
    7734:	003fb406 	br	7608 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535608>
    7738:	280bd0ba 	srai	r5,r5,2
    773c:	00c00044 	movi	r3,1
    7740:	38800117 	ldw	r2,4(r7)
    7744:	194a983a 	sll	r5,r3,r5
    7748:	2007883a 	mov	r3,r4
    774c:	2884b03a 	or	r2,r5,r2
    7750:	38800115 	stw	r2,4(r7)
    7754:	003fbb06 	br	7644 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535644>
    7758:	21800515 	stw	r6,20(r4)
    775c:	21800415 	stw	r6,16(r4)
    7760:	10c00054 	ori	r3,r2,1
    7764:	31c00315 	stw	r7,12(r6)
    7768:	31c00215 	stw	r7,8(r6)
    776c:	30c00115 	stw	r3,4(r6)
    7770:	308d883a 	add	r6,r6,r2
    7774:	30800015 	stw	r2,0(r6)
    7778:	003f9506 	br	75d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215355d0>
    777c:	00c01504 	movi	r3,84
    7780:	19400536 	bltu	r3,r5,7798 <_free_r+0x2b8>
    7784:	100ad33a 	srli	r5,r2,12
    7788:	28c01bc4 	addi	r3,r5,111
    778c:	18c7883a 	add	r3,r3,r3
    7790:	29401b84 	addi	r5,r5,110
    7794:	003f9c06 	br	7608 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535608>
    7798:	00c05504 	movi	r3,340
    779c:	19400536 	bltu	r3,r5,77b4 <_free_r+0x2d4>
    77a0:	100ad3fa 	srli	r5,r2,15
    77a4:	28c01e04 	addi	r3,r5,120
    77a8:	18c7883a 	add	r3,r3,r3
    77ac:	29401dc4 	addi	r5,r5,119
    77b0:	003f9506 	br	7608 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535608>
    77b4:	00c15504 	movi	r3,1364
    77b8:	19400536 	bltu	r3,r5,77d0 <_free_r+0x2f0>
    77bc:	100ad4ba 	srli	r5,r2,18
    77c0:	28c01f44 	addi	r3,r5,125
    77c4:	18c7883a 	add	r3,r3,r3
    77c8:	29401f04 	addi	r5,r5,124
    77cc:	003f8e06 	br	7608 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535608>
    77d0:	00c03f84 	movi	r3,254
    77d4:	01401f84 	movi	r5,126
    77d8:	003f8b06 	br	7608 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535608>
    77dc:	10c00054 	ori	r3,r2,1
    77e0:	30c00115 	stw	r3,4(r6)
    77e4:	308d883a 	add	r6,r6,r2
    77e8:	30800015 	stw	r2,0(r6)
    77ec:	003f7806 	br	75d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215355d0>

000077f0 <__sfvwrite_r>:
    77f0:	30800217 	ldw	r2,8(r6)
    77f4:	10006726 	beq	r2,zero,7994 <__sfvwrite_r+0x1a4>
    77f8:	28c0030b 	ldhu	r3,12(r5)
    77fc:	defff404 	addi	sp,sp,-48
    7800:	dd400715 	stw	r21,28(sp)
    7804:	dd000615 	stw	r20,24(sp)
    7808:	dc000215 	stw	r16,8(sp)
    780c:	dfc00b15 	stw	ra,44(sp)
    7810:	df000a15 	stw	fp,40(sp)
    7814:	ddc00915 	stw	r23,36(sp)
    7818:	dd800815 	stw	r22,32(sp)
    781c:	dcc00515 	stw	r19,20(sp)
    7820:	dc800415 	stw	r18,16(sp)
    7824:	dc400315 	stw	r17,12(sp)
    7828:	1880020c 	andi	r2,r3,8
    782c:	2821883a 	mov	r16,r5
    7830:	202b883a 	mov	r21,r4
    7834:	3029883a 	mov	r20,r6
    7838:	10002726 	beq	r2,zero,78d8 <__sfvwrite_r+0xe8>
    783c:	28800417 	ldw	r2,16(r5)
    7840:	10002526 	beq	r2,zero,78d8 <__sfvwrite_r+0xe8>
    7844:	1880008c 	andi	r2,r3,2
    7848:	a4400017 	ldw	r17,0(r20)
    784c:	10002a26 	beq	r2,zero,78f8 <__sfvwrite_r+0x108>
    7850:	05a00034 	movhi	r22,32768
    7854:	0027883a 	mov	r19,zero
    7858:	0025883a 	mov	r18,zero
    785c:	b5bf0004 	addi	r22,r22,-1024
    7860:	980d883a 	mov	r6,r19
    7864:	a809883a 	mov	r4,r21
    7868:	90004626 	beq	r18,zero,7984 <__sfvwrite_r+0x194>
    786c:	900f883a 	mov	r7,r18
    7870:	b480022e 	bgeu	r22,r18,787c <__sfvwrite_r+0x8c>
    7874:	01e00034 	movhi	r7,32768
    7878:	39ff0004 	addi	r7,r7,-1024
    787c:	80800917 	ldw	r2,36(r16)
    7880:	81400717 	ldw	r5,28(r16)
    7884:	103ee83a 	callr	r2
    7888:	00805a0e 	bge	zero,r2,79f4 <__sfvwrite_r+0x204>
    788c:	a0c00217 	ldw	r3,8(r20)
    7890:	98a7883a 	add	r19,r19,r2
    7894:	90a5c83a 	sub	r18,r18,r2
    7898:	1885c83a 	sub	r2,r3,r2
    789c:	a0800215 	stw	r2,8(r20)
    78a0:	103fef1e 	bne	r2,zero,7860 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535860>
    78a4:	0005883a 	mov	r2,zero
    78a8:	dfc00b17 	ldw	ra,44(sp)
    78ac:	df000a17 	ldw	fp,40(sp)
    78b0:	ddc00917 	ldw	r23,36(sp)
    78b4:	dd800817 	ldw	r22,32(sp)
    78b8:	dd400717 	ldw	r21,28(sp)
    78bc:	dd000617 	ldw	r20,24(sp)
    78c0:	dcc00517 	ldw	r19,20(sp)
    78c4:	dc800417 	ldw	r18,16(sp)
    78c8:	dc400317 	ldw	r17,12(sp)
    78cc:	dc000217 	ldw	r16,8(sp)
    78d0:	dec00c04 	addi	sp,sp,48
    78d4:	f800283a 	ret
    78d8:	800b883a 	mov	r5,r16
    78dc:	a809883a 	mov	r4,r21
    78e0:	000b11c0 	call	b11c <__swsetup_r>
    78e4:	1000ee1e 	bne	r2,zero,7ca0 <__sfvwrite_r+0x4b0>
    78e8:	80c0030b 	ldhu	r3,12(r16)
    78ec:	a4400017 	ldw	r17,0(r20)
    78f0:	1880008c 	andi	r2,r3,2
    78f4:	103fd61e 	bne	r2,zero,7850 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535850>
    78f8:	1880004c 	andi	r2,r3,1
    78fc:	1000421e 	bne	r2,zero,7a08 <__sfvwrite_r+0x218>
    7900:	0039883a 	mov	fp,zero
    7904:	0025883a 	mov	r18,zero
    7908:	90001a26 	beq	r18,zero,7974 <__sfvwrite_r+0x184>
    790c:	1880800c 	andi	r2,r3,512
    7910:	84c00217 	ldw	r19,8(r16)
    7914:	10002126 	beq	r2,zero,799c <__sfvwrite_r+0x1ac>
    7918:	982f883a 	mov	r23,r19
    791c:	94c09636 	bltu	r18,r19,7b78 <__sfvwrite_r+0x388>
    7920:	1881200c 	andi	r2,r3,1152
    7924:	1000a11e 	bne	r2,zero,7bac <__sfvwrite_r+0x3bc>
    7928:	81000017 	ldw	r4,0(r16)
    792c:	b80d883a 	mov	r6,r23
    7930:	e00b883a 	mov	r5,fp
    7934:	00081480 	call	8148 <memmove>
    7938:	80c00217 	ldw	r3,8(r16)
    793c:	81000017 	ldw	r4,0(r16)
    7940:	9005883a 	mov	r2,r18
    7944:	1ce7c83a 	sub	r19,r3,r19
    7948:	25cf883a 	add	r7,r4,r23
    794c:	84c00215 	stw	r19,8(r16)
    7950:	81c00015 	stw	r7,0(r16)
    7954:	a0c00217 	ldw	r3,8(r20)
    7958:	e0b9883a 	add	fp,fp,r2
    795c:	90a5c83a 	sub	r18,r18,r2
    7960:	18a7c83a 	sub	r19,r3,r2
    7964:	a4c00215 	stw	r19,8(r20)
    7968:	983fce26 	beq	r19,zero,78a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215358a4>
    796c:	80c0030b 	ldhu	r3,12(r16)
    7970:	903fe61e 	bne	r18,zero,790c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153590c>
    7974:	8f000017 	ldw	fp,0(r17)
    7978:	8c800117 	ldw	r18,4(r17)
    797c:	8c400204 	addi	r17,r17,8
    7980:	003fe106 	br	7908 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535908>
    7984:	8cc00017 	ldw	r19,0(r17)
    7988:	8c800117 	ldw	r18,4(r17)
    798c:	8c400204 	addi	r17,r17,8
    7990:	003fb306 	br	7860 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535860>
    7994:	0005883a 	mov	r2,zero
    7998:	f800283a 	ret
    799c:	81000017 	ldw	r4,0(r16)
    79a0:	80800417 	ldw	r2,16(r16)
    79a4:	11005a36 	bltu	r2,r4,7b10 <__sfvwrite_r+0x320>
    79a8:	85c00517 	ldw	r23,20(r16)
    79ac:	95c05836 	bltu	r18,r23,7b10 <__sfvwrite_r+0x320>
    79b0:	00a00034 	movhi	r2,32768
    79b4:	10bfffc4 	addi	r2,r2,-1
    79b8:	9009883a 	mov	r4,r18
    79bc:	1480012e 	bgeu	r2,r18,79c4 <__sfvwrite_r+0x1d4>
    79c0:	1009883a 	mov	r4,r2
    79c4:	b80b883a 	mov	r5,r23
    79c8:	000c6380 	call	c638 <__divsi3>
    79cc:	b80b883a 	mov	r5,r23
    79d0:	1009883a 	mov	r4,r2
    79d4:	00020100 	call	2010 <__mulsi3>
    79d8:	81400717 	ldw	r5,28(r16)
    79dc:	80c00917 	ldw	r3,36(r16)
    79e0:	100f883a 	mov	r7,r2
    79e4:	e00d883a 	mov	r6,fp
    79e8:	a809883a 	mov	r4,r21
    79ec:	183ee83a 	callr	r3
    79f0:	00bfd816 	blt	zero,r2,7954 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535954>
    79f4:	8080030b 	ldhu	r2,12(r16)
    79f8:	10801014 	ori	r2,r2,64
    79fc:	8080030d 	sth	r2,12(r16)
    7a00:	00bfffc4 	movi	r2,-1
    7a04:	003fa806 	br	78a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215358a8>
    7a08:	0027883a 	mov	r19,zero
    7a0c:	0011883a 	mov	r8,zero
    7a10:	0039883a 	mov	fp,zero
    7a14:	0025883a 	mov	r18,zero
    7a18:	90001f26 	beq	r18,zero,7a98 <__sfvwrite_r+0x2a8>
    7a1c:	40005a26 	beq	r8,zero,7b88 <__sfvwrite_r+0x398>
    7a20:	982d883a 	mov	r22,r19
    7a24:	94c0012e 	bgeu	r18,r19,7a2c <__sfvwrite_r+0x23c>
    7a28:	902d883a 	mov	r22,r18
    7a2c:	81000017 	ldw	r4,0(r16)
    7a30:	80800417 	ldw	r2,16(r16)
    7a34:	b02f883a 	mov	r23,r22
    7a38:	81c00517 	ldw	r7,20(r16)
    7a3c:	1100032e 	bgeu	r2,r4,7a4c <__sfvwrite_r+0x25c>
    7a40:	80c00217 	ldw	r3,8(r16)
    7a44:	38c7883a 	add	r3,r7,r3
    7a48:	1d801816 	blt	r3,r22,7aac <__sfvwrite_r+0x2bc>
    7a4c:	b1c03e16 	blt	r22,r7,7b48 <__sfvwrite_r+0x358>
    7a50:	80800917 	ldw	r2,36(r16)
    7a54:	81400717 	ldw	r5,28(r16)
    7a58:	e00d883a 	mov	r6,fp
    7a5c:	da000115 	stw	r8,4(sp)
    7a60:	a809883a 	mov	r4,r21
    7a64:	103ee83a 	callr	r2
    7a68:	102f883a 	mov	r23,r2
    7a6c:	da000117 	ldw	r8,4(sp)
    7a70:	00bfe00e 	bge	zero,r2,79f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215359f4>
    7a74:	9de7c83a 	sub	r19,r19,r23
    7a78:	98001f26 	beq	r19,zero,7af8 <__sfvwrite_r+0x308>
    7a7c:	a0800217 	ldw	r2,8(r20)
    7a80:	e5f9883a 	add	fp,fp,r23
    7a84:	95e5c83a 	sub	r18,r18,r23
    7a88:	15efc83a 	sub	r23,r2,r23
    7a8c:	a5c00215 	stw	r23,8(r20)
    7a90:	b83f8426 	beq	r23,zero,78a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215358a4>
    7a94:	903fe11e 	bne	r18,zero,7a1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535a1c>
    7a98:	8f000017 	ldw	fp,0(r17)
    7a9c:	8c800117 	ldw	r18,4(r17)
    7aa0:	0011883a 	mov	r8,zero
    7aa4:	8c400204 	addi	r17,r17,8
    7aa8:	003fdb06 	br	7a18 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535a18>
    7aac:	180d883a 	mov	r6,r3
    7ab0:	e00b883a 	mov	r5,fp
    7ab4:	da000115 	stw	r8,4(sp)
    7ab8:	d8c00015 	stw	r3,0(sp)
    7abc:	00081480 	call	8148 <memmove>
    7ac0:	d8c00017 	ldw	r3,0(sp)
    7ac4:	80800017 	ldw	r2,0(r16)
    7ac8:	800b883a 	mov	r5,r16
    7acc:	a809883a 	mov	r4,r21
    7ad0:	10c5883a 	add	r2,r2,r3
    7ad4:	80800015 	stw	r2,0(r16)
    7ad8:	d8c00015 	stw	r3,0(sp)
    7adc:	000b6c00 	call	b6c0 <_fflush_r>
    7ae0:	d8c00017 	ldw	r3,0(sp)
    7ae4:	da000117 	ldw	r8,4(sp)
    7ae8:	103fc21e 	bne	r2,zero,79f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215359f4>
    7aec:	182f883a 	mov	r23,r3
    7af0:	9de7c83a 	sub	r19,r19,r23
    7af4:	983fe11e 	bne	r19,zero,7a7c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535a7c>
    7af8:	800b883a 	mov	r5,r16
    7afc:	a809883a 	mov	r4,r21
    7b00:	000b6c00 	call	b6c0 <_fflush_r>
    7b04:	103fbb1e 	bne	r2,zero,79f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215359f4>
    7b08:	0011883a 	mov	r8,zero
    7b0c:	003fdb06 	br	7a7c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535a7c>
    7b10:	94c0012e 	bgeu	r18,r19,7b18 <__sfvwrite_r+0x328>
    7b14:	9027883a 	mov	r19,r18
    7b18:	980d883a 	mov	r6,r19
    7b1c:	e00b883a 	mov	r5,fp
    7b20:	00081480 	call	8148 <memmove>
    7b24:	80800217 	ldw	r2,8(r16)
    7b28:	80c00017 	ldw	r3,0(r16)
    7b2c:	14c5c83a 	sub	r2,r2,r19
    7b30:	1cc7883a 	add	r3,r3,r19
    7b34:	80800215 	stw	r2,8(r16)
    7b38:	80c00015 	stw	r3,0(r16)
    7b3c:	10004326 	beq	r2,zero,7c4c <__sfvwrite_r+0x45c>
    7b40:	9805883a 	mov	r2,r19
    7b44:	003f8306 	br	7954 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535954>
    7b48:	b00d883a 	mov	r6,r22
    7b4c:	e00b883a 	mov	r5,fp
    7b50:	da000115 	stw	r8,4(sp)
    7b54:	00081480 	call	8148 <memmove>
    7b58:	80800217 	ldw	r2,8(r16)
    7b5c:	80c00017 	ldw	r3,0(r16)
    7b60:	da000117 	ldw	r8,4(sp)
    7b64:	1585c83a 	sub	r2,r2,r22
    7b68:	1dad883a 	add	r22,r3,r22
    7b6c:	80800215 	stw	r2,8(r16)
    7b70:	85800015 	stw	r22,0(r16)
    7b74:	003fbf06 	br	7a74 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535a74>
    7b78:	81000017 	ldw	r4,0(r16)
    7b7c:	9027883a 	mov	r19,r18
    7b80:	902f883a 	mov	r23,r18
    7b84:	003f6906 	br	792c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153592c>
    7b88:	900d883a 	mov	r6,r18
    7b8c:	01400284 	movi	r5,10
    7b90:	e009883a 	mov	r4,fp
    7b94:	0007f1c0 	call	7f1c <memchr>
    7b98:	10003e26 	beq	r2,zero,7c94 <__sfvwrite_r+0x4a4>
    7b9c:	10800044 	addi	r2,r2,1
    7ba0:	1727c83a 	sub	r19,r2,fp
    7ba4:	02000044 	movi	r8,1
    7ba8:	003f9d06 	br	7a20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535a20>
    7bac:	80800517 	ldw	r2,20(r16)
    7bb0:	81400417 	ldw	r5,16(r16)
    7bb4:	81c00017 	ldw	r7,0(r16)
    7bb8:	10a7883a 	add	r19,r2,r2
    7bbc:	9885883a 	add	r2,r19,r2
    7bc0:	1026d7fa 	srli	r19,r2,31
    7bc4:	396dc83a 	sub	r22,r7,r5
    7bc8:	b1000044 	addi	r4,r22,1
    7bcc:	9885883a 	add	r2,r19,r2
    7bd0:	1027d07a 	srai	r19,r2,1
    7bd4:	2485883a 	add	r2,r4,r18
    7bd8:	980d883a 	mov	r6,r19
    7bdc:	9880022e 	bgeu	r19,r2,7be8 <__sfvwrite_r+0x3f8>
    7be0:	1027883a 	mov	r19,r2
    7be4:	100d883a 	mov	r6,r2
    7be8:	18c1000c 	andi	r3,r3,1024
    7bec:	18001c26 	beq	r3,zero,7c60 <__sfvwrite_r+0x470>
    7bf0:	300b883a 	mov	r5,r6
    7bf4:	a809883a 	mov	r4,r21
    7bf8:	00028e80 	call	28e8 <_malloc_r>
    7bfc:	102f883a 	mov	r23,r2
    7c00:	10002926 	beq	r2,zero,7ca8 <__sfvwrite_r+0x4b8>
    7c04:	81400417 	ldw	r5,16(r16)
    7c08:	b00d883a 	mov	r6,r22
    7c0c:	1009883a 	mov	r4,r2
    7c10:	00080000 	call	8000 <memcpy>
    7c14:	8080030b 	ldhu	r2,12(r16)
    7c18:	00fedfc4 	movi	r3,-1153
    7c1c:	10c4703a 	and	r2,r2,r3
    7c20:	10802014 	ori	r2,r2,128
    7c24:	8080030d 	sth	r2,12(r16)
    7c28:	bd89883a 	add	r4,r23,r22
    7c2c:	9d8fc83a 	sub	r7,r19,r22
    7c30:	85c00415 	stw	r23,16(r16)
    7c34:	84c00515 	stw	r19,20(r16)
    7c38:	81000015 	stw	r4,0(r16)
    7c3c:	9027883a 	mov	r19,r18
    7c40:	81c00215 	stw	r7,8(r16)
    7c44:	902f883a 	mov	r23,r18
    7c48:	003f3806 	br	792c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153592c>
    7c4c:	800b883a 	mov	r5,r16
    7c50:	a809883a 	mov	r4,r21
    7c54:	000b6c00 	call	b6c0 <_fflush_r>
    7c58:	103fb926 	beq	r2,zero,7b40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535b40>
    7c5c:	003f6506 	br	79f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215359f4>
    7c60:	a809883a 	mov	r4,r21
    7c64:	000935c0 	call	935c <_realloc_r>
    7c68:	102f883a 	mov	r23,r2
    7c6c:	103fee1e 	bne	r2,zero,7c28 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535c28>
    7c70:	81400417 	ldw	r5,16(r16)
    7c74:	a809883a 	mov	r4,r21
    7c78:	00074e00 	call	74e0 <_free_r>
    7c7c:	8080030b 	ldhu	r2,12(r16)
    7c80:	00ffdfc4 	movi	r3,-129
    7c84:	1884703a 	and	r2,r3,r2
    7c88:	00c00304 	movi	r3,12
    7c8c:	a8c00015 	stw	r3,0(r21)
    7c90:	003f5906 	br	79f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215359f8>
    7c94:	94c00044 	addi	r19,r18,1
    7c98:	02000044 	movi	r8,1
    7c9c:	003f6006 	br	7a20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535a20>
    7ca0:	00bfffc4 	movi	r2,-1
    7ca4:	003f0006 	br	78a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215358a8>
    7ca8:	00800304 	movi	r2,12
    7cac:	a8800015 	stw	r2,0(r21)
    7cb0:	8080030b 	ldhu	r2,12(r16)
    7cb4:	003f5006 	br	79f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215359f8>

00007cb8 <_fwalk>:
    7cb8:	defff704 	addi	sp,sp,-36
    7cbc:	dd000415 	stw	r20,16(sp)
    7cc0:	dfc00815 	stw	ra,32(sp)
    7cc4:	ddc00715 	stw	r23,28(sp)
    7cc8:	dd800615 	stw	r22,24(sp)
    7ccc:	dd400515 	stw	r21,20(sp)
    7cd0:	dcc00315 	stw	r19,12(sp)
    7cd4:	dc800215 	stw	r18,8(sp)
    7cd8:	dc400115 	stw	r17,4(sp)
    7cdc:	dc000015 	stw	r16,0(sp)
    7ce0:	2500b804 	addi	r20,r4,736
    7ce4:	a0002326 	beq	r20,zero,7d74 <_fwalk+0xbc>
    7ce8:	282b883a 	mov	r21,r5
    7cec:	002f883a 	mov	r23,zero
    7cf0:	05800044 	movi	r22,1
    7cf4:	04ffffc4 	movi	r19,-1
    7cf8:	a4400117 	ldw	r17,4(r20)
    7cfc:	a4800217 	ldw	r18,8(r20)
    7d00:	8c7fffc4 	addi	r17,r17,-1
    7d04:	88000d16 	blt	r17,zero,7d3c <_fwalk+0x84>
    7d08:	94000304 	addi	r16,r18,12
    7d0c:	94800384 	addi	r18,r18,14
    7d10:	8080000b 	ldhu	r2,0(r16)
    7d14:	8c7fffc4 	addi	r17,r17,-1
    7d18:	813ffd04 	addi	r4,r16,-12
    7d1c:	b080042e 	bgeu	r22,r2,7d30 <_fwalk+0x78>
    7d20:	9080000f 	ldh	r2,0(r18)
    7d24:	14c00226 	beq	r2,r19,7d30 <_fwalk+0x78>
    7d28:	a83ee83a 	callr	r21
    7d2c:	b8aeb03a 	or	r23,r23,r2
    7d30:	84001a04 	addi	r16,r16,104
    7d34:	94801a04 	addi	r18,r18,104
    7d38:	8cfff51e 	bne	r17,r19,7d10 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535d10>
    7d3c:	a5000017 	ldw	r20,0(r20)
    7d40:	a03fed1e 	bne	r20,zero,7cf8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535cf8>
    7d44:	b805883a 	mov	r2,r23
    7d48:	dfc00817 	ldw	ra,32(sp)
    7d4c:	ddc00717 	ldw	r23,28(sp)
    7d50:	dd800617 	ldw	r22,24(sp)
    7d54:	dd400517 	ldw	r21,20(sp)
    7d58:	dd000417 	ldw	r20,16(sp)
    7d5c:	dcc00317 	ldw	r19,12(sp)
    7d60:	dc800217 	ldw	r18,8(sp)
    7d64:	dc400117 	ldw	r17,4(sp)
    7d68:	dc000017 	ldw	r16,0(sp)
    7d6c:	dec00904 	addi	sp,sp,36
    7d70:	f800283a 	ret
    7d74:	002f883a 	mov	r23,zero
    7d78:	003ff206 	br	7d44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535d44>

00007d7c <_fwalk_reent>:
    7d7c:	defff704 	addi	sp,sp,-36
    7d80:	dd000415 	stw	r20,16(sp)
    7d84:	dfc00815 	stw	ra,32(sp)
    7d88:	ddc00715 	stw	r23,28(sp)
    7d8c:	dd800615 	stw	r22,24(sp)
    7d90:	dd400515 	stw	r21,20(sp)
    7d94:	dcc00315 	stw	r19,12(sp)
    7d98:	dc800215 	stw	r18,8(sp)
    7d9c:	dc400115 	stw	r17,4(sp)
    7da0:	dc000015 	stw	r16,0(sp)
    7da4:	2500b804 	addi	r20,r4,736
    7da8:	a0002326 	beq	r20,zero,7e38 <_fwalk_reent+0xbc>
    7dac:	282b883a 	mov	r21,r5
    7db0:	2027883a 	mov	r19,r4
    7db4:	002f883a 	mov	r23,zero
    7db8:	05800044 	movi	r22,1
    7dbc:	04bfffc4 	movi	r18,-1
    7dc0:	a4400117 	ldw	r17,4(r20)
    7dc4:	a4000217 	ldw	r16,8(r20)
    7dc8:	8c7fffc4 	addi	r17,r17,-1
    7dcc:	88000c16 	blt	r17,zero,7e00 <_fwalk_reent+0x84>
    7dd0:	84000304 	addi	r16,r16,12
    7dd4:	8080000b 	ldhu	r2,0(r16)
    7dd8:	8c7fffc4 	addi	r17,r17,-1
    7ddc:	817ffd04 	addi	r5,r16,-12
    7de0:	b080052e 	bgeu	r22,r2,7df8 <_fwalk_reent+0x7c>
    7de4:	8080008f 	ldh	r2,2(r16)
    7de8:	9809883a 	mov	r4,r19
    7dec:	14800226 	beq	r2,r18,7df8 <_fwalk_reent+0x7c>
    7df0:	a83ee83a 	callr	r21
    7df4:	b8aeb03a 	or	r23,r23,r2
    7df8:	84001a04 	addi	r16,r16,104
    7dfc:	8cbff51e 	bne	r17,r18,7dd4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535dd4>
    7e00:	a5000017 	ldw	r20,0(r20)
    7e04:	a03fee1e 	bne	r20,zero,7dc0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535dc0>
    7e08:	b805883a 	mov	r2,r23
    7e0c:	dfc00817 	ldw	ra,32(sp)
    7e10:	ddc00717 	ldw	r23,28(sp)
    7e14:	dd800617 	ldw	r22,24(sp)
    7e18:	dd400517 	ldw	r21,20(sp)
    7e1c:	dd000417 	ldw	r20,16(sp)
    7e20:	dcc00317 	ldw	r19,12(sp)
    7e24:	dc800217 	ldw	r18,8(sp)
    7e28:	dc400117 	ldw	r17,4(sp)
    7e2c:	dc000017 	ldw	r16,0(sp)
    7e30:	dec00904 	addi	sp,sp,36
    7e34:	f800283a 	ret
    7e38:	002f883a 	mov	r23,zero
    7e3c:	003ff206 	br	7e08 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535e08>

00007e40 <_setlocale_r>:
    7e40:	30001b26 	beq	r6,zero,7eb0 <_setlocale_r+0x70>
    7e44:	01400074 	movhi	r5,1
    7e48:	defffe04 	addi	sp,sp,-8
    7e4c:	2953a604 	addi	r5,r5,20120
    7e50:	3009883a 	mov	r4,r6
    7e54:	dc000015 	stw	r16,0(sp)
    7e58:	dfc00115 	stw	ra,4(sp)
    7e5c:	3021883a 	mov	r16,r6
    7e60:	0009a700 	call	9a70 <strcmp>
    7e64:	1000061e 	bne	r2,zero,7e80 <_setlocale_r+0x40>
    7e68:	00800074 	movhi	r2,1
    7e6c:	1093a504 	addi	r2,r2,20116
    7e70:	dfc00117 	ldw	ra,4(sp)
    7e74:	dc000017 	ldw	r16,0(sp)
    7e78:	dec00204 	addi	sp,sp,8
    7e7c:	f800283a 	ret
    7e80:	01400074 	movhi	r5,1
    7e84:	2953a504 	addi	r5,r5,20116
    7e88:	8009883a 	mov	r4,r16
    7e8c:	0009a700 	call	9a70 <strcmp>
    7e90:	103ff526 	beq	r2,zero,7e68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535e68>
    7e94:	01400074 	movhi	r5,1
    7e98:	29539004 	addi	r5,r5,20032
    7e9c:	8009883a 	mov	r4,r16
    7ea0:	0009a700 	call	9a70 <strcmp>
    7ea4:	103ff026 	beq	r2,zero,7e68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535e68>
    7ea8:	0005883a 	mov	r2,zero
    7eac:	003ff006 	br	7e70 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535e70>
    7eb0:	00800074 	movhi	r2,1
    7eb4:	1093a504 	addi	r2,r2,20116
    7eb8:	f800283a 	ret

00007ebc <__locale_charset>:
    7ebc:	00800074 	movhi	r2,1
    7ec0:	10966604 	addi	r2,r2,22936
    7ec4:	f800283a 	ret

00007ec8 <__locale_mb_cur_max>:
    7ec8:	00800074 	movhi	r2,1
    7ecc:	109b8e04 	addi	r2,r2,28216
    7ed0:	10800017 	ldw	r2,0(r2)
    7ed4:	f800283a 	ret

00007ed8 <__locale_msgcharset>:
    7ed8:	00800074 	movhi	r2,1
    7edc:	10965e04 	addi	r2,r2,22904
    7ee0:	f800283a 	ret

00007ee4 <__locale_cjk_lang>:
    7ee4:	0005883a 	mov	r2,zero
    7ee8:	f800283a 	ret

00007eec <_localeconv_r>:
    7eec:	00800074 	movhi	r2,1
    7ef0:	10966e04 	addi	r2,r2,22968
    7ef4:	f800283a 	ret

00007ef8 <setlocale>:
    7ef8:	00800074 	movhi	r2,1
    7efc:	109b8d04 	addi	r2,r2,28212
    7f00:	280d883a 	mov	r6,r5
    7f04:	200b883a 	mov	r5,r4
    7f08:	11000017 	ldw	r4,0(r2)
    7f0c:	0007e401 	jmpi	7e40 <_setlocale_r>

00007f10 <localeconv>:
    7f10:	00800074 	movhi	r2,1
    7f14:	10966e04 	addi	r2,r2,22968
    7f18:	f800283a 	ret

00007f1c <memchr>:
    7f1c:	208000cc 	andi	r2,r4,3
    7f20:	280f883a 	mov	r7,r5
    7f24:	10003426 	beq	r2,zero,7ff8 <memchr+0xdc>
    7f28:	30bfffc4 	addi	r2,r6,-1
    7f2c:	30001a26 	beq	r6,zero,7f98 <memchr+0x7c>
    7f30:	20c00003 	ldbu	r3,0(r4)
    7f34:	29803fcc 	andi	r6,r5,255
    7f38:	30c0051e 	bne	r6,r3,7f50 <memchr+0x34>
    7f3c:	00001806 	br	7fa0 <memchr+0x84>
    7f40:	10001526 	beq	r2,zero,7f98 <memchr+0x7c>
    7f44:	20c00003 	ldbu	r3,0(r4)
    7f48:	10bfffc4 	addi	r2,r2,-1
    7f4c:	30c01426 	beq	r6,r3,7fa0 <memchr+0x84>
    7f50:	21000044 	addi	r4,r4,1
    7f54:	20c000cc 	andi	r3,r4,3
    7f58:	183ff91e 	bne	r3,zero,7f40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535f40>
    7f5c:	020000c4 	movi	r8,3
    7f60:	40801136 	bltu	r8,r2,7fa8 <memchr+0x8c>
    7f64:	10000c26 	beq	r2,zero,7f98 <memchr+0x7c>
    7f68:	20c00003 	ldbu	r3,0(r4)
    7f6c:	29403fcc 	andi	r5,r5,255
    7f70:	28c00b26 	beq	r5,r3,7fa0 <memchr+0x84>
    7f74:	20c00044 	addi	r3,r4,1
    7f78:	39803fcc 	andi	r6,r7,255
    7f7c:	2089883a 	add	r4,r4,r2
    7f80:	00000306 	br	7f90 <memchr+0x74>
    7f84:	18c00044 	addi	r3,r3,1
    7f88:	197fffc3 	ldbu	r5,-1(r3)
    7f8c:	31400526 	beq	r6,r5,7fa4 <memchr+0x88>
    7f90:	1805883a 	mov	r2,r3
    7f94:	20fffb1e 	bne	r4,r3,7f84 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535f84>
    7f98:	0005883a 	mov	r2,zero
    7f9c:	f800283a 	ret
    7fa0:	2005883a 	mov	r2,r4
    7fa4:	f800283a 	ret
    7fa8:	28c03fcc 	andi	r3,r5,255
    7fac:	1812923a 	slli	r9,r3,8
    7fb0:	02ffbff4 	movhi	r11,65279
    7fb4:	02a02074 	movhi	r10,32897
    7fb8:	48d2b03a 	or	r9,r9,r3
    7fbc:	4806943a 	slli	r3,r9,16
    7fc0:	5affbfc4 	addi	r11,r11,-257
    7fc4:	52a02004 	addi	r10,r10,-32640
    7fc8:	48d2b03a 	or	r9,r9,r3
    7fcc:	20c00017 	ldw	r3,0(r4)
    7fd0:	48c6f03a 	xor	r3,r9,r3
    7fd4:	1acd883a 	add	r6,r3,r11
    7fd8:	00c6303a 	nor	r3,zero,r3
    7fdc:	30c6703a 	and	r3,r6,r3
    7fe0:	1a86703a 	and	r3,r3,r10
    7fe4:	183fe01e 	bne	r3,zero,7f68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535f68>
    7fe8:	10bfff04 	addi	r2,r2,-4
    7fec:	21000104 	addi	r4,r4,4
    7ff0:	40bff636 	bltu	r8,r2,7fcc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535fcc>
    7ff4:	003fdb06 	br	7f64 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535f64>
    7ff8:	3005883a 	mov	r2,r6
    7ffc:	003fd706 	br	7f5c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21535f5c>

00008000 <memcpy>:
    8000:	defffd04 	addi	sp,sp,-12
    8004:	dfc00215 	stw	ra,8(sp)
    8008:	dc400115 	stw	r17,4(sp)
    800c:	dc000015 	stw	r16,0(sp)
    8010:	00c003c4 	movi	r3,15
    8014:	2005883a 	mov	r2,r4
    8018:	1980452e 	bgeu	r3,r6,8130 <memcpy+0x130>
    801c:	2906b03a 	or	r3,r5,r4
    8020:	18c000cc 	andi	r3,r3,3
    8024:	1800441e 	bne	r3,zero,8138 <memcpy+0x138>
    8028:	347ffc04 	addi	r17,r6,-16
    802c:	8822d13a 	srli	r17,r17,4
    8030:	28c00104 	addi	r3,r5,4
    8034:	23400104 	addi	r13,r4,4
    8038:	8820913a 	slli	r16,r17,4
    803c:	2b000204 	addi	r12,r5,8
    8040:	22c00204 	addi	r11,r4,8
    8044:	84000504 	addi	r16,r16,20
    8048:	2a800304 	addi	r10,r5,12
    804c:	22400304 	addi	r9,r4,12
    8050:	2c21883a 	add	r16,r5,r16
    8054:	2811883a 	mov	r8,r5
    8058:	200f883a 	mov	r7,r4
    805c:	41000017 	ldw	r4,0(r8)
    8060:	1fc00017 	ldw	ra,0(r3)
    8064:	63c00017 	ldw	r15,0(r12)
    8068:	39000015 	stw	r4,0(r7)
    806c:	53800017 	ldw	r14,0(r10)
    8070:	6fc00015 	stw	ra,0(r13)
    8074:	5bc00015 	stw	r15,0(r11)
    8078:	4b800015 	stw	r14,0(r9)
    807c:	18c00404 	addi	r3,r3,16
    8080:	39c00404 	addi	r7,r7,16
    8084:	42000404 	addi	r8,r8,16
    8088:	6b400404 	addi	r13,r13,16
    808c:	63000404 	addi	r12,r12,16
    8090:	5ac00404 	addi	r11,r11,16
    8094:	52800404 	addi	r10,r10,16
    8098:	4a400404 	addi	r9,r9,16
    809c:	1c3fef1e 	bne	r3,r16,805c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153605c>
    80a0:	89c00044 	addi	r7,r17,1
    80a4:	380e913a 	slli	r7,r7,4
    80a8:	310003cc 	andi	r4,r6,15
    80ac:	02c000c4 	movi	r11,3
    80b0:	11c7883a 	add	r3,r2,r7
    80b4:	29cb883a 	add	r5,r5,r7
    80b8:	5900212e 	bgeu	r11,r4,8140 <memcpy+0x140>
    80bc:	1813883a 	mov	r9,r3
    80c0:	2811883a 	mov	r8,r5
    80c4:	200f883a 	mov	r7,r4
    80c8:	42800017 	ldw	r10,0(r8)
    80cc:	4a400104 	addi	r9,r9,4
    80d0:	39ffff04 	addi	r7,r7,-4
    80d4:	4abfff15 	stw	r10,-4(r9)
    80d8:	42000104 	addi	r8,r8,4
    80dc:	59fffa36 	bltu	r11,r7,80c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215360c8>
    80e0:	213fff04 	addi	r4,r4,-4
    80e4:	2008d0ba 	srli	r4,r4,2
    80e8:	318000cc 	andi	r6,r6,3
    80ec:	21000044 	addi	r4,r4,1
    80f0:	2109883a 	add	r4,r4,r4
    80f4:	2109883a 	add	r4,r4,r4
    80f8:	1907883a 	add	r3,r3,r4
    80fc:	290b883a 	add	r5,r5,r4
    8100:	30000626 	beq	r6,zero,811c <memcpy+0x11c>
    8104:	198d883a 	add	r6,r3,r6
    8108:	29c00003 	ldbu	r7,0(r5)
    810c:	18c00044 	addi	r3,r3,1
    8110:	29400044 	addi	r5,r5,1
    8114:	19ffffc5 	stb	r7,-1(r3)
    8118:	19bffb1e 	bne	r3,r6,8108 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536108>
    811c:	dfc00217 	ldw	ra,8(sp)
    8120:	dc400117 	ldw	r17,4(sp)
    8124:	dc000017 	ldw	r16,0(sp)
    8128:	dec00304 	addi	sp,sp,12
    812c:	f800283a 	ret
    8130:	2007883a 	mov	r3,r4
    8134:	003ff206 	br	8100 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536100>
    8138:	2007883a 	mov	r3,r4
    813c:	003ff106 	br	8104 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536104>
    8140:	200d883a 	mov	r6,r4
    8144:	003fee06 	br	8100 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536100>

00008148 <memmove>:
    8148:	2005883a 	mov	r2,r4
    814c:	29000b2e 	bgeu	r5,r4,817c <memmove+0x34>
    8150:	298f883a 	add	r7,r5,r6
    8154:	21c0092e 	bgeu	r4,r7,817c <memmove+0x34>
    8158:	2187883a 	add	r3,r4,r6
    815c:	198bc83a 	sub	r5,r3,r6
    8160:	30004826 	beq	r6,zero,8284 <memmove+0x13c>
    8164:	39ffffc4 	addi	r7,r7,-1
    8168:	39000003 	ldbu	r4,0(r7)
    816c:	18ffffc4 	addi	r3,r3,-1
    8170:	19000005 	stb	r4,0(r3)
    8174:	28fffb1e 	bne	r5,r3,8164 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536164>
    8178:	f800283a 	ret
    817c:	00c003c4 	movi	r3,15
    8180:	1980412e 	bgeu	r3,r6,8288 <memmove+0x140>
    8184:	2886b03a 	or	r3,r5,r2
    8188:	18c000cc 	andi	r3,r3,3
    818c:	1800401e 	bne	r3,zero,8290 <memmove+0x148>
    8190:	33fffc04 	addi	r15,r6,-16
    8194:	781ed13a 	srli	r15,r15,4
    8198:	28c00104 	addi	r3,r5,4
    819c:	13400104 	addi	r13,r2,4
    81a0:	781c913a 	slli	r14,r15,4
    81a4:	2b000204 	addi	r12,r5,8
    81a8:	12c00204 	addi	r11,r2,8
    81ac:	73800504 	addi	r14,r14,20
    81b0:	2a800304 	addi	r10,r5,12
    81b4:	12400304 	addi	r9,r2,12
    81b8:	2b9d883a 	add	r14,r5,r14
    81bc:	2811883a 	mov	r8,r5
    81c0:	100f883a 	mov	r7,r2
    81c4:	41000017 	ldw	r4,0(r8)
    81c8:	39c00404 	addi	r7,r7,16
    81cc:	18c00404 	addi	r3,r3,16
    81d0:	393ffc15 	stw	r4,-16(r7)
    81d4:	193ffc17 	ldw	r4,-16(r3)
    81d8:	6b400404 	addi	r13,r13,16
    81dc:	5ac00404 	addi	r11,r11,16
    81e0:	693ffc15 	stw	r4,-16(r13)
    81e4:	61000017 	ldw	r4,0(r12)
    81e8:	4a400404 	addi	r9,r9,16
    81ec:	42000404 	addi	r8,r8,16
    81f0:	593ffc15 	stw	r4,-16(r11)
    81f4:	51000017 	ldw	r4,0(r10)
    81f8:	63000404 	addi	r12,r12,16
    81fc:	52800404 	addi	r10,r10,16
    8200:	493ffc15 	stw	r4,-16(r9)
    8204:	1bbfef1e 	bne	r3,r14,81c4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215361c4>
    8208:	79000044 	addi	r4,r15,1
    820c:	2008913a 	slli	r4,r4,4
    8210:	328003cc 	andi	r10,r6,15
    8214:	02c000c4 	movi	r11,3
    8218:	1107883a 	add	r3,r2,r4
    821c:	290b883a 	add	r5,r5,r4
    8220:	5a801e2e 	bgeu	r11,r10,829c <memmove+0x154>
    8224:	1813883a 	mov	r9,r3
    8228:	2811883a 	mov	r8,r5
    822c:	500f883a 	mov	r7,r10
    8230:	41000017 	ldw	r4,0(r8)
    8234:	4a400104 	addi	r9,r9,4
    8238:	39ffff04 	addi	r7,r7,-4
    823c:	493fff15 	stw	r4,-4(r9)
    8240:	42000104 	addi	r8,r8,4
    8244:	59fffa36 	bltu	r11,r7,8230 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536230>
    8248:	513fff04 	addi	r4,r10,-4
    824c:	2008d0ba 	srli	r4,r4,2
    8250:	318000cc 	andi	r6,r6,3
    8254:	21000044 	addi	r4,r4,1
    8258:	2109883a 	add	r4,r4,r4
    825c:	2109883a 	add	r4,r4,r4
    8260:	1907883a 	add	r3,r3,r4
    8264:	290b883a 	add	r5,r5,r4
    8268:	30000b26 	beq	r6,zero,8298 <memmove+0x150>
    826c:	198d883a 	add	r6,r3,r6
    8270:	29c00003 	ldbu	r7,0(r5)
    8274:	18c00044 	addi	r3,r3,1
    8278:	29400044 	addi	r5,r5,1
    827c:	19ffffc5 	stb	r7,-1(r3)
    8280:	19bffb1e 	bne	r3,r6,8270 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536270>
    8284:	f800283a 	ret
    8288:	1007883a 	mov	r3,r2
    828c:	003ff606 	br	8268 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536268>
    8290:	1007883a 	mov	r3,r2
    8294:	003ff506 	br	826c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153626c>
    8298:	f800283a 	ret
    829c:	500d883a 	mov	r6,r10
    82a0:	003ff106 	br	8268 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536268>

000082a4 <_Balloc>:
    82a4:	20801317 	ldw	r2,76(r4)
    82a8:	defffc04 	addi	sp,sp,-16
    82ac:	dc400115 	stw	r17,4(sp)
    82b0:	dc000015 	stw	r16,0(sp)
    82b4:	dfc00315 	stw	ra,12(sp)
    82b8:	dc800215 	stw	r18,8(sp)
    82bc:	2023883a 	mov	r17,r4
    82c0:	2821883a 	mov	r16,r5
    82c4:	10000f26 	beq	r2,zero,8304 <_Balloc+0x60>
    82c8:	8407883a 	add	r3,r16,r16
    82cc:	18c7883a 	add	r3,r3,r3
    82d0:	10c7883a 	add	r3,r2,r3
    82d4:	18800017 	ldw	r2,0(r3)
    82d8:	10001126 	beq	r2,zero,8320 <_Balloc+0x7c>
    82dc:	11000017 	ldw	r4,0(r2)
    82e0:	19000015 	stw	r4,0(r3)
    82e4:	10000415 	stw	zero,16(r2)
    82e8:	10000315 	stw	zero,12(r2)
    82ec:	dfc00317 	ldw	ra,12(sp)
    82f0:	dc800217 	ldw	r18,8(sp)
    82f4:	dc400117 	ldw	r17,4(sp)
    82f8:	dc000017 	ldw	r16,0(sp)
    82fc:	dec00404 	addi	sp,sp,16
    8300:	f800283a 	ret
    8304:	01800844 	movi	r6,33
    8308:	01400104 	movi	r5,4
    830c:	000b2c40 	call	b2c4 <_calloc_r>
    8310:	88801315 	stw	r2,76(r17)
    8314:	103fec1e 	bne	r2,zero,82c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215362c8>
    8318:	0005883a 	mov	r2,zero
    831c:	003ff306 	br	82ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215362ec>
    8320:	01400044 	movi	r5,1
    8324:	2c24983a 	sll	r18,r5,r16
    8328:	8809883a 	mov	r4,r17
    832c:	91800144 	addi	r6,r18,5
    8330:	318d883a 	add	r6,r6,r6
    8334:	318d883a 	add	r6,r6,r6
    8338:	000b2c40 	call	b2c4 <_calloc_r>
    833c:	103ff626 	beq	r2,zero,8318 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536318>
    8340:	14000115 	stw	r16,4(r2)
    8344:	14800215 	stw	r18,8(r2)
    8348:	003fe606 	br	82e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215362e4>

0000834c <_Bfree>:
    834c:	28000826 	beq	r5,zero,8370 <_Bfree+0x24>
    8350:	28c00117 	ldw	r3,4(r5)
    8354:	20801317 	ldw	r2,76(r4)
    8358:	18c7883a 	add	r3,r3,r3
    835c:	18c7883a 	add	r3,r3,r3
    8360:	10c5883a 	add	r2,r2,r3
    8364:	10c00017 	ldw	r3,0(r2)
    8368:	28c00015 	stw	r3,0(r5)
    836c:	11400015 	stw	r5,0(r2)
    8370:	f800283a 	ret

00008374 <__multadd>:
    8374:	defff704 	addi	sp,sp,-36
    8378:	dc800215 	stw	r18,8(sp)
    837c:	2c800417 	ldw	r18,16(r5)
    8380:	dd800615 	stw	r22,24(sp)
    8384:	dd400515 	stw	r21,20(sp)
    8388:	dd000415 	stw	r20,16(sp)
    838c:	dcc00315 	stw	r19,12(sp)
    8390:	dc400115 	stw	r17,4(sp)
    8394:	dc000015 	stw	r16,0(sp)
    8398:	dfc00815 	stw	ra,32(sp)
    839c:	ddc00715 	stw	r23,28(sp)
    83a0:	2827883a 	mov	r19,r5
    83a4:	2029883a 	mov	r20,r4
    83a8:	3023883a 	mov	r17,r6
    83ac:	3821883a 	mov	r16,r7
    83b0:	2d400504 	addi	r21,r5,20
    83b4:	002d883a 	mov	r22,zero
    83b8:	adc00017 	ldw	r23,0(r21)
    83bc:	880b883a 	mov	r5,r17
    83c0:	ad400104 	addi	r21,r21,4
    83c4:	b93fffcc 	andi	r4,r23,65535
    83c8:	00020100 	call	2010 <__mulsi3>
    83cc:	b808d43a 	srli	r4,r23,16
    83d0:	880b883a 	mov	r5,r17
    83d4:	1421883a 	add	r16,r2,r16
    83d8:	00020100 	call	2010 <__mulsi3>
    83dc:	800ed43a 	srli	r7,r16,16
    83e0:	80ffffcc 	andi	r3,r16,65535
    83e4:	b5800044 	addi	r22,r22,1
    83e8:	11c5883a 	add	r2,r2,r7
    83ec:	100e943a 	slli	r7,r2,16
    83f0:	1020d43a 	srli	r16,r2,16
    83f4:	38c7883a 	add	r3,r7,r3
    83f8:	a8ffff15 	stw	r3,-4(r21)
    83fc:	b4bfee16 	blt	r22,r18,83b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215363b8>
    8400:	80000926 	beq	r16,zero,8428 <__multadd+0xb4>
    8404:	98800217 	ldw	r2,8(r19)
    8408:	9080130e 	bge	r18,r2,8458 <__multadd+0xe4>
    840c:	90800144 	addi	r2,r18,5
    8410:	1085883a 	add	r2,r2,r2
    8414:	1085883a 	add	r2,r2,r2
    8418:	9885883a 	add	r2,r19,r2
    841c:	14000015 	stw	r16,0(r2)
    8420:	94800044 	addi	r18,r18,1
    8424:	9c800415 	stw	r18,16(r19)
    8428:	9805883a 	mov	r2,r19
    842c:	dfc00817 	ldw	ra,32(sp)
    8430:	ddc00717 	ldw	r23,28(sp)
    8434:	dd800617 	ldw	r22,24(sp)
    8438:	dd400517 	ldw	r21,20(sp)
    843c:	dd000417 	ldw	r20,16(sp)
    8440:	dcc00317 	ldw	r19,12(sp)
    8444:	dc800217 	ldw	r18,8(sp)
    8448:	dc400117 	ldw	r17,4(sp)
    844c:	dc000017 	ldw	r16,0(sp)
    8450:	dec00904 	addi	sp,sp,36
    8454:	f800283a 	ret
    8458:	99400117 	ldw	r5,4(r19)
    845c:	a009883a 	mov	r4,r20
    8460:	29400044 	addi	r5,r5,1
    8464:	00082a40 	call	82a4 <_Balloc>
    8468:	99800417 	ldw	r6,16(r19)
    846c:	99400304 	addi	r5,r19,12
    8470:	11000304 	addi	r4,r2,12
    8474:	31800084 	addi	r6,r6,2
    8478:	318d883a 	add	r6,r6,r6
    847c:	318d883a 	add	r6,r6,r6
    8480:	1023883a 	mov	r17,r2
    8484:	00080000 	call	8000 <memcpy>
    8488:	98000a26 	beq	r19,zero,84b4 <__multadd+0x140>
    848c:	98c00117 	ldw	r3,4(r19)
    8490:	a0801317 	ldw	r2,76(r20)
    8494:	18c7883a 	add	r3,r3,r3
    8498:	18c7883a 	add	r3,r3,r3
    849c:	10c5883a 	add	r2,r2,r3
    84a0:	10c00017 	ldw	r3,0(r2)
    84a4:	98c00015 	stw	r3,0(r19)
    84a8:	14c00015 	stw	r19,0(r2)
    84ac:	8827883a 	mov	r19,r17
    84b0:	003fd606 	br	840c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153640c>
    84b4:	8827883a 	mov	r19,r17
    84b8:	003fd406 	br	840c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153640c>

000084bc <__s2b>:
    84bc:	defff904 	addi	sp,sp,-28
    84c0:	dc400115 	stw	r17,4(sp)
    84c4:	dc000015 	stw	r16,0(sp)
    84c8:	2023883a 	mov	r17,r4
    84cc:	2821883a 	mov	r16,r5
    84d0:	39000204 	addi	r4,r7,8
    84d4:	01400244 	movi	r5,9
    84d8:	dcc00315 	stw	r19,12(sp)
    84dc:	dc800215 	stw	r18,8(sp)
    84e0:	dfc00615 	stw	ra,24(sp)
    84e4:	dd400515 	stw	r21,20(sp)
    84e8:	dd000415 	stw	r20,16(sp)
    84ec:	3825883a 	mov	r18,r7
    84f0:	3027883a 	mov	r19,r6
    84f4:	000c6380 	call	c638 <__divsi3>
    84f8:	00c00044 	movi	r3,1
    84fc:	000b883a 	mov	r5,zero
    8500:	1880030e 	bge	r3,r2,8510 <__s2b+0x54>
    8504:	18c7883a 	add	r3,r3,r3
    8508:	29400044 	addi	r5,r5,1
    850c:	18bffd16 	blt	r3,r2,8504 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536504>
    8510:	8809883a 	mov	r4,r17
    8514:	00082a40 	call	82a4 <_Balloc>
    8518:	d8c00717 	ldw	r3,28(sp)
    851c:	10c00515 	stw	r3,20(r2)
    8520:	00c00044 	movi	r3,1
    8524:	10c00415 	stw	r3,16(r2)
    8528:	00c00244 	movi	r3,9
    852c:	1cc0210e 	bge	r3,r19,85b4 <__s2b+0xf8>
    8530:	80eb883a 	add	r21,r16,r3
    8534:	a829883a 	mov	r20,r21
    8538:	84e1883a 	add	r16,r16,r19
    853c:	a1c00007 	ldb	r7,0(r20)
    8540:	01800284 	movi	r6,10
    8544:	a5000044 	addi	r20,r20,1
    8548:	100b883a 	mov	r5,r2
    854c:	39fff404 	addi	r7,r7,-48
    8550:	8809883a 	mov	r4,r17
    8554:	00083740 	call	8374 <__multadd>
    8558:	a43ff81e 	bne	r20,r16,853c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153653c>
    855c:	ace1883a 	add	r16,r21,r19
    8560:	843ffe04 	addi	r16,r16,-8
    8564:	9c800a0e 	bge	r19,r18,8590 <__s2b+0xd4>
    8568:	94e5c83a 	sub	r18,r18,r19
    856c:	84a5883a 	add	r18,r16,r18
    8570:	81c00007 	ldb	r7,0(r16)
    8574:	01800284 	movi	r6,10
    8578:	84000044 	addi	r16,r16,1
    857c:	100b883a 	mov	r5,r2
    8580:	39fff404 	addi	r7,r7,-48
    8584:	8809883a 	mov	r4,r17
    8588:	00083740 	call	8374 <__multadd>
    858c:	84bff81e 	bne	r16,r18,8570 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536570>
    8590:	dfc00617 	ldw	ra,24(sp)
    8594:	dd400517 	ldw	r21,20(sp)
    8598:	dd000417 	ldw	r20,16(sp)
    859c:	dcc00317 	ldw	r19,12(sp)
    85a0:	dc800217 	ldw	r18,8(sp)
    85a4:	dc400117 	ldw	r17,4(sp)
    85a8:	dc000017 	ldw	r16,0(sp)
    85ac:	dec00704 	addi	sp,sp,28
    85b0:	f800283a 	ret
    85b4:	84000284 	addi	r16,r16,10
    85b8:	1827883a 	mov	r19,r3
    85bc:	003fe906 	br	8564 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536564>

000085c0 <__hi0bits>:
    85c0:	20bfffec 	andhi	r2,r4,65535
    85c4:	1000141e 	bne	r2,zero,8618 <__hi0bits+0x58>
    85c8:	2008943a 	slli	r4,r4,16
    85cc:	00800404 	movi	r2,16
    85d0:	20ffc02c 	andhi	r3,r4,65280
    85d4:	1800021e 	bne	r3,zero,85e0 <__hi0bits+0x20>
    85d8:	2008923a 	slli	r4,r4,8
    85dc:	10800204 	addi	r2,r2,8
    85e0:	20fc002c 	andhi	r3,r4,61440
    85e4:	1800021e 	bne	r3,zero,85f0 <__hi0bits+0x30>
    85e8:	2008913a 	slli	r4,r4,4
    85ec:	10800104 	addi	r2,r2,4
    85f0:	20f0002c 	andhi	r3,r4,49152
    85f4:	1800031e 	bne	r3,zero,8604 <__hi0bits+0x44>
    85f8:	2109883a 	add	r4,r4,r4
    85fc:	10800084 	addi	r2,r2,2
    8600:	2109883a 	add	r4,r4,r4
    8604:	20000316 	blt	r4,zero,8614 <__hi0bits+0x54>
    8608:	2110002c 	andhi	r4,r4,16384
    860c:	2000041e 	bne	r4,zero,8620 <__hi0bits+0x60>
    8610:	00800804 	movi	r2,32
    8614:	f800283a 	ret
    8618:	0005883a 	mov	r2,zero
    861c:	003fec06 	br	85d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215365d0>
    8620:	10800044 	addi	r2,r2,1
    8624:	f800283a 	ret

00008628 <__lo0bits>:
    8628:	20c00017 	ldw	r3,0(r4)
    862c:	188001cc 	andi	r2,r3,7
    8630:	10000826 	beq	r2,zero,8654 <__lo0bits+0x2c>
    8634:	1880004c 	andi	r2,r3,1
    8638:	1000211e 	bne	r2,zero,86c0 <__lo0bits+0x98>
    863c:	1880008c 	andi	r2,r3,2
    8640:	1000211e 	bne	r2,zero,86c8 <__lo0bits+0xa0>
    8644:	1806d0ba 	srli	r3,r3,2
    8648:	00800084 	movi	r2,2
    864c:	20c00015 	stw	r3,0(r4)
    8650:	f800283a 	ret
    8654:	18bfffcc 	andi	r2,r3,65535
    8658:	10001326 	beq	r2,zero,86a8 <__lo0bits+0x80>
    865c:	0005883a 	mov	r2,zero
    8660:	19403fcc 	andi	r5,r3,255
    8664:	2800021e 	bne	r5,zero,8670 <__lo0bits+0x48>
    8668:	1806d23a 	srli	r3,r3,8
    866c:	10800204 	addi	r2,r2,8
    8670:	194003cc 	andi	r5,r3,15
    8674:	2800021e 	bne	r5,zero,8680 <__lo0bits+0x58>
    8678:	1806d13a 	srli	r3,r3,4
    867c:	10800104 	addi	r2,r2,4
    8680:	194000cc 	andi	r5,r3,3
    8684:	2800021e 	bne	r5,zero,8690 <__lo0bits+0x68>
    8688:	1806d0ba 	srli	r3,r3,2
    868c:	10800084 	addi	r2,r2,2
    8690:	1940004c 	andi	r5,r3,1
    8694:	2800081e 	bne	r5,zero,86b8 <__lo0bits+0x90>
    8698:	1806d07a 	srli	r3,r3,1
    869c:	1800051e 	bne	r3,zero,86b4 <__lo0bits+0x8c>
    86a0:	00800804 	movi	r2,32
    86a4:	f800283a 	ret
    86a8:	1806d43a 	srli	r3,r3,16
    86ac:	00800404 	movi	r2,16
    86b0:	003feb06 	br	8660 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536660>
    86b4:	10800044 	addi	r2,r2,1
    86b8:	20c00015 	stw	r3,0(r4)
    86bc:	f800283a 	ret
    86c0:	0005883a 	mov	r2,zero
    86c4:	f800283a 	ret
    86c8:	1806d07a 	srli	r3,r3,1
    86cc:	00800044 	movi	r2,1
    86d0:	20c00015 	stw	r3,0(r4)
    86d4:	f800283a 	ret

000086d8 <__i2b>:
    86d8:	defffd04 	addi	sp,sp,-12
    86dc:	dc000015 	stw	r16,0(sp)
    86e0:	04000044 	movi	r16,1
    86e4:	dc400115 	stw	r17,4(sp)
    86e8:	2823883a 	mov	r17,r5
    86ec:	800b883a 	mov	r5,r16
    86f0:	dfc00215 	stw	ra,8(sp)
    86f4:	00082a40 	call	82a4 <_Balloc>
    86f8:	14400515 	stw	r17,20(r2)
    86fc:	14000415 	stw	r16,16(r2)
    8700:	dfc00217 	ldw	ra,8(sp)
    8704:	dc400117 	ldw	r17,4(sp)
    8708:	dc000017 	ldw	r16,0(sp)
    870c:	dec00304 	addi	sp,sp,12
    8710:	f800283a 	ret

00008714 <__multiply>:
    8714:	deffef04 	addi	sp,sp,-68
    8718:	dc400815 	stw	r17,32(sp)
    871c:	dc000715 	stw	r16,28(sp)
    8720:	34400417 	ldw	r17,16(r6)
    8724:	2c000417 	ldw	r16,16(r5)
    8728:	dd800d15 	stw	r22,52(sp)
    872c:	dc800915 	stw	r18,36(sp)
    8730:	dfc01015 	stw	ra,64(sp)
    8734:	df000f15 	stw	fp,60(sp)
    8738:	ddc00e15 	stw	r23,56(sp)
    873c:	dd400c15 	stw	r21,48(sp)
    8740:	dd000b15 	stw	r20,44(sp)
    8744:	dcc00a15 	stw	r19,40(sp)
    8748:	2825883a 	mov	r18,r5
    874c:	302d883a 	mov	r22,r6
    8750:	8440050e 	bge	r16,r17,8768 <__multiply+0x54>
    8754:	8007883a 	mov	r3,r16
    8758:	3025883a 	mov	r18,r6
    875c:	8821883a 	mov	r16,r17
    8760:	282d883a 	mov	r22,r5
    8764:	1823883a 	mov	r17,r3
    8768:	90800217 	ldw	r2,8(r18)
    876c:	8447883a 	add	r3,r16,r17
    8770:	d8c00215 	stw	r3,8(sp)
    8774:	91400117 	ldw	r5,4(r18)
    8778:	10c0010e 	bge	r2,r3,8780 <__multiply+0x6c>
    877c:	29400044 	addi	r5,r5,1
    8780:	00082a40 	call	82a4 <_Balloc>
    8784:	d8c00217 	ldw	r3,8(sp)
    8788:	d8800615 	stw	r2,24(sp)
    878c:	18eb883a 	add	r21,r3,r3
    8790:	ad6b883a 	add	r21,r21,r21
    8794:	10c00504 	addi	r3,r2,20
    8798:	1d6b883a 	add	r21,r3,r21
    879c:	d8c00115 	stw	r3,4(sp)
    87a0:	dd400315 	stw	r21,12(sp)
    87a4:	1805883a 	mov	r2,r3
    87a8:	1d40042e 	bgeu	r3,r21,87bc <__multiply+0xa8>
    87ac:	d8c00317 	ldw	r3,12(sp)
    87b0:	10000015 	stw	zero,0(r2)
    87b4:	10800104 	addi	r2,r2,4
    87b8:	10fffc36 	bltu	r2,r3,87ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215367ac>
    87bc:	8c63883a 	add	r17,r17,r17
    87c0:	b5800504 	addi	r22,r22,20
    87c4:	8c63883a 	add	r17,r17,r17
    87c8:	94800504 	addi	r18,r18,20
    87cc:	8421883a 	add	r16,r16,r16
    87d0:	b463883a 	add	r17,r22,r17
    87d4:	8421883a 	add	r16,r16,r16
    87d8:	dd800015 	stw	r22,0(sp)
    87dc:	dc800415 	stw	r18,16(sp)
    87e0:	dc400515 	stw	r17,20(sp)
    87e4:	9429883a 	add	r20,r18,r16
    87e8:	b4404f2e 	bgeu	r22,r17,8928 <__multiply+0x214>
    87ec:	d8c00017 	ldw	r3,0(sp)
    87f0:	1c800017 	ldw	r18,0(r3)
    87f4:	947fffcc 	andi	r17,r18,65535
    87f8:	88001e26 	beq	r17,zero,8874 <__multiply+0x160>
    87fc:	dd800117 	ldw	r22,4(sp)
    8800:	dd400417 	ldw	r21,16(sp)
    8804:	0027883a 	mov	r19,zero
    8808:	ac800017 	ldw	r18,0(r21)
    880c:	b4000017 	ldw	r16,0(r22)
    8810:	880b883a 	mov	r5,r17
    8814:	913fffcc 	andi	r4,r18,65535
    8818:	00020100 	call	2010 <__mulsi3>
    881c:	9008d43a 	srli	r4,r18,16
    8820:	84bfffcc 	andi	r18,r16,65535
    8824:	1485883a 	add	r2,r2,r18
    8828:	14e5883a 	add	r18,r2,r19
    882c:	8020d43a 	srli	r16,r16,16
    8830:	9026d43a 	srli	r19,r18,16
    8834:	880b883a 	mov	r5,r17
    8838:	00020100 	call	2010 <__mulsi3>
    883c:	1405883a 	add	r2,r2,r16
    8840:	14e1883a 	add	r16,r2,r19
    8844:	90ffffcc 	andi	r3,r18,65535
    8848:	8024943a 	slli	r18,r16,16
    884c:	ad400104 	addi	r21,r21,4
    8850:	b005883a 	mov	r2,r22
    8854:	90c6b03a 	or	r3,r18,r3
    8858:	b0c00015 	stw	r3,0(r22)
    885c:	8026d43a 	srli	r19,r16,16
    8860:	b5800104 	addi	r22,r22,4
    8864:	ad3fe836 	bltu	r21,r20,8808 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536808>
    8868:	d8c00017 	ldw	r3,0(sp)
    886c:	14c00115 	stw	r19,4(r2)
    8870:	1c800017 	ldw	r18,0(r3)
    8874:	9024d43a 	srli	r18,r18,16
    8878:	90002226 	beq	r18,zero,8904 <__multiply+0x1f0>
    887c:	d8c00117 	ldw	r3,4(sp)
    8880:	dd800417 	ldw	r22,16(sp)
    8884:	002f883a 	mov	r23,zero
    8888:	1f000017 	ldw	fp,0(r3)
    888c:	1823883a 	mov	r17,r3
    8890:	182b883a 	mov	r21,r3
    8894:	e021883a 	mov	r16,fp
    8898:	00000106 	br	88a0 <__multiply+0x18c>
    889c:	982b883a 	mov	r21,r19
    88a0:	b100000b 	ldhu	r4,0(r22)
    88a4:	8020d43a 	srli	r16,r16,16
    88a8:	900b883a 	mov	r5,r18
    88ac:	00020100 	call	2010 <__mulsi3>
    88b0:	1405883a 	add	r2,r2,r16
    88b4:	15ef883a 	add	r23,r2,r23
    88b8:	b804943a 	slli	r2,r23,16
    88bc:	e0ffffcc 	andi	r3,fp,65535
    88c0:	8c400104 	addi	r17,r17,4
    88c4:	10c6b03a 	or	r3,r2,r3
    88c8:	88ffff15 	stw	r3,-4(r17)
    88cc:	b5800104 	addi	r22,r22,4
    88d0:	b13fff17 	ldw	r4,-4(r22)
    88d4:	acc00104 	addi	r19,r21,4
    88d8:	900b883a 	mov	r5,r18
    88dc:	2008d43a 	srli	r4,r4,16
    88e0:	9c000017 	ldw	r16,0(r19)
    88e4:	00020100 	call	2010 <__mulsi3>
    88e8:	b806d43a 	srli	r3,r23,16
    88ec:	813fffcc 	andi	r4,r16,65535
    88f0:	1105883a 	add	r2,r2,r4
    88f4:	10f9883a 	add	fp,r2,r3
    88f8:	e02ed43a 	srli	r23,fp,16
    88fc:	b53fe736 	bltu	r22,r20,889c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153689c>
    8900:	af000115 	stw	fp,4(r21)
    8904:	d8c00017 	ldw	r3,0(sp)
    8908:	d9000517 	ldw	r4,20(sp)
    890c:	18c00104 	addi	r3,r3,4
    8910:	d8c00015 	stw	r3,0(sp)
    8914:	d8c00117 	ldw	r3,4(sp)
    8918:	18c00104 	addi	r3,r3,4
    891c:	d8c00115 	stw	r3,4(sp)
    8920:	d8c00017 	ldw	r3,0(sp)
    8924:	193fb136 	bltu	r3,r4,87ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215367ec>
    8928:	d8c00217 	ldw	r3,8(sp)
    892c:	00c00c0e 	bge	zero,r3,8960 <__multiply+0x24c>
    8930:	d8c00317 	ldw	r3,12(sp)
    8934:	18bfff17 	ldw	r2,-4(r3)
    8938:	1d7fff04 	addi	r21,r3,-4
    893c:	10000326 	beq	r2,zero,894c <__multiply+0x238>
    8940:	00000706 	br	8960 <__multiply+0x24c>
    8944:	a8800017 	ldw	r2,0(r21)
    8948:	1000051e 	bne	r2,zero,8960 <__multiply+0x24c>
    894c:	d8c00217 	ldw	r3,8(sp)
    8950:	ad7fff04 	addi	r21,r21,-4
    8954:	18ffffc4 	addi	r3,r3,-1
    8958:	d8c00215 	stw	r3,8(sp)
    895c:	183ff91e 	bne	r3,zero,8944 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536944>
    8960:	d8c00617 	ldw	r3,24(sp)
    8964:	d9000217 	ldw	r4,8(sp)
    8968:	1805883a 	mov	r2,r3
    896c:	19000415 	stw	r4,16(r3)
    8970:	dfc01017 	ldw	ra,64(sp)
    8974:	df000f17 	ldw	fp,60(sp)
    8978:	ddc00e17 	ldw	r23,56(sp)
    897c:	dd800d17 	ldw	r22,52(sp)
    8980:	dd400c17 	ldw	r21,48(sp)
    8984:	dd000b17 	ldw	r20,44(sp)
    8988:	dcc00a17 	ldw	r19,40(sp)
    898c:	dc800917 	ldw	r18,36(sp)
    8990:	dc400817 	ldw	r17,32(sp)
    8994:	dc000717 	ldw	r16,28(sp)
    8998:	dec01104 	addi	sp,sp,68
    899c:	f800283a 	ret

000089a0 <__pow5mult>:
    89a0:	defffa04 	addi	sp,sp,-24
    89a4:	dcc00315 	stw	r19,12(sp)
    89a8:	dc000015 	stw	r16,0(sp)
    89ac:	dfc00515 	stw	ra,20(sp)
    89b0:	dd000415 	stw	r20,16(sp)
    89b4:	dc800215 	stw	r18,8(sp)
    89b8:	dc400115 	stw	r17,4(sp)
    89bc:	308000cc 	andi	r2,r6,3
    89c0:	3021883a 	mov	r16,r6
    89c4:	2027883a 	mov	r19,r4
    89c8:	10002f1e 	bne	r2,zero,8a88 <__pow5mult+0xe8>
    89cc:	2825883a 	mov	r18,r5
    89d0:	8021d0ba 	srai	r16,r16,2
    89d4:	80001a26 	beq	r16,zero,8a40 <__pow5mult+0xa0>
    89d8:	9c401217 	ldw	r17,72(r19)
    89dc:	8800061e 	bne	r17,zero,89f8 <__pow5mult+0x58>
    89e0:	00003406 	br	8ab4 <__pow5mult+0x114>
    89e4:	8021d07a 	srai	r16,r16,1
    89e8:	80001526 	beq	r16,zero,8a40 <__pow5mult+0xa0>
    89ec:	88800017 	ldw	r2,0(r17)
    89f0:	10001c26 	beq	r2,zero,8a64 <__pow5mult+0xc4>
    89f4:	1023883a 	mov	r17,r2
    89f8:	8080004c 	andi	r2,r16,1
    89fc:	103ff926 	beq	r2,zero,89e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215369e4>
    8a00:	880d883a 	mov	r6,r17
    8a04:	900b883a 	mov	r5,r18
    8a08:	9809883a 	mov	r4,r19
    8a0c:	00087140 	call	8714 <__multiply>
    8a10:	90001b26 	beq	r18,zero,8a80 <__pow5mult+0xe0>
    8a14:	91000117 	ldw	r4,4(r18)
    8a18:	98c01317 	ldw	r3,76(r19)
    8a1c:	8021d07a 	srai	r16,r16,1
    8a20:	2109883a 	add	r4,r4,r4
    8a24:	2109883a 	add	r4,r4,r4
    8a28:	1907883a 	add	r3,r3,r4
    8a2c:	19000017 	ldw	r4,0(r3)
    8a30:	91000015 	stw	r4,0(r18)
    8a34:	1c800015 	stw	r18,0(r3)
    8a38:	1025883a 	mov	r18,r2
    8a3c:	803feb1e 	bne	r16,zero,89ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215369ec>
    8a40:	9005883a 	mov	r2,r18
    8a44:	dfc00517 	ldw	ra,20(sp)
    8a48:	dd000417 	ldw	r20,16(sp)
    8a4c:	dcc00317 	ldw	r19,12(sp)
    8a50:	dc800217 	ldw	r18,8(sp)
    8a54:	dc400117 	ldw	r17,4(sp)
    8a58:	dc000017 	ldw	r16,0(sp)
    8a5c:	dec00604 	addi	sp,sp,24
    8a60:	f800283a 	ret
    8a64:	880d883a 	mov	r6,r17
    8a68:	880b883a 	mov	r5,r17
    8a6c:	9809883a 	mov	r4,r19
    8a70:	00087140 	call	8714 <__multiply>
    8a74:	88800015 	stw	r2,0(r17)
    8a78:	10000015 	stw	zero,0(r2)
    8a7c:	003fdd06 	br	89f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215369f4>
    8a80:	1025883a 	mov	r18,r2
    8a84:	003fd706 	br	89e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215369e4>
    8a88:	10bfffc4 	addi	r2,r2,-1
    8a8c:	1085883a 	add	r2,r2,r2
    8a90:	00c00074 	movhi	r3,1
    8a94:	18d3a904 	addi	r3,r3,20132
    8a98:	1085883a 	add	r2,r2,r2
    8a9c:	1885883a 	add	r2,r3,r2
    8aa0:	11800017 	ldw	r6,0(r2)
    8aa4:	000f883a 	mov	r7,zero
    8aa8:	00083740 	call	8374 <__multadd>
    8aac:	1025883a 	mov	r18,r2
    8ab0:	003fc706 	br	89d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215369d0>
    8ab4:	05000044 	movi	r20,1
    8ab8:	a00b883a 	mov	r5,r20
    8abc:	9809883a 	mov	r4,r19
    8ac0:	00082a40 	call	82a4 <_Balloc>
    8ac4:	1023883a 	mov	r17,r2
    8ac8:	00809c44 	movi	r2,625
    8acc:	88800515 	stw	r2,20(r17)
    8ad0:	8d000415 	stw	r20,16(r17)
    8ad4:	9c401215 	stw	r17,72(r19)
    8ad8:	88000015 	stw	zero,0(r17)
    8adc:	003fc606 	br	89f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215369f8>

00008ae0 <__lshift>:
    8ae0:	defff904 	addi	sp,sp,-28
    8ae4:	dd400515 	stw	r21,20(sp)
    8ae8:	dcc00315 	stw	r19,12(sp)
    8aec:	302bd17a 	srai	r21,r6,5
    8af0:	2cc00417 	ldw	r19,16(r5)
    8af4:	28800217 	ldw	r2,8(r5)
    8af8:	dd000415 	stw	r20,16(sp)
    8afc:	ace7883a 	add	r19,r21,r19
    8b00:	dc800215 	stw	r18,8(sp)
    8b04:	dc400115 	stw	r17,4(sp)
    8b08:	dc000015 	stw	r16,0(sp)
    8b0c:	dfc00615 	stw	ra,24(sp)
    8b10:	9c000044 	addi	r16,r19,1
    8b14:	2823883a 	mov	r17,r5
    8b18:	3029883a 	mov	r20,r6
    8b1c:	2025883a 	mov	r18,r4
    8b20:	29400117 	ldw	r5,4(r5)
    8b24:	1400030e 	bge	r2,r16,8b34 <__lshift+0x54>
    8b28:	1085883a 	add	r2,r2,r2
    8b2c:	29400044 	addi	r5,r5,1
    8b30:	143ffd16 	blt	r2,r16,8b28 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536b28>
    8b34:	9009883a 	mov	r4,r18
    8b38:	00082a40 	call	82a4 <_Balloc>
    8b3c:	10c00504 	addi	r3,r2,20
    8b40:	0540070e 	bge	zero,r21,8b60 <__lshift+0x80>
    8b44:	ad6b883a 	add	r21,r21,r21
    8b48:	ad6b883a 	add	r21,r21,r21
    8b4c:	1809883a 	mov	r4,r3
    8b50:	1d47883a 	add	r3,r3,r21
    8b54:	20000015 	stw	zero,0(r4)
    8b58:	21000104 	addi	r4,r4,4
    8b5c:	193ffd1e 	bne	r3,r4,8b54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536b54>
    8b60:	8a000417 	ldw	r8,16(r17)
    8b64:	89000504 	addi	r4,r17,20
    8b68:	a18007cc 	andi	r6,r20,31
    8b6c:	4211883a 	add	r8,r8,r8
    8b70:	4211883a 	add	r8,r8,r8
    8b74:	2211883a 	add	r8,r4,r8
    8b78:	30002326 	beq	r6,zero,8c08 <__lshift+0x128>
    8b7c:	02400804 	movi	r9,32
    8b80:	4993c83a 	sub	r9,r9,r6
    8b84:	000b883a 	mov	r5,zero
    8b88:	21c00017 	ldw	r7,0(r4)
    8b8c:	1815883a 	mov	r10,r3
    8b90:	18c00104 	addi	r3,r3,4
    8b94:	398e983a 	sll	r7,r7,r6
    8b98:	21000104 	addi	r4,r4,4
    8b9c:	394ab03a 	or	r5,r7,r5
    8ba0:	197fff15 	stw	r5,-4(r3)
    8ba4:	217fff17 	ldw	r5,-4(r4)
    8ba8:	2a4ad83a 	srl	r5,r5,r9
    8bac:	223ff636 	bltu	r4,r8,8b88 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536b88>
    8bb0:	51400115 	stw	r5,4(r10)
    8bb4:	28001a1e 	bne	r5,zero,8c20 <__lshift+0x140>
    8bb8:	843fffc4 	addi	r16,r16,-1
    8bbc:	14000415 	stw	r16,16(r2)
    8bc0:	88000826 	beq	r17,zero,8be4 <__lshift+0x104>
    8bc4:	89000117 	ldw	r4,4(r17)
    8bc8:	90c01317 	ldw	r3,76(r18)
    8bcc:	2109883a 	add	r4,r4,r4
    8bd0:	2109883a 	add	r4,r4,r4
    8bd4:	1907883a 	add	r3,r3,r4
    8bd8:	19000017 	ldw	r4,0(r3)
    8bdc:	89000015 	stw	r4,0(r17)
    8be0:	1c400015 	stw	r17,0(r3)
    8be4:	dfc00617 	ldw	ra,24(sp)
    8be8:	dd400517 	ldw	r21,20(sp)
    8bec:	dd000417 	ldw	r20,16(sp)
    8bf0:	dcc00317 	ldw	r19,12(sp)
    8bf4:	dc800217 	ldw	r18,8(sp)
    8bf8:	dc400117 	ldw	r17,4(sp)
    8bfc:	dc000017 	ldw	r16,0(sp)
    8c00:	dec00704 	addi	sp,sp,28
    8c04:	f800283a 	ret
    8c08:	21400017 	ldw	r5,0(r4)
    8c0c:	18c00104 	addi	r3,r3,4
    8c10:	21000104 	addi	r4,r4,4
    8c14:	197fff15 	stw	r5,-4(r3)
    8c18:	223ffb36 	bltu	r4,r8,8c08 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536c08>
    8c1c:	003fe606 	br	8bb8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536bb8>
    8c20:	9c000084 	addi	r16,r19,2
    8c24:	003fe406 	br	8bb8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536bb8>

00008c28 <__mcmp>:
    8c28:	20800417 	ldw	r2,16(r4)
    8c2c:	28c00417 	ldw	r3,16(r5)
    8c30:	10c5c83a 	sub	r2,r2,r3
    8c34:	1000111e 	bne	r2,zero,8c7c <__mcmp+0x54>
    8c38:	18c7883a 	add	r3,r3,r3
    8c3c:	18c7883a 	add	r3,r3,r3
    8c40:	21000504 	addi	r4,r4,20
    8c44:	29400504 	addi	r5,r5,20
    8c48:	20c5883a 	add	r2,r4,r3
    8c4c:	28cb883a 	add	r5,r5,r3
    8c50:	00000106 	br	8c58 <__mcmp+0x30>
    8c54:	20800a2e 	bgeu	r4,r2,8c80 <__mcmp+0x58>
    8c58:	10bfff04 	addi	r2,r2,-4
    8c5c:	297fff04 	addi	r5,r5,-4
    8c60:	11800017 	ldw	r6,0(r2)
    8c64:	28c00017 	ldw	r3,0(r5)
    8c68:	30fffa26 	beq	r6,r3,8c54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536c54>
    8c6c:	30c00236 	bltu	r6,r3,8c78 <__mcmp+0x50>
    8c70:	00800044 	movi	r2,1
    8c74:	f800283a 	ret
    8c78:	00bfffc4 	movi	r2,-1
    8c7c:	f800283a 	ret
    8c80:	0005883a 	mov	r2,zero
    8c84:	f800283a 	ret

00008c88 <__mdiff>:
    8c88:	28c00417 	ldw	r3,16(r5)
    8c8c:	30800417 	ldw	r2,16(r6)
    8c90:	defffa04 	addi	sp,sp,-24
    8c94:	dcc00315 	stw	r19,12(sp)
    8c98:	dc800215 	stw	r18,8(sp)
    8c9c:	dfc00515 	stw	ra,20(sp)
    8ca0:	dd000415 	stw	r20,16(sp)
    8ca4:	dc400115 	stw	r17,4(sp)
    8ca8:	dc000015 	stw	r16,0(sp)
    8cac:	1887c83a 	sub	r3,r3,r2
    8cb0:	2825883a 	mov	r18,r5
    8cb4:	3027883a 	mov	r19,r6
    8cb8:	1800141e 	bne	r3,zero,8d0c <__mdiff+0x84>
    8cbc:	1085883a 	add	r2,r2,r2
    8cc0:	1085883a 	add	r2,r2,r2
    8cc4:	2a000504 	addi	r8,r5,20
    8cc8:	34000504 	addi	r16,r6,20
    8ccc:	4087883a 	add	r3,r8,r2
    8cd0:	8085883a 	add	r2,r16,r2
    8cd4:	00000106 	br	8cdc <__mdiff+0x54>
    8cd8:	40c0592e 	bgeu	r8,r3,8e40 <__mdiff+0x1b8>
    8cdc:	18ffff04 	addi	r3,r3,-4
    8ce0:	10bfff04 	addi	r2,r2,-4
    8ce4:	19c00017 	ldw	r7,0(r3)
    8ce8:	11400017 	ldw	r5,0(r2)
    8cec:	397ffa26 	beq	r7,r5,8cd8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536cd8>
    8cf0:	3940592e 	bgeu	r7,r5,8e58 <__mdiff+0x1d0>
    8cf4:	9005883a 	mov	r2,r18
    8cf8:	4023883a 	mov	r17,r8
    8cfc:	9825883a 	mov	r18,r19
    8d00:	05000044 	movi	r20,1
    8d04:	1027883a 	mov	r19,r2
    8d08:	00000406 	br	8d1c <__mdiff+0x94>
    8d0c:	18005616 	blt	r3,zero,8e68 <__mdiff+0x1e0>
    8d10:	34400504 	addi	r17,r6,20
    8d14:	2c000504 	addi	r16,r5,20
    8d18:	0029883a 	mov	r20,zero
    8d1c:	91400117 	ldw	r5,4(r18)
    8d20:	00082a40 	call	82a4 <_Balloc>
    8d24:	92400417 	ldw	r9,16(r18)
    8d28:	9b000417 	ldw	r12,16(r19)
    8d2c:	12c00504 	addi	r11,r2,20
    8d30:	4a51883a 	add	r8,r9,r9
    8d34:	6319883a 	add	r12,r12,r12
    8d38:	4211883a 	add	r8,r8,r8
    8d3c:	6319883a 	add	r12,r12,r12
    8d40:	15000315 	stw	r20,12(r2)
    8d44:	8211883a 	add	r8,r16,r8
    8d48:	8b19883a 	add	r12,r17,r12
    8d4c:	0007883a 	mov	r3,zero
    8d50:	81400017 	ldw	r5,0(r16)
    8d54:	89c00017 	ldw	r7,0(r17)
    8d58:	59800104 	addi	r6,r11,4
    8d5c:	293fffcc 	andi	r4,r5,65535
    8d60:	20c7883a 	add	r3,r4,r3
    8d64:	393fffcc 	andi	r4,r7,65535
    8d68:	1909c83a 	sub	r4,r3,r4
    8d6c:	280ad43a 	srli	r5,r5,16
    8d70:	380ed43a 	srli	r7,r7,16
    8d74:	2007d43a 	srai	r3,r4,16
    8d78:	213fffcc 	andi	r4,r4,65535
    8d7c:	29cbc83a 	sub	r5,r5,r7
    8d80:	28c7883a 	add	r3,r5,r3
    8d84:	180a943a 	slli	r5,r3,16
    8d88:	8c400104 	addi	r17,r17,4
    8d8c:	84000104 	addi	r16,r16,4
    8d90:	2908b03a 	or	r4,r5,r4
    8d94:	59000015 	stw	r4,0(r11)
    8d98:	1807d43a 	srai	r3,r3,16
    8d9c:	3015883a 	mov	r10,r6
    8da0:	3017883a 	mov	r11,r6
    8da4:	8b3fea36 	bltu	r17,r12,8d50 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536d50>
    8da8:	8200162e 	bgeu	r16,r8,8e04 <__mdiff+0x17c>
    8dac:	8017883a 	mov	r11,r16
    8db0:	59400017 	ldw	r5,0(r11)
    8db4:	31800104 	addi	r6,r6,4
    8db8:	5ac00104 	addi	r11,r11,4
    8dbc:	293fffcc 	andi	r4,r5,65535
    8dc0:	20c7883a 	add	r3,r4,r3
    8dc4:	280ed43a 	srli	r7,r5,16
    8dc8:	180bd43a 	srai	r5,r3,16
    8dcc:	193fffcc 	andi	r4,r3,65535
    8dd0:	3947883a 	add	r3,r7,r5
    8dd4:	180a943a 	slli	r5,r3,16
    8dd8:	1807d43a 	srai	r3,r3,16
    8ddc:	2908b03a 	or	r4,r5,r4
    8de0:	313fff15 	stw	r4,-4(r6)
    8de4:	5a3ff236 	bltu	r11,r8,8db0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536db0>
    8de8:	0406303a 	nor	r3,zero,r16
    8dec:	1a07883a 	add	r3,r3,r8
    8df0:	1806d0ba 	srli	r3,r3,2
    8df4:	18c00044 	addi	r3,r3,1
    8df8:	18c7883a 	add	r3,r3,r3
    8dfc:	18c7883a 	add	r3,r3,r3
    8e00:	50d5883a 	add	r10,r10,r3
    8e04:	50ffff04 	addi	r3,r10,-4
    8e08:	2000041e 	bne	r4,zero,8e1c <__mdiff+0x194>
    8e0c:	18ffff04 	addi	r3,r3,-4
    8e10:	19000017 	ldw	r4,0(r3)
    8e14:	4a7fffc4 	addi	r9,r9,-1
    8e18:	203ffc26 	beq	r4,zero,8e0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536e0c>
    8e1c:	12400415 	stw	r9,16(r2)
    8e20:	dfc00517 	ldw	ra,20(sp)
    8e24:	dd000417 	ldw	r20,16(sp)
    8e28:	dcc00317 	ldw	r19,12(sp)
    8e2c:	dc800217 	ldw	r18,8(sp)
    8e30:	dc400117 	ldw	r17,4(sp)
    8e34:	dc000017 	ldw	r16,0(sp)
    8e38:	dec00604 	addi	sp,sp,24
    8e3c:	f800283a 	ret
    8e40:	000b883a 	mov	r5,zero
    8e44:	00082a40 	call	82a4 <_Balloc>
    8e48:	00c00044 	movi	r3,1
    8e4c:	10c00415 	stw	r3,16(r2)
    8e50:	10000515 	stw	zero,20(r2)
    8e54:	003ff206 	br	8e20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536e20>
    8e58:	8023883a 	mov	r17,r16
    8e5c:	0029883a 	mov	r20,zero
    8e60:	4021883a 	mov	r16,r8
    8e64:	003fad06 	br	8d1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536d1c>
    8e68:	9005883a 	mov	r2,r18
    8e6c:	94400504 	addi	r17,r18,20
    8e70:	9c000504 	addi	r16,r19,20
    8e74:	9825883a 	mov	r18,r19
    8e78:	05000044 	movi	r20,1
    8e7c:	1027883a 	mov	r19,r2
    8e80:	003fa606 	br	8d1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536d1c>

00008e84 <__ulp>:
    8e84:	295ffc2c 	andhi	r5,r5,32752
    8e88:	00bf3034 	movhi	r2,64704
    8e8c:	2887883a 	add	r3,r5,r2
    8e90:	00c0020e 	bge	zero,r3,8e9c <__ulp+0x18>
    8e94:	0005883a 	mov	r2,zero
    8e98:	f800283a 	ret
    8e9c:	00c7c83a 	sub	r3,zero,r3
    8ea0:	1807d53a 	srai	r3,r3,20
    8ea4:	008004c4 	movi	r2,19
    8ea8:	10c00b0e 	bge	r2,r3,8ed8 <__ulp+0x54>
    8eac:	18bffb04 	addi	r2,r3,-20
    8eb0:	01000784 	movi	r4,30
    8eb4:	0007883a 	mov	r3,zero
    8eb8:	20800516 	blt	r4,r2,8ed0 <__ulp+0x4c>
    8ebc:	010007c4 	movi	r4,31
    8ec0:	2089c83a 	sub	r4,r4,r2
    8ec4:	00800044 	movi	r2,1
    8ec8:	1104983a 	sll	r2,r2,r4
    8ecc:	f800283a 	ret
    8ed0:	00800044 	movi	r2,1
    8ed4:	f800283a 	ret
    8ed8:	01400234 	movhi	r5,8
    8edc:	28c7d83a 	sra	r3,r5,r3
    8ee0:	0005883a 	mov	r2,zero
    8ee4:	f800283a 	ret

00008ee8 <__b2d>:
    8ee8:	defffa04 	addi	sp,sp,-24
    8eec:	dc000015 	stw	r16,0(sp)
    8ef0:	24000417 	ldw	r16,16(r4)
    8ef4:	dc400115 	stw	r17,4(sp)
    8ef8:	24400504 	addi	r17,r4,20
    8efc:	8421883a 	add	r16,r16,r16
    8f00:	8421883a 	add	r16,r16,r16
    8f04:	8c21883a 	add	r16,r17,r16
    8f08:	dc800215 	stw	r18,8(sp)
    8f0c:	84bfff17 	ldw	r18,-4(r16)
    8f10:	dd000415 	stw	r20,16(sp)
    8f14:	dcc00315 	stw	r19,12(sp)
    8f18:	9009883a 	mov	r4,r18
    8f1c:	2829883a 	mov	r20,r5
    8f20:	dfc00515 	stw	ra,20(sp)
    8f24:	00085c00 	call	85c0 <__hi0bits>
    8f28:	00c00804 	movi	r3,32
    8f2c:	1889c83a 	sub	r4,r3,r2
    8f30:	a1000015 	stw	r4,0(r20)
    8f34:	01000284 	movi	r4,10
    8f38:	84ffff04 	addi	r19,r16,-4
    8f3c:	20801216 	blt	r4,r2,8f88 <__b2d+0xa0>
    8f40:	018002c4 	movi	r6,11
    8f44:	308dc83a 	sub	r6,r6,r2
    8f48:	9186d83a 	srl	r3,r18,r6
    8f4c:	18cffc34 	orhi	r3,r3,16368
    8f50:	8cc0212e 	bgeu	r17,r19,8fd8 <__b2d+0xf0>
    8f54:	813ffe17 	ldw	r4,-8(r16)
    8f58:	218cd83a 	srl	r6,r4,r6
    8f5c:	10800544 	addi	r2,r2,21
    8f60:	9084983a 	sll	r2,r18,r2
    8f64:	1184b03a 	or	r2,r2,r6
    8f68:	dfc00517 	ldw	ra,20(sp)
    8f6c:	dd000417 	ldw	r20,16(sp)
    8f70:	dcc00317 	ldw	r19,12(sp)
    8f74:	dc800217 	ldw	r18,8(sp)
    8f78:	dc400117 	ldw	r17,4(sp)
    8f7c:	dc000017 	ldw	r16,0(sp)
    8f80:	dec00604 	addi	sp,sp,24
    8f84:	f800283a 	ret
    8f88:	8cc00f2e 	bgeu	r17,r19,8fc8 <__b2d+0xe0>
    8f8c:	117ffd44 	addi	r5,r2,-11
    8f90:	80bffe17 	ldw	r2,-8(r16)
    8f94:	28000e26 	beq	r5,zero,8fd0 <__b2d+0xe8>
    8f98:	1949c83a 	sub	r4,r3,r5
    8f9c:	9164983a 	sll	r18,r18,r5
    8fa0:	1106d83a 	srl	r3,r2,r4
    8fa4:	81bffe04 	addi	r6,r16,-8
    8fa8:	948ffc34 	orhi	r18,r18,16368
    8fac:	90c6b03a 	or	r3,r18,r3
    8fb0:	89800e2e 	bgeu	r17,r6,8fec <__b2d+0x104>
    8fb4:	81bffd17 	ldw	r6,-12(r16)
    8fb8:	1144983a 	sll	r2,r2,r5
    8fbc:	310ad83a 	srl	r5,r6,r4
    8fc0:	2884b03a 	or	r2,r5,r2
    8fc4:	003fe806 	br	8f68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536f68>
    8fc8:	10bffd44 	addi	r2,r2,-11
    8fcc:	1000041e 	bne	r2,zero,8fe0 <__b2d+0xf8>
    8fd0:	90cffc34 	orhi	r3,r18,16368
    8fd4:	003fe406 	br	8f68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536f68>
    8fd8:	000d883a 	mov	r6,zero
    8fdc:	003fdf06 	br	8f5c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536f5c>
    8fe0:	90a4983a 	sll	r18,r18,r2
    8fe4:	0005883a 	mov	r2,zero
    8fe8:	003ff906 	br	8fd0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536fd0>
    8fec:	1144983a 	sll	r2,r2,r5
    8ff0:	003fdd06 	br	8f68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21536f68>

00008ff4 <__d2b>:
    8ff4:	defff804 	addi	sp,sp,-32
    8ff8:	dc000215 	stw	r16,8(sp)
    8ffc:	3021883a 	mov	r16,r6
    9000:	dc400315 	stw	r17,12(sp)
    9004:	8022907a 	slli	r17,r16,1
    9008:	dd000615 	stw	r20,24(sp)
    900c:	2829883a 	mov	r20,r5
    9010:	01400044 	movi	r5,1
    9014:	dcc00515 	stw	r19,20(sp)
    9018:	dc800415 	stw	r18,16(sp)
    901c:	dfc00715 	stw	ra,28(sp)
    9020:	3825883a 	mov	r18,r7
    9024:	8822d57a 	srli	r17,r17,21
    9028:	00082a40 	call	82a4 <_Balloc>
    902c:	1027883a 	mov	r19,r2
    9030:	00800434 	movhi	r2,16
    9034:	10bfffc4 	addi	r2,r2,-1
    9038:	808c703a 	and	r6,r16,r2
    903c:	88000126 	beq	r17,zero,9044 <__d2b+0x50>
    9040:	31800434 	orhi	r6,r6,16
    9044:	d9800015 	stw	r6,0(sp)
    9048:	a0002426 	beq	r20,zero,90dc <__d2b+0xe8>
    904c:	d9000104 	addi	r4,sp,4
    9050:	dd000115 	stw	r20,4(sp)
    9054:	00086280 	call	8628 <__lo0bits>
    9058:	d8c00017 	ldw	r3,0(sp)
    905c:	10002f1e 	bne	r2,zero,911c <__d2b+0x128>
    9060:	d9000117 	ldw	r4,4(sp)
    9064:	99000515 	stw	r4,20(r19)
    9068:	1821003a 	cmpeq	r16,r3,zero
    906c:	01000084 	movi	r4,2
    9070:	2421c83a 	sub	r16,r4,r16
    9074:	98c00615 	stw	r3,24(r19)
    9078:	9c000415 	stw	r16,16(r19)
    907c:	88001f1e 	bne	r17,zero,90fc <__d2b+0x108>
    9080:	10bef384 	addi	r2,r2,-1074
    9084:	90800015 	stw	r2,0(r18)
    9088:	00900034 	movhi	r2,16384
    908c:	10bfffc4 	addi	r2,r2,-1
    9090:	8085883a 	add	r2,r16,r2
    9094:	1085883a 	add	r2,r2,r2
    9098:	1085883a 	add	r2,r2,r2
    909c:	9885883a 	add	r2,r19,r2
    90a0:	11000517 	ldw	r4,20(r2)
    90a4:	8020917a 	slli	r16,r16,5
    90a8:	00085c00 	call	85c0 <__hi0bits>
    90ac:	d8c00817 	ldw	r3,32(sp)
    90b0:	8085c83a 	sub	r2,r16,r2
    90b4:	18800015 	stw	r2,0(r3)
    90b8:	9805883a 	mov	r2,r19
    90bc:	dfc00717 	ldw	ra,28(sp)
    90c0:	dd000617 	ldw	r20,24(sp)
    90c4:	dcc00517 	ldw	r19,20(sp)
    90c8:	dc800417 	ldw	r18,16(sp)
    90cc:	dc400317 	ldw	r17,12(sp)
    90d0:	dc000217 	ldw	r16,8(sp)
    90d4:	dec00804 	addi	sp,sp,32
    90d8:	f800283a 	ret
    90dc:	d809883a 	mov	r4,sp
    90e0:	00086280 	call	8628 <__lo0bits>
    90e4:	d8c00017 	ldw	r3,0(sp)
    90e8:	04000044 	movi	r16,1
    90ec:	9c000415 	stw	r16,16(r19)
    90f0:	98c00515 	stw	r3,20(r19)
    90f4:	10800804 	addi	r2,r2,32
    90f8:	883fe126 	beq	r17,zero,9080 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537080>
    90fc:	00c00d44 	movi	r3,53
    9100:	8c7ef344 	addi	r17,r17,-1075
    9104:	88a3883a 	add	r17,r17,r2
    9108:	1885c83a 	sub	r2,r3,r2
    910c:	d8c00817 	ldw	r3,32(sp)
    9110:	94400015 	stw	r17,0(r18)
    9114:	18800015 	stw	r2,0(r3)
    9118:	003fe706 	br	90b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215370b8>
    911c:	01000804 	movi	r4,32
    9120:	2089c83a 	sub	r4,r4,r2
    9124:	1908983a 	sll	r4,r3,r4
    9128:	d9400117 	ldw	r5,4(sp)
    912c:	1886d83a 	srl	r3,r3,r2
    9130:	2148b03a 	or	r4,r4,r5
    9134:	99000515 	stw	r4,20(r19)
    9138:	d8c00015 	stw	r3,0(sp)
    913c:	003fca06 	br	9068 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537068>

00009140 <__ratio>:
    9140:	defff904 	addi	sp,sp,-28
    9144:	dc400315 	stw	r17,12(sp)
    9148:	2823883a 	mov	r17,r5
    914c:	d9400104 	addi	r5,sp,4
    9150:	dfc00615 	stw	ra,24(sp)
    9154:	dcc00515 	stw	r19,20(sp)
    9158:	dc800415 	stw	r18,16(sp)
    915c:	2027883a 	mov	r19,r4
    9160:	dc000215 	stw	r16,8(sp)
    9164:	0008ee80 	call	8ee8 <__b2d>
    9168:	d80b883a 	mov	r5,sp
    916c:	8809883a 	mov	r4,r17
    9170:	1025883a 	mov	r18,r2
    9174:	1821883a 	mov	r16,r3
    9178:	0008ee80 	call	8ee8 <__b2d>
    917c:	8a000417 	ldw	r8,16(r17)
    9180:	99000417 	ldw	r4,16(r19)
    9184:	d9400117 	ldw	r5,4(sp)
    9188:	2209c83a 	sub	r4,r4,r8
    918c:	2010917a 	slli	r8,r4,5
    9190:	d9000017 	ldw	r4,0(sp)
    9194:	2909c83a 	sub	r4,r5,r4
    9198:	4109883a 	add	r4,r8,r4
    919c:	01000e0e 	bge	zero,r4,91d8 <__ratio+0x98>
    91a0:	2008953a 	slli	r4,r4,20
    91a4:	2421883a 	add	r16,r4,r16
    91a8:	100d883a 	mov	r6,r2
    91ac:	180f883a 	mov	r7,r3
    91b0:	9009883a 	mov	r4,r18
    91b4:	800b883a 	mov	r5,r16
    91b8:	000d0980 	call	d098 <__divdf3>
    91bc:	dfc00617 	ldw	ra,24(sp)
    91c0:	dcc00517 	ldw	r19,20(sp)
    91c4:	dc800417 	ldw	r18,16(sp)
    91c8:	dc400317 	ldw	r17,12(sp)
    91cc:	dc000217 	ldw	r16,8(sp)
    91d0:	dec00704 	addi	sp,sp,28
    91d4:	f800283a 	ret
    91d8:	2008953a 	slli	r4,r4,20
    91dc:	1907c83a 	sub	r3,r3,r4
    91e0:	003ff106 	br	91a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215371a8>

000091e4 <_mprec_log10>:
    91e4:	defffe04 	addi	sp,sp,-8
    91e8:	dc000015 	stw	r16,0(sp)
    91ec:	dfc00115 	stw	ra,4(sp)
    91f0:	008005c4 	movi	r2,23
    91f4:	2021883a 	mov	r16,r4
    91f8:	11000d0e 	bge	r2,r4,9230 <_mprec_log10+0x4c>
    91fc:	0005883a 	mov	r2,zero
    9200:	00cffc34 	movhi	r3,16368
    9204:	843fffc4 	addi	r16,r16,-1
    9208:	000d883a 	mov	r6,zero
    920c:	01d00934 	movhi	r7,16420
    9210:	1009883a 	mov	r4,r2
    9214:	180b883a 	mov	r5,r3
    9218:	000dcc00 	call	dcc0 <__muldf3>
    921c:	803ff91e 	bne	r16,zero,9204 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537204>
    9220:	dfc00117 	ldw	ra,4(sp)
    9224:	dc000017 	ldw	r16,0(sp)
    9228:	dec00204 	addi	sp,sp,8
    922c:	f800283a 	ret
    9230:	202090fa 	slli	r16,r4,3
    9234:	00800074 	movhi	r2,1
    9238:	1093c004 	addi	r2,r2,20224
    923c:	1421883a 	add	r16,r2,r16
    9240:	80800017 	ldw	r2,0(r16)
    9244:	80c00117 	ldw	r3,4(r16)
    9248:	dfc00117 	ldw	ra,4(sp)
    924c:	dc000017 	ldw	r16,0(sp)
    9250:	dec00204 	addi	sp,sp,8
    9254:	f800283a 	ret

00009258 <__copybits>:
    9258:	297fffc4 	addi	r5,r5,-1
    925c:	280fd17a 	srai	r7,r5,5
    9260:	30c00417 	ldw	r3,16(r6)
    9264:	30800504 	addi	r2,r6,20
    9268:	39c00044 	addi	r7,r7,1
    926c:	18c7883a 	add	r3,r3,r3
    9270:	39cf883a 	add	r7,r7,r7
    9274:	18c7883a 	add	r3,r3,r3
    9278:	39cf883a 	add	r7,r7,r7
    927c:	10c7883a 	add	r3,r2,r3
    9280:	21cf883a 	add	r7,r4,r7
    9284:	10c00d2e 	bgeu	r2,r3,92bc <__copybits+0x64>
    9288:	200b883a 	mov	r5,r4
    928c:	12000017 	ldw	r8,0(r2)
    9290:	29400104 	addi	r5,r5,4
    9294:	10800104 	addi	r2,r2,4
    9298:	2a3fff15 	stw	r8,-4(r5)
    929c:	10fffb36 	bltu	r2,r3,928c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153728c>
    92a0:	1985c83a 	sub	r2,r3,r6
    92a4:	10bffac4 	addi	r2,r2,-21
    92a8:	1004d0ba 	srli	r2,r2,2
    92ac:	10800044 	addi	r2,r2,1
    92b0:	1085883a 	add	r2,r2,r2
    92b4:	1085883a 	add	r2,r2,r2
    92b8:	2089883a 	add	r4,r4,r2
    92bc:	21c0032e 	bgeu	r4,r7,92cc <__copybits+0x74>
    92c0:	20000015 	stw	zero,0(r4)
    92c4:	21000104 	addi	r4,r4,4
    92c8:	21fffd36 	bltu	r4,r7,92c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215372c0>
    92cc:	f800283a 	ret

000092d0 <__any_on>:
    92d0:	20c00417 	ldw	r3,16(r4)
    92d4:	2805d17a 	srai	r2,r5,5
    92d8:	21000504 	addi	r4,r4,20
    92dc:	18800d0e 	bge	r3,r2,9314 <__any_on+0x44>
    92e0:	18c7883a 	add	r3,r3,r3
    92e4:	18c7883a 	add	r3,r3,r3
    92e8:	20c7883a 	add	r3,r4,r3
    92ec:	20c0192e 	bgeu	r4,r3,9354 <__any_on+0x84>
    92f0:	18bfff17 	ldw	r2,-4(r3)
    92f4:	18ffff04 	addi	r3,r3,-4
    92f8:	1000041e 	bne	r2,zero,930c <__any_on+0x3c>
    92fc:	20c0142e 	bgeu	r4,r3,9350 <__any_on+0x80>
    9300:	18ffff04 	addi	r3,r3,-4
    9304:	19400017 	ldw	r5,0(r3)
    9308:	283ffc26 	beq	r5,zero,92fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215372fc>
    930c:	00800044 	movi	r2,1
    9310:	f800283a 	ret
    9314:	10c00a0e 	bge	r2,r3,9340 <__any_on+0x70>
    9318:	1085883a 	add	r2,r2,r2
    931c:	1085883a 	add	r2,r2,r2
    9320:	294007cc 	andi	r5,r5,31
    9324:	2087883a 	add	r3,r4,r2
    9328:	283ff026 	beq	r5,zero,92ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215372ec>
    932c:	19800017 	ldw	r6,0(r3)
    9330:	3144d83a 	srl	r2,r6,r5
    9334:	114a983a 	sll	r5,r2,r5
    9338:	317ff41e 	bne	r6,r5,930c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153730c>
    933c:	003feb06 	br	92ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215372ec>
    9340:	1085883a 	add	r2,r2,r2
    9344:	1085883a 	add	r2,r2,r2
    9348:	2087883a 	add	r3,r4,r2
    934c:	003fe706 	br	92ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215372ec>
    9350:	f800283a 	ret
    9354:	0005883a 	mov	r2,zero
    9358:	f800283a 	ret

0000935c <_realloc_r>:
    935c:	defff604 	addi	sp,sp,-40
    9360:	dc800215 	stw	r18,8(sp)
    9364:	dfc00915 	stw	ra,36(sp)
    9368:	df000815 	stw	fp,32(sp)
    936c:	ddc00715 	stw	r23,28(sp)
    9370:	dd800615 	stw	r22,24(sp)
    9374:	dd400515 	stw	r21,20(sp)
    9378:	dd000415 	stw	r20,16(sp)
    937c:	dcc00315 	stw	r19,12(sp)
    9380:	dc400115 	stw	r17,4(sp)
    9384:	dc000015 	stw	r16,0(sp)
    9388:	3025883a 	mov	r18,r6
    938c:	2800b726 	beq	r5,zero,966c <_realloc_r+0x310>
    9390:	282b883a 	mov	r21,r5
    9394:	2029883a 	mov	r20,r4
    9398:	000f8680 	call	f868 <__malloc_lock>
    939c:	a8bfff17 	ldw	r2,-4(r21)
    93a0:	043fff04 	movi	r16,-4
    93a4:	90c002c4 	addi	r3,r18,11
    93a8:	01000584 	movi	r4,22
    93ac:	acfffe04 	addi	r19,r21,-8
    93b0:	1420703a 	and	r16,r2,r16
    93b4:	20c0332e 	bgeu	r4,r3,9484 <_realloc_r+0x128>
    93b8:	047ffe04 	movi	r17,-8
    93bc:	1c62703a 	and	r17,r3,r17
    93c0:	8807883a 	mov	r3,r17
    93c4:	88005816 	blt	r17,zero,9528 <_realloc_r+0x1cc>
    93c8:	8c805736 	bltu	r17,r18,9528 <_realloc_r+0x1cc>
    93cc:	80c0300e 	bge	r16,r3,9490 <_realloc_r+0x134>
    93d0:	07000074 	movhi	fp,1
    93d4:	e7145304 	addi	fp,fp,20812
    93d8:	e1c00217 	ldw	r7,8(fp)
    93dc:	9c09883a 	add	r4,r19,r16
    93e0:	22000117 	ldw	r8,4(r4)
    93e4:	21c06326 	beq	r4,r7,9574 <_realloc_r+0x218>
    93e8:	017fff84 	movi	r5,-2
    93ec:	414a703a 	and	r5,r8,r5
    93f0:	214b883a 	add	r5,r4,r5
    93f4:	29800117 	ldw	r6,4(r5)
    93f8:	3180004c 	andi	r6,r6,1
    93fc:	30003f26 	beq	r6,zero,94fc <_realloc_r+0x1a0>
    9400:	1080004c 	andi	r2,r2,1
    9404:	10008326 	beq	r2,zero,9614 <_realloc_r+0x2b8>
    9408:	900b883a 	mov	r5,r18
    940c:	a009883a 	mov	r4,r20
    9410:	00028e80 	call	28e8 <_malloc_r>
    9414:	1025883a 	mov	r18,r2
    9418:	10011e26 	beq	r2,zero,9894 <_realloc_r+0x538>
    941c:	a93fff17 	ldw	r4,-4(r21)
    9420:	10fffe04 	addi	r3,r2,-8
    9424:	00bfff84 	movi	r2,-2
    9428:	2084703a 	and	r2,r4,r2
    942c:	9885883a 	add	r2,r19,r2
    9430:	1880ee26 	beq	r3,r2,97ec <_realloc_r+0x490>
    9434:	81bfff04 	addi	r6,r16,-4
    9438:	00800904 	movi	r2,36
    943c:	1180b836 	bltu	r2,r6,9720 <_realloc_r+0x3c4>
    9440:	00c004c4 	movi	r3,19
    9444:	19809636 	bltu	r3,r6,96a0 <_realloc_r+0x344>
    9448:	9005883a 	mov	r2,r18
    944c:	a807883a 	mov	r3,r21
    9450:	19000017 	ldw	r4,0(r3)
    9454:	11000015 	stw	r4,0(r2)
    9458:	19000117 	ldw	r4,4(r3)
    945c:	11000115 	stw	r4,4(r2)
    9460:	18c00217 	ldw	r3,8(r3)
    9464:	10c00215 	stw	r3,8(r2)
    9468:	a80b883a 	mov	r5,r21
    946c:	a009883a 	mov	r4,r20
    9470:	00074e00 	call	74e0 <_free_r>
    9474:	a009883a 	mov	r4,r20
    9478:	000f88c0 	call	f88c <__malloc_unlock>
    947c:	9005883a 	mov	r2,r18
    9480:	00001206 	br	94cc <_realloc_r+0x170>
    9484:	00c00404 	movi	r3,16
    9488:	1823883a 	mov	r17,r3
    948c:	003fce06 	br	93c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215373c8>
    9490:	a825883a 	mov	r18,r21
    9494:	8445c83a 	sub	r2,r16,r17
    9498:	00c003c4 	movi	r3,15
    949c:	18802636 	bltu	r3,r2,9538 <_realloc_r+0x1dc>
    94a0:	99800117 	ldw	r6,4(r19)
    94a4:	9c07883a 	add	r3,r19,r16
    94a8:	3180004c 	andi	r6,r6,1
    94ac:	3420b03a 	or	r16,r6,r16
    94b0:	9c000115 	stw	r16,4(r19)
    94b4:	18800117 	ldw	r2,4(r3)
    94b8:	10800054 	ori	r2,r2,1
    94bc:	18800115 	stw	r2,4(r3)
    94c0:	a009883a 	mov	r4,r20
    94c4:	000f88c0 	call	f88c <__malloc_unlock>
    94c8:	9005883a 	mov	r2,r18
    94cc:	dfc00917 	ldw	ra,36(sp)
    94d0:	df000817 	ldw	fp,32(sp)
    94d4:	ddc00717 	ldw	r23,28(sp)
    94d8:	dd800617 	ldw	r22,24(sp)
    94dc:	dd400517 	ldw	r21,20(sp)
    94e0:	dd000417 	ldw	r20,16(sp)
    94e4:	dcc00317 	ldw	r19,12(sp)
    94e8:	dc800217 	ldw	r18,8(sp)
    94ec:	dc400117 	ldw	r17,4(sp)
    94f0:	dc000017 	ldw	r16,0(sp)
    94f4:	dec00a04 	addi	sp,sp,40
    94f8:	f800283a 	ret
    94fc:	017fff04 	movi	r5,-4
    9500:	414a703a 	and	r5,r8,r5
    9504:	814d883a 	add	r6,r16,r5
    9508:	30c01f16 	blt	r6,r3,9588 <_realloc_r+0x22c>
    950c:	20800317 	ldw	r2,12(r4)
    9510:	20c00217 	ldw	r3,8(r4)
    9514:	a825883a 	mov	r18,r21
    9518:	3021883a 	mov	r16,r6
    951c:	18800315 	stw	r2,12(r3)
    9520:	10c00215 	stw	r3,8(r2)
    9524:	003fdb06 	br	9494 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537494>
    9528:	00800304 	movi	r2,12
    952c:	a0800015 	stw	r2,0(r20)
    9530:	0005883a 	mov	r2,zero
    9534:	003fe506 	br	94cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215374cc>
    9538:	98c00117 	ldw	r3,4(r19)
    953c:	9c4b883a 	add	r5,r19,r17
    9540:	11000054 	ori	r4,r2,1
    9544:	18c0004c 	andi	r3,r3,1
    9548:	1c62b03a 	or	r17,r3,r17
    954c:	9c400115 	stw	r17,4(r19)
    9550:	29000115 	stw	r4,4(r5)
    9554:	2885883a 	add	r2,r5,r2
    9558:	10c00117 	ldw	r3,4(r2)
    955c:	29400204 	addi	r5,r5,8
    9560:	a009883a 	mov	r4,r20
    9564:	18c00054 	ori	r3,r3,1
    9568:	10c00115 	stw	r3,4(r2)
    956c:	00074e00 	call	74e0 <_free_r>
    9570:	003fd306 	br	94c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215374c0>
    9574:	017fff04 	movi	r5,-4
    9578:	414a703a 	and	r5,r8,r5
    957c:	89800404 	addi	r6,r17,16
    9580:	8151883a 	add	r8,r16,r5
    9584:	4180590e 	bge	r8,r6,96ec <_realloc_r+0x390>
    9588:	1080004c 	andi	r2,r2,1
    958c:	103f9e1e 	bne	r2,zero,9408 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537408>
    9590:	adbffe17 	ldw	r22,-8(r21)
    9594:	00bfff04 	movi	r2,-4
    9598:	9dadc83a 	sub	r22,r19,r22
    959c:	b1800117 	ldw	r6,4(r22)
    95a0:	3084703a 	and	r2,r6,r2
    95a4:	20002026 	beq	r4,zero,9628 <_realloc_r+0x2cc>
    95a8:	80af883a 	add	r23,r16,r2
    95ac:	b96f883a 	add	r23,r23,r5
    95b0:	21c05f26 	beq	r4,r7,9730 <_realloc_r+0x3d4>
    95b4:	b8c01c16 	blt	r23,r3,9628 <_realloc_r+0x2cc>
    95b8:	20800317 	ldw	r2,12(r4)
    95bc:	20c00217 	ldw	r3,8(r4)
    95c0:	81bfff04 	addi	r6,r16,-4
    95c4:	01000904 	movi	r4,36
    95c8:	18800315 	stw	r2,12(r3)
    95cc:	10c00215 	stw	r3,8(r2)
    95d0:	b0c00217 	ldw	r3,8(r22)
    95d4:	b0800317 	ldw	r2,12(r22)
    95d8:	b4800204 	addi	r18,r22,8
    95dc:	18800315 	stw	r2,12(r3)
    95e0:	10c00215 	stw	r3,8(r2)
    95e4:	21801b36 	bltu	r4,r6,9654 <_realloc_r+0x2f8>
    95e8:	008004c4 	movi	r2,19
    95ec:	1180352e 	bgeu	r2,r6,96c4 <_realloc_r+0x368>
    95f0:	a8800017 	ldw	r2,0(r21)
    95f4:	b0800215 	stw	r2,8(r22)
    95f8:	a8800117 	ldw	r2,4(r21)
    95fc:	b0800315 	stw	r2,12(r22)
    9600:	008006c4 	movi	r2,27
    9604:	11807f36 	bltu	r2,r6,9804 <_realloc_r+0x4a8>
    9608:	b0800404 	addi	r2,r22,16
    960c:	ad400204 	addi	r21,r21,8
    9610:	00002d06 	br	96c8 <_realloc_r+0x36c>
    9614:	adbffe17 	ldw	r22,-8(r21)
    9618:	00bfff04 	movi	r2,-4
    961c:	9dadc83a 	sub	r22,r19,r22
    9620:	b1000117 	ldw	r4,4(r22)
    9624:	2084703a 	and	r2,r4,r2
    9628:	b03f7726 	beq	r22,zero,9408 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537408>
    962c:	80af883a 	add	r23,r16,r2
    9630:	b8ff7516 	blt	r23,r3,9408 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537408>
    9634:	b0800317 	ldw	r2,12(r22)
    9638:	b0c00217 	ldw	r3,8(r22)
    963c:	81bfff04 	addi	r6,r16,-4
    9640:	01000904 	movi	r4,36
    9644:	18800315 	stw	r2,12(r3)
    9648:	10c00215 	stw	r3,8(r2)
    964c:	b4800204 	addi	r18,r22,8
    9650:	21bfe52e 	bgeu	r4,r6,95e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215375e8>
    9654:	a80b883a 	mov	r5,r21
    9658:	9009883a 	mov	r4,r18
    965c:	00081480 	call	8148 <memmove>
    9660:	b821883a 	mov	r16,r23
    9664:	b027883a 	mov	r19,r22
    9668:	003f8a06 	br	9494 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537494>
    966c:	300b883a 	mov	r5,r6
    9670:	dfc00917 	ldw	ra,36(sp)
    9674:	df000817 	ldw	fp,32(sp)
    9678:	ddc00717 	ldw	r23,28(sp)
    967c:	dd800617 	ldw	r22,24(sp)
    9680:	dd400517 	ldw	r21,20(sp)
    9684:	dd000417 	ldw	r20,16(sp)
    9688:	dcc00317 	ldw	r19,12(sp)
    968c:	dc800217 	ldw	r18,8(sp)
    9690:	dc400117 	ldw	r17,4(sp)
    9694:	dc000017 	ldw	r16,0(sp)
    9698:	dec00a04 	addi	sp,sp,40
    969c:	00028e81 	jmpi	28e8 <_malloc_r>
    96a0:	a8c00017 	ldw	r3,0(r21)
    96a4:	90c00015 	stw	r3,0(r18)
    96a8:	a8c00117 	ldw	r3,4(r21)
    96ac:	90c00115 	stw	r3,4(r18)
    96b0:	00c006c4 	movi	r3,27
    96b4:	19804536 	bltu	r3,r6,97cc <_realloc_r+0x470>
    96b8:	90800204 	addi	r2,r18,8
    96bc:	a8c00204 	addi	r3,r21,8
    96c0:	003f6306 	br	9450 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537450>
    96c4:	9005883a 	mov	r2,r18
    96c8:	a8c00017 	ldw	r3,0(r21)
    96cc:	b821883a 	mov	r16,r23
    96d0:	b027883a 	mov	r19,r22
    96d4:	10c00015 	stw	r3,0(r2)
    96d8:	a8c00117 	ldw	r3,4(r21)
    96dc:	10c00115 	stw	r3,4(r2)
    96e0:	a8c00217 	ldw	r3,8(r21)
    96e4:	10c00215 	stw	r3,8(r2)
    96e8:	003f6a06 	br	9494 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537494>
    96ec:	9c67883a 	add	r19,r19,r17
    96f0:	4445c83a 	sub	r2,r8,r17
    96f4:	e4c00215 	stw	r19,8(fp)
    96f8:	10800054 	ori	r2,r2,1
    96fc:	98800115 	stw	r2,4(r19)
    9700:	a8bfff17 	ldw	r2,-4(r21)
    9704:	a009883a 	mov	r4,r20
    9708:	1080004c 	andi	r2,r2,1
    970c:	1462b03a 	or	r17,r2,r17
    9710:	ac7fff15 	stw	r17,-4(r21)
    9714:	000f88c0 	call	f88c <__malloc_unlock>
    9718:	a805883a 	mov	r2,r21
    971c:	003f6b06 	br	94cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215374cc>
    9720:	a80b883a 	mov	r5,r21
    9724:	9009883a 	mov	r4,r18
    9728:	00081480 	call	8148 <memmove>
    972c:	003f4e06 	br	9468 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537468>
    9730:	89000404 	addi	r4,r17,16
    9734:	b93fbc16 	blt	r23,r4,9628 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537628>
    9738:	b0800317 	ldw	r2,12(r22)
    973c:	b0c00217 	ldw	r3,8(r22)
    9740:	81bfff04 	addi	r6,r16,-4
    9744:	01000904 	movi	r4,36
    9748:	18800315 	stw	r2,12(r3)
    974c:	10c00215 	stw	r3,8(r2)
    9750:	b4800204 	addi	r18,r22,8
    9754:	21804336 	bltu	r4,r6,9864 <_realloc_r+0x508>
    9758:	008004c4 	movi	r2,19
    975c:	11803f2e 	bgeu	r2,r6,985c <_realloc_r+0x500>
    9760:	a8800017 	ldw	r2,0(r21)
    9764:	b0800215 	stw	r2,8(r22)
    9768:	a8800117 	ldw	r2,4(r21)
    976c:	b0800315 	stw	r2,12(r22)
    9770:	008006c4 	movi	r2,27
    9774:	11803f36 	bltu	r2,r6,9874 <_realloc_r+0x518>
    9778:	b0800404 	addi	r2,r22,16
    977c:	ad400204 	addi	r21,r21,8
    9780:	a8c00017 	ldw	r3,0(r21)
    9784:	10c00015 	stw	r3,0(r2)
    9788:	a8c00117 	ldw	r3,4(r21)
    978c:	10c00115 	stw	r3,4(r2)
    9790:	a8c00217 	ldw	r3,8(r21)
    9794:	10c00215 	stw	r3,8(r2)
    9798:	b447883a 	add	r3,r22,r17
    979c:	bc45c83a 	sub	r2,r23,r17
    97a0:	e0c00215 	stw	r3,8(fp)
    97a4:	10800054 	ori	r2,r2,1
    97a8:	18800115 	stw	r2,4(r3)
    97ac:	b0800117 	ldw	r2,4(r22)
    97b0:	a009883a 	mov	r4,r20
    97b4:	1080004c 	andi	r2,r2,1
    97b8:	1462b03a 	or	r17,r2,r17
    97bc:	b4400115 	stw	r17,4(r22)
    97c0:	000f88c0 	call	f88c <__malloc_unlock>
    97c4:	9005883a 	mov	r2,r18
    97c8:	003f4006 	br	94cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215374cc>
    97cc:	a8c00217 	ldw	r3,8(r21)
    97d0:	90c00215 	stw	r3,8(r18)
    97d4:	a8c00317 	ldw	r3,12(r21)
    97d8:	90c00315 	stw	r3,12(r18)
    97dc:	30801126 	beq	r6,r2,9824 <_realloc_r+0x4c8>
    97e0:	90800404 	addi	r2,r18,16
    97e4:	a8c00404 	addi	r3,r21,16
    97e8:	003f1906 	br	9450 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537450>
    97ec:	90ffff17 	ldw	r3,-4(r18)
    97f0:	00bfff04 	movi	r2,-4
    97f4:	a825883a 	mov	r18,r21
    97f8:	1884703a 	and	r2,r3,r2
    97fc:	80a1883a 	add	r16,r16,r2
    9800:	003f2406 	br	9494 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537494>
    9804:	a8800217 	ldw	r2,8(r21)
    9808:	b0800415 	stw	r2,16(r22)
    980c:	a8800317 	ldw	r2,12(r21)
    9810:	b0800515 	stw	r2,20(r22)
    9814:	31000a26 	beq	r6,r4,9840 <_realloc_r+0x4e4>
    9818:	b0800604 	addi	r2,r22,24
    981c:	ad400404 	addi	r21,r21,16
    9820:	003fa906 	br	96c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215376c8>
    9824:	a9000417 	ldw	r4,16(r21)
    9828:	90800604 	addi	r2,r18,24
    982c:	a8c00604 	addi	r3,r21,24
    9830:	91000415 	stw	r4,16(r18)
    9834:	a9000517 	ldw	r4,20(r21)
    9838:	91000515 	stw	r4,20(r18)
    983c:	003f0406 	br	9450 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537450>
    9840:	a8c00417 	ldw	r3,16(r21)
    9844:	ad400604 	addi	r21,r21,24
    9848:	b0800804 	addi	r2,r22,32
    984c:	b0c00615 	stw	r3,24(r22)
    9850:	a8ffff17 	ldw	r3,-4(r21)
    9854:	b0c00715 	stw	r3,28(r22)
    9858:	003f9b06 	br	96c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215376c8>
    985c:	9005883a 	mov	r2,r18
    9860:	003fc706 	br	9780 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537780>
    9864:	a80b883a 	mov	r5,r21
    9868:	9009883a 	mov	r4,r18
    986c:	00081480 	call	8148 <memmove>
    9870:	003fc906 	br	9798 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537798>
    9874:	a8800217 	ldw	r2,8(r21)
    9878:	b0800415 	stw	r2,16(r22)
    987c:	a8800317 	ldw	r2,12(r21)
    9880:	b0800515 	stw	r2,20(r22)
    9884:	31000726 	beq	r6,r4,98a4 <_realloc_r+0x548>
    9888:	b0800604 	addi	r2,r22,24
    988c:	ad400404 	addi	r21,r21,16
    9890:	003fbb06 	br	9780 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537780>
    9894:	a009883a 	mov	r4,r20
    9898:	000f88c0 	call	f88c <__malloc_unlock>
    989c:	0005883a 	mov	r2,zero
    98a0:	003f0a06 	br	94cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215374cc>
    98a4:	a8c00417 	ldw	r3,16(r21)
    98a8:	ad400604 	addi	r21,r21,24
    98ac:	b0800804 	addi	r2,r22,32
    98b0:	b0c00615 	stw	r3,24(r22)
    98b4:	a8ffff17 	ldw	r3,-4(r21)
    98b8:	b0c00715 	stw	r3,28(r22)
    98bc:	003fb006 	br	9780 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537780>

000098c0 <__fpclassifyd>:
    98c0:	00a00034 	movhi	r2,32768
    98c4:	10bfffc4 	addi	r2,r2,-1
    98c8:	2884703a 	and	r2,r5,r2
    98cc:	10000726 	beq	r2,zero,98ec <__fpclassifyd+0x2c>
    98d0:	00fffc34 	movhi	r3,65520
    98d4:	019ff834 	movhi	r6,32736
    98d8:	28c7883a 	add	r3,r5,r3
    98dc:	31bfffc4 	addi	r6,r6,-1
    98e0:	30c00536 	bltu	r6,r3,98f8 <__fpclassifyd+0x38>
    98e4:	00800104 	movi	r2,4
    98e8:	f800283a 	ret
    98ec:	2000021e 	bne	r4,zero,98f8 <__fpclassifyd+0x38>
    98f0:	00800084 	movi	r2,2
    98f4:	f800283a 	ret
    98f8:	00dffc34 	movhi	r3,32752
    98fc:	019ff834 	movhi	r6,32736
    9900:	28cb883a 	add	r5,r5,r3
    9904:	31bfffc4 	addi	r6,r6,-1
    9908:	317ff62e 	bgeu	r6,r5,98e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215378e4>
    990c:	01400434 	movhi	r5,16
    9910:	297fffc4 	addi	r5,r5,-1
    9914:	28800236 	bltu	r5,r2,9920 <__fpclassifyd+0x60>
    9918:	008000c4 	movi	r2,3
    991c:	f800283a 	ret
    9920:	10c00226 	beq	r2,r3,992c <__fpclassifyd+0x6c>
    9924:	0005883a 	mov	r2,zero
    9928:	f800283a 	ret
    992c:	2005003a 	cmpeq	r2,r4,zero
    9930:	f800283a 	ret

00009934 <__sread>:
    9934:	defffe04 	addi	sp,sp,-8
    9938:	dc000015 	stw	r16,0(sp)
    993c:	2821883a 	mov	r16,r5
    9940:	2940038f 	ldh	r5,14(r5)
    9944:	dfc00115 	stw	ra,4(sp)
    9948:	000b9680 	call	b968 <_read_r>
    994c:	10000716 	blt	r2,zero,996c <__sread+0x38>
    9950:	80c01417 	ldw	r3,80(r16)
    9954:	1887883a 	add	r3,r3,r2
    9958:	80c01415 	stw	r3,80(r16)
    995c:	dfc00117 	ldw	ra,4(sp)
    9960:	dc000017 	ldw	r16,0(sp)
    9964:	dec00204 	addi	sp,sp,8
    9968:	f800283a 	ret
    996c:	80c0030b 	ldhu	r3,12(r16)
    9970:	18fbffcc 	andi	r3,r3,61439
    9974:	80c0030d 	sth	r3,12(r16)
    9978:	dfc00117 	ldw	ra,4(sp)
    997c:	dc000017 	ldw	r16,0(sp)
    9980:	dec00204 	addi	sp,sp,8
    9984:	f800283a 	ret

00009988 <__seofread>:
    9988:	0005883a 	mov	r2,zero
    998c:	f800283a 	ret

00009990 <__swrite>:
    9990:	2880030b 	ldhu	r2,12(r5)
    9994:	defffb04 	addi	sp,sp,-20
    9998:	dcc00315 	stw	r19,12(sp)
    999c:	dc800215 	stw	r18,8(sp)
    99a0:	dc400115 	stw	r17,4(sp)
    99a4:	dc000015 	stw	r16,0(sp)
    99a8:	dfc00415 	stw	ra,16(sp)
    99ac:	10c0400c 	andi	r3,r2,256
    99b0:	2821883a 	mov	r16,r5
    99b4:	2023883a 	mov	r17,r4
    99b8:	3025883a 	mov	r18,r6
    99bc:	3827883a 	mov	r19,r7
    99c0:	18000526 	beq	r3,zero,99d8 <__swrite+0x48>
    99c4:	2940038f 	ldh	r5,14(r5)
    99c8:	01c00084 	movi	r7,2
    99cc:	000d883a 	mov	r6,zero
    99d0:	000b74c0 	call	b74c <_lseek_r>
    99d4:	8080030b 	ldhu	r2,12(r16)
    99d8:	8140038f 	ldh	r5,14(r16)
    99dc:	10bbffcc 	andi	r2,r2,61439
    99e0:	980f883a 	mov	r7,r19
    99e4:	900d883a 	mov	r6,r18
    99e8:	8809883a 	mov	r4,r17
    99ec:	8080030d 	sth	r2,12(r16)
    99f0:	dfc00417 	ldw	ra,16(sp)
    99f4:	dcc00317 	ldw	r19,12(sp)
    99f8:	dc800217 	ldw	r18,8(sp)
    99fc:	dc400117 	ldw	r17,4(sp)
    9a00:	dc000017 	ldw	r16,0(sp)
    9a04:	dec00504 	addi	sp,sp,20
    9a08:	000b0bc1 	jmpi	b0bc <_write_r>

00009a0c <__sseek>:
    9a0c:	defffe04 	addi	sp,sp,-8
    9a10:	dc000015 	stw	r16,0(sp)
    9a14:	2821883a 	mov	r16,r5
    9a18:	2940038f 	ldh	r5,14(r5)
    9a1c:	dfc00115 	stw	ra,4(sp)
    9a20:	000b74c0 	call	b74c <_lseek_r>
    9a24:	00ffffc4 	movi	r3,-1
    9a28:	10c00826 	beq	r2,r3,9a4c <__sseek+0x40>
    9a2c:	80c0030b 	ldhu	r3,12(r16)
    9a30:	80801415 	stw	r2,80(r16)
    9a34:	18c40014 	ori	r3,r3,4096
    9a38:	80c0030d 	sth	r3,12(r16)
    9a3c:	dfc00117 	ldw	ra,4(sp)
    9a40:	dc000017 	ldw	r16,0(sp)
    9a44:	dec00204 	addi	sp,sp,8
    9a48:	f800283a 	ret
    9a4c:	80c0030b 	ldhu	r3,12(r16)
    9a50:	18fbffcc 	andi	r3,r3,61439
    9a54:	80c0030d 	sth	r3,12(r16)
    9a58:	dfc00117 	ldw	ra,4(sp)
    9a5c:	dc000017 	ldw	r16,0(sp)
    9a60:	dec00204 	addi	sp,sp,8
    9a64:	f800283a 	ret

00009a68 <__sclose>:
    9a68:	2940038f 	ldh	r5,14(r5)
    9a6c:	000b2701 	jmpi	b270 <_close_r>

00009a70 <strcmp>:
    9a70:	2144b03a 	or	r2,r4,r5
    9a74:	108000cc 	andi	r2,r2,3
    9a78:	1000171e 	bne	r2,zero,9ad8 <strcmp+0x68>
    9a7c:	20800017 	ldw	r2,0(r4)
    9a80:	28c00017 	ldw	r3,0(r5)
    9a84:	10c0141e 	bne	r2,r3,9ad8 <strcmp+0x68>
    9a88:	027fbff4 	movhi	r9,65279
    9a8c:	4a7fbfc4 	addi	r9,r9,-257
    9a90:	0086303a 	nor	r3,zero,r2
    9a94:	02202074 	movhi	r8,32897
    9a98:	1245883a 	add	r2,r2,r9
    9a9c:	42202004 	addi	r8,r8,-32640
    9aa0:	10c4703a 	and	r2,r2,r3
    9aa4:	1204703a 	and	r2,r2,r8
    9aa8:	10000226 	beq	r2,zero,9ab4 <strcmp+0x44>
    9aac:	00002306 	br	9b3c <strcmp+0xcc>
    9ab0:	1000221e 	bne	r2,zero,9b3c <strcmp+0xcc>
    9ab4:	21000104 	addi	r4,r4,4
    9ab8:	20c00017 	ldw	r3,0(r4)
    9abc:	29400104 	addi	r5,r5,4
    9ac0:	29800017 	ldw	r6,0(r5)
    9ac4:	1a4f883a 	add	r7,r3,r9
    9ac8:	00c4303a 	nor	r2,zero,r3
    9acc:	3884703a 	and	r2,r7,r2
    9ad0:	1204703a 	and	r2,r2,r8
    9ad4:	19bff626 	beq	r3,r6,9ab0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537ab0>
    9ad8:	20800003 	ldbu	r2,0(r4)
    9adc:	10c03fcc 	andi	r3,r2,255
    9ae0:	18c0201c 	xori	r3,r3,128
    9ae4:	18ffe004 	addi	r3,r3,-128
    9ae8:	18000c26 	beq	r3,zero,9b1c <strcmp+0xac>
    9aec:	29800007 	ldb	r6,0(r5)
    9af0:	19800326 	beq	r3,r6,9b00 <strcmp+0x90>
    9af4:	00001306 	br	9b44 <strcmp+0xd4>
    9af8:	29800007 	ldb	r6,0(r5)
    9afc:	11800b1e 	bne	r2,r6,9b2c <strcmp+0xbc>
    9b00:	21000044 	addi	r4,r4,1
    9b04:	20c00003 	ldbu	r3,0(r4)
    9b08:	29400044 	addi	r5,r5,1
    9b0c:	18803fcc 	andi	r2,r3,255
    9b10:	1080201c 	xori	r2,r2,128
    9b14:	10bfe004 	addi	r2,r2,-128
    9b18:	103ff71e 	bne	r2,zero,9af8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537af8>
    9b1c:	0007883a 	mov	r3,zero
    9b20:	28800003 	ldbu	r2,0(r5)
    9b24:	1885c83a 	sub	r2,r3,r2
    9b28:	f800283a 	ret
    9b2c:	28800003 	ldbu	r2,0(r5)
    9b30:	18c03fcc 	andi	r3,r3,255
    9b34:	1885c83a 	sub	r2,r3,r2
    9b38:	f800283a 	ret
    9b3c:	0005883a 	mov	r2,zero
    9b40:	f800283a 	ret
    9b44:	10c03fcc 	andi	r3,r2,255
    9b48:	003ff506 	br	9b20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537b20>

00009b4c <__ssprint_r>:
    9b4c:	30800217 	ldw	r2,8(r6)
    9b50:	defff604 	addi	sp,sp,-40
    9b54:	dc800215 	stw	r18,8(sp)
    9b58:	dfc00915 	stw	ra,36(sp)
    9b5c:	df000815 	stw	fp,32(sp)
    9b60:	ddc00715 	stw	r23,28(sp)
    9b64:	dd800615 	stw	r22,24(sp)
    9b68:	dd400515 	stw	r21,20(sp)
    9b6c:	dd000415 	stw	r20,16(sp)
    9b70:	dcc00315 	stw	r19,12(sp)
    9b74:	dc400115 	stw	r17,4(sp)
    9b78:	dc000015 	stw	r16,0(sp)
    9b7c:	3025883a 	mov	r18,r6
    9b80:	10005826 	beq	r2,zero,9ce4 <__ssprint_r+0x198>
    9b84:	2027883a 	mov	r19,r4
    9b88:	35c00017 	ldw	r23,0(r6)
    9b8c:	29000017 	ldw	r4,0(r5)
    9b90:	28800217 	ldw	r2,8(r5)
    9b94:	2823883a 	mov	r17,r5
    9b98:	0039883a 	mov	fp,zero
    9b9c:	0021883a 	mov	r16,zero
    9ba0:	80003926 	beq	r16,zero,9c88 <__ssprint_r+0x13c>
    9ba4:	102b883a 	mov	r21,r2
    9ba8:	102d883a 	mov	r22,r2
    9bac:	80803a36 	bltu	r16,r2,9c98 <__ssprint_r+0x14c>
    9bb0:	88c0030b 	ldhu	r3,12(r17)
    9bb4:	1881200c 	andi	r2,r3,1152
    9bb8:	10002626 	beq	r2,zero,9c54 <__ssprint_r+0x108>
    9bbc:	88800517 	ldw	r2,20(r17)
    9bc0:	89400417 	ldw	r5,16(r17)
    9bc4:	81800044 	addi	r6,r16,1
    9bc8:	108f883a 	add	r7,r2,r2
    9bcc:	3885883a 	add	r2,r7,r2
    9bd0:	100ed7fa 	srli	r7,r2,31
    9bd4:	216dc83a 	sub	r22,r4,r5
    9bd8:	3589883a 	add	r4,r6,r22
    9bdc:	3885883a 	add	r2,r7,r2
    9be0:	102bd07a 	srai	r21,r2,1
    9be4:	a80d883a 	mov	r6,r21
    9be8:	a900022e 	bgeu	r21,r4,9bf4 <__ssprint_r+0xa8>
    9bec:	202b883a 	mov	r21,r4
    9bf0:	200d883a 	mov	r6,r4
    9bf4:	18c1000c 	andi	r3,r3,1024
    9bf8:	18002a26 	beq	r3,zero,9ca4 <__ssprint_r+0x158>
    9bfc:	300b883a 	mov	r5,r6
    9c00:	9809883a 	mov	r4,r19
    9c04:	00028e80 	call	28e8 <_malloc_r>
    9c08:	1029883a 	mov	r20,r2
    9c0c:	10002c26 	beq	r2,zero,9cc0 <__ssprint_r+0x174>
    9c10:	89400417 	ldw	r5,16(r17)
    9c14:	b00d883a 	mov	r6,r22
    9c18:	1009883a 	mov	r4,r2
    9c1c:	00080000 	call	8000 <memcpy>
    9c20:	8880030b 	ldhu	r2,12(r17)
    9c24:	00fedfc4 	movi	r3,-1153
    9c28:	10c4703a 	and	r2,r2,r3
    9c2c:	10802014 	ori	r2,r2,128
    9c30:	8880030d 	sth	r2,12(r17)
    9c34:	a589883a 	add	r4,r20,r22
    9c38:	adadc83a 	sub	r22,r21,r22
    9c3c:	8d400515 	stw	r21,20(r17)
    9c40:	8d800215 	stw	r22,8(r17)
    9c44:	8d000415 	stw	r20,16(r17)
    9c48:	89000015 	stw	r4,0(r17)
    9c4c:	802b883a 	mov	r21,r16
    9c50:	802d883a 	mov	r22,r16
    9c54:	b00d883a 	mov	r6,r22
    9c58:	e00b883a 	mov	r5,fp
    9c5c:	00081480 	call	8148 <memmove>
    9c60:	88800217 	ldw	r2,8(r17)
    9c64:	89000017 	ldw	r4,0(r17)
    9c68:	90c00217 	ldw	r3,8(r18)
    9c6c:	1545c83a 	sub	r2,r2,r21
    9c70:	2589883a 	add	r4,r4,r22
    9c74:	88800215 	stw	r2,8(r17)
    9c78:	89000015 	stw	r4,0(r17)
    9c7c:	1c21c83a 	sub	r16,r3,r16
    9c80:	94000215 	stw	r16,8(r18)
    9c84:	80001726 	beq	r16,zero,9ce4 <__ssprint_r+0x198>
    9c88:	bf000017 	ldw	fp,0(r23)
    9c8c:	bc000117 	ldw	r16,4(r23)
    9c90:	bdc00204 	addi	r23,r23,8
    9c94:	003fc206 	br	9ba0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537ba0>
    9c98:	802b883a 	mov	r21,r16
    9c9c:	802d883a 	mov	r22,r16
    9ca0:	003fec06 	br	9c54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537c54>
    9ca4:	9809883a 	mov	r4,r19
    9ca8:	000935c0 	call	935c <_realloc_r>
    9cac:	1029883a 	mov	r20,r2
    9cb0:	103fe01e 	bne	r2,zero,9c34 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537c34>
    9cb4:	89400417 	ldw	r5,16(r17)
    9cb8:	9809883a 	mov	r4,r19
    9cbc:	00074e00 	call	74e0 <_free_r>
    9cc0:	88c0030b 	ldhu	r3,12(r17)
    9cc4:	00800304 	movi	r2,12
    9cc8:	98800015 	stw	r2,0(r19)
    9ccc:	18c01014 	ori	r3,r3,64
    9cd0:	88c0030d 	sth	r3,12(r17)
    9cd4:	00bfffc4 	movi	r2,-1
    9cd8:	90000215 	stw	zero,8(r18)
    9cdc:	90000115 	stw	zero,4(r18)
    9ce0:	00000206 	br	9cec <__ssprint_r+0x1a0>
    9ce4:	90000115 	stw	zero,4(r18)
    9ce8:	0005883a 	mov	r2,zero
    9cec:	dfc00917 	ldw	ra,36(sp)
    9cf0:	df000817 	ldw	fp,32(sp)
    9cf4:	ddc00717 	ldw	r23,28(sp)
    9cf8:	dd800617 	ldw	r22,24(sp)
    9cfc:	dd400517 	ldw	r21,20(sp)
    9d00:	dd000417 	ldw	r20,16(sp)
    9d04:	dcc00317 	ldw	r19,12(sp)
    9d08:	dc800217 	ldw	r18,8(sp)
    9d0c:	dc400117 	ldw	r17,4(sp)
    9d10:	dc000017 	ldw	r16,0(sp)
    9d14:	dec00a04 	addi	sp,sp,40
    9d18:	f800283a 	ret

00009d1c <___svfiprintf_internal_r>:
    9d1c:	2880030b 	ldhu	r2,12(r5)
    9d20:	deffc804 	addi	sp,sp,-224
    9d24:	dcc03115 	stw	r19,196(sp)
    9d28:	dfc03715 	stw	ra,220(sp)
    9d2c:	df003615 	stw	fp,216(sp)
    9d30:	ddc03515 	stw	r23,212(sp)
    9d34:	dd803415 	stw	r22,208(sp)
    9d38:	dd403315 	stw	r21,204(sp)
    9d3c:	dd003215 	stw	r20,200(sp)
    9d40:	dc803015 	stw	r18,192(sp)
    9d44:	dc402f15 	stw	r17,188(sp)
    9d48:	dc002e15 	stw	r16,184(sp)
    9d4c:	d9402315 	stw	r5,140(sp)
    9d50:	d9002715 	stw	r4,156(sp)
    9d54:	1080200c 	andi	r2,r2,128
    9d58:	d9c02415 	stw	r7,144(sp)
    9d5c:	3027883a 	mov	r19,r6
    9d60:	10000226 	beq	r2,zero,9d6c <___svfiprintf_internal_r+0x50>
    9d64:	28800417 	ldw	r2,16(r5)
    9d68:	10046d26 	beq	r2,zero,af20 <___svfiprintf_internal_r+0x1204>
    9d6c:	d8801a04 	addi	r2,sp,104
    9d70:	d8c019c4 	addi	r3,sp,103
    9d74:	05800074 	movhi	r22,1
    9d78:	10c9c83a 	sub	r4,r2,r3
    9d7c:	b593f204 	addi	r22,r22,20424
    9d80:	d8801e15 	stw	r2,120(sp)
    9d84:	d8c01f15 	stw	r3,124(sp)
    9d88:	dec01a15 	stw	sp,104(sp)
    9d8c:	d8001c15 	stw	zero,112(sp)
    9d90:	d8001b15 	stw	zero,108(sp)
    9d94:	d811883a 	mov	r8,sp
    9d98:	d8002915 	stw	zero,164(sp)
    9d9c:	d8002615 	stw	zero,152(sp)
    9da0:	d9002c15 	stw	r4,176(sp)
    9da4:	98800007 	ldb	r2,0(r19)
    9da8:	10031426 	beq	r2,zero,a9fc <___svfiprintf_internal_r+0xce0>
    9dac:	00c00944 	movi	r3,37
    9db0:	9825883a 	mov	r18,r19
    9db4:	10c0021e 	bne	r2,r3,9dc0 <___svfiprintf_internal_r+0xa4>
    9db8:	00001406 	br	9e0c <___svfiprintf_internal_r+0xf0>
    9dbc:	10c00326 	beq	r2,r3,9dcc <___svfiprintf_internal_r+0xb0>
    9dc0:	94800044 	addi	r18,r18,1
    9dc4:	90800007 	ldb	r2,0(r18)
    9dc8:	103ffc1e 	bne	r2,zero,9dbc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537dbc>
    9dcc:	94e1c83a 	sub	r16,r18,r19
    9dd0:	80000e26 	beq	r16,zero,9e0c <___svfiprintf_internal_r+0xf0>
    9dd4:	d8c01c17 	ldw	r3,112(sp)
    9dd8:	d8801b17 	ldw	r2,108(sp)
    9ddc:	44c00015 	stw	r19,0(r8)
    9de0:	1c07883a 	add	r3,r3,r16
    9de4:	10800044 	addi	r2,r2,1
    9de8:	d8c01c15 	stw	r3,112(sp)
    9dec:	44000115 	stw	r16,4(r8)
    9df0:	d8801b15 	stw	r2,108(sp)
    9df4:	00c001c4 	movi	r3,7
    9df8:	18835c16 	blt	r3,r2,ab6c <___svfiprintf_internal_r+0xe50>
    9dfc:	42000204 	addi	r8,r8,8
    9e00:	d9402617 	ldw	r5,152(sp)
    9e04:	2c0b883a 	add	r5,r5,r16
    9e08:	d9402615 	stw	r5,152(sp)
    9e0c:	90800007 	ldb	r2,0(r18)
    9e10:	1002fc26 	beq	r2,zero,aa04 <___svfiprintf_internal_r+0xce8>
    9e14:	0023883a 	mov	r17,zero
    9e18:	00bfffc4 	movi	r2,-1
    9e1c:	0021883a 	mov	r16,zero
    9e20:	94c00044 	addi	r19,r18,1
    9e24:	90c00047 	ldb	r3,1(r18)
    9e28:	dc402105 	stb	r17,132(sp)
    9e2c:	d8001d85 	stb	zero,118(sp)
    9e30:	002b883a 	mov	r21,zero
    9e34:	d8802015 	stw	r2,128(sp)
    9e38:	d8002515 	stw	zero,148(sp)
    9e3c:	04801604 	movi	r18,88
    9e40:	05000244 	movi	r20,9
    9e44:	402f883a 	mov	r23,r8
    9e48:	8023883a 	mov	r17,r16
    9e4c:	9cc00044 	addi	r19,r19,1
    9e50:	18bff804 	addi	r2,r3,-32
    9e54:	9081fb36 	bltu	r18,r2,a644 <___svfiprintf_internal_r+0x928>
    9e58:	100490ba 	slli	r2,r2,2
    9e5c:	01000074 	movhi	r4,1
    9e60:	21279c04 	addi	r4,r4,-24976
    9e64:	1105883a 	add	r2,r2,r4
    9e68:	10800017 	ldw	r2,0(r2)
    9e6c:	1000683a 	jmp	r2
    9e70:	0000a070 	cmpltui	zero,zero,641
    9e74:	0000a644 	movi	zero,665
    9e78:	0000a644 	movi	zero,665
    9e7c:	0000a064 	muli	zero,zero,641
    9e80:	0000a644 	movi	zero,665
    9e84:	0000a644 	movi	zero,665
    9e88:	0000a644 	movi	zero,665
    9e8c:	0000a644 	movi	zero,665
    9e90:	0000a644 	movi	zero,665
    9e94:	0000a644 	movi	zero,665
    9e98:	00009fd4 	movui	zero,639
    9e9c:	0000a1d0 	cmplti	zero,zero,647
    9ea0:	0000a644 	movi	zero,665
    9ea4:	00009ffc 	xorhi	zero,zero,639
    9ea8:	0000a680 	call	a68 <cstick_Init+0x2c>
    9eac:	0000a644 	movi	zero,665
    9eb0:	0000a674 	movhi	zero,665
    9eb4:	0000a608 	cmpgei	zero,zero,664
    9eb8:	0000a608 	cmpgei	zero,zero,664
    9ebc:	0000a608 	cmpgei	zero,zero,664
    9ec0:	0000a608 	cmpgei	zero,zero,664
    9ec4:	0000a608 	cmpgei	zero,zero,664
    9ec8:	0000a608 	cmpgei	zero,zero,664
    9ecc:	0000a608 	cmpgei	zero,zero,664
    9ed0:	0000a608 	cmpgei	zero,zero,664
    9ed4:	0000a608 	cmpgei	zero,zero,664
    9ed8:	0000a644 	movi	zero,665
    9edc:	0000a644 	movi	zero,665
    9ee0:	0000a644 	movi	zero,665
    9ee4:	0000a644 	movi	zero,665
    9ee8:	0000a644 	movi	zero,665
    9eec:	0000a644 	movi	zero,665
    9ef0:	0000a644 	movi	zero,665
    9ef4:	0000a644 	movi	zero,665
    9ef8:	0000a644 	movi	zero,665
    9efc:	0000a644 	movi	zero,665
    9f00:	0000a58c 	andi	zero,zero,662
    9f04:	0000a644 	movi	zero,665
    9f08:	0000a644 	movi	zero,665
    9f0c:	0000a644 	movi	zero,665
    9f10:	0000a644 	movi	zero,665
    9f14:	0000a644 	movi	zero,665
    9f18:	0000a644 	movi	zero,665
    9f1c:	0000a644 	movi	zero,665
    9f20:	0000a644 	movi	zero,665
    9f24:	0000a644 	movi	zero,665
    9f28:	0000a644 	movi	zero,665
    9f2c:	0000a73c 	xorhi	zero,zero,668
    9f30:	0000a644 	movi	zero,665
    9f34:	0000a644 	movi	zero,665
    9f38:	0000a644 	movi	zero,665
    9f3c:	0000a644 	movi	zero,665
    9f40:	0000a644 	movi	zero,665
    9f44:	0000a6c8 	cmpgei	zero,zero,667
    9f48:	0000a644 	movi	zero,665
    9f4c:	0000a644 	movi	zero,665
    9f50:	0000a3c8 	cmpgei	zero,zero,655
    9f54:	0000a644 	movi	zero,665
    9f58:	0000a644 	movi	zero,665
    9f5c:	0000a644 	movi	zero,665
    9f60:	0000a644 	movi	zero,665
    9f64:	0000a644 	movi	zero,665
    9f68:	0000a644 	movi	zero,665
    9f6c:	0000a644 	movi	zero,665
    9f70:	0000a644 	movi	zero,665
    9f74:	0000a644 	movi	zero,665
    9f78:	0000a644 	movi	zero,665
    9f7c:	0000a294 	movui	zero,650
    9f80:	0000a478 	rdprs	zero,zero,657
    9f84:	0000a644 	movi	zero,665
    9f88:	0000a644 	movi	zero,665
    9f8c:	0000a644 	movi	zero,665
    9f90:	0000a46c 	andhi	zero,zero,657
    9f94:	0000a478 	rdprs	zero,zero,657
    9f98:	0000a644 	movi	zero,665
    9f9c:	0000a644 	movi	zero,665
    9fa0:	0000a458 	cmpnei	zero,zero,657
    9fa4:	0000a644 	movi	zero,665
    9fa8:	0000a418 	cmpnei	zero,zero,656
    9fac:	0000a1e4 	muli	zero,zero,647
    9fb0:	0000a008 	cmpgei	zero,zero,640
    9fb4:	0000a580 	call	a58 <cstick_Init+0x1c>
    9fb8:	0000a644 	movi	zero,665
    9fbc:	0000a52c 	andhi	zero,zero,660
    9fc0:	0000a644 	movi	zero,665
    9fc4:	0000a148 	cmpgei	zero,zero,645
    9fc8:	0000a644 	movi	zero,665
    9fcc:	0000a644 	movi	zero,665
    9fd0:	0000a094 	movui	zero,642
    9fd4:	d9002417 	ldw	r4,144(sp)
    9fd8:	d9402417 	ldw	r5,144(sp)
    9fdc:	21000017 	ldw	r4,0(r4)
    9fe0:	28800104 	addi	r2,r5,4
    9fe4:	d9002515 	stw	r4,148(sp)
    9fe8:	20032b0e 	bge	r4,zero,ac98 <___svfiprintf_internal_r+0xf7c>
    9fec:	d8c02517 	ldw	r3,148(sp)
    9ff0:	d8802415 	stw	r2,144(sp)
    9ff4:	00c7c83a 	sub	r3,zero,r3
    9ff8:	d8c02515 	stw	r3,148(sp)
    9ffc:	8c400114 	ori	r17,r17,4
    a000:	98c00007 	ldb	r3,0(r19)
    a004:	003f9106 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    a008:	00800c04 	movi	r2,48
    a00c:	d9402417 	ldw	r5,144(sp)
    a010:	d9002017 	ldw	r4,128(sp)
    a014:	d8801d05 	stb	r2,116(sp)
    a018:	00801e04 	movi	r2,120
    a01c:	d8801d45 	stb	r2,117(sp)
    a020:	d8001d85 	stb	zero,118(sp)
    a024:	b811883a 	mov	r8,r23
    a028:	28c00104 	addi	r3,r5,4
    a02c:	2c800017 	ldw	r18,0(r5)
    a030:	0029883a 	mov	r20,zero
    a034:	88800094 	ori	r2,r17,2
    a038:	20036316 	blt	r4,zero,adc8 <___svfiprintf_internal_r+0x10ac>
    a03c:	00bfdfc4 	movi	r2,-129
    a040:	88a0703a 	and	r16,r17,r2
    a044:	d8c02415 	stw	r3,144(sp)
    a048:	84000094 	ori	r16,r16,2
    a04c:	90031c26 	beq	r18,zero,acc0 <___svfiprintf_internal_r+0xfa4>
    a050:	01400074 	movhi	r5,1
    a054:	29539104 	addi	r5,r5,20036
    a058:	002b883a 	mov	r21,zero
    a05c:	d9402915 	stw	r5,164(sp)
    a060:	00002906 	br	a108 <___svfiprintf_internal_r+0x3ec>
    a064:	8c400054 	ori	r17,r17,1
    a068:	98c00007 	ldb	r3,0(r19)
    a06c:	003f7706 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    a070:	a8803fcc 	andi	r2,r21,255
    a074:	1080201c 	xori	r2,r2,128
    a078:	10bfe004 	addi	r2,r2,-128
    a07c:	10032a1e 	bne	r2,zero,ad28 <___svfiprintf_internal_r+0x100c>
    a080:	00c00044 	movi	r3,1
    a084:	d8c02105 	stb	r3,132(sp)
    a088:	05400804 	movi	r21,32
    a08c:	98c00007 	ldb	r3,0(r19)
    a090:	003f6e06 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    a094:	8821883a 	mov	r16,r17
    a098:	dc402103 	ldbu	r17,132(sp)
    a09c:	b811883a 	mov	r8,r23
    a0a0:	8c403fcc 	andi	r17,r17,255
    a0a4:	8803f01e 	bne	r17,zero,b068 <___svfiprintf_internal_r+0x134c>
    a0a8:	00800074 	movhi	r2,1
    a0ac:	10939104 	addi	r2,r2,20036
    a0b0:	d8802915 	stw	r2,164(sp)
    a0b4:	8080080c 	andi	r2,r16,32
    a0b8:	1000cd26 	beq	r2,zero,a3f0 <___svfiprintf_internal_r+0x6d4>
    a0bc:	d9002417 	ldw	r4,144(sp)
    a0c0:	24800017 	ldw	r18,0(r4)
    a0c4:	25000117 	ldw	r20,4(r4)
    a0c8:	21000204 	addi	r4,r4,8
    a0cc:	d9002415 	stw	r4,144(sp)
    a0d0:	8080004c 	andi	r2,r16,1
    a0d4:	1002c726 	beq	r2,zero,abf4 <___svfiprintf_internal_r+0xed8>
    a0d8:	9504b03a 	or	r2,r18,r20
    a0dc:	1003061e 	bne	r2,zero,acf8 <___svfiprintf_internal_r+0xfdc>
    a0e0:	d9002017 	ldw	r4,128(sp)
    a0e4:	d8001d85 	stb	zero,118(sp)
    a0e8:	20033e16 	blt	r4,zero,ade4 <___svfiprintf_internal_r+0x10c8>
    a0ec:	00bfdfc4 	movi	r2,-129
    a0f0:	80a0703a 	and	r16,r16,r2
    a0f4:	d9402017 	ldw	r5,128(sp)
    a0f8:	002b883a 	mov	r21,zero
    a0fc:	28002826 	beq	r5,zero,a1a0 <___svfiprintf_internal_r+0x484>
    a100:	0025883a 	mov	r18,zero
    a104:	0029883a 	mov	r20,zero
    a108:	d9002917 	ldw	r4,164(sp)
    a10c:	dc401a04 	addi	r17,sp,104
    a110:	908003cc 	andi	r2,r18,15
    a114:	a006973a 	slli	r3,r20,28
    a118:	2085883a 	add	r2,r4,r2
    a11c:	9024d13a 	srli	r18,r18,4
    a120:	10800003 	ldbu	r2,0(r2)
    a124:	a028d13a 	srli	r20,r20,4
    a128:	8c7fffc4 	addi	r17,r17,-1
    a12c:	1ca4b03a 	or	r18,r3,r18
    a130:	88800005 	stb	r2,0(r17)
    a134:	9504b03a 	or	r2,r18,r20
    a138:	103ff51e 	bne	r2,zero,a110 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538110>
    a13c:	d8801e17 	ldw	r2,120(sp)
    a140:	1469c83a 	sub	r20,r2,r17
    a144:	00001906 	br	a1ac <___svfiprintf_internal_r+0x490>
    a148:	8821883a 	mov	r16,r17
    a14c:	dc402103 	ldbu	r17,132(sp)
    a150:	b811883a 	mov	r8,r23
    a154:	8c403fcc 	andi	r17,r17,255
    a158:	8803d01e 	bne	r17,zero,b09c <___svfiprintf_internal_r+0x1380>
    a15c:	8080080c 	andi	r2,r16,32
    a160:	10016126 	beq	r2,zero,a6e8 <___svfiprintf_internal_r+0x9cc>
    a164:	d9002417 	ldw	r4,144(sp)
    a168:	d9402017 	ldw	r5,128(sp)
    a16c:	d8001d85 	stb	zero,118(sp)
    a170:	20c00204 	addi	r3,r4,8
    a174:	24800017 	ldw	r18,0(r4)
    a178:	25000117 	ldw	r20,4(r4)
    a17c:	28030f16 	blt	r5,zero,adbc <___svfiprintf_internal_r+0x10a0>
    a180:	013fdfc4 	movi	r4,-129
    a184:	9504b03a 	or	r2,r18,r20
    a188:	d8c02415 	stw	r3,144(sp)
    a18c:	8120703a 	and	r16,r16,r4
    a190:	002b883a 	mov	r21,zero
    a194:	1000cd1e 	bne	r2,zero,a4cc <___svfiprintf_internal_r+0x7b0>
    a198:	d8c02017 	ldw	r3,128(sp)
    a19c:	1803141e 	bne	r3,zero,adf0 <___svfiprintf_internal_r+0x10d4>
    a1a0:	d8002015 	stw	zero,128(sp)
    a1a4:	0029883a 	mov	r20,zero
    a1a8:	dc401a04 	addi	r17,sp,104
    a1ac:	dc802017 	ldw	r18,128(sp)
    a1b0:	9500010e 	bge	r18,r20,a1b8 <___svfiprintf_internal_r+0x49c>
    a1b4:	a025883a 	mov	r18,r20
    a1b8:	ad403fcc 	andi	r21,r21,255
    a1bc:	ad40201c 	xori	r21,r21,128
    a1c0:	ad7fe004 	addi	r21,r21,-128
    a1c4:	a8003f26 	beq	r21,zero,a2c4 <___svfiprintf_internal_r+0x5a8>
    a1c8:	94800044 	addi	r18,r18,1
    a1cc:	00003d06 	br	a2c4 <___svfiprintf_internal_r+0x5a8>
    a1d0:	00c00044 	movi	r3,1
    a1d4:	d8c02105 	stb	r3,132(sp)
    a1d8:	05400ac4 	movi	r21,43
    a1dc:	98c00007 	ldb	r3,0(r19)
    a1e0:	003f1a06 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    a1e4:	8821883a 	mov	r16,r17
    a1e8:	dc402103 	ldbu	r17,132(sp)
    a1ec:	b811883a 	mov	r8,r23
    a1f0:	8c403fcc 	andi	r17,r17,255
    a1f4:	8803a71e 	bne	r17,zero,b094 <___svfiprintf_internal_r+0x1378>
    a1f8:	8080080c 	andi	r2,r16,32
    a1fc:	10015726 	beq	r2,zero,a75c <___svfiprintf_internal_r+0xa40>
    a200:	d8c02417 	ldw	r3,144(sp)
    a204:	d9002017 	ldw	r4,128(sp)
    a208:	d8001d85 	stb	zero,118(sp)
    a20c:	18800204 	addi	r2,r3,8
    a210:	1c800017 	ldw	r18,0(r3)
    a214:	1d000117 	ldw	r20,4(r3)
    a218:	2002db16 	blt	r4,zero,ad88 <___svfiprintf_internal_r+0x106c>
    a21c:	013fdfc4 	movi	r4,-129
    a220:	9506b03a 	or	r3,r18,r20
    a224:	d8802415 	stw	r2,144(sp)
    a228:	8120703a 	and	r16,r16,r4
    a22c:	18015826 	beq	r3,zero,a790 <___svfiprintf_internal_r+0xa74>
    a230:	002b883a 	mov	r21,zero
    a234:	dc401a04 	addi	r17,sp,104
    a238:	9006d0fa 	srli	r3,r18,3
    a23c:	a008977a 	slli	r4,r20,29
    a240:	a028d0fa 	srli	r20,r20,3
    a244:	948001cc 	andi	r18,r18,7
    a248:	90800c04 	addi	r2,r18,48
    a24c:	8c7fffc4 	addi	r17,r17,-1
    a250:	20e4b03a 	or	r18,r4,r3
    a254:	88800005 	stb	r2,0(r17)
    a258:	9506b03a 	or	r3,r18,r20
    a25c:	183ff61e 	bne	r3,zero,a238 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538238>
    a260:	80c0004c 	andi	r3,r16,1
    a264:	18028926 	beq	r3,zero,ac8c <___svfiprintf_internal_r+0xf70>
    a268:	10803fcc 	andi	r2,r2,255
    a26c:	1080201c 	xori	r2,r2,128
    a270:	10bfe004 	addi	r2,r2,-128
    a274:	00c00c04 	movi	r3,48
    a278:	10ffb026 	beq	r2,r3,a13c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153813c>
    a27c:	88ffffc5 	stb	r3,-1(r17)
    a280:	d8c01e17 	ldw	r3,120(sp)
    a284:	88bfffc4 	addi	r2,r17,-1
    a288:	1023883a 	mov	r17,r2
    a28c:	18a9c83a 	sub	r20,r3,r2
    a290:	003fc606 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    a294:	d8c02417 	ldw	r3,144(sp)
    a298:	04800044 	movi	r18,1
    a29c:	8821883a 	mov	r16,r17
    a2a0:	18800017 	ldw	r2,0(r3)
    a2a4:	18c00104 	addi	r3,r3,4
    a2a8:	b811883a 	mov	r8,r23
    a2ac:	d8001d85 	stb	zero,118(sp)
    a2b0:	d8801005 	stb	r2,64(sp)
    a2b4:	d8c02415 	stw	r3,144(sp)
    a2b8:	9029883a 	mov	r20,r18
    a2bc:	dc401004 	addi	r17,sp,64
    a2c0:	d8002015 	stw	zero,128(sp)
    a2c4:	80c0008c 	andi	r3,r16,2
    a2c8:	d8c02115 	stw	r3,132(sp)
    a2cc:	18000126 	beq	r3,zero,a2d4 <___svfiprintf_internal_r+0x5b8>
    a2d0:	94800084 	addi	r18,r18,2
    a2d4:	80c0210c 	andi	r3,r16,132
    a2d8:	d8c02215 	stw	r3,136(sp)
    a2dc:	1801321e 	bne	r3,zero,a7a8 <___svfiprintf_internal_r+0xa8c>
    a2e0:	d9002517 	ldw	r4,148(sp)
    a2e4:	24b9c83a 	sub	fp,r4,r18
    a2e8:	07012f0e 	bge	zero,fp,a7a8 <___svfiprintf_internal_r+0xa8c>
    a2ec:	02400404 	movi	r9,16
    a2f0:	d8c01c17 	ldw	r3,112(sp)
    a2f4:	d8801b17 	ldw	r2,108(sp)
    a2f8:	4f03250e 	bge	r9,fp,af90 <___svfiprintf_internal_r+0x1274>
    a2fc:	01000074 	movhi	r4,1
    a300:	2113f604 	addi	r4,r4,20440
    a304:	dc002a15 	stw	r16,168(sp)
    a308:	dc402b15 	stw	r17,172(sp)
    a30c:	d9002815 	stw	r4,160(sp)
    a310:	e023883a 	mov	r17,fp
    a314:	482f883a 	mov	r23,r9
    a318:	9839883a 	mov	fp,r19
    a31c:	054001c4 	movi	r21,7
    a320:	9027883a 	mov	r19,r18
    a324:	dc002717 	ldw	r16,156(sp)
    a328:	dc802317 	ldw	r18,140(sp)
    a32c:	00000306 	br	a33c <___svfiprintf_internal_r+0x620>
    a330:	8c7ffc04 	addi	r17,r17,-16
    a334:	42000204 	addi	r8,r8,8
    a338:	bc40130e 	bge	r23,r17,a388 <___svfiprintf_internal_r+0x66c>
    a33c:	01400074 	movhi	r5,1
    a340:	18c00404 	addi	r3,r3,16
    a344:	10800044 	addi	r2,r2,1
    a348:	2953f604 	addi	r5,r5,20440
    a34c:	41400015 	stw	r5,0(r8)
    a350:	45c00115 	stw	r23,4(r8)
    a354:	d8c01c15 	stw	r3,112(sp)
    a358:	d8801b15 	stw	r2,108(sp)
    a35c:	a8bff40e 	bge	r21,r2,a330 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538330>
    a360:	d9801a04 	addi	r6,sp,104
    a364:	900b883a 	mov	r5,r18
    a368:	8009883a 	mov	r4,r16
    a36c:	0009b4c0 	call	9b4c <__ssprint_r>
    a370:	1001aa1e 	bne	r2,zero,aa1c <___svfiprintf_internal_r+0xd00>
    a374:	8c7ffc04 	addi	r17,r17,-16
    a378:	d8c01c17 	ldw	r3,112(sp)
    a37c:	d8801b17 	ldw	r2,108(sp)
    a380:	d811883a 	mov	r8,sp
    a384:	bc7fed16 	blt	r23,r17,a33c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153833c>
    a388:	9825883a 	mov	r18,r19
    a38c:	dc002a17 	ldw	r16,168(sp)
    a390:	e027883a 	mov	r19,fp
    a394:	8839883a 	mov	fp,r17
    a398:	dc402b17 	ldw	r17,172(sp)
    a39c:	d9002817 	ldw	r4,160(sp)
    a3a0:	e0c7883a 	add	r3,fp,r3
    a3a4:	10800044 	addi	r2,r2,1
    a3a8:	41000015 	stw	r4,0(r8)
    a3ac:	47000115 	stw	fp,4(r8)
    a3b0:	d8c01c15 	stw	r3,112(sp)
    a3b4:	d8801b15 	stw	r2,108(sp)
    a3b8:	010001c4 	movi	r4,7
    a3bc:	20821616 	blt	r4,r2,ac18 <___svfiprintf_internal_r+0xefc>
    a3c0:	42000204 	addi	r8,r8,8
    a3c4:	0000fa06 	br	a7b0 <___svfiprintf_internal_r+0xa94>
    a3c8:	8821883a 	mov	r16,r17
    a3cc:	dc402103 	ldbu	r17,132(sp)
    a3d0:	b811883a 	mov	r8,r23
    a3d4:	8c403fcc 	andi	r17,r17,255
    a3d8:	8803361e 	bne	r17,zero,b0b4 <___svfiprintf_internal_r+0x1398>
    a3dc:	01400074 	movhi	r5,1
    a3e0:	29538c04 	addi	r5,r5,20016
    a3e4:	d9402915 	stw	r5,164(sp)
    a3e8:	8080080c 	andi	r2,r16,32
    a3ec:	103f331e 	bne	r2,zero,a0bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215380bc>
    a3f0:	8080040c 	andi	r2,r16,16
    a3f4:	1002551e 	bne	r2,zero,ad4c <___svfiprintf_internal_r+0x1030>
    a3f8:	8080100c 	andi	r2,r16,64
    a3fc:	1002a626 	beq	r2,zero,ae98 <___svfiprintf_internal_r+0x117c>
    a400:	d8802417 	ldw	r2,144(sp)
    a404:	0029883a 	mov	r20,zero
    a408:	1480000b 	ldhu	r18,0(r2)
    a40c:	10800104 	addi	r2,r2,4
    a410:	d8802415 	stw	r2,144(sp)
    a414:	003f2e06 	br	a0d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215380d0>
    a418:	8821883a 	mov	r16,r17
    a41c:	dc402103 	ldbu	r17,132(sp)
    a420:	b811883a 	mov	r8,r23
    a424:	8c403fcc 	andi	r17,r17,255
    a428:	88030b1e 	bne	r17,zero,b058 <___svfiprintf_internal_r+0x133c>
    a42c:	8080080c 	andi	r2,r16,32
    a430:	1002271e 	bne	r2,zero,acd0 <___svfiprintf_internal_r+0xfb4>
    a434:	8080040c 	andi	r2,r16,16
    a438:	10028e26 	beq	r2,zero,ae74 <___svfiprintf_internal_r+0x1158>
    a43c:	d8c02417 	ldw	r3,144(sp)
    a440:	d9002617 	ldw	r4,152(sp)
    a444:	18800017 	ldw	r2,0(r3)
    a448:	18c00104 	addi	r3,r3,4
    a44c:	d8c02415 	stw	r3,144(sp)
    a450:	11000015 	stw	r4,0(r2)
    a454:	003e5306 	br	9da4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537da4>
    a458:	98c00007 	ldb	r3,0(r19)
    a45c:	01401b04 	movi	r5,108
    a460:	19424f26 	beq	r3,r5,ada0 <___svfiprintf_internal_r+0x1084>
    a464:	8c400414 	ori	r17,r17,16
    a468:	003e7806 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    a46c:	8c401014 	ori	r17,r17,64
    a470:	98c00007 	ldb	r3,0(r19)
    a474:	003e7506 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    a478:	8821883a 	mov	r16,r17
    a47c:	dc402103 	ldbu	r17,132(sp)
    a480:	b811883a 	mov	r8,r23
    a484:	8c403fcc 	andi	r17,r17,255
    a488:	8802fe1e 	bne	r17,zero,b084 <___svfiprintf_internal_r+0x1368>
    a48c:	8080080c 	andi	r2,r16,32
    a490:	10004626 	beq	r2,zero,a5ac <___svfiprintf_internal_r+0x890>
    a494:	d9002417 	ldw	r4,144(sp)
    a498:	20800117 	ldw	r2,4(r4)
    a49c:	24800017 	ldw	r18,0(r4)
    a4a0:	21000204 	addi	r4,r4,8
    a4a4:	d9002415 	stw	r4,144(sp)
    a4a8:	1029883a 	mov	r20,r2
    a4ac:	10004a16 	blt	r2,zero,a5d8 <___svfiprintf_internal_r+0x8bc>
    a4b0:	d9002017 	ldw	r4,128(sp)
    a4b4:	dd401d83 	ldbu	r21,118(sp)
    a4b8:	2001eb16 	blt	r4,zero,ac68 <___svfiprintf_internal_r+0xf4c>
    a4bc:	00ffdfc4 	movi	r3,-129
    a4c0:	9504b03a 	or	r2,r18,r20
    a4c4:	80e0703a 	and	r16,r16,r3
    a4c8:	103f3326 	beq	r2,zero,a198 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538198>
    a4cc:	a0009426 	beq	r20,zero,a720 <___svfiprintf_internal_r+0xa04>
    a4d0:	dc401a04 	addi	r17,sp,104
    a4d4:	402f883a 	mov	r23,r8
    a4d8:	9009883a 	mov	r4,r18
    a4dc:	a00b883a 	mov	r5,r20
    a4e0:	01800284 	movi	r6,10
    a4e4:	000f883a 	mov	r7,zero
    a4e8:	000c0740 	call	c074 <__umoddi3>
    a4ec:	10800c04 	addi	r2,r2,48
    a4f0:	8c7fffc4 	addi	r17,r17,-1
    a4f4:	9009883a 	mov	r4,r18
    a4f8:	a00b883a 	mov	r5,r20
    a4fc:	88800005 	stb	r2,0(r17)
    a500:	01800284 	movi	r6,10
    a504:	000f883a 	mov	r7,zero
    a508:	000ba780 	call	ba78 <__udivdi3>
    a50c:	1025883a 	mov	r18,r2
    a510:	10c4b03a 	or	r2,r2,r3
    a514:	1829883a 	mov	r20,r3
    a518:	103fef1e 	bne	r2,zero,a4d8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215384d8>
    a51c:	d9001e17 	ldw	r4,120(sp)
    a520:	b811883a 	mov	r8,r23
    a524:	2469c83a 	sub	r20,r4,r17
    a528:	003f2006 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    a52c:	d8802417 	ldw	r2,144(sp)
    a530:	8821883a 	mov	r16,r17
    a534:	d8001d85 	stb	zero,118(sp)
    a538:	14400017 	ldw	r17,0(r2)
    a53c:	b811883a 	mov	r8,r23
    a540:	15c00104 	addi	r23,r2,4
    a544:	88026c26 	beq	r17,zero,aef8 <___svfiprintf_internal_r+0x11dc>
    a548:	d8c02017 	ldw	r3,128(sp)
    a54c:	18025f16 	blt	r3,zero,aecc <___svfiprintf_internal_r+0x11b0>
    a550:	180d883a 	mov	r6,r3
    a554:	000b883a 	mov	r5,zero
    a558:	8809883a 	mov	r4,r17
    a55c:	da002d15 	stw	r8,180(sp)
    a560:	0007f1c0 	call	7f1c <memchr>
    a564:	da002d17 	ldw	r8,180(sp)
    a568:	1002a526 	beq	r2,zero,b000 <___svfiprintf_internal_r+0x12e4>
    a56c:	1469c83a 	sub	r20,r2,r17
    a570:	dd401d83 	ldbu	r21,118(sp)
    a574:	ddc02415 	stw	r23,144(sp)
    a578:	d8002015 	stw	zero,128(sp)
    a57c:	003f0b06 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    a580:	8c400814 	ori	r17,r17,32
    a584:	98c00007 	ldb	r3,0(r19)
    a588:	003e3006 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    a58c:	8821883a 	mov	r16,r17
    a590:	dc402103 	ldbu	r17,132(sp)
    a594:	b811883a 	mov	r8,r23
    a598:	8c403fcc 	andi	r17,r17,255
    a59c:	8802b01e 	bne	r17,zero,b060 <___svfiprintf_internal_r+0x1344>
    a5a0:	84000414 	ori	r16,r16,16
    a5a4:	8080080c 	andi	r2,r16,32
    a5a8:	103fba1e 	bne	r2,zero,a494 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538494>
    a5ac:	8080040c 	andi	r2,r16,16
    a5b0:	1001df1e 	bne	r2,zero,ad30 <___svfiprintf_internal_r+0x1014>
    a5b4:	8080100c 	andi	r2,r16,64
    a5b8:	10023d26 	beq	r2,zero,aeb0 <___svfiprintf_internal_r+0x1194>
    a5bc:	d8802417 	ldw	r2,144(sp)
    a5c0:	1480000f 	ldh	r18,0(r2)
    a5c4:	10800104 	addi	r2,r2,4
    a5c8:	d8802415 	stw	r2,144(sp)
    a5cc:	9029d7fa 	srai	r20,r18,31
    a5d0:	a005883a 	mov	r2,r20
    a5d4:	103fb60e 	bge	r2,zero,a4b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215384b0>
    a5d8:	d9402017 	ldw	r5,128(sp)
    a5dc:	04a5c83a 	sub	r18,zero,r18
    a5e0:	05400b44 	movi	r21,45
    a5e4:	9004c03a 	cmpne	r2,r18,zero
    a5e8:	0529c83a 	sub	r20,zero,r20
    a5ec:	dd401d85 	stb	r21,118(sp)
    a5f0:	a0a9c83a 	sub	r20,r20,r2
    a5f4:	28026c16 	blt	r5,zero,afa8 <___svfiprintf_internal_r+0x128c>
    a5f8:	00bfdfc4 	movi	r2,-129
    a5fc:	80a0703a 	and	r16,r16,r2
    a600:	a03fb31e 	bne	r20,zero,a4d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215384d0>
    a604:	00004606 	br	a720 <___svfiprintf_internal_r+0xa04>
    a608:	9839883a 	mov	fp,r19
    a60c:	d8002515 	stw	zero,148(sp)
    a610:	1c3ff404 	addi	r16,r3,-48
    a614:	0009883a 	mov	r4,zero
    a618:	01400284 	movi	r5,10
    a61c:	00020100 	call	2010 <__mulsi3>
    a620:	e0c00007 	ldb	r3,0(fp)
    a624:	8089883a 	add	r4,r16,r2
    a628:	9cc00044 	addi	r19,r19,1
    a62c:	1c3ff404 	addi	r16,r3,-48
    a630:	9839883a 	mov	fp,r19
    a634:	a43ff82e 	bgeu	r20,r16,a618 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538618>
    a638:	d9002515 	stw	r4,148(sp)
    a63c:	18bff804 	addi	r2,r3,-32
    a640:	90be052e 	bgeu	r18,r2,9e58 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e58>
    a644:	8821883a 	mov	r16,r17
    a648:	dc402103 	ldbu	r17,132(sp)
    a64c:	b811883a 	mov	r8,r23
    a650:	8c403fcc 	andi	r17,r17,255
    a654:	88028d1e 	bne	r17,zero,b08c <___svfiprintf_internal_r+0x1370>
    a658:	1800ea26 	beq	r3,zero,aa04 <___svfiprintf_internal_r+0xce8>
    a65c:	04800044 	movi	r18,1
    a660:	d8c01005 	stb	r3,64(sp)
    a664:	d8001d85 	stb	zero,118(sp)
    a668:	9029883a 	mov	r20,r18
    a66c:	dc401004 	addi	r17,sp,64
    a670:	003f1306 	br	a2c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215382c0>
    a674:	8c402014 	ori	r17,r17,128
    a678:	98c00007 	ldb	r3,0(r19)
    a67c:	003df306 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    a680:	98c00007 	ldb	r3,0(r19)
    a684:	01000a84 	movi	r4,42
    a688:	9f000044 	addi	fp,r19,1
    a68c:	19026326 	beq	r3,r4,b01c <___svfiprintf_internal_r+0x1300>
    a690:	1c3ff404 	addi	r16,r3,-48
    a694:	0009883a 	mov	r4,zero
    a698:	a4025636 	bltu	r20,r16,aff4 <___svfiprintf_internal_r+0x12d8>
    a69c:	01400284 	movi	r5,10
    a6a0:	00020100 	call	2010 <__mulsi3>
    a6a4:	e0c00007 	ldb	r3,0(fp)
    a6a8:	1409883a 	add	r4,r2,r16
    a6ac:	e4c00044 	addi	r19,fp,1
    a6b0:	1c3ff404 	addi	r16,r3,-48
    a6b4:	9839883a 	mov	fp,r19
    a6b8:	a43ff82e 	bgeu	r20,r16,a69c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153869c>
    a6bc:	20020c16 	blt	r4,zero,aef0 <___svfiprintf_internal_r+0x11d4>
    a6c0:	d9002015 	stw	r4,128(sp)
    a6c4:	003de206 	br	9e50 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e50>
    a6c8:	8821883a 	mov	r16,r17
    a6cc:	dc402103 	ldbu	r17,132(sp)
    a6d0:	b811883a 	mov	r8,r23
    a6d4:	8c403fcc 	andi	r17,r17,255
    a6d8:	8802721e 	bne	r17,zero,b0a4 <___svfiprintf_internal_r+0x1388>
    a6dc:	84000414 	ori	r16,r16,16
    a6e0:	8080080c 	andi	r2,r16,32
    a6e4:	103e9f1e 	bne	r2,zero,a164 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538164>
    a6e8:	8080040c 	andi	r2,r16,16
    a6ec:	10015326 	beq	r2,zero,ac3c <___svfiprintf_internal_r+0xf20>
    a6f0:	d8c02417 	ldw	r3,144(sp)
    a6f4:	d9002017 	ldw	r4,128(sp)
    a6f8:	d8001d85 	stb	zero,118(sp)
    a6fc:	18800104 	addi	r2,r3,4
    a700:	1c800017 	ldw	r18,0(r3)
    a704:	0029883a 	mov	r20,zero
    a708:	20015516 	blt	r4,zero,ac60 <___svfiprintf_internal_r+0xf44>
    a70c:	00ffdfc4 	movi	r3,-129
    a710:	d8802415 	stw	r2,144(sp)
    a714:	80e0703a 	and	r16,r16,r3
    a718:	002b883a 	mov	r21,zero
    a71c:	903e9e26 	beq	r18,zero,a198 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538198>
    a720:	00800244 	movi	r2,9
    a724:	14bf6a36 	bltu	r2,r18,a4d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215384d0>
    a728:	94800c04 	addi	r18,r18,48
    a72c:	dc8019c5 	stb	r18,103(sp)
    a730:	dd002c17 	ldw	r20,176(sp)
    a734:	dc4019c4 	addi	r17,sp,103
    a738:	003e9c06 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    a73c:	8821883a 	mov	r16,r17
    a740:	dc402103 	ldbu	r17,132(sp)
    a744:	b811883a 	mov	r8,r23
    a748:	8c403fcc 	andi	r17,r17,255
    a74c:	8802571e 	bne	r17,zero,b0ac <___svfiprintf_internal_r+0x1390>
    a750:	84000414 	ori	r16,r16,16
    a754:	8080080c 	andi	r2,r16,32
    a758:	103ea91e 	bne	r2,zero,a200 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538200>
    a75c:	8080040c 	andi	r2,r16,16
    a760:	10018026 	beq	r2,zero,ad64 <___svfiprintf_internal_r+0x1048>
    a764:	d9402417 	ldw	r5,144(sp)
    a768:	d8c02017 	ldw	r3,128(sp)
    a76c:	d8001d85 	stb	zero,118(sp)
    a770:	28800104 	addi	r2,r5,4
    a774:	2c800017 	ldw	r18,0(r5)
    a778:	0029883a 	mov	r20,zero
    a77c:	18018216 	blt	r3,zero,ad88 <___svfiprintf_internal_r+0x106c>
    a780:	00ffdfc4 	movi	r3,-129
    a784:	d8802415 	stw	r2,144(sp)
    a788:	80e0703a 	and	r16,r16,r3
    a78c:	903ea81e 	bne	r18,zero,a230 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538230>
    a790:	d8802017 	ldw	r2,128(sp)
    a794:	002b883a 	mov	r21,zero
    a798:	1001f226 	beq	r2,zero,af64 <___svfiprintf_internal_r+0x1248>
    a79c:	0025883a 	mov	r18,zero
    a7a0:	0029883a 	mov	r20,zero
    a7a4:	003ea306 	br	a234 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538234>
    a7a8:	d8c01c17 	ldw	r3,112(sp)
    a7ac:	d8801b17 	ldw	r2,108(sp)
    a7b0:	d9001d87 	ldb	r4,118(sp)
    a7b4:	20000b26 	beq	r4,zero,a7e4 <___svfiprintf_internal_r+0xac8>
    a7b8:	d9001d84 	addi	r4,sp,118
    a7bc:	18c00044 	addi	r3,r3,1
    a7c0:	10800044 	addi	r2,r2,1
    a7c4:	41000015 	stw	r4,0(r8)
    a7c8:	01000044 	movi	r4,1
    a7cc:	41000115 	stw	r4,4(r8)
    a7d0:	d8c01c15 	stw	r3,112(sp)
    a7d4:	d8801b15 	stw	r2,108(sp)
    a7d8:	010001c4 	movi	r4,7
    a7dc:	2080f316 	blt	r4,r2,abac <___svfiprintf_internal_r+0xe90>
    a7e0:	42000204 	addi	r8,r8,8
    a7e4:	d9402117 	ldw	r5,132(sp)
    a7e8:	28000b26 	beq	r5,zero,a818 <___svfiprintf_internal_r+0xafc>
    a7ec:	d9001d04 	addi	r4,sp,116
    a7f0:	18c00084 	addi	r3,r3,2
    a7f4:	10800044 	addi	r2,r2,1
    a7f8:	41000015 	stw	r4,0(r8)
    a7fc:	01000084 	movi	r4,2
    a800:	41000115 	stw	r4,4(r8)
    a804:	d8c01c15 	stw	r3,112(sp)
    a808:	d8801b15 	stw	r2,108(sp)
    a80c:	010001c4 	movi	r4,7
    a810:	2080ef16 	blt	r4,r2,abd0 <___svfiprintf_internal_r+0xeb4>
    a814:	42000204 	addi	r8,r8,8
    a818:	d9402217 	ldw	r5,136(sp)
    a81c:	01002004 	movi	r4,128
    a820:	29008f26 	beq	r5,r4,aa60 <___svfiprintf_internal_r+0xd44>
    a824:	d9002017 	ldw	r4,128(sp)
    a828:	252fc83a 	sub	r23,r4,r20
    a82c:	05c0310e 	bge	zero,r23,a8f4 <___svfiprintf_internal_r+0xbd8>
    a830:	07000404 	movi	fp,16
    a834:	e5c17d0e 	bge	fp,r23,ae2c <___svfiprintf_internal_r+0x1110>
    a838:	01000074 	movhi	r4,1
    a83c:	2113f204 	addi	r4,r4,20424
    a840:	dc002015 	stw	r16,128(sp)
    a844:	dc402215 	stw	r17,136(sp)
    a848:	d9002115 	stw	r4,132(sp)
    a84c:	b823883a 	mov	r17,r23
    a850:	054001c4 	movi	r21,7
    a854:	982f883a 	mov	r23,r19
    a858:	dc002717 	ldw	r16,156(sp)
    a85c:	9027883a 	mov	r19,r18
    a860:	dc802317 	ldw	r18,140(sp)
    a864:	00000306 	br	a874 <___svfiprintf_internal_r+0xb58>
    a868:	8c7ffc04 	addi	r17,r17,-16
    a86c:	42000204 	addi	r8,r8,8
    a870:	e440110e 	bge	fp,r17,a8b8 <___svfiprintf_internal_r+0xb9c>
    a874:	18c00404 	addi	r3,r3,16
    a878:	10800044 	addi	r2,r2,1
    a87c:	45800015 	stw	r22,0(r8)
    a880:	47000115 	stw	fp,4(r8)
    a884:	d8c01c15 	stw	r3,112(sp)
    a888:	d8801b15 	stw	r2,108(sp)
    a88c:	a8bff60e 	bge	r21,r2,a868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538868>
    a890:	d9801a04 	addi	r6,sp,104
    a894:	900b883a 	mov	r5,r18
    a898:	8009883a 	mov	r4,r16
    a89c:	0009b4c0 	call	9b4c <__ssprint_r>
    a8a0:	10005e1e 	bne	r2,zero,aa1c <___svfiprintf_internal_r+0xd00>
    a8a4:	8c7ffc04 	addi	r17,r17,-16
    a8a8:	d8c01c17 	ldw	r3,112(sp)
    a8ac:	d8801b17 	ldw	r2,108(sp)
    a8b0:	d811883a 	mov	r8,sp
    a8b4:	e47fef16 	blt	fp,r17,a874 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538874>
    a8b8:	9825883a 	mov	r18,r19
    a8bc:	dc002017 	ldw	r16,128(sp)
    a8c0:	b827883a 	mov	r19,r23
    a8c4:	882f883a 	mov	r23,r17
    a8c8:	dc402217 	ldw	r17,136(sp)
    a8cc:	d9402117 	ldw	r5,132(sp)
    a8d0:	1dc7883a 	add	r3,r3,r23
    a8d4:	10800044 	addi	r2,r2,1
    a8d8:	41400015 	stw	r5,0(r8)
    a8dc:	45c00115 	stw	r23,4(r8)
    a8e0:	d8c01c15 	stw	r3,112(sp)
    a8e4:	d8801b15 	stw	r2,108(sp)
    a8e8:	010001c4 	movi	r4,7
    a8ec:	2080a616 	blt	r4,r2,ab88 <___svfiprintf_internal_r+0xe6c>
    a8f0:	42000204 	addi	r8,r8,8
    a8f4:	a0c7883a 	add	r3,r20,r3
    a8f8:	10800044 	addi	r2,r2,1
    a8fc:	44400015 	stw	r17,0(r8)
    a900:	45000115 	stw	r20,4(r8)
    a904:	d8c01c15 	stw	r3,112(sp)
    a908:	d8801b15 	stw	r2,108(sp)
    a90c:	010001c4 	movi	r4,7
    a910:	20808816 	blt	r4,r2,ab34 <___svfiprintf_internal_r+0xe18>
    a914:	42000204 	addi	r8,r8,8
    a918:	8400010c 	andi	r16,r16,4
    a91c:	80002c26 	beq	r16,zero,a9d0 <___svfiprintf_internal_r+0xcb4>
    a920:	d8802517 	ldw	r2,148(sp)
    a924:	14a1c83a 	sub	r16,r2,r18
    a928:	0400290e 	bge	zero,r16,a9d0 <___svfiprintf_internal_r+0xcb4>
    a92c:	04400404 	movi	r17,16
    a930:	d8801b17 	ldw	r2,108(sp)
    a934:	8c01a70e 	bge	r17,r16,afd4 <___svfiprintf_internal_r+0x12b8>
    a938:	01400074 	movhi	r5,1
    a93c:	2953f604 	addi	r5,r5,20440
    a940:	d9402815 	stw	r5,160(sp)
    a944:	050001c4 	movi	r20,7
    a948:	dd402717 	ldw	r21,156(sp)
    a94c:	ddc02317 	ldw	r23,140(sp)
    a950:	00000306 	br	a960 <___svfiprintf_internal_r+0xc44>
    a954:	843ffc04 	addi	r16,r16,-16
    a958:	42000204 	addi	r8,r8,8
    a95c:	8c00130e 	bge	r17,r16,a9ac <___svfiprintf_internal_r+0xc90>
    a960:	01000074 	movhi	r4,1
    a964:	18c00404 	addi	r3,r3,16
    a968:	10800044 	addi	r2,r2,1
    a96c:	2113f604 	addi	r4,r4,20440
    a970:	41000015 	stw	r4,0(r8)
    a974:	44400115 	stw	r17,4(r8)
    a978:	d8c01c15 	stw	r3,112(sp)
    a97c:	d8801b15 	stw	r2,108(sp)
    a980:	a0bff40e 	bge	r20,r2,a954 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538954>
    a984:	d9801a04 	addi	r6,sp,104
    a988:	b80b883a 	mov	r5,r23
    a98c:	a809883a 	mov	r4,r21
    a990:	0009b4c0 	call	9b4c <__ssprint_r>
    a994:	1000211e 	bne	r2,zero,aa1c <___svfiprintf_internal_r+0xd00>
    a998:	843ffc04 	addi	r16,r16,-16
    a99c:	d8c01c17 	ldw	r3,112(sp)
    a9a0:	d8801b17 	ldw	r2,108(sp)
    a9a4:	d811883a 	mov	r8,sp
    a9a8:	8c3fed16 	blt	r17,r16,a960 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538960>
    a9ac:	d9402817 	ldw	r5,160(sp)
    a9b0:	1c07883a 	add	r3,r3,r16
    a9b4:	10800044 	addi	r2,r2,1
    a9b8:	41400015 	stw	r5,0(r8)
    a9bc:	44000115 	stw	r16,4(r8)
    a9c0:	d8c01c15 	stw	r3,112(sp)
    a9c4:	d8801b15 	stw	r2,108(sp)
    a9c8:	010001c4 	movi	r4,7
    a9cc:	2080b516 	blt	r4,r2,aca4 <___svfiprintf_internal_r+0xf88>
    a9d0:	d8802517 	ldw	r2,148(sp)
    a9d4:	1480010e 	bge	r2,r18,a9dc <___svfiprintf_internal_r+0xcc0>
    a9d8:	9005883a 	mov	r2,r18
    a9dc:	d9002617 	ldw	r4,152(sp)
    a9e0:	2089883a 	add	r4,r4,r2
    a9e4:	d9002615 	stw	r4,152(sp)
    a9e8:	18005a1e 	bne	r3,zero,ab54 <___svfiprintf_internal_r+0xe38>
    a9ec:	98800007 	ldb	r2,0(r19)
    a9f0:	d8001b15 	stw	zero,108(sp)
    a9f4:	d811883a 	mov	r8,sp
    a9f8:	103cec1e 	bne	r2,zero,9dac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537dac>
    a9fc:	9825883a 	mov	r18,r19
    aa00:	003d0206 	br	9e0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e0c>
    aa04:	d8801c17 	ldw	r2,112(sp)
    aa08:	10000426 	beq	r2,zero,aa1c <___svfiprintf_internal_r+0xd00>
    aa0c:	d9402317 	ldw	r5,140(sp)
    aa10:	d9002717 	ldw	r4,156(sp)
    aa14:	d9801a04 	addi	r6,sp,104
    aa18:	0009b4c0 	call	9b4c <__ssprint_r>
    aa1c:	d9402317 	ldw	r5,140(sp)
    aa20:	d8802617 	ldw	r2,152(sp)
    aa24:	28c0030b 	ldhu	r3,12(r5)
    aa28:	18c0100c 	andi	r3,r3,64
    aa2c:	18015c1e 	bne	r3,zero,afa0 <___svfiprintf_internal_r+0x1284>
    aa30:	dfc03717 	ldw	ra,220(sp)
    aa34:	df003617 	ldw	fp,216(sp)
    aa38:	ddc03517 	ldw	r23,212(sp)
    aa3c:	dd803417 	ldw	r22,208(sp)
    aa40:	dd403317 	ldw	r21,204(sp)
    aa44:	dd003217 	ldw	r20,200(sp)
    aa48:	dcc03117 	ldw	r19,196(sp)
    aa4c:	dc803017 	ldw	r18,192(sp)
    aa50:	dc402f17 	ldw	r17,188(sp)
    aa54:	dc002e17 	ldw	r16,184(sp)
    aa58:	dec03804 	addi	sp,sp,224
    aa5c:	f800283a 	ret
    aa60:	d9002517 	ldw	r4,148(sp)
    aa64:	24afc83a 	sub	r23,r4,r18
    aa68:	05ff6e0e 	bge	zero,r23,a824 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538824>
    aa6c:	07000404 	movi	fp,16
    aa70:	e5c15c0e 	bge	fp,r23,afe4 <___svfiprintf_internal_r+0x12c8>
    aa74:	01000074 	movhi	r4,1
    aa78:	2113f204 	addi	r4,r4,20424
    aa7c:	dc002215 	stw	r16,136(sp)
    aa80:	dc402815 	stw	r17,160(sp)
    aa84:	d9002115 	stw	r4,132(sp)
    aa88:	b823883a 	mov	r17,r23
    aa8c:	054001c4 	movi	r21,7
    aa90:	982f883a 	mov	r23,r19
    aa94:	dc002717 	ldw	r16,156(sp)
    aa98:	9027883a 	mov	r19,r18
    aa9c:	dc802317 	ldw	r18,140(sp)
    aaa0:	00000306 	br	aab0 <___svfiprintf_internal_r+0xd94>
    aaa4:	8c7ffc04 	addi	r17,r17,-16
    aaa8:	42000204 	addi	r8,r8,8
    aaac:	e440110e 	bge	fp,r17,aaf4 <___svfiprintf_internal_r+0xdd8>
    aab0:	18c00404 	addi	r3,r3,16
    aab4:	10800044 	addi	r2,r2,1
    aab8:	45800015 	stw	r22,0(r8)
    aabc:	47000115 	stw	fp,4(r8)
    aac0:	d8c01c15 	stw	r3,112(sp)
    aac4:	d8801b15 	stw	r2,108(sp)
    aac8:	a8bff60e 	bge	r21,r2,aaa4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538aa4>
    aacc:	d9801a04 	addi	r6,sp,104
    aad0:	900b883a 	mov	r5,r18
    aad4:	8009883a 	mov	r4,r16
    aad8:	0009b4c0 	call	9b4c <__ssprint_r>
    aadc:	103fcf1e 	bne	r2,zero,aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    aae0:	8c7ffc04 	addi	r17,r17,-16
    aae4:	d8c01c17 	ldw	r3,112(sp)
    aae8:	d8801b17 	ldw	r2,108(sp)
    aaec:	d811883a 	mov	r8,sp
    aaf0:	e47fef16 	blt	fp,r17,aab0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538ab0>
    aaf4:	9825883a 	mov	r18,r19
    aaf8:	dc002217 	ldw	r16,136(sp)
    aafc:	b827883a 	mov	r19,r23
    ab00:	882f883a 	mov	r23,r17
    ab04:	dc402817 	ldw	r17,160(sp)
    ab08:	d9402117 	ldw	r5,132(sp)
    ab0c:	1dc7883a 	add	r3,r3,r23
    ab10:	10800044 	addi	r2,r2,1
    ab14:	41400015 	stw	r5,0(r8)
    ab18:	45c00115 	stw	r23,4(r8)
    ab1c:	d8c01c15 	stw	r3,112(sp)
    ab20:	d8801b15 	stw	r2,108(sp)
    ab24:	010001c4 	movi	r4,7
    ab28:	2080b716 	blt	r4,r2,ae08 <___svfiprintf_internal_r+0x10ec>
    ab2c:	42000204 	addi	r8,r8,8
    ab30:	003f3c06 	br	a824 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538824>
    ab34:	d9402317 	ldw	r5,140(sp)
    ab38:	d9002717 	ldw	r4,156(sp)
    ab3c:	d9801a04 	addi	r6,sp,104
    ab40:	0009b4c0 	call	9b4c <__ssprint_r>
    ab44:	103fb51e 	bne	r2,zero,aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    ab48:	d8c01c17 	ldw	r3,112(sp)
    ab4c:	d811883a 	mov	r8,sp
    ab50:	003f7106 	br	a918 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538918>
    ab54:	d9402317 	ldw	r5,140(sp)
    ab58:	d9002717 	ldw	r4,156(sp)
    ab5c:	d9801a04 	addi	r6,sp,104
    ab60:	0009b4c0 	call	9b4c <__ssprint_r>
    ab64:	103fa126 	beq	r2,zero,a9ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215389ec>
    ab68:	003fac06 	br	aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    ab6c:	d9402317 	ldw	r5,140(sp)
    ab70:	d9002717 	ldw	r4,156(sp)
    ab74:	d9801a04 	addi	r6,sp,104
    ab78:	0009b4c0 	call	9b4c <__ssprint_r>
    ab7c:	103fa71e 	bne	r2,zero,aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    ab80:	d811883a 	mov	r8,sp
    ab84:	003c9e06 	br	9e00 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e00>
    ab88:	d9402317 	ldw	r5,140(sp)
    ab8c:	d9002717 	ldw	r4,156(sp)
    ab90:	d9801a04 	addi	r6,sp,104
    ab94:	0009b4c0 	call	9b4c <__ssprint_r>
    ab98:	103fa01e 	bne	r2,zero,aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    ab9c:	d8c01c17 	ldw	r3,112(sp)
    aba0:	d8801b17 	ldw	r2,108(sp)
    aba4:	d811883a 	mov	r8,sp
    aba8:	003f5206 	br	a8f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215388f4>
    abac:	d9402317 	ldw	r5,140(sp)
    abb0:	d9002717 	ldw	r4,156(sp)
    abb4:	d9801a04 	addi	r6,sp,104
    abb8:	0009b4c0 	call	9b4c <__ssprint_r>
    abbc:	103f971e 	bne	r2,zero,aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    abc0:	d8c01c17 	ldw	r3,112(sp)
    abc4:	d8801b17 	ldw	r2,108(sp)
    abc8:	d811883a 	mov	r8,sp
    abcc:	003f0506 	br	a7e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215387e4>
    abd0:	d9402317 	ldw	r5,140(sp)
    abd4:	d9002717 	ldw	r4,156(sp)
    abd8:	d9801a04 	addi	r6,sp,104
    abdc:	0009b4c0 	call	9b4c <__ssprint_r>
    abe0:	103f8e1e 	bne	r2,zero,aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    abe4:	d8c01c17 	ldw	r3,112(sp)
    abe8:	d8801b17 	ldw	r2,108(sp)
    abec:	d811883a 	mov	r8,sp
    abf0:	003f0906 	br	a818 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538818>
    abf4:	d9402017 	ldw	r5,128(sp)
    abf8:	d8001d85 	stb	zero,118(sp)
    abfc:	28007716 	blt	r5,zero,addc <___svfiprintf_internal_r+0x10c0>
    ac00:	00ffdfc4 	movi	r3,-129
    ac04:	9504b03a 	or	r2,r18,r20
    ac08:	80e0703a 	and	r16,r16,r3
    ac0c:	103d3926 	beq	r2,zero,a0f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215380f4>
    ac10:	002b883a 	mov	r21,zero
    ac14:	003d3c06 	br	a108 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538108>
    ac18:	d9402317 	ldw	r5,140(sp)
    ac1c:	d9002717 	ldw	r4,156(sp)
    ac20:	d9801a04 	addi	r6,sp,104
    ac24:	0009b4c0 	call	9b4c <__ssprint_r>
    ac28:	103f7c1e 	bne	r2,zero,aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    ac2c:	d8c01c17 	ldw	r3,112(sp)
    ac30:	d8801b17 	ldw	r2,108(sp)
    ac34:	d811883a 	mov	r8,sp
    ac38:	003edd06 	br	a7b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215387b0>
    ac3c:	8080100c 	andi	r2,r16,64
    ac40:	d8001d85 	stb	zero,118(sp)
    ac44:	10008426 	beq	r2,zero,ae58 <___svfiprintf_internal_r+0x113c>
    ac48:	d9402417 	ldw	r5,144(sp)
    ac4c:	d8c02017 	ldw	r3,128(sp)
    ac50:	0029883a 	mov	r20,zero
    ac54:	28800104 	addi	r2,r5,4
    ac58:	2c80000b 	ldhu	r18,0(r5)
    ac5c:	183eab0e 	bge	r3,zero,a70c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153870c>
    ac60:	d8802415 	stw	r2,144(sp)
    ac64:	002b883a 	mov	r21,zero
    ac68:	9504b03a 	or	r2,r18,r20
    ac6c:	103e171e 	bne	r2,zero,a4cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215384cc>
    ac70:	00800044 	movi	r2,1
    ac74:	10803fcc 	andi	r2,r2,255
    ac78:	00c00044 	movi	r3,1
    ac7c:	10c05c26 	beq	r2,r3,adf0 <___svfiprintf_internal_r+0x10d4>
    ac80:	00c00084 	movi	r3,2
    ac84:	10fd1e26 	beq	r2,r3,a100 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538100>
    ac88:	003ec406 	br	a79c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153879c>
    ac8c:	d9401e17 	ldw	r5,120(sp)
    ac90:	2c69c83a 	sub	r20,r5,r17
    ac94:	003d4506 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    ac98:	d8802415 	stw	r2,144(sp)
    ac9c:	98c00007 	ldb	r3,0(r19)
    aca0:	003c6a06 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    aca4:	d9402317 	ldw	r5,140(sp)
    aca8:	d9002717 	ldw	r4,156(sp)
    acac:	d9801a04 	addi	r6,sp,104
    acb0:	0009b4c0 	call	9b4c <__ssprint_r>
    acb4:	103f591e 	bne	r2,zero,aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    acb8:	d8c01c17 	ldw	r3,112(sp)
    acbc:	003f4406 	br	a9d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215389d0>
    acc0:	01400074 	movhi	r5,1
    acc4:	29539104 	addi	r5,r5,20036
    acc8:	d9402915 	stw	r5,164(sp)
    accc:	003d0906 	br	a0f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215380f4>
    acd0:	d8c02417 	ldw	r3,144(sp)
    acd4:	d9002617 	ldw	r4,152(sp)
    acd8:	d9402417 	ldw	r5,144(sp)
    acdc:	18800017 	ldw	r2,0(r3)
    ace0:	2007d7fa 	srai	r3,r4,31
    ace4:	29400104 	addi	r5,r5,4
    ace8:	d9402415 	stw	r5,144(sp)
    acec:	11000015 	stw	r4,0(r2)
    acf0:	10c00115 	stw	r3,4(r2)
    acf4:	003c2b06 	br	9da4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537da4>
    acf8:	d8c01d45 	stb	r3,117(sp)
    acfc:	d8c02017 	ldw	r3,128(sp)
    ad00:	00800c04 	movi	r2,48
    ad04:	d8801d05 	stb	r2,116(sp)
    ad08:	d8001d85 	stb	zero,118(sp)
    ad0c:	80800094 	ori	r2,r16,2
    ad10:	1800ac16 	blt	r3,zero,afc4 <___svfiprintf_internal_r+0x12a8>
    ad14:	00bfdfc4 	movi	r2,-129
    ad18:	80a0703a 	and	r16,r16,r2
    ad1c:	84000094 	ori	r16,r16,2
    ad20:	002b883a 	mov	r21,zero
    ad24:	003cf806 	br	a108 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538108>
    ad28:	98c00007 	ldb	r3,0(r19)
    ad2c:	003c4706 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    ad30:	d9402417 	ldw	r5,144(sp)
    ad34:	2c800017 	ldw	r18,0(r5)
    ad38:	29400104 	addi	r5,r5,4
    ad3c:	d9402415 	stw	r5,144(sp)
    ad40:	9029d7fa 	srai	r20,r18,31
    ad44:	a005883a 	mov	r2,r20
    ad48:	003dd806 	br	a4ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215384ac>
    ad4c:	d9402417 	ldw	r5,144(sp)
    ad50:	0029883a 	mov	r20,zero
    ad54:	2c800017 	ldw	r18,0(r5)
    ad58:	29400104 	addi	r5,r5,4
    ad5c:	d9402415 	stw	r5,144(sp)
    ad60:	003cdb06 	br	a0d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215380d0>
    ad64:	8080100c 	andi	r2,r16,64
    ad68:	d8001d85 	stb	zero,118(sp)
    ad6c:	10003326 	beq	r2,zero,ae3c <___svfiprintf_internal_r+0x1120>
    ad70:	d9002417 	ldw	r4,144(sp)
    ad74:	d9402017 	ldw	r5,128(sp)
    ad78:	0029883a 	mov	r20,zero
    ad7c:	20800104 	addi	r2,r4,4
    ad80:	2480000b 	ldhu	r18,0(r4)
    ad84:	283e7e0e 	bge	r5,zero,a780 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538780>
    ad88:	9506b03a 	or	r3,r18,r20
    ad8c:	d8802415 	stw	r2,144(sp)
    ad90:	183d271e 	bne	r3,zero,a230 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538230>
    ad94:	002b883a 	mov	r21,zero
    ad98:	0005883a 	mov	r2,zero
    ad9c:	003fb506 	br	ac74 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538c74>
    ada0:	98c00043 	ldbu	r3,1(r19)
    ada4:	8c400814 	ori	r17,r17,32
    ada8:	9cc00044 	addi	r19,r19,1
    adac:	18c03fcc 	andi	r3,r3,255
    adb0:	18c0201c 	xori	r3,r3,128
    adb4:	18ffe004 	addi	r3,r3,-128
    adb8:	003c2406 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    adbc:	d8c02415 	stw	r3,144(sp)
    adc0:	002b883a 	mov	r21,zero
    adc4:	003fa806 	br	ac68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538c68>
    adc8:	01000074 	movhi	r4,1
    adcc:	21139104 	addi	r4,r4,20036
    add0:	d9002915 	stw	r4,164(sp)
    add4:	d8c02415 	stw	r3,144(sp)
    add8:	1021883a 	mov	r16,r2
    addc:	9504b03a 	or	r2,r18,r20
    ade0:	103f8b1e 	bne	r2,zero,ac10 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538c10>
    ade4:	002b883a 	mov	r21,zero
    ade8:	00800084 	movi	r2,2
    adec:	003fa106 	br	ac74 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538c74>
    adf0:	0025883a 	mov	r18,zero
    adf4:	94800c04 	addi	r18,r18,48
    adf8:	dc8019c5 	stb	r18,103(sp)
    adfc:	dd002c17 	ldw	r20,176(sp)
    ae00:	dc4019c4 	addi	r17,sp,103
    ae04:	003ce906 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    ae08:	d9402317 	ldw	r5,140(sp)
    ae0c:	d9002717 	ldw	r4,156(sp)
    ae10:	d9801a04 	addi	r6,sp,104
    ae14:	0009b4c0 	call	9b4c <__ssprint_r>
    ae18:	103f001e 	bne	r2,zero,aa1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a1c>
    ae1c:	d8c01c17 	ldw	r3,112(sp)
    ae20:	d8801b17 	ldw	r2,108(sp)
    ae24:	d811883a 	mov	r8,sp
    ae28:	003e7e06 	br	a824 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538824>
    ae2c:	01400074 	movhi	r5,1
    ae30:	2953f204 	addi	r5,r5,20424
    ae34:	d9402115 	stw	r5,132(sp)
    ae38:	003ea406 	br	a8cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215388cc>
    ae3c:	d8c02417 	ldw	r3,144(sp)
    ae40:	d9002017 	ldw	r4,128(sp)
    ae44:	0029883a 	mov	r20,zero
    ae48:	18800104 	addi	r2,r3,4
    ae4c:	1c800017 	ldw	r18,0(r3)
    ae50:	203e4b0e 	bge	r4,zero,a780 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538780>
    ae54:	003fcc06 	br	ad88 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538d88>
    ae58:	d9002417 	ldw	r4,144(sp)
    ae5c:	d9402017 	ldw	r5,128(sp)
    ae60:	0029883a 	mov	r20,zero
    ae64:	20800104 	addi	r2,r4,4
    ae68:	24800017 	ldw	r18,0(r4)
    ae6c:	283e270e 	bge	r5,zero,a70c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153870c>
    ae70:	003f7b06 	br	ac60 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538c60>
    ae74:	8400100c 	andi	r16,r16,64
    ae78:	80003326 	beq	r16,zero,af48 <___svfiprintf_internal_r+0x122c>
    ae7c:	d9402417 	ldw	r5,144(sp)
    ae80:	d8c02617 	ldw	r3,152(sp)
    ae84:	28800017 	ldw	r2,0(r5)
    ae88:	29400104 	addi	r5,r5,4
    ae8c:	d9402415 	stw	r5,144(sp)
    ae90:	10c0000d 	sth	r3,0(r2)
    ae94:	003bc306 	br	9da4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537da4>
    ae98:	d9002417 	ldw	r4,144(sp)
    ae9c:	0029883a 	mov	r20,zero
    aea0:	24800017 	ldw	r18,0(r4)
    aea4:	21000104 	addi	r4,r4,4
    aea8:	d9002415 	stw	r4,144(sp)
    aeac:	003c8806 	br	a0d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215380d0>
    aeb0:	d8c02417 	ldw	r3,144(sp)
    aeb4:	1c800017 	ldw	r18,0(r3)
    aeb8:	18c00104 	addi	r3,r3,4
    aebc:	d8c02415 	stw	r3,144(sp)
    aec0:	9029d7fa 	srai	r20,r18,31
    aec4:	a005883a 	mov	r2,r20
    aec8:	003d7806 	br	a4ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215384ac>
    aecc:	8809883a 	mov	r4,r17
    aed0:	da002d15 	stw	r8,180(sp)
    aed4:	00034080 	call	3408 <strlen>
    aed8:	1029883a 	mov	r20,r2
    aedc:	dd401d83 	ldbu	r21,118(sp)
    aee0:	ddc02415 	stw	r23,144(sp)
    aee4:	d8002015 	stw	zero,128(sp)
    aee8:	da002d17 	ldw	r8,180(sp)
    aeec:	003caf06 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    aef0:	013fffc4 	movi	r4,-1
    aef4:	003df206 	br	a6c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215386c0>
    aef8:	dd002017 	ldw	r20,128(sp)
    aefc:	00800184 	movi	r2,6
    af00:	1500012e 	bgeu	r2,r20,af08 <___svfiprintf_internal_r+0x11ec>
    af04:	1029883a 	mov	r20,r2
    af08:	a025883a 	mov	r18,r20
    af0c:	a0004116 	blt	r20,zero,b014 <___svfiprintf_internal_r+0x12f8>
    af10:	04400074 	movhi	r17,1
    af14:	ddc02415 	stw	r23,144(sp)
    af18:	8c539604 	addi	r17,r17,20056
    af1c:	003ce806 	br	a2c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215382c0>
    af20:	04001004 	movi	r16,64
    af24:	800b883a 	mov	r5,r16
    af28:	00028e80 	call	28e8 <_malloc_r>
    af2c:	d8c02317 	ldw	r3,140(sp)
    af30:	18800015 	stw	r2,0(r3)
    af34:	18800415 	stw	r2,16(r3)
    af38:	10004d26 	beq	r2,zero,b070 <___svfiprintf_internal_r+0x1354>
    af3c:	d9402317 	ldw	r5,140(sp)
    af40:	2c000515 	stw	r16,20(r5)
    af44:	003b8906 	br	9d6c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537d6c>
    af48:	d9002417 	ldw	r4,144(sp)
    af4c:	d9402617 	ldw	r5,152(sp)
    af50:	20800017 	ldw	r2,0(r4)
    af54:	21000104 	addi	r4,r4,4
    af58:	d9002415 	stw	r4,144(sp)
    af5c:	11400015 	stw	r5,0(r2)
    af60:	003b9006 	br	9da4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537da4>
    af64:	8080004c 	andi	r2,r16,1
    af68:	002b883a 	mov	r21,zero
    af6c:	10000526 	beq	r2,zero,af84 <___svfiprintf_internal_r+0x1268>
    af70:	00800c04 	movi	r2,48
    af74:	d88019c5 	stb	r2,103(sp)
    af78:	dd002c17 	ldw	r20,176(sp)
    af7c:	dc4019c4 	addi	r17,sp,103
    af80:	003c8a06 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    af84:	0029883a 	mov	r20,zero
    af88:	dc401a04 	addi	r17,sp,104
    af8c:	003c8706 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    af90:	01400074 	movhi	r5,1
    af94:	2953f604 	addi	r5,r5,20440
    af98:	d9402815 	stw	r5,160(sp)
    af9c:	003cff06 	br	a39c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153839c>
    afa0:	00bfffc4 	movi	r2,-1
    afa4:	003ea206 	br	aa30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a30>
    afa8:	00800044 	movi	r2,1
    afac:	10803fcc 	andi	r2,r2,255
    afb0:	00c00044 	movi	r3,1
    afb4:	10fd4526 	beq	r2,r3,a4cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215384cc>
    afb8:	00c00084 	movi	r3,2
    afbc:	10fc5226 	beq	r2,r3,a108 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538108>
    afc0:	003c9c06 	br	a234 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538234>
    afc4:	1021883a 	mov	r16,r2
    afc8:	002b883a 	mov	r21,zero
    afcc:	00800084 	movi	r2,2
    afd0:	003ff606 	br	afac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538fac>
    afd4:	01000074 	movhi	r4,1
    afd8:	2113f604 	addi	r4,r4,20440
    afdc:	d9002815 	stw	r4,160(sp)
    afe0:	003e7206 	br	a9ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215389ac>
    afe4:	01400074 	movhi	r5,1
    afe8:	2953f204 	addi	r5,r5,20424
    afec:	d9402115 	stw	r5,132(sp)
    aff0:	003ec506 	br	ab08 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538b08>
    aff4:	e027883a 	mov	r19,fp
    aff8:	d8002015 	stw	zero,128(sp)
    affc:	003b9406 	br	9e50 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e50>
    b000:	dd002017 	ldw	r20,128(sp)
    b004:	dd401d83 	ldbu	r21,118(sp)
    b008:	ddc02415 	stw	r23,144(sp)
    b00c:	d8002015 	stw	zero,128(sp)
    b010:	003c6606 	br	a1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381ac>
    b014:	0025883a 	mov	r18,zero
    b018:	003fbd06 	br	af10 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538f10>
    b01c:	d9402417 	ldw	r5,144(sp)
    b020:	d8c02417 	ldw	r3,144(sp)
    b024:	29400017 	ldw	r5,0(r5)
    b028:	19000104 	addi	r4,r3,4
    b02c:	d9002415 	stw	r4,144(sp)
    b030:	d9402015 	stw	r5,128(sp)
    b034:	98c00043 	ldbu	r3,1(r19)
    b038:	e027883a 	mov	r19,fp
    b03c:	283f5b0e 	bge	r5,zero,adac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538dac>
    b040:	18c03fcc 	andi	r3,r3,255
    b044:	013fffc4 	movi	r4,-1
    b048:	18c0201c 	xori	r3,r3,128
    b04c:	d9002015 	stw	r4,128(sp)
    b050:	18ffe004 	addi	r3,r3,-128
    b054:	003b7d06 	br	9e4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21537e4c>
    b058:	dd401d85 	stb	r21,118(sp)
    b05c:	003cf306 	br	a42c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153842c>
    b060:	dd401d85 	stb	r21,118(sp)
    b064:	003d4e06 	br	a5a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215385a0>
    b068:	dd401d85 	stb	r21,118(sp)
    b06c:	003c0e06 	br	a0a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215380a8>
    b070:	d9002717 	ldw	r4,156(sp)
    b074:	00800304 	movi	r2,12
    b078:	20800015 	stw	r2,0(r4)
    b07c:	00bfffc4 	movi	r2,-1
    b080:	003e6b06 	br	aa30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538a30>
    b084:	dd401d85 	stb	r21,118(sp)
    b088:	003d0006 	br	a48c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153848c>
    b08c:	dd401d85 	stb	r21,118(sp)
    b090:	003d7106 	br	a658 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538658>
    b094:	dd401d85 	stb	r21,118(sp)
    b098:	003c5706 	br	a1f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215381f8>
    b09c:	dd401d85 	stb	r21,118(sp)
    b0a0:	003c2e06 	br	a15c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153815c>
    b0a4:	dd401d85 	stb	r21,118(sp)
    b0a8:	003d8c06 	br	a6dc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215386dc>
    b0ac:	dd401d85 	stb	r21,118(sp)
    b0b0:	003da706 	br	a750 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21538750>
    b0b4:	dd401d85 	stb	r21,118(sp)
    b0b8:	003cc806 	br	a3dc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215383dc>

0000b0bc <_write_r>:
    b0bc:	defffd04 	addi	sp,sp,-12
    b0c0:	2805883a 	mov	r2,r5
    b0c4:	dc000015 	stw	r16,0(sp)
    b0c8:	040000b4 	movhi	r16,2
    b0cc:	dc400115 	stw	r17,4(sp)
    b0d0:	300b883a 	mov	r5,r6
    b0d4:	8422fa04 	addi	r16,r16,-29720
    b0d8:	2023883a 	mov	r17,r4
    b0dc:	380d883a 	mov	r6,r7
    b0e0:	1009883a 	mov	r4,r2
    b0e4:	dfc00215 	stw	ra,8(sp)
    b0e8:	80000015 	stw	zero,0(r16)
    b0ec:	000fb900 	call	fb90 <write>
    b0f0:	00ffffc4 	movi	r3,-1
    b0f4:	10c00526 	beq	r2,r3,b10c <_write_r+0x50>
    b0f8:	dfc00217 	ldw	ra,8(sp)
    b0fc:	dc400117 	ldw	r17,4(sp)
    b100:	dc000017 	ldw	r16,0(sp)
    b104:	dec00304 	addi	sp,sp,12
    b108:	f800283a 	ret
    b10c:	80c00017 	ldw	r3,0(r16)
    b110:	183ff926 	beq	r3,zero,b0f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215390f8>
    b114:	88c00015 	stw	r3,0(r17)
    b118:	003ff706 	br	b0f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215390f8>

0000b11c <__swsetup_r>:
    b11c:	00800074 	movhi	r2,1
    b120:	defffd04 	addi	sp,sp,-12
    b124:	109b8d04 	addi	r2,r2,28212
    b128:	dc400115 	stw	r17,4(sp)
    b12c:	2023883a 	mov	r17,r4
    b130:	11000017 	ldw	r4,0(r2)
    b134:	dc000015 	stw	r16,0(sp)
    b138:	dfc00215 	stw	ra,8(sp)
    b13c:	2821883a 	mov	r16,r5
    b140:	20000226 	beq	r4,zero,b14c <__swsetup_r+0x30>
    b144:	20800e17 	ldw	r2,56(r4)
    b148:	10003126 	beq	r2,zero,b210 <__swsetup_r+0xf4>
    b14c:	8080030b 	ldhu	r2,12(r16)
    b150:	10c0020c 	andi	r3,r2,8
    b154:	1009883a 	mov	r4,r2
    b158:	18000f26 	beq	r3,zero,b198 <__swsetup_r+0x7c>
    b15c:	80c00417 	ldw	r3,16(r16)
    b160:	18001526 	beq	r3,zero,b1b8 <__swsetup_r+0x9c>
    b164:	1100004c 	andi	r4,r2,1
    b168:	20001c1e 	bne	r4,zero,b1dc <__swsetup_r+0xc0>
    b16c:	1080008c 	andi	r2,r2,2
    b170:	1000291e 	bne	r2,zero,b218 <__swsetup_r+0xfc>
    b174:	80800517 	ldw	r2,20(r16)
    b178:	80800215 	stw	r2,8(r16)
    b17c:	18001c26 	beq	r3,zero,b1f0 <__swsetup_r+0xd4>
    b180:	0005883a 	mov	r2,zero
    b184:	dfc00217 	ldw	ra,8(sp)
    b188:	dc400117 	ldw	r17,4(sp)
    b18c:	dc000017 	ldw	r16,0(sp)
    b190:	dec00304 	addi	sp,sp,12
    b194:	f800283a 	ret
    b198:	2080040c 	andi	r2,r4,16
    b19c:	10002e26 	beq	r2,zero,b258 <__swsetup_r+0x13c>
    b1a0:	2080010c 	andi	r2,r4,4
    b1a4:	10001e1e 	bne	r2,zero,b220 <__swsetup_r+0x104>
    b1a8:	80c00417 	ldw	r3,16(r16)
    b1ac:	20800214 	ori	r2,r4,8
    b1b0:	8080030d 	sth	r2,12(r16)
    b1b4:	183feb1e 	bne	r3,zero,b164 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539164>
    b1b8:	1100a00c 	andi	r4,r2,640
    b1bc:	01408004 	movi	r5,512
    b1c0:	217fe826 	beq	r4,r5,b164 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539164>
    b1c4:	800b883a 	mov	r5,r16
    b1c8:	8809883a 	mov	r4,r17
    b1cc:	000b7ac0 	call	b7ac <__smakebuf_r>
    b1d0:	8080030b 	ldhu	r2,12(r16)
    b1d4:	80c00417 	ldw	r3,16(r16)
    b1d8:	003fe206 	br	b164 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539164>
    b1dc:	80800517 	ldw	r2,20(r16)
    b1e0:	80000215 	stw	zero,8(r16)
    b1e4:	0085c83a 	sub	r2,zero,r2
    b1e8:	80800615 	stw	r2,24(r16)
    b1ec:	183fe41e 	bne	r3,zero,b180 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539180>
    b1f0:	80c0030b 	ldhu	r3,12(r16)
    b1f4:	0005883a 	mov	r2,zero
    b1f8:	1900200c 	andi	r4,r3,128
    b1fc:	203fe126 	beq	r4,zero,b184 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539184>
    b200:	18c01014 	ori	r3,r3,64
    b204:	80c0030d 	sth	r3,12(r16)
    b208:	00bfffc4 	movi	r2,-1
    b20c:	003fdd06 	br	b184 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539184>
    b210:	000736c0 	call	736c <__sinit>
    b214:	003fcd06 	br	b14c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153914c>
    b218:	0005883a 	mov	r2,zero
    b21c:	003fd606 	br	b178 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539178>
    b220:	81400c17 	ldw	r5,48(r16)
    b224:	28000626 	beq	r5,zero,b240 <__swsetup_r+0x124>
    b228:	80801004 	addi	r2,r16,64
    b22c:	28800326 	beq	r5,r2,b23c <__swsetup_r+0x120>
    b230:	8809883a 	mov	r4,r17
    b234:	00074e00 	call	74e0 <_free_r>
    b238:	8100030b 	ldhu	r4,12(r16)
    b23c:	80000c15 	stw	zero,48(r16)
    b240:	80c00417 	ldw	r3,16(r16)
    b244:	00bff6c4 	movi	r2,-37
    b248:	1108703a 	and	r4,r2,r4
    b24c:	80000115 	stw	zero,4(r16)
    b250:	80c00015 	stw	r3,0(r16)
    b254:	003fd506 	br	b1ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215391ac>
    b258:	00800244 	movi	r2,9
    b25c:	88800015 	stw	r2,0(r17)
    b260:	20801014 	ori	r2,r4,64
    b264:	8080030d 	sth	r2,12(r16)
    b268:	00bfffc4 	movi	r2,-1
    b26c:	003fc506 	br	b184 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539184>

0000b270 <_close_r>:
    b270:	defffd04 	addi	sp,sp,-12
    b274:	dc000015 	stw	r16,0(sp)
    b278:	040000b4 	movhi	r16,2
    b27c:	dc400115 	stw	r17,4(sp)
    b280:	8422fa04 	addi	r16,r16,-29720
    b284:	2023883a 	mov	r17,r4
    b288:	2809883a 	mov	r4,r5
    b28c:	dfc00215 	stw	ra,8(sp)
    b290:	80000015 	stw	zero,0(r16)
    b294:	000f0680 	call	f068 <close>
    b298:	00ffffc4 	movi	r3,-1
    b29c:	10c00526 	beq	r2,r3,b2b4 <_close_r+0x44>
    b2a0:	dfc00217 	ldw	ra,8(sp)
    b2a4:	dc400117 	ldw	r17,4(sp)
    b2a8:	dc000017 	ldw	r16,0(sp)
    b2ac:	dec00304 	addi	sp,sp,12
    b2b0:	f800283a 	ret
    b2b4:	80c00017 	ldw	r3,0(r16)
    b2b8:	183ff926 	beq	r3,zero,b2a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215392a0>
    b2bc:	88c00015 	stw	r3,0(r17)
    b2c0:	003ff706 	br	b2a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215392a0>

0000b2c4 <_calloc_r>:
    b2c4:	defffe04 	addi	sp,sp,-8
    b2c8:	2805883a 	mov	r2,r5
    b2cc:	dc000015 	stw	r16,0(sp)
    b2d0:	300b883a 	mov	r5,r6
    b2d4:	2021883a 	mov	r16,r4
    b2d8:	1009883a 	mov	r4,r2
    b2dc:	dfc00115 	stw	ra,4(sp)
    b2e0:	00020100 	call	2010 <__mulsi3>
    b2e4:	100b883a 	mov	r5,r2
    b2e8:	8009883a 	mov	r4,r16
    b2ec:	00028e80 	call	28e8 <_malloc_r>
    b2f0:	10002926 	beq	r2,zero,b398 <_calloc_r+0xd4>
    b2f4:	11bfff17 	ldw	r6,-4(r2)
    b2f8:	1021883a 	mov	r16,r2
    b2fc:	00bfff04 	movi	r2,-4
    b300:	308c703a 	and	r6,r6,r2
    b304:	00c00904 	movi	r3,36
    b308:	308d883a 	add	r6,r6,r2
    b30c:	19801636 	bltu	r3,r6,b368 <_calloc_r+0xa4>
    b310:	008004c4 	movi	r2,19
    b314:	11800b2e 	bgeu	r2,r6,b344 <_calloc_r+0x80>
    b318:	80000015 	stw	zero,0(r16)
    b31c:	80000115 	stw	zero,4(r16)
    b320:	008006c4 	movi	r2,27
    b324:	11801a2e 	bgeu	r2,r6,b390 <_calloc_r+0xcc>
    b328:	80000215 	stw	zero,8(r16)
    b32c:	80000315 	stw	zero,12(r16)
    b330:	30c0151e 	bne	r6,r3,b388 <_calloc_r+0xc4>
    b334:	80000415 	stw	zero,16(r16)
    b338:	80800604 	addi	r2,r16,24
    b33c:	80000515 	stw	zero,20(r16)
    b340:	00000106 	br	b348 <_calloc_r+0x84>
    b344:	8005883a 	mov	r2,r16
    b348:	10000015 	stw	zero,0(r2)
    b34c:	10000115 	stw	zero,4(r2)
    b350:	10000215 	stw	zero,8(r2)
    b354:	8005883a 	mov	r2,r16
    b358:	dfc00117 	ldw	ra,4(sp)
    b35c:	dc000017 	ldw	r16,0(sp)
    b360:	dec00204 	addi	sp,sp,8
    b364:	f800283a 	ret
    b368:	000b883a 	mov	r5,zero
    b36c:	8009883a 	mov	r4,r16
    b370:	00030f40 	call	30f4 <memset>
    b374:	8005883a 	mov	r2,r16
    b378:	dfc00117 	ldw	ra,4(sp)
    b37c:	dc000017 	ldw	r16,0(sp)
    b380:	dec00204 	addi	sp,sp,8
    b384:	f800283a 	ret
    b388:	80800404 	addi	r2,r16,16
    b38c:	003fee06 	br	b348 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539348>
    b390:	80800204 	addi	r2,r16,8
    b394:	003fec06 	br	b348 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539348>
    b398:	0005883a 	mov	r2,zero
    b39c:	003fee06 	br	b358 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539358>

0000b3a0 <_fclose_r>:
    b3a0:	28003926 	beq	r5,zero,b488 <_fclose_r+0xe8>
    b3a4:	defffc04 	addi	sp,sp,-16
    b3a8:	dc400115 	stw	r17,4(sp)
    b3ac:	dc000015 	stw	r16,0(sp)
    b3b0:	dfc00315 	stw	ra,12(sp)
    b3b4:	dc800215 	stw	r18,8(sp)
    b3b8:	2023883a 	mov	r17,r4
    b3bc:	2821883a 	mov	r16,r5
    b3c0:	20000226 	beq	r4,zero,b3cc <_fclose_r+0x2c>
    b3c4:	20800e17 	ldw	r2,56(r4)
    b3c8:	10002726 	beq	r2,zero,b468 <_fclose_r+0xc8>
    b3cc:	8080030f 	ldh	r2,12(r16)
    b3d0:	1000071e 	bne	r2,zero,b3f0 <_fclose_r+0x50>
    b3d4:	0005883a 	mov	r2,zero
    b3d8:	dfc00317 	ldw	ra,12(sp)
    b3dc:	dc800217 	ldw	r18,8(sp)
    b3e0:	dc400117 	ldw	r17,4(sp)
    b3e4:	dc000017 	ldw	r16,0(sp)
    b3e8:	dec00404 	addi	sp,sp,16
    b3ec:	f800283a 	ret
    b3f0:	800b883a 	mov	r5,r16
    b3f4:	8809883a 	mov	r4,r17
    b3f8:	000b4a40 	call	b4a4 <__sflush_r>
    b3fc:	1025883a 	mov	r18,r2
    b400:	80800b17 	ldw	r2,44(r16)
    b404:	10000426 	beq	r2,zero,b418 <_fclose_r+0x78>
    b408:	81400717 	ldw	r5,28(r16)
    b40c:	8809883a 	mov	r4,r17
    b410:	103ee83a 	callr	r2
    b414:	10001616 	blt	r2,zero,b470 <_fclose_r+0xd0>
    b418:	8080030b 	ldhu	r2,12(r16)
    b41c:	1080200c 	andi	r2,r2,128
    b420:	1000151e 	bne	r2,zero,b478 <_fclose_r+0xd8>
    b424:	81400c17 	ldw	r5,48(r16)
    b428:	28000526 	beq	r5,zero,b440 <_fclose_r+0xa0>
    b42c:	80801004 	addi	r2,r16,64
    b430:	28800226 	beq	r5,r2,b43c <_fclose_r+0x9c>
    b434:	8809883a 	mov	r4,r17
    b438:	00074e00 	call	74e0 <_free_r>
    b43c:	80000c15 	stw	zero,48(r16)
    b440:	81401117 	ldw	r5,68(r16)
    b444:	28000326 	beq	r5,zero,b454 <_fclose_r+0xb4>
    b448:	8809883a 	mov	r4,r17
    b44c:	00074e00 	call	74e0 <_free_r>
    b450:	80001115 	stw	zero,68(r16)
    b454:	000737c0 	call	737c <__sfp_lock_acquire>
    b458:	8000030d 	sth	zero,12(r16)
    b45c:	00073800 	call	7380 <__sfp_lock_release>
    b460:	9005883a 	mov	r2,r18
    b464:	003fdc06 	br	b3d8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215393d8>
    b468:	000736c0 	call	736c <__sinit>
    b46c:	003fd706 	br	b3cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215393cc>
    b470:	04bfffc4 	movi	r18,-1
    b474:	003fe806 	br	b418 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539418>
    b478:	81400417 	ldw	r5,16(r16)
    b47c:	8809883a 	mov	r4,r17
    b480:	00074e00 	call	74e0 <_free_r>
    b484:	003fe706 	br	b424 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539424>
    b488:	0005883a 	mov	r2,zero
    b48c:	f800283a 	ret

0000b490 <fclose>:
    b490:	00800074 	movhi	r2,1
    b494:	109b8d04 	addi	r2,r2,28212
    b498:	200b883a 	mov	r5,r4
    b49c:	11000017 	ldw	r4,0(r2)
    b4a0:	000b3a01 	jmpi	b3a0 <_fclose_r>

0000b4a4 <__sflush_r>:
    b4a4:	2880030b 	ldhu	r2,12(r5)
    b4a8:	defffb04 	addi	sp,sp,-20
    b4ac:	dcc00315 	stw	r19,12(sp)
    b4b0:	dc400115 	stw	r17,4(sp)
    b4b4:	dfc00415 	stw	ra,16(sp)
    b4b8:	dc800215 	stw	r18,8(sp)
    b4bc:	dc000015 	stw	r16,0(sp)
    b4c0:	10c0020c 	andi	r3,r2,8
    b4c4:	2823883a 	mov	r17,r5
    b4c8:	2027883a 	mov	r19,r4
    b4cc:	1800311e 	bne	r3,zero,b594 <__sflush_r+0xf0>
    b4d0:	28c00117 	ldw	r3,4(r5)
    b4d4:	10820014 	ori	r2,r2,2048
    b4d8:	2880030d 	sth	r2,12(r5)
    b4dc:	00c04b0e 	bge	zero,r3,b60c <__sflush_r+0x168>
    b4e0:	8a000a17 	ldw	r8,40(r17)
    b4e4:	40002326 	beq	r8,zero,b574 <__sflush_r+0xd0>
    b4e8:	9c000017 	ldw	r16,0(r19)
    b4ec:	10c4000c 	andi	r3,r2,4096
    b4f0:	98000015 	stw	zero,0(r19)
    b4f4:	18004826 	beq	r3,zero,b618 <__sflush_r+0x174>
    b4f8:	89801417 	ldw	r6,80(r17)
    b4fc:	10c0010c 	andi	r3,r2,4
    b500:	18000626 	beq	r3,zero,b51c <__sflush_r+0x78>
    b504:	88c00117 	ldw	r3,4(r17)
    b508:	88800c17 	ldw	r2,48(r17)
    b50c:	30cdc83a 	sub	r6,r6,r3
    b510:	10000226 	beq	r2,zero,b51c <__sflush_r+0x78>
    b514:	88800f17 	ldw	r2,60(r17)
    b518:	308dc83a 	sub	r6,r6,r2
    b51c:	89400717 	ldw	r5,28(r17)
    b520:	000f883a 	mov	r7,zero
    b524:	9809883a 	mov	r4,r19
    b528:	403ee83a 	callr	r8
    b52c:	00ffffc4 	movi	r3,-1
    b530:	10c04426 	beq	r2,r3,b644 <__sflush_r+0x1a0>
    b534:	88c0030b 	ldhu	r3,12(r17)
    b538:	89000417 	ldw	r4,16(r17)
    b53c:	88000115 	stw	zero,4(r17)
    b540:	197dffcc 	andi	r5,r3,63487
    b544:	8940030d 	sth	r5,12(r17)
    b548:	89000015 	stw	r4,0(r17)
    b54c:	18c4000c 	andi	r3,r3,4096
    b550:	18002c1e 	bne	r3,zero,b604 <__sflush_r+0x160>
    b554:	89400c17 	ldw	r5,48(r17)
    b558:	9c000015 	stw	r16,0(r19)
    b55c:	28000526 	beq	r5,zero,b574 <__sflush_r+0xd0>
    b560:	88801004 	addi	r2,r17,64
    b564:	28800226 	beq	r5,r2,b570 <__sflush_r+0xcc>
    b568:	9809883a 	mov	r4,r19
    b56c:	00074e00 	call	74e0 <_free_r>
    b570:	88000c15 	stw	zero,48(r17)
    b574:	0005883a 	mov	r2,zero
    b578:	dfc00417 	ldw	ra,16(sp)
    b57c:	dcc00317 	ldw	r19,12(sp)
    b580:	dc800217 	ldw	r18,8(sp)
    b584:	dc400117 	ldw	r17,4(sp)
    b588:	dc000017 	ldw	r16,0(sp)
    b58c:	dec00504 	addi	sp,sp,20
    b590:	f800283a 	ret
    b594:	2c800417 	ldw	r18,16(r5)
    b598:	903ff626 	beq	r18,zero,b574 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539574>
    b59c:	2c000017 	ldw	r16,0(r5)
    b5a0:	108000cc 	andi	r2,r2,3
    b5a4:	2c800015 	stw	r18,0(r5)
    b5a8:	84a1c83a 	sub	r16,r16,r18
    b5ac:	1000131e 	bne	r2,zero,b5fc <__sflush_r+0x158>
    b5b0:	28800517 	ldw	r2,20(r5)
    b5b4:	88800215 	stw	r2,8(r17)
    b5b8:	04000316 	blt	zero,r16,b5c8 <__sflush_r+0x124>
    b5bc:	003fed06 	br	b574 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539574>
    b5c0:	90a5883a 	add	r18,r18,r2
    b5c4:	043feb0e 	bge	zero,r16,b574 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539574>
    b5c8:	88800917 	ldw	r2,36(r17)
    b5cc:	89400717 	ldw	r5,28(r17)
    b5d0:	800f883a 	mov	r7,r16
    b5d4:	900d883a 	mov	r6,r18
    b5d8:	9809883a 	mov	r4,r19
    b5dc:	103ee83a 	callr	r2
    b5e0:	80a1c83a 	sub	r16,r16,r2
    b5e4:	00bff616 	blt	zero,r2,b5c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215395c0>
    b5e8:	88c0030b 	ldhu	r3,12(r17)
    b5ec:	00bfffc4 	movi	r2,-1
    b5f0:	18c01014 	ori	r3,r3,64
    b5f4:	88c0030d 	sth	r3,12(r17)
    b5f8:	003fdf06 	br	b578 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539578>
    b5fc:	0005883a 	mov	r2,zero
    b600:	003fec06 	br	b5b4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215395b4>
    b604:	88801415 	stw	r2,80(r17)
    b608:	003fd206 	br	b554 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539554>
    b60c:	28c00f17 	ldw	r3,60(r5)
    b610:	00ffb316 	blt	zero,r3,b4e0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215394e0>
    b614:	003fd706 	br	b574 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539574>
    b618:	89400717 	ldw	r5,28(r17)
    b61c:	000d883a 	mov	r6,zero
    b620:	01c00044 	movi	r7,1
    b624:	9809883a 	mov	r4,r19
    b628:	403ee83a 	callr	r8
    b62c:	100d883a 	mov	r6,r2
    b630:	00bfffc4 	movi	r2,-1
    b634:	30801426 	beq	r6,r2,b688 <__sflush_r+0x1e4>
    b638:	8880030b 	ldhu	r2,12(r17)
    b63c:	8a000a17 	ldw	r8,40(r17)
    b640:	003fae06 	br	b4fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215394fc>
    b644:	98c00017 	ldw	r3,0(r19)
    b648:	183fba26 	beq	r3,zero,b534 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539534>
    b64c:	01000744 	movi	r4,29
    b650:	19000626 	beq	r3,r4,b66c <__sflush_r+0x1c8>
    b654:	01000584 	movi	r4,22
    b658:	19000426 	beq	r3,r4,b66c <__sflush_r+0x1c8>
    b65c:	88c0030b 	ldhu	r3,12(r17)
    b660:	18c01014 	ori	r3,r3,64
    b664:	88c0030d 	sth	r3,12(r17)
    b668:	003fc306 	br	b578 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539578>
    b66c:	8880030b 	ldhu	r2,12(r17)
    b670:	88c00417 	ldw	r3,16(r17)
    b674:	88000115 	stw	zero,4(r17)
    b678:	10bdffcc 	andi	r2,r2,63487
    b67c:	8880030d 	sth	r2,12(r17)
    b680:	88c00015 	stw	r3,0(r17)
    b684:	003fb306 	br	b554 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539554>
    b688:	98800017 	ldw	r2,0(r19)
    b68c:	103fea26 	beq	r2,zero,b638 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539638>
    b690:	00c00744 	movi	r3,29
    b694:	10c00226 	beq	r2,r3,b6a0 <__sflush_r+0x1fc>
    b698:	00c00584 	movi	r3,22
    b69c:	10c0031e 	bne	r2,r3,b6ac <__sflush_r+0x208>
    b6a0:	9c000015 	stw	r16,0(r19)
    b6a4:	0005883a 	mov	r2,zero
    b6a8:	003fb306 	br	b578 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539578>
    b6ac:	88c0030b 	ldhu	r3,12(r17)
    b6b0:	3005883a 	mov	r2,r6
    b6b4:	18c01014 	ori	r3,r3,64
    b6b8:	88c0030d 	sth	r3,12(r17)
    b6bc:	003fae06 	br	b578 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539578>

0000b6c0 <_fflush_r>:
    b6c0:	defffd04 	addi	sp,sp,-12
    b6c4:	dc000115 	stw	r16,4(sp)
    b6c8:	dfc00215 	stw	ra,8(sp)
    b6cc:	2021883a 	mov	r16,r4
    b6d0:	20000226 	beq	r4,zero,b6dc <_fflush_r+0x1c>
    b6d4:	20800e17 	ldw	r2,56(r4)
    b6d8:	10000c26 	beq	r2,zero,b70c <_fflush_r+0x4c>
    b6dc:	2880030f 	ldh	r2,12(r5)
    b6e0:	1000051e 	bne	r2,zero,b6f8 <_fflush_r+0x38>
    b6e4:	0005883a 	mov	r2,zero
    b6e8:	dfc00217 	ldw	ra,8(sp)
    b6ec:	dc000117 	ldw	r16,4(sp)
    b6f0:	dec00304 	addi	sp,sp,12
    b6f4:	f800283a 	ret
    b6f8:	8009883a 	mov	r4,r16
    b6fc:	dfc00217 	ldw	ra,8(sp)
    b700:	dc000117 	ldw	r16,4(sp)
    b704:	dec00304 	addi	sp,sp,12
    b708:	000b4a41 	jmpi	b4a4 <__sflush_r>
    b70c:	d9400015 	stw	r5,0(sp)
    b710:	000736c0 	call	736c <__sinit>
    b714:	d9400017 	ldw	r5,0(sp)
    b718:	003ff006 	br	b6dc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215396dc>

0000b71c <fflush>:
    b71c:	20000526 	beq	r4,zero,b734 <fflush+0x18>
    b720:	00800074 	movhi	r2,1
    b724:	109b8d04 	addi	r2,r2,28212
    b728:	200b883a 	mov	r5,r4
    b72c:	11000017 	ldw	r4,0(r2)
    b730:	000b6c01 	jmpi	b6c0 <_fflush_r>
    b734:	00800074 	movhi	r2,1
    b738:	109b8c04 	addi	r2,r2,28208
    b73c:	11000017 	ldw	r4,0(r2)
    b740:	01400074 	movhi	r5,1
    b744:	296db004 	addi	r5,r5,-18752
    b748:	0007d7c1 	jmpi	7d7c <_fwalk_reent>

0000b74c <_lseek_r>:
    b74c:	defffd04 	addi	sp,sp,-12
    b750:	2805883a 	mov	r2,r5
    b754:	dc000015 	stw	r16,0(sp)
    b758:	040000b4 	movhi	r16,2
    b75c:	dc400115 	stw	r17,4(sp)
    b760:	300b883a 	mov	r5,r6
    b764:	8422fa04 	addi	r16,r16,-29720
    b768:	2023883a 	mov	r17,r4
    b76c:	380d883a 	mov	r6,r7
    b770:	1009883a 	mov	r4,r2
    b774:	dfc00215 	stw	ra,8(sp)
    b778:	80000015 	stw	zero,0(r16)
    b77c:	000f7100 	call	f710 <lseek>
    b780:	00ffffc4 	movi	r3,-1
    b784:	10c00526 	beq	r2,r3,b79c <_lseek_r+0x50>
    b788:	dfc00217 	ldw	ra,8(sp)
    b78c:	dc400117 	ldw	r17,4(sp)
    b790:	dc000017 	ldw	r16,0(sp)
    b794:	dec00304 	addi	sp,sp,12
    b798:	f800283a 	ret
    b79c:	80c00017 	ldw	r3,0(r16)
    b7a0:	183ff926 	beq	r3,zero,b788 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539788>
    b7a4:	88c00015 	stw	r3,0(r17)
    b7a8:	003ff706 	br	b788 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539788>

0000b7ac <__smakebuf_r>:
    b7ac:	2880030b 	ldhu	r2,12(r5)
    b7b0:	10c0008c 	andi	r3,r2,2
    b7b4:	1800411e 	bne	r3,zero,b8bc <__smakebuf_r+0x110>
    b7b8:	deffec04 	addi	sp,sp,-80
    b7bc:	dc000f15 	stw	r16,60(sp)
    b7c0:	2821883a 	mov	r16,r5
    b7c4:	2940038f 	ldh	r5,14(r5)
    b7c8:	dc401015 	stw	r17,64(sp)
    b7cc:	dfc01315 	stw	ra,76(sp)
    b7d0:	dcc01215 	stw	r19,72(sp)
    b7d4:	dc801115 	stw	r18,68(sp)
    b7d8:	2023883a 	mov	r17,r4
    b7dc:	28001c16 	blt	r5,zero,b850 <__smakebuf_r+0xa4>
    b7e0:	d80d883a 	mov	r6,sp
    b7e4:	000b9c80 	call	b9c8 <_fstat_r>
    b7e8:	10001816 	blt	r2,zero,b84c <__smakebuf_r+0xa0>
    b7ec:	d8800117 	ldw	r2,4(sp)
    b7f0:	00e00014 	movui	r3,32768
    b7f4:	10bc000c 	andi	r2,r2,61440
    b7f8:	14c80020 	cmpeqi	r19,r2,8192
    b7fc:	10c03726 	beq	r2,r3,b8dc <__smakebuf_r+0x130>
    b800:	80c0030b 	ldhu	r3,12(r16)
    b804:	18c20014 	ori	r3,r3,2048
    b808:	80c0030d 	sth	r3,12(r16)
    b80c:	00c80004 	movi	r3,8192
    b810:	10c0521e 	bne	r2,r3,b95c <__smakebuf_r+0x1b0>
    b814:	8140038f 	ldh	r5,14(r16)
    b818:	8809883a 	mov	r4,r17
    b81c:	000ba240 	call	ba24 <_isatty_r>
    b820:	10004c26 	beq	r2,zero,b954 <__smakebuf_r+0x1a8>
    b824:	8080030b 	ldhu	r2,12(r16)
    b828:	80c010c4 	addi	r3,r16,67
    b82c:	80c00015 	stw	r3,0(r16)
    b830:	10800054 	ori	r2,r2,1
    b834:	8080030d 	sth	r2,12(r16)
    b838:	00800044 	movi	r2,1
    b83c:	80c00415 	stw	r3,16(r16)
    b840:	80800515 	stw	r2,20(r16)
    b844:	04810004 	movi	r18,1024
    b848:	00000706 	br	b868 <__smakebuf_r+0xbc>
    b84c:	8080030b 	ldhu	r2,12(r16)
    b850:	10c0200c 	andi	r3,r2,128
    b854:	18001f1e 	bne	r3,zero,b8d4 <__smakebuf_r+0x128>
    b858:	04810004 	movi	r18,1024
    b85c:	10820014 	ori	r2,r2,2048
    b860:	8080030d 	sth	r2,12(r16)
    b864:	0027883a 	mov	r19,zero
    b868:	900b883a 	mov	r5,r18
    b86c:	8809883a 	mov	r4,r17
    b870:	00028e80 	call	28e8 <_malloc_r>
    b874:	10002c26 	beq	r2,zero,b928 <__smakebuf_r+0x17c>
    b878:	80c0030b 	ldhu	r3,12(r16)
    b87c:	01000034 	movhi	r4,0
    b880:	211c0504 	addi	r4,r4,28692
    b884:	89000f15 	stw	r4,60(r17)
    b888:	18c02014 	ori	r3,r3,128
    b88c:	80c0030d 	sth	r3,12(r16)
    b890:	80800015 	stw	r2,0(r16)
    b894:	80800415 	stw	r2,16(r16)
    b898:	84800515 	stw	r18,20(r16)
    b89c:	98001a1e 	bne	r19,zero,b908 <__smakebuf_r+0x15c>
    b8a0:	dfc01317 	ldw	ra,76(sp)
    b8a4:	dcc01217 	ldw	r19,72(sp)
    b8a8:	dc801117 	ldw	r18,68(sp)
    b8ac:	dc401017 	ldw	r17,64(sp)
    b8b0:	dc000f17 	ldw	r16,60(sp)
    b8b4:	dec01404 	addi	sp,sp,80
    b8b8:	f800283a 	ret
    b8bc:	288010c4 	addi	r2,r5,67
    b8c0:	28800015 	stw	r2,0(r5)
    b8c4:	28800415 	stw	r2,16(r5)
    b8c8:	00800044 	movi	r2,1
    b8cc:	28800515 	stw	r2,20(r5)
    b8d0:	f800283a 	ret
    b8d4:	04801004 	movi	r18,64
    b8d8:	003fe006 	br	b85c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153985c>
    b8dc:	81000a17 	ldw	r4,40(r16)
    b8e0:	00c00074 	movhi	r3,1
    b8e4:	18e68304 	addi	r3,r3,-26100
    b8e8:	20ffc51e 	bne	r4,r3,b800 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539800>
    b8ec:	8080030b 	ldhu	r2,12(r16)
    b8f0:	04810004 	movi	r18,1024
    b8f4:	84801315 	stw	r18,76(r16)
    b8f8:	1484b03a 	or	r2,r2,r18
    b8fc:	8080030d 	sth	r2,12(r16)
    b900:	0027883a 	mov	r19,zero
    b904:	003fd806 	br	b868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539868>
    b908:	8140038f 	ldh	r5,14(r16)
    b90c:	8809883a 	mov	r4,r17
    b910:	000ba240 	call	ba24 <_isatty_r>
    b914:	103fe226 	beq	r2,zero,b8a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215398a0>
    b918:	8080030b 	ldhu	r2,12(r16)
    b91c:	10800054 	ori	r2,r2,1
    b920:	8080030d 	sth	r2,12(r16)
    b924:	003fde06 	br	b8a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215398a0>
    b928:	8080030b 	ldhu	r2,12(r16)
    b92c:	10c0800c 	andi	r3,r2,512
    b930:	183fdb1e 	bne	r3,zero,b8a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215398a0>
    b934:	10800094 	ori	r2,r2,2
    b938:	80c010c4 	addi	r3,r16,67
    b93c:	8080030d 	sth	r2,12(r16)
    b940:	00800044 	movi	r2,1
    b944:	80c00015 	stw	r3,0(r16)
    b948:	80c00415 	stw	r3,16(r16)
    b94c:	80800515 	stw	r2,20(r16)
    b950:	003fd306 	br	b8a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215398a0>
    b954:	04810004 	movi	r18,1024
    b958:	003fc306 	br	b868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539868>
    b95c:	0027883a 	mov	r19,zero
    b960:	04810004 	movi	r18,1024
    b964:	003fc006 	br	b868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539868>

0000b968 <_read_r>:
    b968:	defffd04 	addi	sp,sp,-12
    b96c:	2805883a 	mov	r2,r5
    b970:	dc000015 	stw	r16,0(sp)
    b974:	040000b4 	movhi	r16,2
    b978:	dc400115 	stw	r17,4(sp)
    b97c:	300b883a 	mov	r5,r6
    b980:	8422fa04 	addi	r16,r16,-29720
    b984:	2023883a 	mov	r17,r4
    b988:	380d883a 	mov	r6,r7
    b98c:	1009883a 	mov	r4,r2
    b990:	dfc00215 	stw	ra,8(sp)
    b994:	80000015 	stw	zero,0(r16)
    b998:	000f8ec0 	call	f8ec <read>
    b99c:	00ffffc4 	movi	r3,-1
    b9a0:	10c00526 	beq	r2,r3,b9b8 <_read_r+0x50>
    b9a4:	dfc00217 	ldw	ra,8(sp)
    b9a8:	dc400117 	ldw	r17,4(sp)
    b9ac:	dc000017 	ldw	r16,0(sp)
    b9b0:	dec00304 	addi	sp,sp,12
    b9b4:	f800283a 	ret
    b9b8:	80c00017 	ldw	r3,0(r16)
    b9bc:	183ff926 	beq	r3,zero,b9a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215399a4>
    b9c0:	88c00015 	stw	r3,0(r17)
    b9c4:	003ff706 	br	b9a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215399a4>

0000b9c8 <_fstat_r>:
    b9c8:	defffd04 	addi	sp,sp,-12
    b9cc:	2805883a 	mov	r2,r5
    b9d0:	dc000015 	stw	r16,0(sp)
    b9d4:	040000b4 	movhi	r16,2
    b9d8:	dc400115 	stw	r17,4(sp)
    b9dc:	8422fa04 	addi	r16,r16,-29720
    b9e0:	2023883a 	mov	r17,r4
    b9e4:	300b883a 	mov	r5,r6
    b9e8:	1009883a 	mov	r4,r2
    b9ec:	dfc00215 	stw	ra,8(sp)
    b9f0:	80000015 	stw	zero,0(r16)
    b9f4:	000f1a80 	call	f1a8 <fstat>
    b9f8:	00ffffc4 	movi	r3,-1
    b9fc:	10c00526 	beq	r2,r3,ba14 <_fstat_r+0x4c>
    ba00:	dfc00217 	ldw	ra,8(sp)
    ba04:	dc400117 	ldw	r17,4(sp)
    ba08:	dc000017 	ldw	r16,0(sp)
    ba0c:	dec00304 	addi	sp,sp,12
    ba10:	f800283a 	ret
    ba14:	80c00017 	ldw	r3,0(r16)
    ba18:	183ff926 	beq	r3,zero,ba00 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539a00>
    ba1c:	88c00015 	stw	r3,0(r17)
    ba20:	003ff706 	br	ba00 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539a00>

0000ba24 <_isatty_r>:
    ba24:	defffd04 	addi	sp,sp,-12
    ba28:	dc000015 	stw	r16,0(sp)
    ba2c:	040000b4 	movhi	r16,2
    ba30:	dc400115 	stw	r17,4(sp)
    ba34:	8422fa04 	addi	r16,r16,-29720
    ba38:	2023883a 	mov	r17,r4
    ba3c:	2809883a 	mov	r4,r5
    ba40:	dfc00215 	stw	ra,8(sp)
    ba44:	80000015 	stw	zero,0(r16)
    ba48:	000f53c0 	call	f53c <isatty>
    ba4c:	00ffffc4 	movi	r3,-1
    ba50:	10c00526 	beq	r2,r3,ba68 <_isatty_r+0x44>
    ba54:	dfc00217 	ldw	ra,8(sp)
    ba58:	dc400117 	ldw	r17,4(sp)
    ba5c:	dc000017 	ldw	r16,0(sp)
    ba60:	dec00304 	addi	sp,sp,12
    ba64:	f800283a 	ret
    ba68:	80c00017 	ldw	r3,0(r16)
    ba6c:	183ff926 	beq	r3,zero,ba54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539a54>
    ba70:	88c00015 	stw	r3,0(r17)
    ba74:	003ff706 	br	ba54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539a54>

0000ba78 <__udivdi3>:
    ba78:	defff404 	addi	sp,sp,-48
    ba7c:	dcc00515 	stw	r19,20(sp)
    ba80:	dc000215 	stw	r16,8(sp)
    ba84:	dfc00b15 	stw	ra,44(sp)
    ba88:	df000a15 	stw	fp,40(sp)
    ba8c:	ddc00915 	stw	r23,36(sp)
    ba90:	dd800815 	stw	r22,32(sp)
    ba94:	dd400715 	stw	r21,28(sp)
    ba98:	dd000615 	stw	r20,24(sp)
    ba9c:	dc800415 	stw	r18,16(sp)
    baa0:	dc400315 	stw	r17,12(sp)
    baa4:	2027883a 	mov	r19,r4
    baa8:	2821883a 	mov	r16,r5
    baac:	3800461e 	bne	r7,zero,bbc8 <__udivdi3+0x150>
    bab0:	3023883a 	mov	r17,r6
    bab4:	2025883a 	mov	r18,r4
    bab8:	2980572e 	bgeu	r5,r6,bc18 <__udivdi3+0x1a0>
    babc:	00bfffd4 	movui	r2,65535
    bac0:	282d883a 	mov	r22,r5
    bac4:	1180b236 	bltu	r2,r6,bd90 <__udivdi3+0x318>
    bac8:	00803fc4 	movi	r2,255
    bacc:	1185803a 	cmpltu	r2,r2,r6
    bad0:	100490fa 	slli	r2,r2,3
    bad4:	3086d83a 	srl	r3,r6,r2
    bad8:	01000074 	movhi	r4,1
    badc:	21134684 	addi	r4,r4,19738
    bae0:	20c7883a 	add	r3,r4,r3
    bae4:	18c00003 	ldbu	r3,0(r3)
    bae8:	1885883a 	add	r2,r3,r2
    baec:	00c00804 	movi	r3,32
    baf0:	1887c83a 	sub	r3,r3,r2
    baf4:	18000526 	beq	r3,zero,bb0c <__udivdi3+0x94>
    baf8:	80e0983a 	sll	r16,r16,r3
    bafc:	9884d83a 	srl	r2,r19,r2
    bb00:	30e2983a 	sll	r17,r6,r3
    bb04:	98e4983a 	sll	r18,r19,r3
    bb08:	142cb03a 	or	r22,r2,r16
    bb0c:	882ad43a 	srli	r21,r17,16
    bb10:	b009883a 	mov	r4,r22
    bb14:	8d3fffcc 	andi	r20,r17,65535
    bb18:	a80b883a 	mov	r5,r21
    bb1c:	000c7940 	call	c794 <__umodsi3>
    bb20:	b009883a 	mov	r4,r22
    bb24:	a80b883a 	mov	r5,r21
    bb28:	1027883a 	mov	r19,r2
    bb2c:	000c7300 	call	c730 <__udivsi3>
    bb30:	100b883a 	mov	r5,r2
    bb34:	a009883a 	mov	r4,r20
    bb38:	102d883a 	mov	r22,r2
    bb3c:	00020100 	call	2010 <__mulsi3>
    bb40:	9826943a 	slli	r19,r19,16
    bb44:	9006d43a 	srli	r3,r18,16
    bb48:	1cc6b03a 	or	r3,r3,r19
    bb4c:	1880052e 	bgeu	r3,r2,bb64 <__udivdi3+0xec>
    bb50:	1c47883a 	add	r3,r3,r17
    bb54:	b13fffc4 	addi	r4,r22,-1
    bb58:	1c400136 	bltu	r3,r17,bb60 <__udivdi3+0xe8>
    bb5c:	18814236 	bltu	r3,r2,c068 <__udivdi3+0x5f0>
    bb60:	202d883a 	mov	r22,r4
    bb64:	18a1c83a 	sub	r16,r3,r2
    bb68:	8009883a 	mov	r4,r16
    bb6c:	a80b883a 	mov	r5,r21
    bb70:	000c7940 	call	c794 <__umodsi3>
    bb74:	1027883a 	mov	r19,r2
    bb78:	8009883a 	mov	r4,r16
    bb7c:	a80b883a 	mov	r5,r21
    bb80:	9826943a 	slli	r19,r19,16
    bb84:	000c7300 	call	c730 <__udivsi3>
    bb88:	100b883a 	mov	r5,r2
    bb8c:	a009883a 	mov	r4,r20
    bb90:	94bfffcc 	andi	r18,r18,65535
    bb94:	1021883a 	mov	r16,r2
    bb98:	94e4b03a 	or	r18,r18,r19
    bb9c:	00020100 	call	2010 <__mulsi3>
    bba0:	9080052e 	bgeu	r18,r2,bbb8 <__udivdi3+0x140>
    bba4:	8ca5883a 	add	r18,r17,r18
    bba8:	80ffffc4 	addi	r3,r16,-1
    bbac:	94410c36 	bltu	r18,r17,bfe0 <__udivdi3+0x568>
    bbb0:	90810b2e 	bgeu	r18,r2,bfe0 <__udivdi3+0x568>
    bbb4:	843fff84 	addi	r16,r16,-2
    bbb8:	b004943a 	slli	r2,r22,16
    bbbc:	0007883a 	mov	r3,zero
    bbc0:	1404b03a 	or	r2,r2,r16
    bbc4:	00005e06 	br	bd40 <__udivdi3+0x2c8>
    bbc8:	29c05b36 	bltu	r5,r7,bd38 <__udivdi3+0x2c0>
    bbcc:	00bfffd4 	movui	r2,65535
    bbd0:	11c0672e 	bgeu	r2,r7,bd70 <__udivdi3+0x2f8>
    bbd4:	00804034 	movhi	r2,256
    bbd8:	10bfffc4 	addi	r2,r2,-1
    bbdc:	11c10a36 	bltu	r2,r7,c008 <__udivdi3+0x590>
    bbe0:	00800404 	movi	r2,16
    bbe4:	3886d83a 	srl	r3,r7,r2
    bbe8:	01000074 	movhi	r4,1
    bbec:	21134684 	addi	r4,r4,19738
    bbf0:	20c7883a 	add	r3,r4,r3
    bbf4:	18c00003 	ldbu	r3,0(r3)
    bbf8:	05c00804 	movi	r23,32
    bbfc:	1885883a 	add	r2,r3,r2
    bc00:	b8afc83a 	sub	r23,r23,r2
    bc04:	b800671e 	bne	r23,zero,bda4 <__udivdi3+0x32c>
    bc08:	3c010536 	bltu	r7,r16,c020 <__udivdi3+0x5a8>
    bc0c:	9985403a 	cmpgeu	r2,r19,r6
    bc10:	0007883a 	mov	r3,zero
    bc14:	00004a06 	br	bd40 <__udivdi3+0x2c8>
    bc18:	3000041e 	bne	r6,zero,bc2c <__udivdi3+0x1b4>
    bc1c:	000b883a 	mov	r5,zero
    bc20:	01000044 	movi	r4,1
    bc24:	000c7300 	call	c730 <__udivsi3>
    bc28:	1023883a 	mov	r17,r2
    bc2c:	00bfffd4 	movui	r2,65535
    bc30:	1440532e 	bgeu	r2,r17,bd80 <__udivdi3+0x308>
    bc34:	00804034 	movhi	r2,256
    bc38:	10bfffc4 	addi	r2,r2,-1
    bc3c:	1440f436 	bltu	r2,r17,c010 <__udivdi3+0x598>
    bc40:	00800404 	movi	r2,16
    bc44:	8886d83a 	srl	r3,r17,r2
    bc48:	01000074 	movhi	r4,1
    bc4c:	21134684 	addi	r4,r4,19738
    bc50:	20c7883a 	add	r3,r4,r3
    bc54:	18c00003 	ldbu	r3,0(r3)
    bc58:	1885883a 	add	r2,r3,r2
    bc5c:	00c00804 	movi	r3,32
    bc60:	1887c83a 	sub	r3,r3,r2
    bc64:	1800a51e 	bne	r3,zero,befc <__udivdi3+0x484>
    bc68:	882ad43a 	srli	r21,r17,16
    bc6c:	8461c83a 	sub	r16,r16,r17
    bc70:	8d3fffcc 	andi	r20,r17,65535
    bc74:	00c00044 	movi	r3,1
    bc78:	a80b883a 	mov	r5,r21
    bc7c:	8009883a 	mov	r4,r16
    bc80:	d8c00115 	stw	r3,4(sp)
    bc84:	000c7940 	call	c794 <__umodsi3>
    bc88:	a80b883a 	mov	r5,r21
    bc8c:	8009883a 	mov	r4,r16
    bc90:	1027883a 	mov	r19,r2
    bc94:	000c7300 	call	c730 <__udivsi3>
    bc98:	a00b883a 	mov	r5,r20
    bc9c:	1009883a 	mov	r4,r2
    bca0:	102d883a 	mov	r22,r2
    bca4:	00020100 	call	2010 <__mulsi3>
    bca8:	9826943a 	slli	r19,r19,16
    bcac:	900ed43a 	srli	r7,r18,16
    bcb0:	d8c00117 	ldw	r3,4(sp)
    bcb4:	3cceb03a 	or	r7,r7,r19
    bcb8:	3880052e 	bgeu	r7,r2,bcd0 <__udivdi3+0x258>
    bcbc:	3c4f883a 	add	r7,r7,r17
    bcc0:	b13fffc4 	addi	r4,r22,-1
    bcc4:	3c400136 	bltu	r7,r17,bccc <__udivdi3+0x254>
    bcc8:	3880e436 	bltu	r7,r2,c05c <__udivdi3+0x5e4>
    bccc:	202d883a 	mov	r22,r4
    bcd0:	38a1c83a 	sub	r16,r7,r2
    bcd4:	8009883a 	mov	r4,r16
    bcd8:	a80b883a 	mov	r5,r21
    bcdc:	d8c00115 	stw	r3,4(sp)
    bce0:	000c7940 	call	c794 <__umodsi3>
    bce4:	1027883a 	mov	r19,r2
    bce8:	8009883a 	mov	r4,r16
    bcec:	a80b883a 	mov	r5,r21
    bcf0:	9826943a 	slli	r19,r19,16
    bcf4:	000c7300 	call	c730 <__udivsi3>
    bcf8:	a00b883a 	mov	r5,r20
    bcfc:	1009883a 	mov	r4,r2
    bd00:	94bfffcc 	andi	r18,r18,65535
    bd04:	1021883a 	mov	r16,r2
    bd08:	94e4b03a 	or	r18,r18,r19
    bd0c:	00020100 	call	2010 <__mulsi3>
    bd10:	d8c00117 	ldw	r3,4(sp)
    bd14:	9080052e 	bgeu	r18,r2,bd2c <__udivdi3+0x2b4>
    bd18:	8ca5883a 	add	r18,r17,r18
    bd1c:	813fffc4 	addi	r4,r16,-1
    bd20:	9440ad36 	bltu	r18,r17,bfd8 <__udivdi3+0x560>
    bd24:	9080ac2e 	bgeu	r18,r2,bfd8 <__udivdi3+0x560>
    bd28:	843fff84 	addi	r16,r16,-2
    bd2c:	b004943a 	slli	r2,r22,16
    bd30:	1404b03a 	or	r2,r2,r16
    bd34:	00000206 	br	bd40 <__udivdi3+0x2c8>
    bd38:	0007883a 	mov	r3,zero
    bd3c:	0005883a 	mov	r2,zero
    bd40:	dfc00b17 	ldw	ra,44(sp)
    bd44:	df000a17 	ldw	fp,40(sp)
    bd48:	ddc00917 	ldw	r23,36(sp)
    bd4c:	dd800817 	ldw	r22,32(sp)
    bd50:	dd400717 	ldw	r21,28(sp)
    bd54:	dd000617 	ldw	r20,24(sp)
    bd58:	dcc00517 	ldw	r19,20(sp)
    bd5c:	dc800417 	ldw	r18,16(sp)
    bd60:	dc400317 	ldw	r17,12(sp)
    bd64:	dc000217 	ldw	r16,8(sp)
    bd68:	dec00c04 	addi	sp,sp,48
    bd6c:	f800283a 	ret
    bd70:	00803fc4 	movi	r2,255
    bd74:	11c5803a 	cmpltu	r2,r2,r7
    bd78:	100490fa 	slli	r2,r2,3
    bd7c:	003f9906 	br	bbe4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539be4>
    bd80:	00803fc4 	movi	r2,255
    bd84:	1445803a 	cmpltu	r2,r2,r17
    bd88:	100490fa 	slli	r2,r2,3
    bd8c:	003fad06 	br	bc44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539c44>
    bd90:	00804034 	movhi	r2,256
    bd94:	10bfffc4 	addi	r2,r2,-1
    bd98:	11809f36 	bltu	r2,r6,c018 <__udivdi3+0x5a0>
    bd9c:	00800404 	movi	r2,16
    bda0:	003f4c06 	br	bad4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539ad4>
    bda4:	3dce983a 	sll	r7,r7,r23
    bda8:	30b8d83a 	srl	fp,r6,r2
    bdac:	80a2d83a 	srl	r17,r16,r2
    bdb0:	35cc983a 	sll	r6,r6,r23
    bdb4:	3f38b03a 	or	fp,r7,fp
    bdb8:	e024d43a 	srli	r18,fp,16
    bdbc:	9884d83a 	srl	r2,r19,r2
    bdc0:	85e0983a 	sll	r16,r16,r23
    bdc4:	8809883a 	mov	r4,r17
    bdc8:	900b883a 	mov	r5,r18
    bdcc:	d9800015 	stw	r6,0(sp)
    bdd0:	1420b03a 	or	r16,r2,r16
    bdd4:	000c7940 	call	c794 <__umodsi3>
    bdd8:	900b883a 	mov	r5,r18
    bddc:	8809883a 	mov	r4,r17
    bde0:	1029883a 	mov	r20,r2
    bde4:	e5bfffcc 	andi	r22,fp,65535
    bde8:	000c7300 	call	c730 <__udivsi3>
    bdec:	100b883a 	mov	r5,r2
    bdf0:	b009883a 	mov	r4,r22
    bdf4:	102b883a 	mov	r21,r2
    bdf8:	00020100 	call	2010 <__mulsi3>
    bdfc:	a028943a 	slli	r20,r20,16
    be00:	8006d43a 	srli	r3,r16,16
    be04:	1d06b03a 	or	r3,r3,r20
    be08:	1880042e 	bgeu	r3,r2,be1c <__udivdi3+0x3a4>
    be0c:	1f07883a 	add	r3,r3,fp
    be10:	a93fffc4 	addi	r4,r21,-1
    be14:	1f00892e 	bgeu	r3,fp,c03c <__udivdi3+0x5c4>
    be18:	202b883a 	mov	r21,r4
    be1c:	18a3c83a 	sub	r17,r3,r2
    be20:	8809883a 	mov	r4,r17
    be24:	900b883a 	mov	r5,r18
    be28:	000c7940 	call	c794 <__umodsi3>
    be2c:	1029883a 	mov	r20,r2
    be30:	8809883a 	mov	r4,r17
    be34:	900b883a 	mov	r5,r18
    be38:	a028943a 	slli	r20,r20,16
    be3c:	000c7300 	call	c730 <__udivsi3>
    be40:	100b883a 	mov	r5,r2
    be44:	b009883a 	mov	r4,r22
    be48:	843fffcc 	andi	r16,r16,65535
    be4c:	1023883a 	mov	r17,r2
    be50:	8520b03a 	or	r16,r16,r20
    be54:	00020100 	call	2010 <__mulsi3>
    be58:	8080042e 	bgeu	r16,r2,be6c <__udivdi3+0x3f4>
    be5c:	8721883a 	add	r16,r16,fp
    be60:	88ffffc4 	addi	r3,r17,-1
    be64:	8700712e 	bgeu	r16,fp,c02c <__udivdi3+0x5b4>
    be68:	1823883a 	mov	r17,r3
    be6c:	a80e943a 	slli	r7,r21,16
    be70:	d8c00017 	ldw	r3,0(sp)
    be74:	80a1c83a 	sub	r16,r16,r2
    be78:	3c64b03a 	or	r18,r7,r17
    be7c:	1d3fffcc 	andi	r20,r3,65535
    be80:	9022d43a 	srli	r17,r18,16
    be84:	95bfffcc 	andi	r22,r18,65535
    be88:	a00b883a 	mov	r5,r20
    be8c:	b009883a 	mov	r4,r22
    be90:	182ad43a 	srli	r21,r3,16
    be94:	00020100 	call	2010 <__mulsi3>
    be98:	a00b883a 	mov	r5,r20
    be9c:	8809883a 	mov	r4,r17
    bea0:	1039883a 	mov	fp,r2
    bea4:	00020100 	call	2010 <__mulsi3>
    bea8:	8809883a 	mov	r4,r17
    beac:	a80b883a 	mov	r5,r21
    beb0:	1029883a 	mov	r20,r2
    beb4:	00020100 	call	2010 <__mulsi3>
    beb8:	a80b883a 	mov	r5,r21
    bebc:	b009883a 	mov	r4,r22
    bec0:	1023883a 	mov	r17,r2
    bec4:	00020100 	call	2010 <__mulsi3>
    bec8:	e006d43a 	srli	r3,fp,16
    becc:	1505883a 	add	r2,r2,r20
    bed0:	1887883a 	add	r3,r3,r2
    bed4:	1d00022e 	bgeu	r3,r20,bee0 <__udivdi3+0x468>
    bed8:	00800074 	movhi	r2,1
    bedc:	88a3883a 	add	r17,r17,r2
    bee0:	1804d43a 	srli	r2,r3,16
    bee4:	1463883a 	add	r17,r2,r17
    bee8:	84404436 	bltu	r16,r17,bffc <__udivdi3+0x584>
    beec:	84403e26 	beq	r16,r17,bfe8 <__udivdi3+0x570>
    bef0:	9005883a 	mov	r2,r18
    bef4:	0007883a 	mov	r3,zero
    bef8:	003f9106 	br	bd40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539d40>
    befc:	88e2983a 	sll	r17,r17,r3
    bf00:	80aed83a 	srl	r23,r16,r2
    bf04:	80e0983a 	sll	r16,r16,r3
    bf08:	882ad43a 	srli	r21,r17,16
    bf0c:	9884d83a 	srl	r2,r19,r2
    bf10:	b809883a 	mov	r4,r23
    bf14:	a80b883a 	mov	r5,r21
    bf18:	98e4983a 	sll	r18,r19,r3
    bf1c:	142cb03a 	or	r22,r2,r16
    bf20:	000c7940 	call	c794 <__umodsi3>
    bf24:	b809883a 	mov	r4,r23
    bf28:	a80b883a 	mov	r5,r21
    bf2c:	1027883a 	mov	r19,r2
    bf30:	8d3fffcc 	andi	r20,r17,65535
    bf34:	000c7300 	call	c730 <__udivsi3>
    bf38:	a009883a 	mov	r4,r20
    bf3c:	100b883a 	mov	r5,r2
    bf40:	102f883a 	mov	r23,r2
    bf44:	00020100 	call	2010 <__mulsi3>
    bf48:	9826943a 	slli	r19,r19,16
    bf4c:	b008d43a 	srli	r4,r22,16
    bf50:	24c8b03a 	or	r4,r4,r19
    bf54:	2080062e 	bgeu	r4,r2,bf70 <__udivdi3+0x4f8>
    bf58:	2449883a 	add	r4,r4,r17
    bf5c:	b8ffffc4 	addi	r3,r23,-1
    bf60:	24403c36 	bltu	r4,r17,c054 <__udivdi3+0x5dc>
    bf64:	20803b2e 	bgeu	r4,r2,c054 <__udivdi3+0x5dc>
    bf68:	bdffff84 	addi	r23,r23,-2
    bf6c:	2449883a 	add	r4,r4,r17
    bf70:	20a1c83a 	sub	r16,r4,r2
    bf74:	a80b883a 	mov	r5,r21
    bf78:	8009883a 	mov	r4,r16
    bf7c:	000c7940 	call	c794 <__umodsi3>
    bf80:	a80b883a 	mov	r5,r21
    bf84:	8009883a 	mov	r4,r16
    bf88:	1027883a 	mov	r19,r2
    bf8c:	000c7300 	call	c730 <__udivsi3>
    bf90:	a009883a 	mov	r4,r20
    bf94:	100b883a 	mov	r5,r2
    bf98:	9826943a 	slli	r19,r19,16
    bf9c:	1039883a 	mov	fp,r2
    bfa0:	00020100 	call	2010 <__mulsi3>
    bfa4:	b13fffcc 	andi	r4,r22,65535
    bfa8:	24c8b03a 	or	r4,r4,r19
    bfac:	2080062e 	bgeu	r4,r2,bfc8 <__udivdi3+0x550>
    bfb0:	2449883a 	add	r4,r4,r17
    bfb4:	e0ffffc4 	addi	r3,fp,-1
    bfb8:	24402436 	bltu	r4,r17,c04c <__udivdi3+0x5d4>
    bfbc:	2080232e 	bgeu	r4,r2,c04c <__udivdi3+0x5d4>
    bfc0:	e73fff84 	addi	fp,fp,-2
    bfc4:	2449883a 	add	r4,r4,r17
    bfc8:	b82e943a 	slli	r23,r23,16
    bfcc:	20a1c83a 	sub	r16,r4,r2
    bfd0:	bf06b03a 	or	r3,r23,fp
    bfd4:	003f2806 	br	bc78 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539c78>
    bfd8:	2021883a 	mov	r16,r4
    bfdc:	003f5306 	br	bd2c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539d2c>
    bfe0:	1821883a 	mov	r16,r3
    bfe4:	003ef406 	br	bbb8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539bb8>
    bfe8:	1806943a 	slli	r3,r3,16
    bfec:	9de6983a 	sll	r19,r19,r23
    bff0:	e73fffcc 	andi	fp,fp,65535
    bff4:	1f07883a 	add	r3,r3,fp
    bff8:	98ffbd2e 	bgeu	r19,r3,bef0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539ef0>
    bffc:	90bfffc4 	addi	r2,r18,-1
    c000:	0007883a 	mov	r3,zero
    c004:	003f4e06 	br	bd40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539d40>
    c008:	00800604 	movi	r2,24
    c00c:	003ef506 	br	bbe4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539be4>
    c010:	00800604 	movi	r2,24
    c014:	003f0b06 	br	bc44 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539c44>
    c018:	00800604 	movi	r2,24
    c01c:	003ead06 	br	bad4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539ad4>
    c020:	0007883a 	mov	r3,zero
    c024:	00800044 	movi	r2,1
    c028:	003f4506 	br	bd40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539d40>
    c02c:	80bf8e2e 	bgeu	r16,r2,be68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539e68>
    c030:	8c7fff84 	addi	r17,r17,-2
    c034:	8721883a 	add	r16,r16,fp
    c038:	003f8c06 	br	be6c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539e6c>
    c03c:	18bf762e 	bgeu	r3,r2,be18 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539e18>
    c040:	ad7fff84 	addi	r21,r21,-2
    c044:	1f07883a 	add	r3,r3,fp
    c048:	003f7406 	br	be1c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539e1c>
    c04c:	1839883a 	mov	fp,r3
    c050:	003fdd06 	br	bfc8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539fc8>
    c054:	182f883a 	mov	r23,r3
    c058:	003fc506 	br	bf70 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539f70>
    c05c:	b5bfff84 	addi	r22,r22,-2
    c060:	3c4f883a 	add	r7,r7,r17
    c064:	003f1a06 	br	bcd0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539cd0>
    c068:	b5bfff84 	addi	r22,r22,-2
    c06c:	1c47883a 	add	r3,r3,r17
    c070:	003ebc06 	br	bb64 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21539b64>

0000c074 <__umoddi3>:
    c074:	defff304 	addi	sp,sp,-52
    c078:	df000b15 	stw	fp,44(sp)
    c07c:	dc400415 	stw	r17,16(sp)
    c080:	dc000315 	stw	r16,12(sp)
    c084:	dfc00c15 	stw	ra,48(sp)
    c088:	ddc00a15 	stw	r23,40(sp)
    c08c:	dd800915 	stw	r22,36(sp)
    c090:	dd400815 	stw	r21,32(sp)
    c094:	dd000715 	stw	r20,28(sp)
    c098:	dcc00615 	stw	r19,24(sp)
    c09c:	dc800515 	stw	r18,20(sp)
    c0a0:	2021883a 	mov	r16,r4
    c0a4:	2823883a 	mov	r17,r5
    c0a8:	2839883a 	mov	fp,r5
    c0ac:	3800401e 	bne	r7,zero,c1b0 <__umoddi3+0x13c>
    c0b0:	3027883a 	mov	r19,r6
    c0b4:	2029883a 	mov	r20,r4
    c0b8:	2980552e 	bgeu	r5,r6,c210 <__umoddi3+0x19c>
    c0bc:	00bfffd4 	movui	r2,65535
    c0c0:	1180a236 	bltu	r2,r6,c34c <__umoddi3+0x2d8>
    c0c4:	01003fc4 	movi	r4,255
    c0c8:	2189803a 	cmpltu	r4,r4,r6
    c0cc:	200890fa 	slli	r4,r4,3
    c0d0:	3104d83a 	srl	r2,r6,r4
    c0d4:	00c00074 	movhi	r3,1
    c0d8:	18d34684 	addi	r3,r3,19738
    c0dc:	1885883a 	add	r2,r3,r2
    c0e0:	10c00003 	ldbu	r3,0(r2)
    c0e4:	00800804 	movi	r2,32
    c0e8:	1909883a 	add	r4,r3,r4
    c0ec:	1125c83a 	sub	r18,r2,r4
    c0f0:	90000526 	beq	r18,zero,c108 <__umoddi3+0x94>
    c0f4:	8ca2983a 	sll	r17,r17,r18
    c0f8:	8108d83a 	srl	r4,r16,r4
    c0fc:	34a6983a 	sll	r19,r6,r18
    c100:	84a8983a 	sll	r20,r16,r18
    c104:	2478b03a 	or	fp,r4,r17
    c108:	982cd43a 	srli	r22,r19,16
    c10c:	e009883a 	mov	r4,fp
    c110:	9dffffcc 	andi	r23,r19,65535
    c114:	b00b883a 	mov	r5,r22
    c118:	000c7940 	call	c794 <__umodsi3>
    c11c:	b00b883a 	mov	r5,r22
    c120:	e009883a 	mov	r4,fp
    c124:	102b883a 	mov	r21,r2
    c128:	000c7300 	call	c730 <__udivsi3>
    c12c:	100b883a 	mov	r5,r2
    c130:	b809883a 	mov	r4,r23
    c134:	00020100 	call	2010 <__mulsi3>
    c138:	a82a943a 	slli	r21,r21,16
    c13c:	a006d43a 	srli	r3,r20,16
    c140:	1d46b03a 	or	r3,r3,r21
    c144:	1880032e 	bgeu	r3,r2,c154 <__umoddi3+0xe0>
    c148:	1cc7883a 	add	r3,r3,r19
    c14c:	1cc00136 	bltu	r3,r19,c154 <__umoddi3+0xe0>
    c150:	18813136 	bltu	r3,r2,c618 <__umoddi3+0x5a4>
    c154:	18a1c83a 	sub	r16,r3,r2
    c158:	b00b883a 	mov	r5,r22
    c15c:	8009883a 	mov	r4,r16
    c160:	000c7940 	call	c794 <__umodsi3>
    c164:	b00b883a 	mov	r5,r22
    c168:	8009883a 	mov	r4,r16
    c16c:	1023883a 	mov	r17,r2
    c170:	000c7300 	call	c730 <__udivsi3>
    c174:	100b883a 	mov	r5,r2
    c178:	b809883a 	mov	r4,r23
    c17c:	8822943a 	slli	r17,r17,16
    c180:	00020100 	call	2010 <__mulsi3>
    c184:	a0ffffcc 	andi	r3,r20,65535
    c188:	1c46b03a 	or	r3,r3,r17
    c18c:	1880042e 	bgeu	r3,r2,c1a0 <__umoddi3+0x12c>
    c190:	1cc7883a 	add	r3,r3,r19
    c194:	1cc00236 	bltu	r3,r19,c1a0 <__umoddi3+0x12c>
    c198:	1880012e 	bgeu	r3,r2,c1a0 <__umoddi3+0x12c>
    c19c:	1cc7883a 	add	r3,r3,r19
    c1a0:	1885c83a 	sub	r2,r3,r2
    c1a4:	1484d83a 	srl	r2,r2,r18
    c1a8:	0007883a 	mov	r3,zero
    c1ac:	00005306 	br	c2fc <__umoddi3+0x288>
    c1b0:	29c05036 	bltu	r5,r7,c2f4 <__umoddi3+0x280>
    c1b4:	00bfffd4 	movui	r2,65535
    c1b8:	11c05c2e 	bgeu	r2,r7,c32c <__umoddi3+0x2b8>
    c1bc:	00804034 	movhi	r2,256
    c1c0:	10bfffc4 	addi	r2,r2,-1
    c1c4:	11c10636 	bltu	r2,r7,c5e0 <__umoddi3+0x56c>
    c1c8:	01000404 	movi	r4,16
    c1cc:	3904d83a 	srl	r2,r7,r4
    c1d0:	00c00074 	movhi	r3,1
    c1d4:	18d34684 	addi	r3,r3,19738
    c1d8:	1885883a 	add	r2,r3,r2
    c1dc:	14c00003 	ldbu	r19,0(r2)
    c1e0:	00c00804 	movi	r3,32
    c1e4:	9927883a 	add	r19,r19,r4
    c1e8:	1ce9c83a 	sub	r20,r3,r19
    c1ec:	a0005c1e 	bne	r20,zero,c360 <__umoddi3+0x2ec>
    c1f0:	3c400136 	bltu	r7,r17,c1f8 <__umoddi3+0x184>
    c1f4:	81810a36 	bltu	r16,r6,c620 <__umoddi3+0x5ac>
    c1f8:	8185c83a 	sub	r2,r16,r6
    c1fc:	89e3c83a 	sub	r17,r17,r7
    c200:	8089803a 	cmpltu	r4,r16,r2
    c204:	8939c83a 	sub	fp,r17,r4
    c208:	e007883a 	mov	r3,fp
    c20c:	00003b06 	br	c2fc <__umoddi3+0x288>
    c210:	3000041e 	bne	r6,zero,c224 <__umoddi3+0x1b0>
    c214:	000b883a 	mov	r5,zero
    c218:	01000044 	movi	r4,1
    c21c:	000c7300 	call	c730 <__udivsi3>
    c220:	1027883a 	mov	r19,r2
    c224:	00bfffd4 	movui	r2,65535
    c228:	14c0442e 	bgeu	r2,r19,c33c <__umoddi3+0x2c8>
    c22c:	00804034 	movhi	r2,256
    c230:	10bfffc4 	addi	r2,r2,-1
    c234:	14c0ec36 	bltu	r2,r19,c5e8 <__umoddi3+0x574>
    c238:	00800404 	movi	r2,16
    c23c:	9886d83a 	srl	r3,r19,r2
    c240:	01000074 	movhi	r4,1
    c244:	21134684 	addi	r4,r4,19738
    c248:	20c7883a 	add	r3,r4,r3
    c24c:	18c00003 	ldbu	r3,0(r3)
    c250:	1887883a 	add	r3,r3,r2
    c254:	00800804 	movi	r2,32
    c258:	10e5c83a 	sub	r18,r2,r3
    c25c:	9000ab1e 	bne	r18,zero,c50c <__umoddi3+0x498>
    c260:	982cd43a 	srli	r22,r19,16
    c264:	8ce3c83a 	sub	r17,r17,r19
    c268:	9dffffcc 	andi	r23,r19,65535
    c26c:	b00b883a 	mov	r5,r22
    c270:	8809883a 	mov	r4,r17
    c274:	000c7940 	call	c794 <__umodsi3>
    c278:	b00b883a 	mov	r5,r22
    c27c:	8809883a 	mov	r4,r17
    c280:	102b883a 	mov	r21,r2
    c284:	000c7300 	call	c730 <__udivsi3>
    c288:	b80b883a 	mov	r5,r23
    c28c:	1009883a 	mov	r4,r2
    c290:	00020100 	call	2010 <__mulsi3>
    c294:	a82a943a 	slli	r21,r21,16
    c298:	a006d43a 	srli	r3,r20,16
    c29c:	1d46b03a 	or	r3,r3,r21
    c2a0:	1880042e 	bgeu	r3,r2,c2b4 <__umoddi3+0x240>
    c2a4:	1cc7883a 	add	r3,r3,r19
    c2a8:	1cc00236 	bltu	r3,r19,c2b4 <__umoddi3+0x240>
    c2ac:	1880012e 	bgeu	r3,r2,c2b4 <__umoddi3+0x240>
    c2b0:	1cc7883a 	add	r3,r3,r19
    c2b4:	18a1c83a 	sub	r16,r3,r2
    c2b8:	b00b883a 	mov	r5,r22
    c2bc:	8009883a 	mov	r4,r16
    c2c0:	000c7940 	call	c794 <__umodsi3>
    c2c4:	1023883a 	mov	r17,r2
    c2c8:	b00b883a 	mov	r5,r22
    c2cc:	8009883a 	mov	r4,r16
    c2d0:	000c7300 	call	c730 <__udivsi3>
    c2d4:	8822943a 	slli	r17,r17,16
    c2d8:	b80b883a 	mov	r5,r23
    c2dc:	1009883a 	mov	r4,r2
    c2e0:	00020100 	call	2010 <__mulsi3>
    c2e4:	a53fffcc 	andi	r20,r20,65535
    c2e8:	a446b03a 	or	r3,r20,r17
    c2ec:	18bfac2e 	bgeu	r3,r2,c1a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a1a0>
    c2f0:	003fa706 	br	c190 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a190>
    c2f4:	2005883a 	mov	r2,r4
    c2f8:	2807883a 	mov	r3,r5
    c2fc:	dfc00c17 	ldw	ra,48(sp)
    c300:	df000b17 	ldw	fp,44(sp)
    c304:	ddc00a17 	ldw	r23,40(sp)
    c308:	dd800917 	ldw	r22,36(sp)
    c30c:	dd400817 	ldw	r21,32(sp)
    c310:	dd000717 	ldw	r20,28(sp)
    c314:	dcc00617 	ldw	r19,24(sp)
    c318:	dc800517 	ldw	r18,20(sp)
    c31c:	dc400417 	ldw	r17,16(sp)
    c320:	dc000317 	ldw	r16,12(sp)
    c324:	dec00d04 	addi	sp,sp,52
    c328:	f800283a 	ret
    c32c:	04c03fc4 	movi	r19,255
    c330:	99c9803a 	cmpltu	r4,r19,r7
    c334:	200890fa 	slli	r4,r4,3
    c338:	003fa406 	br	c1cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a1cc>
    c33c:	00803fc4 	movi	r2,255
    c340:	14c5803a 	cmpltu	r2,r2,r19
    c344:	100490fa 	slli	r2,r2,3
    c348:	003fbc06 	br	c23c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a23c>
    c34c:	00804034 	movhi	r2,256
    c350:	10bfffc4 	addi	r2,r2,-1
    c354:	1180a636 	bltu	r2,r6,c5f0 <__umoddi3+0x57c>
    c358:	01000404 	movi	r4,16
    c35c:	003f5c06 	br	c0d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a0d0>
    c360:	3d0e983a 	sll	r7,r7,r20
    c364:	34ead83a 	srl	r21,r6,r19
    c368:	8cc6d83a 	srl	r3,r17,r19
    c36c:	8d10983a 	sll	r8,r17,r20
    c370:	3d6ab03a 	or	r21,r7,r21
    c374:	a82cd43a 	srli	r22,r21,16
    c378:	84e2d83a 	srl	r17,r16,r19
    c37c:	1809883a 	mov	r4,r3
    c380:	b00b883a 	mov	r5,r22
    c384:	8a22b03a 	or	r17,r17,r8
    c388:	3524983a 	sll	r18,r6,r20
    c38c:	dc400015 	stw	r17,0(sp)
    c390:	d8c00115 	stw	r3,4(sp)
    c394:	000c7940 	call	c794 <__umodsi3>
    c398:	d8c00117 	ldw	r3,4(sp)
    c39c:	b00b883a 	mov	r5,r22
    c3a0:	1039883a 	mov	fp,r2
    c3a4:	1809883a 	mov	r4,r3
    c3a8:	000c7300 	call	c730 <__udivsi3>
    c3ac:	adffffcc 	andi	r23,r21,65535
    c3b0:	100b883a 	mov	r5,r2
    c3b4:	b809883a 	mov	r4,r23
    c3b8:	1023883a 	mov	r17,r2
    c3bc:	00020100 	call	2010 <__mulsi3>
    c3c0:	d9400017 	ldw	r5,0(sp)
    c3c4:	e008943a 	slli	r4,fp,16
    c3c8:	8520983a 	sll	r16,r16,r20
    c3cc:	2806d43a 	srli	r3,r5,16
    c3d0:	1906b03a 	or	r3,r3,r4
    c3d4:	1880042e 	bgeu	r3,r2,c3e8 <__umoddi3+0x374>
    c3d8:	1d47883a 	add	r3,r3,r21
    c3dc:	893fffc4 	addi	r4,r17,-1
    c3e0:	1d40892e 	bgeu	r3,r21,c608 <__umoddi3+0x594>
    c3e4:	2023883a 	mov	r17,r4
    c3e8:	18b9c83a 	sub	fp,r3,r2
    c3ec:	b00b883a 	mov	r5,r22
    c3f0:	e009883a 	mov	r4,fp
    c3f4:	000c7940 	call	c794 <__umodsi3>
    c3f8:	b00b883a 	mov	r5,r22
    c3fc:	e009883a 	mov	r4,fp
    c400:	d8800215 	stw	r2,8(sp)
    c404:	000c7300 	call	c730 <__udivsi3>
    c408:	100b883a 	mov	r5,r2
    c40c:	b809883a 	mov	r4,r23
    c410:	102d883a 	mov	r22,r2
    c414:	00020100 	call	2010 <__mulsi3>
    c418:	d9800217 	ldw	r6,8(sp)
    c41c:	d8c00017 	ldw	r3,0(sp)
    c420:	300c943a 	slli	r6,r6,16
    c424:	1a3fffcc 	andi	r8,r3,65535
    c428:	4190b03a 	or	r8,r8,r6
    c42c:	4080042e 	bgeu	r8,r2,c440 <__umoddi3+0x3cc>
    c430:	4551883a 	add	r8,r8,r21
    c434:	b0ffffc4 	addi	r3,r22,-1
    c438:	45406f2e 	bgeu	r8,r21,c5f8 <__umoddi3+0x584>
    c43c:	182d883a 	mov	r22,r3
    c440:	880e943a 	slli	r7,r17,16
    c444:	9006d43a 	srli	r3,r18,16
    c448:	91bfffcc 	andi	r6,r18,65535
    c44c:	3dacb03a 	or	r22,r7,r22
    c450:	b02ed43a 	srli	r23,r22,16
    c454:	b5bfffcc 	andi	r22,r22,65535
    c458:	300b883a 	mov	r5,r6
    c45c:	b009883a 	mov	r4,r22
    c460:	40a3c83a 	sub	r17,r8,r2
    c464:	d8c00115 	stw	r3,4(sp)
    c468:	d9800215 	stw	r6,8(sp)
    c46c:	00020100 	call	2010 <__mulsi3>
    c470:	d9800217 	ldw	r6,8(sp)
    c474:	b809883a 	mov	r4,r23
    c478:	1039883a 	mov	fp,r2
    c47c:	300b883a 	mov	r5,r6
    c480:	00020100 	call	2010 <__mulsi3>
    c484:	d8c00117 	ldw	r3,4(sp)
    c488:	b809883a 	mov	r4,r23
    c48c:	d8800215 	stw	r2,8(sp)
    c490:	180b883a 	mov	r5,r3
    c494:	00020100 	call	2010 <__mulsi3>
    c498:	d8c00117 	ldw	r3,4(sp)
    c49c:	b009883a 	mov	r4,r22
    c4a0:	102f883a 	mov	r23,r2
    c4a4:	180b883a 	mov	r5,r3
    c4a8:	00020100 	call	2010 <__mulsi3>
    c4ac:	d9800217 	ldw	r6,8(sp)
    c4b0:	e006d43a 	srli	r3,fp,16
    c4b4:	1185883a 	add	r2,r2,r6
    c4b8:	1885883a 	add	r2,r3,r2
    c4bc:	1180022e 	bgeu	r2,r6,c4c8 <__umoddi3+0x454>
    c4c0:	00c00074 	movhi	r3,1
    c4c4:	b8ef883a 	add	r23,r23,r3
    c4c8:	1006d43a 	srli	r3,r2,16
    c4cc:	1004943a 	slli	r2,r2,16
    c4d0:	e73fffcc 	andi	fp,fp,65535
    c4d4:	1dc7883a 	add	r3,r3,r23
    c4d8:	1739883a 	add	fp,r2,fp
    c4dc:	88c03a36 	bltu	r17,r3,c5c8 <__umoddi3+0x554>
    c4e0:	88c05126 	beq	r17,r3,c628 <__umoddi3+0x5b4>
    c4e4:	88c9c83a 	sub	r4,r17,r3
    c4e8:	e00f883a 	mov	r7,fp
    c4ec:	81cfc83a 	sub	r7,r16,r7
    c4f0:	81c7803a 	cmpltu	r3,r16,r7
    c4f4:	20c7c83a 	sub	r3,r4,r3
    c4f8:	1cc4983a 	sll	r2,r3,r19
    c4fc:	3d0ed83a 	srl	r7,r7,r20
    c500:	1d06d83a 	srl	r3,r3,r20
    c504:	11c4b03a 	or	r2,r2,r7
    c508:	003f7c06 	br	c2fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a2fc>
    c50c:	9ca6983a 	sll	r19,r19,r18
    c510:	88f8d83a 	srl	fp,r17,r3
    c514:	80c4d83a 	srl	r2,r16,r3
    c518:	982cd43a 	srli	r22,r19,16
    c51c:	8ca2983a 	sll	r17,r17,r18
    c520:	e009883a 	mov	r4,fp
    c524:	b00b883a 	mov	r5,r22
    c528:	146ab03a 	or	r21,r2,r17
    c52c:	000c7940 	call	c794 <__umodsi3>
    c530:	b00b883a 	mov	r5,r22
    c534:	e009883a 	mov	r4,fp
    c538:	1029883a 	mov	r20,r2
    c53c:	9dffffcc 	andi	r23,r19,65535
    c540:	000c7300 	call	c730 <__udivsi3>
    c544:	b809883a 	mov	r4,r23
    c548:	100b883a 	mov	r5,r2
    c54c:	00020100 	call	2010 <__mulsi3>
    c550:	a008943a 	slli	r4,r20,16
    c554:	a806d43a 	srli	r3,r21,16
    c558:	84a8983a 	sll	r20,r16,r18
    c55c:	1906b03a 	or	r3,r3,r4
    c560:	1880042e 	bgeu	r3,r2,c574 <__umoddi3+0x500>
    c564:	1cc7883a 	add	r3,r3,r19
    c568:	1cc00236 	bltu	r3,r19,c574 <__umoddi3+0x500>
    c56c:	1880012e 	bgeu	r3,r2,c574 <__umoddi3+0x500>
    c570:	1cc7883a 	add	r3,r3,r19
    c574:	18a3c83a 	sub	r17,r3,r2
    c578:	b00b883a 	mov	r5,r22
    c57c:	8809883a 	mov	r4,r17
    c580:	000c7940 	call	c794 <__umodsi3>
    c584:	b00b883a 	mov	r5,r22
    c588:	8809883a 	mov	r4,r17
    c58c:	1021883a 	mov	r16,r2
    c590:	000c7300 	call	c730 <__udivsi3>
    c594:	100b883a 	mov	r5,r2
    c598:	b809883a 	mov	r4,r23
    c59c:	8020943a 	slli	r16,r16,16
    c5a0:	00020100 	call	2010 <__mulsi3>
    c5a4:	a8ffffcc 	andi	r3,r21,65535
    c5a8:	1c06b03a 	or	r3,r3,r16
    c5ac:	1880042e 	bgeu	r3,r2,c5c0 <__umoddi3+0x54c>
    c5b0:	1cc7883a 	add	r3,r3,r19
    c5b4:	1cc00236 	bltu	r3,r19,c5c0 <__umoddi3+0x54c>
    c5b8:	1880012e 	bgeu	r3,r2,c5c0 <__umoddi3+0x54c>
    c5bc:	1cc7883a 	add	r3,r3,r19
    c5c0:	18a3c83a 	sub	r17,r3,r2
    c5c4:	003f2906 	br	c26c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a26c>
    c5c8:	e48fc83a 	sub	r7,fp,r18
    c5cc:	1d49c83a 	sub	r4,r3,r21
    c5d0:	e1f9803a 	cmpltu	fp,fp,r7
    c5d4:	2739c83a 	sub	fp,r4,fp
    c5d8:	8f09c83a 	sub	r4,r17,fp
    c5dc:	003fc306 	br	c4ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a4ec>
    c5e0:	01000604 	movi	r4,24
    c5e4:	003ef906 	br	c1cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a1cc>
    c5e8:	00800604 	movi	r2,24
    c5ec:	003f1306 	br	c23c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a23c>
    c5f0:	01000604 	movi	r4,24
    c5f4:	003eb606 	br	c0d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a0d0>
    c5f8:	40bf902e 	bgeu	r8,r2,c43c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a43c>
    c5fc:	b5bfff84 	addi	r22,r22,-2
    c600:	4551883a 	add	r8,r8,r21
    c604:	003f8e06 	br	c440 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a440>
    c608:	18bf762e 	bgeu	r3,r2,c3e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a3e4>
    c60c:	8c7fff84 	addi	r17,r17,-2
    c610:	1d47883a 	add	r3,r3,r21
    c614:	003f7406 	br	c3e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a3e8>
    c618:	1cc7883a 	add	r3,r3,r19
    c61c:	003ecd06 	br	c154 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a154>
    c620:	8005883a 	mov	r2,r16
    c624:	003ef806 	br	c208 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a208>
    c628:	873fe736 	bltu	r16,fp,c5c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a5c8>
    c62c:	e00f883a 	mov	r7,fp
    c630:	0009883a 	mov	r4,zero
    c634:	003fad06 	br	c4ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a4ec>

0000c638 <__divsi3>:
    c638:	20001b16 	blt	r4,zero,c6a8 <__divsi3+0x70>
    c63c:	000f883a 	mov	r7,zero
    c640:	28001616 	blt	r5,zero,c69c <__divsi3+0x64>
    c644:	200d883a 	mov	r6,r4
    c648:	29001a2e 	bgeu	r5,r4,c6b4 <__divsi3+0x7c>
    c64c:	00800804 	movi	r2,32
    c650:	00c00044 	movi	r3,1
    c654:	00000106 	br	c65c <__divsi3+0x24>
    c658:	10000d26 	beq	r2,zero,c690 <__divsi3+0x58>
    c65c:	294b883a 	add	r5,r5,r5
    c660:	10bfffc4 	addi	r2,r2,-1
    c664:	18c7883a 	add	r3,r3,r3
    c668:	293ffb36 	bltu	r5,r4,c658 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a658>
    c66c:	0005883a 	mov	r2,zero
    c670:	18000726 	beq	r3,zero,c690 <__divsi3+0x58>
    c674:	0005883a 	mov	r2,zero
    c678:	31400236 	bltu	r6,r5,c684 <__divsi3+0x4c>
    c67c:	314dc83a 	sub	r6,r6,r5
    c680:	10c4b03a 	or	r2,r2,r3
    c684:	1806d07a 	srli	r3,r3,1
    c688:	280ad07a 	srli	r5,r5,1
    c68c:	183ffa1e 	bne	r3,zero,c678 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a678>
    c690:	38000126 	beq	r7,zero,c698 <__divsi3+0x60>
    c694:	0085c83a 	sub	r2,zero,r2
    c698:	f800283a 	ret
    c69c:	014bc83a 	sub	r5,zero,r5
    c6a0:	39c0005c 	xori	r7,r7,1
    c6a4:	003fe706 	br	c644 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a644>
    c6a8:	0109c83a 	sub	r4,zero,r4
    c6ac:	01c00044 	movi	r7,1
    c6b0:	003fe306 	br	c640 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a640>
    c6b4:	00c00044 	movi	r3,1
    c6b8:	003fee06 	br	c674 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a674>

0000c6bc <__modsi3>:
    c6bc:	20001716 	blt	r4,zero,c71c <__modsi3+0x60>
    c6c0:	000f883a 	mov	r7,zero
    c6c4:	2005883a 	mov	r2,r4
    c6c8:	28001216 	blt	r5,zero,c714 <__modsi3+0x58>
    c6cc:	2900162e 	bgeu	r5,r4,c728 <__modsi3+0x6c>
    c6d0:	01800804 	movi	r6,32
    c6d4:	00c00044 	movi	r3,1
    c6d8:	00000106 	br	c6e0 <__modsi3+0x24>
    c6dc:	30000a26 	beq	r6,zero,c708 <__modsi3+0x4c>
    c6e0:	294b883a 	add	r5,r5,r5
    c6e4:	31bfffc4 	addi	r6,r6,-1
    c6e8:	18c7883a 	add	r3,r3,r3
    c6ec:	293ffb36 	bltu	r5,r4,c6dc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a6dc>
    c6f0:	18000526 	beq	r3,zero,c708 <__modsi3+0x4c>
    c6f4:	1806d07a 	srli	r3,r3,1
    c6f8:	11400136 	bltu	r2,r5,c700 <__modsi3+0x44>
    c6fc:	1145c83a 	sub	r2,r2,r5
    c700:	280ad07a 	srli	r5,r5,1
    c704:	183ffb1e 	bne	r3,zero,c6f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a6f4>
    c708:	38000126 	beq	r7,zero,c710 <__modsi3+0x54>
    c70c:	0085c83a 	sub	r2,zero,r2
    c710:	f800283a 	ret
    c714:	014bc83a 	sub	r5,zero,r5
    c718:	003fec06 	br	c6cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a6cc>
    c71c:	0109c83a 	sub	r4,zero,r4
    c720:	01c00044 	movi	r7,1
    c724:	003fe706 	br	c6c4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a6c4>
    c728:	00c00044 	movi	r3,1
    c72c:	003ff106 	br	c6f4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a6f4>

0000c730 <__udivsi3>:
    c730:	200d883a 	mov	r6,r4
    c734:	2900152e 	bgeu	r5,r4,c78c <__udivsi3+0x5c>
    c738:	28001416 	blt	r5,zero,c78c <__udivsi3+0x5c>
    c73c:	00800804 	movi	r2,32
    c740:	00c00044 	movi	r3,1
    c744:	00000206 	br	c750 <__udivsi3+0x20>
    c748:	10000e26 	beq	r2,zero,c784 <__udivsi3+0x54>
    c74c:	28000516 	blt	r5,zero,c764 <__udivsi3+0x34>
    c750:	294b883a 	add	r5,r5,r5
    c754:	10bfffc4 	addi	r2,r2,-1
    c758:	18c7883a 	add	r3,r3,r3
    c75c:	293ffa36 	bltu	r5,r4,c748 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a748>
    c760:	18000826 	beq	r3,zero,c784 <__udivsi3+0x54>
    c764:	0005883a 	mov	r2,zero
    c768:	31400236 	bltu	r6,r5,c774 <__udivsi3+0x44>
    c76c:	314dc83a 	sub	r6,r6,r5
    c770:	10c4b03a 	or	r2,r2,r3
    c774:	1806d07a 	srli	r3,r3,1
    c778:	280ad07a 	srli	r5,r5,1
    c77c:	183ffa1e 	bne	r3,zero,c768 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a768>
    c780:	f800283a 	ret
    c784:	0005883a 	mov	r2,zero
    c788:	f800283a 	ret
    c78c:	00c00044 	movi	r3,1
    c790:	003ff406 	br	c764 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a764>

0000c794 <__umodsi3>:
    c794:	2005883a 	mov	r2,r4
    c798:	2900122e 	bgeu	r5,r4,c7e4 <__umodsi3+0x50>
    c79c:	28001116 	blt	r5,zero,c7e4 <__umodsi3+0x50>
    c7a0:	01800804 	movi	r6,32
    c7a4:	00c00044 	movi	r3,1
    c7a8:	00000206 	br	c7b4 <__umodsi3+0x20>
    c7ac:	30000c26 	beq	r6,zero,c7e0 <__umodsi3+0x4c>
    c7b0:	28000516 	blt	r5,zero,c7c8 <__umodsi3+0x34>
    c7b4:	294b883a 	add	r5,r5,r5
    c7b8:	31bfffc4 	addi	r6,r6,-1
    c7bc:	18c7883a 	add	r3,r3,r3
    c7c0:	293ffa36 	bltu	r5,r4,c7ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a7ac>
    c7c4:	18000626 	beq	r3,zero,c7e0 <__umodsi3+0x4c>
    c7c8:	1806d07a 	srli	r3,r3,1
    c7cc:	11400136 	bltu	r2,r5,c7d4 <__umodsi3+0x40>
    c7d0:	1145c83a 	sub	r2,r2,r5
    c7d4:	280ad07a 	srli	r5,r5,1
    c7d8:	183ffb1e 	bne	r3,zero,c7c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a7c8>
    c7dc:	f800283a 	ret
    c7e0:	f800283a 	ret
    c7e4:	00c00044 	movi	r3,1
    c7e8:	003ff706 	br	c7c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a7c8>

0000c7ec <__adddf3>:
    c7ec:	02c00434 	movhi	r11,16
    c7f0:	5affffc4 	addi	r11,r11,-1
    c7f4:	2806d7fa 	srli	r3,r5,31
    c7f8:	2ad4703a 	and	r10,r5,r11
    c7fc:	3ad2703a 	and	r9,r7,r11
    c800:	3804d53a 	srli	r2,r7,20
    c804:	3018d77a 	srli	r12,r6,29
    c808:	280ad53a 	srli	r5,r5,20
    c80c:	501490fa 	slli	r10,r10,3
    c810:	2010d77a 	srli	r8,r4,29
    c814:	481290fa 	slli	r9,r9,3
    c818:	380ed7fa 	srli	r7,r7,31
    c81c:	defffb04 	addi	sp,sp,-20
    c820:	dc800215 	stw	r18,8(sp)
    c824:	dc400115 	stw	r17,4(sp)
    c828:	dc000015 	stw	r16,0(sp)
    c82c:	dfc00415 	stw	ra,16(sp)
    c830:	dcc00315 	stw	r19,12(sp)
    c834:	1c803fcc 	andi	r18,r3,255
    c838:	2c01ffcc 	andi	r16,r5,2047
    c83c:	5210b03a 	or	r8,r10,r8
    c840:	202290fa 	slli	r17,r4,3
    c844:	1081ffcc 	andi	r2,r2,2047
    c848:	4b12b03a 	or	r9,r9,r12
    c84c:	300c90fa 	slli	r6,r6,3
    c850:	91c07526 	beq	r18,r7,ca28 <__adddf3+0x23c>
    c854:	8087c83a 	sub	r3,r16,r2
    c858:	00c0ab0e 	bge	zero,r3,cb08 <__adddf3+0x31c>
    c85c:	10002a1e 	bne	r2,zero,c908 <__adddf3+0x11c>
    c860:	4984b03a 	or	r2,r9,r6
    c864:	1000961e 	bne	r2,zero,cac0 <__adddf3+0x2d4>
    c868:	888001cc 	andi	r2,r17,7
    c86c:	10000726 	beq	r2,zero,c88c <__adddf3+0xa0>
    c870:	888003cc 	andi	r2,r17,15
    c874:	00c00104 	movi	r3,4
    c878:	10c00426 	beq	r2,r3,c88c <__adddf3+0xa0>
    c87c:	88c7883a 	add	r3,r17,r3
    c880:	1c63803a 	cmpltu	r17,r3,r17
    c884:	4451883a 	add	r8,r8,r17
    c888:	1823883a 	mov	r17,r3
    c88c:	4080202c 	andhi	r2,r8,128
    c890:	10005926 	beq	r2,zero,c9f8 <__adddf3+0x20c>
    c894:	84000044 	addi	r16,r16,1
    c898:	0081ffc4 	movi	r2,2047
    c89c:	8080ba26 	beq	r16,r2,cb88 <__adddf3+0x39c>
    c8a0:	00bfe034 	movhi	r2,65408
    c8a4:	10bfffc4 	addi	r2,r2,-1
    c8a8:	4090703a 	and	r8,r8,r2
    c8ac:	4004977a 	slli	r2,r8,29
    c8b0:	4010927a 	slli	r8,r8,9
    c8b4:	8822d0fa 	srli	r17,r17,3
    c8b8:	8401ffcc 	andi	r16,r16,2047
    c8bc:	4010d33a 	srli	r8,r8,12
    c8c0:	9007883a 	mov	r3,r18
    c8c4:	1444b03a 	or	r2,r2,r17
    c8c8:	8401ffcc 	andi	r16,r16,2047
    c8cc:	8020953a 	slli	r16,r16,20
    c8d0:	18c03fcc 	andi	r3,r3,255
    c8d4:	01000434 	movhi	r4,16
    c8d8:	213fffc4 	addi	r4,r4,-1
    c8dc:	180697fa 	slli	r3,r3,31
    c8e0:	4110703a 	and	r8,r8,r4
    c8e4:	4410b03a 	or	r8,r8,r16
    c8e8:	40c6b03a 	or	r3,r8,r3
    c8ec:	dfc00417 	ldw	ra,16(sp)
    c8f0:	dcc00317 	ldw	r19,12(sp)
    c8f4:	dc800217 	ldw	r18,8(sp)
    c8f8:	dc400117 	ldw	r17,4(sp)
    c8fc:	dc000017 	ldw	r16,0(sp)
    c900:	dec00504 	addi	sp,sp,20
    c904:	f800283a 	ret
    c908:	0081ffc4 	movi	r2,2047
    c90c:	80bfd626 	beq	r16,r2,c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    c910:	4a402034 	orhi	r9,r9,128
    c914:	00800e04 	movi	r2,56
    c918:	10c09f16 	blt	r2,r3,cb98 <__adddf3+0x3ac>
    c91c:	008007c4 	movi	r2,31
    c920:	10c0c216 	blt	r2,r3,cc2c <__adddf3+0x440>
    c924:	00800804 	movi	r2,32
    c928:	10c5c83a 	sub	r2,r2,r3
    c92c:	488a983a 	sll	r5,r9,r2
    c930:	30c8d83a 	srl	r4,r6,r3
    c934:	3084983a 	sll	r2,r6,r2
    c938:	48c6d83a 	srl	r3,r9,r3
    c93c:	290cb03a 	or	r6,r5,r4
    c940:	1004c03a 	cmpne	r2,r2,zero
    c944:	308cb03a 	or	r6,r6,r2
    c948:	898dc83a 	sub	r6,r17,r6
    c94c:	89a3803a 	cmpltu	r17,r17,r6
    c950:	40d1c83a 	sub	r8,r8,r3
    c954:	4451c83a 	sub	r8,r8,r17
    c958:	3023883a 	mov	r17,r6
    c95c:	4080202c 	andhi	r2,r8,128
    c960:	10002326 	beq	r2,zero,c9f0 <__adddf3+0x204>
    c964:	04c02034 	movhi	r19,128
    c968:	9cffffc4 	addi	r19,r19,-1
    c96c:	44e6703a 	and	r19,r8,r19
    c970:	98007626 	beq	r19,zero,cb4c <__adddf3+0x360>
    c974:	9809883a 	mov	r4,r19
    c978:	000285c0 	call	285c <__clzsi2>
    c97c:	10fffe04 	addi	r3,r2,-8
    c980:	010007c4 	movi	r4,31
    c984:	20c07716 	blt	r4,r3,cb64 <__adddf3+0x378>
    c988:	00800804 	movi	r2,32
    c98c:	10c5c83a 	sub	r2,r2,r3
    c990:	8884d83a 	srl	r2,r17,r2
    c994:	98d0983a 	sll	r8,r19,r3
    c998:	88e2983a 	sll	r17,r17,r3
    c99c:	1204b03a 	or	r2,r2,r8
    c9a0:	1c007416 	blt	r3,r16,cb74 <__adddf3+0x388>
    c9a4:	1c21c83a 	sub	r16,r3,r16
    c9a8:	82000044 	addi	r8,r16,1
    c9ac:	00c007c4 	movi	r3,31
    c9b0:	1a009116 	blt	r3,r8,cbf8 <__adddf3+0x40c>
    c9b4:	00c00804 	movi	r3,32
    c9b8:	1a07c83a 	sub	r3,r3,r8
    c9bc:	8a08d83a 	srl	r4,r17,r8
    c9c0:	88e2983a 	sll	r17,r17,r3
    c9c4:	10c6983a 	sll	r3,r2,r3
    c9c8:	1210d83a 	srl	r8,r2,r8
    c9cc:	8804c03a 	cmpne	r2,r17,zero
    c9d0:	1906b03a 	or	r3,r3,r4
    c9d4:	18a2b03a 	or	r17,r3,r2
    c9d8:	0021883a 	mov	r16,zero
    c9dc:	003fa206 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    c9e0:	1890b03a 	or	r8,r3,r2
    c9e4:	40017d26 	beq	r8,zero,cfdc <__adddf3+0x7f0>
    c9e8:	1011883a 	mov	r8,r2
    c9ec:	1823883a 	mov	r17,r3
    c9f0:	888001cc 	andi	r2,r17,7
    c9f4:	103f9e1e 	bne	r2,zero,c870 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a870>
    c9f8:	4004977a 	slli	r2,r8,29
    c9fc:	8822d0fa 	srli	r17,r17,3
    ca00:	4010d0fa 	srli	r8,r8,3
    ca04:	9007883a 	mov	r3,r18
    ca08:	1444b03a 	or	r2,r2,r17
    ca0c:	0101ffc4 	movi	r4,2047
    ca10:	81002426 	beq	r16,r4,caa4 <__adddf3+0x2b8>
    ca14:	8120703a 	and	r16,r16,r4
    ca18:	01000434 	movhi	r4,16
    ca1c:	213fffc4 	addi	r4,r4,-1
    ca20:	4110703a 	and	r8,r8,r4
    ca24:	003fa806 	br	c8c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a8c8>
    ca28:	8089c83a 	sub	r4,r16,r2
    ca2c:	01005e0e 	bge	zero,r4,cba8 <__adddf3+0x3bc>
    ca30:	10002b26 	beq	r2,zero,cae0 <__adddf3+0x2f4>
    ca34:	0081ffc4 	movi	r2,2047
    ca38:	80bf8b26 	beq	r16,r2,c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    ca3c:	4a402034 	orhi	r9,r9,128
    ca40:	00800e04 	movi	r2,56
    ca44:	1100a40e 	bge	r2,r4,ccd8 <__adddf3+0x4ec>
    ca48:	498cb03a 	or	r6,r9,r6
    ca4c:	300ac03a 	cmpne	r5,r6,zero
    ca50:	0013883a 	mov	r9,zero
    ca54:	2c4b883a 	add	r5,r5,r17
    ca58:	2c63803a 	cmpltu	r17,r5,r17
    ca5c:	4a11883a 	add	r8,r9,r8
    ca60:	8a11883a 	add	r8,r17,r8
    ca64:	2823883a 	mov	r17,r5
    ca68:	4080202c 	andhi	r2,r8,128
    ca6c:	103fe026 	beq	r2,zero,c9f0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a9f0>
    ca70:	84000044 	addi	r16,r16,1
    ca74:	0081ffc4 	movi	r2,2047
    ca78:	8080d226 	beq	r16,r2,cdc4 <__adddf3+0x5d8>
    ca7c:	00bfe034 	movhi	r2,65408
    ca80:	10bfffc4 	addi	r2,r2,-1
    ca84:	4090703a 	and	r8,r8,r2
    ca88:	880ad07a 	srli	r5,r17,1
    ca8c:	400897fa 	slli	r4,r8,31
    ca90:	88c0004c 	andi	r3,r17,1
    ca94:	28e2b03a 	or	r17,r5,r3
    ca98:	4010d07a 	srli	r8,r8,1
    ca9c:	2462b03a 	or	r17,r4,r17
    caa0:	003f7106 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    caa4:	4088b03a 	or	r4,r8,r2
    caa8:	20014526 	beq	r4,zero,cfc0 <__adddf3+0x7d4>
    caac:	01000434 	movhi	r4,16
    cab0:	42000234 	orhi	r8,r8,8
    cab4:	213fffc4 	addi	r4,r4,-1
    cab8:	4110703a 	and	r8,r8,r4
    cabc:	003f8206 	br	c8c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a8c8>
    cac0:	18ffffc4 	addi	r3,r3,-1
    cac4:	1800491e 	bne	r3,zero,cbec <__adddf3+0x400>
    cac8:	898bc83a 	sub	r5,r17,r6
    cacc:	8963803a 	cmpltu	r17,r17,r5
    cad0:	4251c83a 	sub	r8,r8,r9
    cad4:	4451c83a 	sub	r8,r8,r17
    cad8:	2823883a 	mov	r17,r5
    cadc:	003f9f06 	br	c95c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a95c>
    cae0:	4984b03a 	or	r2,r9,r6
    cae4:	103f6026 	beq	r2,zero,c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cae8:	213fffc4 	addi	r4,r4,-1
    caec:	2000931e 	bne	r4,zero,cd3c <__adddf3+0x550>
    caf0:	898d883a 	add	r6,r17,r6
    caf4:	3463803a 	cmpltu	r17,r6,r17
    caf8:	4251883a 	add	r8,r8,r9
    cafc:	8a11883a 	add	r8,r17,r8
    cb00:	3023883a 	mov	r17,r6
    cb04:	003fd806 	br	ca68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa68>
    cb08:	1800541e 	bne	r3,zero,cc5c <__adddf3+0x470>
    cb0c:	80800044 	addi	r2,r16,1
    cb10:	1081ffcc 	andi	r2,r2,2047
    cb14:	00c00044 	movi	r3,1
    cb18:	1880a00e 	bge	r3,r2,cd9c <__adddf3+0x5b0>
    cb1c:	8989c83a 	sub	r4,r17,r6
    cb20:	8905803a 	cmpltu	r2,r17,r4
    cb24:	4267c83a 	sub	r19,r8,r9
    cb28:	98a7c83a 	sub	r19,r19,r2
    cb2c:	9880202c 	andhi	r2,r19,128
    cb30:	10006326 	beq	r2,zero,ccc0 <__adddf3+0x4d4>
    cb34:	3463c83a 	sub	r17,r6,r17
    cb38:	4a07c83a 	sub	r3,r9,r8
    cb3c:	344d803a 	cmpltu	r6,r6,r17
    cb40:	19a7c83a 	sub	r19,r3,r6
    cb44:	3825883a 	mov	r18,r7
    cb48:	983f8a1e 	bne	r19,zero,c974 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a974>
    cb4c:	8809883a 	mov	r4,r17
    cb50:	000285c0 	call	285c <__clzsi2>
    cb54:	10800804 	addi	r2,r2,32
    cb58:	10fffe04 	addi	r3,r2,-8
    cb5c:	010007c4 	movi	r4,31
    cb60:	20ff890e 	bge	r4,r3,c988 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a988>
    cb64:	10bff604 	addi	r2,r2,-40
    cb68:	8884983a 	sll	r2,r17,r2
    cb6c:	0023883a 	mov	r17,zero
    cb70:	1c3f8c0e 	bge	r3,r16,c9a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a9a4>
    cb74:	023fe034 	movhi	r8,65408
    cb78:	423fffc4 	addi	r8,r8,-1
    cb7c:	80e1c83a 	sub	r16,r16,r3
    cb80:	1210703a 	and	r8,r2,r8
    cb84:	003f3806 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cb88:	9007883a 	mov	r3,r18
    cb8c:	0011883a 	mov	r8,zero
    cb90:	0005883a 	mov	r2,zero
    cb94:	003f4c06 	br	c8c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a8c8>
    cb98:	498cb03a 	or	r6,r9,r6
    cb9c:	300cc03a 	cmpne	r6,r6,zero
    cba0:	0007883a 	mov	r3,zero
    cba4:	003f6806 	br	c948 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a948>
    cba8:	20009c1e 	bne	r4,zero,ce1c <__adddf3+0x630>
    cbac:	80800044 	addi	r2,r16,1
    cbb0:	1141ffcc 	andi	r5,r2,2047
    cbb4:	01000044 	movi	r4,1
    cbb8:	2140670e 	bge	r4,r5,cd58 <__adddf3+0x56c>
    cbbc:	0101ffc4 	movi	r4,2047
    cbc0:	11007f26 	beq	r2,r4,cdc0 <__adddf3+0x5d4>
    cbc4:	898d883a 	add	r6,r17,r6
    cbc8:	4247883a 	add	r3,r8,r9
    cbcc:	3451803a 	cmpltu	r8,r6,r17
    cbd0:	40d1883a 	add	r8,r8,r3
    cbd4:	402297fa 	slli	r17,r8,31
    cbd8:	300cd07a 	srli	r6,r6,1
    cbdc:	4010d07a 	srli	r8,r8,1
    cbe0:	1021883a 	mov	r16,r2
    cbe4:	89a2b03a 	or	r17,r17,r6
    cbe8:	003f1f06 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cbec:	0081ffc4 	movi	r2,2047
    cbf0:	80bf481e 	bne	r16,r2,c914 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a914>
    cbf4:	003f1c06 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cbf8:	843ff844 	addi	r16,r16,-31
    cbfc:	01000804 	movi	r4,32
    cc00:	1406d83a 	srl	r3,r2,r16
    cc04:	41005026 	beq	r8,r4,cd48 <__adddf3+0x55c>
    cc08:	01001004 	movi	r4,64
    cc0c:	2211c83a 	sub	r8,r4,r8
    cc10:	1204983a 	sll	r2,r2,r8
    cc14:	88a2b03a 	or	r17,r17,r2
    cc18:	8822c03a 	cmpne	r17,r17,zero
    cc1c:	1c62b03a 	or	r17,r3,r17
    cc20:	0011883a 	mov	r8,zero
    cc24:	0021883a 	mov	r16,zero
    cc28:	003f7106 	br	c9f0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a9f0>
    cc2c:	193ff804 	addi	r4,r3,-32
    cc30:	00800804 	movi	r2,32
    cc34:	4908d83a 	srl	r4,r9,r4
    cc38:	18804526 	beq	r3,r2,cd50 <__adddf3+0x564>
    cc3c:	00801004 	movi	r2,64
    cc40:	10c5c83a 	sub	r2,r2,r3
    cc44:	4886983a 	sll	r3,r9,r2
    cc48:	198cb03a 	or	r6,r3,r6
    cc4c:	300cc03a 	cmpne	r6,r6,zero
    cc50:	218cb03a 	or	r6,r4,r6
    cc54:	0007883a 	mov	r3,zero
    cc58:	003f3b06 	br	c948 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a948>
    cc5c:	80002a26 	beq	r16,zero,cd08 <__adddf3+0x51c>
    cc60:	0101ffc4 	movi	r4,2047
    cc64:	11006826 	beq	r2,r4,ce08 <__adddf3+0x61c>
    cc68:	00c7c83a 	sub	r3,zero,r3
    cc6c:	42002034 	orhi	r8,r8,128
    cc70:	01000e04 	movi	r4,56
    cc74:	20c07c16 	blt	r4,r3,ce68 <__adddf3+0x67c>
    cc78:	010007c4 	movi	r4,31
    cc7c:	20c0da16 	blt	r4,r3,cfe8 <__adddf3+0x7fc>
    cc80:	01000804 	movi	r4,32
    cc84:	20c9c83a 	sub	r4,r4,r3
    cc88:	4114983a 	sll	r10,r8,r4
    cc8c:	88cad83a 	srl	r5,r17,r3
    cc90:	8908983a 	sll	r4,r17,r4
    cc94:	40c6d83a 	srl	r3,r8,r3
    cc98:	5162b03a 	or	r17,r10,r5
    cc9c:	2008c03a 	cmpne	r4,r4,zero
    cca0:	8922b03a 	or	r17,r17,r4
    cca4:	3463c83a 	sub	r17,r6,r17
    cca8:	48c7c83a 	sub	r3,r9,r3
    ccac:	344d803a 	cmpltu	r6,r6,r17
    ccb0:	1991c83a 	sub	r8,r3,r6
    ccb4:	1021883a 	mov	r16,r2
    ccb8:	3825883a 	mov	r18,r7
    ccbc:	003f2706 	br	c95c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a95c>
    ccc0:	24d0b03a 	or	r8,r4,r19
    ccc4:	40001b1e 	bne	r8,zero,cd34 <__adddf3+0x548>
    ccc8:	0005883a 	mov	r2,zero
    cccc:	0007883a 	mov	r3,zero
    ccd0:	0021883a 	mov	r16,zero
    ccd4:	003f4d06 	br	ca0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa0c>
    ccd8:	008007c4 	movi	r2,31
    ccdc:	11003c16 	blt	r2,r4,cdd0 <__adddf3+0x5e4>
    cce0:	00800804 	movi	r2,32
    cce4:	1105c83a 	sub	r2,r2,r4
    cce8:	488e983a 	sll	r7,r9,r2
    ccec:	310ad83a 	srl	r5,r6,r4
    ccf0:	3084983a 	sll	r2,r6,r2
    ccf4:	4912d83a 	srl	r9,r9,r4
    ccf8:	394ab03a 	or	r5,r7,r5
    ccfc:	1004c03a 	cmpne	r2,r2,zero
    cd00:	288ab03a 	or	r5,r5,r2
    cd04:	003f5306 	br	ca54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa54>
    cd08:	4448b03a 	or	r4,r8,r17
    cd0c:	20003e26 	beq	r4,zero,ce08 <__adddf3+0x61c>
    cd10:	00c6303a 	nor	r3,zero,r3
    cd14:	18003a1e 	bne	r3,zero,ce00 <__adddf3+0x614>
    cd18:	3463c83a 	sub	r17,r6,r17
    cd1c:	4a07c83a 	sub	r3,r9,r8
    cd20:	344d803a 	cmpltu	r6,r6,r17
    cd24:	1991c83a 	sub	r8,r3,r6
    cd28:	1021883a 	mov	r16,r2
    cd2c:	3825883a 	mov	r18,r7
    cd30:	003f0a06 	br	c95c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a95c>
    cd34:	2023883a 	mov	r17,r4
    cd38:	003f0d06 	br	c970 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a970>
    cd3c:	0081ffc4 	movi	r2,2047
    cd40:	80bf3f1e 	bne	r16,r2,ca40 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa40>
    cd44:	003ec806 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cd48:	0005883a 	mov	r2,zero
    cd4c:	003fb106 	br	cc14 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153ac14>
    cd50:	0007883a 	mov	r3,zero
    cd54:	003fbc06 	br	cc48 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153ac48>
    cd58:	4444b03a 	or	r2,r8,r17
    cd5c:	8000871e 	bne	r16,zero,cf7c <__adddf3+0x790>
    cd60:	1000ba26 	beq	r2,zero,d04c <__adddf3+0x860>
    cd64:	4984b03a 	or	r2,r9,r6
    cd68:	103ebf26 	beq	r2,zero,c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cd6c:	8985883a 	add	r2,r17,r6
    cd70:	4247883a 	add	r3,r8,r9
    cd74:	1451803a 	cmpltu	r8,r2,r17
    cd78:	40d1883a 	add	r8,r8,r3
    cd7c:	40c0202c 	andhi	r3,r8,128
    cd80:	1023883a 	mov	r17,r2
    cd84:	183f1a26 	beq	r3,zero,c9f0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a9f0>
    cd88:	00bfe034 	movhi	r2,65408
    cd8c:	10bfffc4 	addi	r2,r2,-1
    cd90:	2021883a 	mov	r16,r4
    cd94:	4090703a 	and	r8,r8,r2
    cd98:	003eb306 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cd9c:	4444b03a 	or	r2,r8,r17
    cda0:	8000291e 	bne	r16,zero,ce48 <__adddf3+0x65c>
    cda4:	10004b1e 	bne	r2,zero,ced4 <__adddf3+0x6e8>
    cda8:	4990b03a 	or	r8,r9,r6
    cdac:	40008b26 	beq	r8,zero,cfdc <__adddf3+0x7f0>
    cdb0:	4811883a 	mov	r8,r9
    cdb4:	3023883a 	mov	r17,r6
    cdb8:	3825883a 	mov	r18,r7
    cdbc:	003eaa06 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cdc0:	1021883a 	mov	r16,r2
    cdc4:	0011883a 	mov	r8,zero
    cdc8:	0005883a 	mov	r2,zero
    cdcc:	003f0f06 	br	ca0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa0c>
    cdd0:	217ff804 	addi	r5,r4,-32
    cdd4:	00800804 	movi	r2,32
    cdd8:	494ad83a 	srl	r5,r9,r5
    cddc:	20807d26 	beq	r4,r2,cfd4 <__adddf3+0x7e8>
    cde0:	00801004 	movi	r2,64
    cde4:	1109c83a 	sub	r4,r2,r4
    cde8:	4912983a 	sll	r9,r9,r4
    cdec:	498cb03a 	or	r6,r9,r6
    cdf0:	300cc03a 	cmpne	r6,r6,zero
    cdf4:	298ab03a 	or	r5,r5,r6
    cdf8:	0013883a 	mov	r9,zero
    cdfc:	003f1506 	br	ca54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa54>
    ce00:	0101ffc4 	movi	r4,2047
    ce04:	113f9a1e 	bne	r2,r4,cc70 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153ac70>
    ce08:	4811883a 	mov	r8,r9
    ce0c:	3023883a 	mov	r17,r6
    ce10:	1021883a 	mov	r16,r2
    ce14:	3825883a 	mov	r18,r7
    ce18:	003e9306 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    ce1c:	8000161e 	bne	r16,zero,ce78 <__adddf3+0x68c>
    ce20:	444ab03a 	or	r5,r8,r17
    ce24:	28005126 	beq	r5,zero,cf6c <__adddf3+0x780>
    ce28:	0108303a 	nor	r4,zero,r4
    ce2c:	20004d1e 	bne	r4,zero,cf64 <__adddf3+0x778>
    ce30:	89a3883a 	add	r17,r17,r6
    ce34:	4253883a 	add	r9,r8,r9
    ce38:	898d803a 	cmpltu	r6,r17,r6
    ce3c:	3251883a 	add	r8,r6,r9
    ce40:	1021883a 	mov	r16,r2
    ce44:	003f0806 	br	ca68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa68>
    ce48:	1000301e 	bne	r2,zero,cf0c <__adddf3+0x720>
    ce4c:	4984b03a 	or	r2,r9,r6
    ce50:	10007126 	beq	r2,zero,d018 <__adddf3+0x82c>
    ce54:	4811883a 	mov	r8,r9
    ce58:	3023883a 	mov	r17,r6
    ce5c:	3825883a 	mov	r18,r7
    ce60:	0401ffc4 	movi	r16,2047
    ce64:	003e8006 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    ce68:	4462b03a 	or	r17,r8,r17
    ce6c:	8822c03a 	cmpne	r17,r17,zero
    ce70:	0007883a 	mov	r3,zero
    ce74:	003f8b06 	br	cca4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aca4>
    ce78:	0141ffc4 	movi	r5,2047
    ce7c:	11403b26 	beq	r2,r5,cf6c <__adddf3+0x780>
    ce80:	0109c83a 	sub	r4,zero,r4
    ce84:	42002034 	orhi	r8,r8,128
    ce88:	01400e04 	movi	r5,56
    ce8c:	29006716 	blt	r5,r4,d02c <__adddf3+0x840>
    ce90:	014007c4 	movi	r5,31
    ce94:	29007016 	blt	r5,r4,d058 <__adddf3+0x86c>
    ce98:	01400804 	movi	r5,32
    ce9c:	290bc83a 	sub	r5,r5,r4
    cea0:	4154983a 	sll	r10,r8,r5
    cea4:	890ed83a 	srl	r7,r17,r4
    cea8:	894a983a 	sll	r5,r17,r5
    ceac:	4108d83a 	srl	r4,r8,r4
    ceb0:	51e2b03a 	or	r17,r10,r7
    ceb4:	280ac03a 	cmpne	r5,r5,zero
    ceb8:	8962b03a 	or	r17,r17,r5
    cebc:	89a3883a 	add	r17,r17,r6
    cec0:	2253883a 	add	r9,r4,r9
    cec4:	898d803a 	cmpltu	r6,r17,r6
    cec8:	3251883a 	add	r8,r6,r9
    cecc:	1021883a 	mov	r16,r2
    ced0:	003ee506 	br	ca68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa68>
    ced4:	4984b03a 	or	r2,r9,r6
    ced8:	103e6326 	beq	r2,zero,c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cedc:	8987c83a 	sub	r3,r17,r6
    cee0:	88c9803a 	cmpltu	r4,r17,r3
    cee4:	4245c83a 	sub	r2,r8,r9
    cee8:	1105c83a 	sub	r2,r2,r4
    ceec:	1100202c 	andhi	r4,r2,128
    cef0:	203ebb26 	beq	r4,zero,c9e0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a9e0>
    cef4:	3463c83a 	sub	r17,r6,r17
    cef8:	4a07c83a 	sub	r3,r9,r8
    cefc:	344d803a 	cmpltu	r6,r6,r17
    cf00:	1991c83a 	sub	r8,r3,r6
    cf04:	3825883a 	mov	r18,r7
    cf08:	003e5706 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cf0c:	4984b03a 	or	r2,r9,r6
    cf10:	10002e26 	beq	r2,zero,cfcc <__adddf3+0x7e0>
    cf14:	4004d0fa 	srli	r2,r8,3
    cf18:	8822d0fa 	srli	r17,r17,3
    cf1c:	4010977a 	slli	r8,r8,29
    cf20:	10c0022c 	andhi	r3,r2,8
    cf24:	4462b03a 	or	r17,r8,r17
    cf28:	18000826 	beq	r3,zero,cf4c <__adddf3+0x760>
    cf2c:	4808d0fa 	srli	r4,r9,3
    cf30:	20c0022c 	andhi	r3,r4,8
    cf34:	1800051e 	bne	r3,zero,cf4c <__adddf3+0x760>
    cf38:	300cd0fa 	srli	r6,r6,3
    cf3c:	4806977a 	slli	r3,r9,29
    cf40:	2005883a 	mov	r2,r4
    cf44:	3825883a 	mov	r18,r7
    cf48:	19a2b03a 	or	r17,r3,r6
    cf4c:	8810d77a 	srli	r8,r17,29
    cf50:	100490fa 	slli	r2,r2,3
    cf54:	882290fa 	slli	r17,r17,3
    cf58:	0401ffc4 	movi	r16,2047
    cf5c:	4090b03a 	or	r8,r8,r2
    cf60:	003e4106 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cf64:	0141ffc4 	movi	r5,2047
    cf68:	117fc71e 	bne	r2,r5,ce88 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153ae88>
    cf6c:	4811883a 	mov	r8,r9
    cf70:	3023883a 	mov	r17,r6
    cf74:	1021883a 	mov	r16,r2
    cf78:	003e3b06 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cf7c:	10002f26 	beq	r2,zero,d03c <__adddf3+0x850>
    cf80:	4984b03a 	or	r2,r9,r6
    cf84:	10001126 	beq	r2,zero,cfcc <__adddf3+0x7e0>
    cf88:	4004d0fa 	srli	r2,r8,3
    cf8c:	8822d0fa 	srli	r17,r17,3
    cf90:	4010977a 	slli	r8,r8,29
    cf94:	10c0022c 	andhi	r3,r2,8
    cf98:	4462b03a 	or	r17,r8,r17
    cf9c:	183feb26 	beq	r3,zero,cf4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153af4c>
    cfa0:	4808d0fa 	srli	r4,r9,3
    cfa4:	20c0022c 	andhi	r3,r4,8
    cfa8:	183fe81e 	bne	r3,zero,cf4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153af4c>
    cfac:	300cd0fa 	srli	r6,r6,3
    cfb0:	4806977a 	slli	r3,r9,29
    cfb4:	2005883a 	mov	r2,r4
    cfb8:	19a2b03a 	or	r17,r3,r6
    cfbc:	003fe306 	br	cf4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153af4c>
    cfc0:	0011883a 	mov	r8,zero
    cfc4:	0005883a 	mov	r2,zero
    cfc8:	003e3f06 	br	c8c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a8c8>
    cfcc:	0401ffc4 	movi	r16,2047
    cfd0:	003e2506 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    cfd4:	0013883a 	mov	r9,zero
    cfd8:	003f8406 	br	cdec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153adec>
    cfdc:	0005883a 	mov	r2,zero
    cfe0:	0007883a 	mov	r3,zero
    cfe4:	003e8906 	br	ca0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa0c>
    cfe8:	197ff804 	addi	r5,r3,-32
    cfec:	01000804 	movi	r4,32
    cff0:	414ad83a 	srl	r5,r8,r5
    cff4:	19002426 	beq	r3,r4,d088 <__adddf3+0x89c>
    cff8:	01001004 	movi	r4,64
    cffc:	20c7c83a 	sub	r3,r4,r3
    d000:	40c6983a 	sll	r3,r8,r3
    d004:	1c46b03a 	or	r3,r3,r17
    d008:	1806c03a 	cmpne	r3,r3,zero
    d00c:	28e2b03a 	or	r17,r5,r3
    d010:	0007883a 	mov	r3,zero
    d014:	003f2306 	br	cca4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aca4>
    d018:	0007883a 	mov	r3,zero
    d01c:	5811883a 	mov	r8,r11
    d020:	00bfffc4 	movi	r2,-1
    d024:	0401ffc4 	movi	r16,2047
    d028:	003e7806 	br	ca0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aa0c>
    d02c:	4462b03a 	or	r17,r8,r17
    d030:	8822c03a 	cmpne	r17,r17,zero
    d034:	0009883a 	mov	r4,zero
    d038:	003fa006 	br	cebc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aebc>
    d03c:	4811883a 	mov	r8,r9
    d040:	3023883a 	mov	r17,r6
    d044:	0401ffc4 	movi	r16,2047
    d048:	003e0706 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    d04c:	4811883a 	mov	r8,r9
    d050:	3023883a 	mov	r17,r6
    d054:	003e0406 	br	c868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153a868>
    d058:	21fff804 	addi	r7,r4,-32
    d05c:	01400804 	movi	r5,32
    d060:	41ced83a 	srl	r7,r8,r7
    d064:	21400a26 	beq	r4,r5,d090 <__adddf3+0x8a4>
    d068:	01401004 	movi	r5,64
    d06c:	2909c83a 	sub	r4,r5,r4
    d070:	4108983a 	sll	r4,r8,r4
    d074:	2448b03a 	or	r4,r4,r17
    d078:	2008c03a 	cmpne	r4,r4,zero
    d07c:	3922b03a 	or	r17,r7,r4
    d080:	0009883a 	mov	r4,zero
    d084:	003f8d06 	br	cebc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153aebc>
    d088:	0007883a 	mov	r3,zero
    d08c:	003fdd06 	br	d004 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b004>
    d090:	0009883a 	mov	r4,zero
    d094:	003ff706 	br	d074 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b074>

0000d098 <__divdf3>:
    d098:	defff004 	addi	sp,sp,-64
    d09c:	dc800815 	stw	r18,32(sp)
    d0a0:	2824d53a 	srli	r18,r5,20
    d0a4:	dd800c15 	stw	r22,48(sp)
    d0a8:	282cd7fa 	srli	r22,r5,31
    d0ac:	dc000615 	stw	r16,24(sp)
    d0b0:	04000434 	movhi	r16,16
    d0b4:	843fffc4 	addi	r16,r16,-1
    d0b8:	dfc00f15 	stw	ra,60(sp)
    d0bc:	df000e15 	stw	fp,56(sp)
    d0c0:	ddc00d15 	stw	r23,52(sp)
    d0c4:	dd400b15 	stw	r21,44(sp)
    d0c8:	dd000a15 	stw	r20,40(sp)
    d0cc:	dcc00915 	stw	r19,36(sp)
    d0d0:	dc400715 	stw	r17,28(sp)
    d0d4:	9481ffcc 	andi	r18,r18,2047
    d0d8:	2c20703a 	and	r16,r5,r16
    d0dc:	b2003fcc 	andi	r8,r22,255
    d0e0:	90006126 	beq	r18,zero,d268 <__divdf3+0x1d0>
    d0e4:	0081ffc4 	movi	r2,2047
    d0e8:	202b883a 	mov	r21,r4
    d0ec:	90803726 	beq	r18,r2,d1cc <__divdf3+0x134>
    d0f0:	80800434 	orhi	r2,r16,16
    d0f4:	100490fa 	slli	r2,r2,3
    d0f8:	2020d77a 	srli	r16,r4,29
    d0fc:	202a90fa 	slli	r21,r4,3
    d100:	94bf0044 	addi	r18,r18,-1023
    d104:	80a0b03a 	or	r16,r16,r2
    d108:	0013883a 	mov	r9,zero
    d10c:	000b883a 	mov	r5,zero
    d110:	3806d53a 	srli	r3,r7,20
    d114:	382ed7fa 	srli	r23,r7,31
    d118:	04400434 	movhi	r17,16
    d11c:	8c7fffc4 	addi	r17,r17,-1
    d120:	18c1ffcc 	andi	r3,r3,2047
    d124:	3029883a 	mov	r20,r6
    d128:	3c62703a 	and	r17,r7,r17
    d12c:	bf003fcc 	andi	fp,r23,255
    d130:	18006e26 	beq	r3,zero,d2ec <__divdf3+0x254>
    d134:	0081ffc4 	movi	r2,2047
    d138:	18806626 	beq	r3,r2,d2d4 <__divdf3+0x23c>
    d13c:	88800434 	orhi	r2,r17,16
    d140:	100490fa 	slli	r2,r2,3
    d144:	3022d77a 	srli	r17,r6,29
    d148:	302890fa 	slli	r20,r6,3
    d14c:	18ff0044 	addi	r3,r3,-1023
    d150:	88a2b03a 	or	r17,r17,r2
    d154:	000f883a 	mov	r7,zero
    d158:	b5e6f03a 	xor	r19,r22,r23
    d15c:	3a4cb03a 	or	r6,r7,r9
    d160:	008003c4 	movi	r2,15
    d164:	9809883a 	mov	r4,r19
    d168:	90c7c83a 	sub	r3,r18,r3
    d16c:	9cc03fcc 	andi	r19,r19,255
    d170:	11809636 	bltu	r2,r6,d3cc <__divdf3+0x334>
    d174:	300c90ba 	slli	r6,r6,2
    d178:	00800074 	movhi	r2,1
    d17c:	10b46304 	addi	r2,r2,-11892
    d180:	308d883a 	add	r6,r6,r2
    d184:	30800017 	ldw	r2,0(r6)
    d188:	1000683a 	jmp	r2
    d18c:	0000d3cc 	andi	zero,zero,847
    d190:	0000d204 	movi	zero,840
    d194:	0000d3bc 	xorhi	zero,zero,846
    d198:	0000d1f8 	rdprs	zero,zero,839
    d19c:	0000d3bc 	xorhi	zero,zero,846
    d1a0:	0000d390 	cmplti	zero,zero,846
    d1a4:	0000d3bc 	xorhi	zero,zero,846
    d1a8:	0000d1f8 	rdprs	zero,zero,839
    d1ac:	0000d204 	movi	zero,840
    d1b0:	0000d204 	movi	zero,840
    d1b4:	0000d390 	cmplti	zero,zero,846
    d1b8:	0000d1f8 	rdprs	zero,zero,839
    d1bc:	0000d1e8 	cmpgeui	zero,zero,839
    d1c0:	0000d1e8 	cmpgeui	zero,zero,839
    d1c4:	0000d1e8 	cmpgeui	zero,zero,839
    d1c8:	0000d754 	movui	zero,861
    d1cc:	2404b03a 	or	r2,r4,r16
    d1d0:	10006c1e 	bne	r2,zero,d384 <__divdf3+0x2ec>
    d1d4:	02400204 	movi	r9,8
    d1d8:	0021883a 	mov	r16,zero
    d1dc:	002b883a 	mov	r21,zero
    d1e0:	01400084 	movi	r5,2
    d1e4:	003fca06 	br	d110 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b110>
    d1e8:	8023883a 	mov	r17,r16
    d1ec:	a829883a 	mov	r20,r21
    d1f0:	4039883a 	mov	fp,r8
    d1f4:	280f883a 	mov	r7,r5
    d1f8:	00800084 	movi	r2,2
    d1fc:	3881601e 	bne	r7,r2,d780 <__divdf3+0x6e8>
    d200:	e027883a 	mov	r19,fp
    d204:	9900004c 	andi	r4,r19,1
    d208:	0081ffc4 	movi	r2,2047
    d20c:	0021883a 	mov	r16,zero
    d210:	002b883a 	mov	r21,zero
    d214:	1004953a 	slli	r2,r2,20
    d218:	20c03fcc 	andi	r3,r4,255
    d21c:	01400434 	movhi	r5,16
    d220:	297fffc4 	addi	r5,r5,-1
    d224:	180697fa 	slli	r3,r3,31
    d228:	8160703a 	and	r16,r16,r5
    d22c:	80a0b03a 	or	r16,r16,r2
    d230:	80c6b03a 	or	r3,r16,r3
    d234:	a805883a 	mov	r2,r21
    d238:	dfc00f17 	ldw	ra,60(sp)
    d23c:	df000e17 	ldw	fp,56(sp)
    d240:	ddc00d17 	ldw	r23,52(sp)
    d244:	dd800c17 	ldw	r22,48(sp)
    d248:	dd400b17 	ldw	r21,44(sp)
    d24c:	dd000a17 	ldw	r20,40(sp)
    d250:	dcc00917 	ldw	r19,36(sp)
    d254:	dc800817 	ldw	r18,32(sp)
    d258:	dc400717 	ldw	r17,28(sp)
    d25c:	dc000617 	ldw	r16,24(sp)
    d260:	dec01004 	addi	sp,sp,64
    d264:	f800283a 	ret
    d268:	2404b03a 	or	r2,r4,r16
    d26c:	2023883a 	mov	r17,r4
    d270:	10003f26 	beq	r2,zero,d370 <__divdf3+0x2d8>
    d274:	80015e26 	beq	r16,zero,d7f0 <__divdf3+0x758>
    d278:	8009883a 	mov	r4,r16
    d27c:	d9800215 	stw	r6,8(sp)
    d280:	d9c00515 	stw	r7,20(sp)
    d284:	da000415 	stw	r8,16(sp)
    d288:	000285c0 	call	285c <__clzsi2>
    d28c:	d9800217 	ldw	r6,8(sp)
    d290:	d9c00517 	ldw	r7,20(sp)
    d294:	da000417 	ldw	r8,16(sp)
    d298:	113ffd44 	addi	r4,r2,-11
    d29c:	00c00704 	movi	r3,28
    d2a0:	19014f16 	blt	r3,r4,d7e0 <__divdf3+0x748>
    d2a4:	00c00744 	movi	r3,29
    d2a8:	157ffe04 	addi	r21,r2,-8
    d2ac:	1907c83a 	sub	r3,r3,r4
    d2b0:	8560983a 	sll	r16,r16,r21
    d2b4:	88c6d83a 	srl	r3,r17,r3
    d2b8:	8d6a983a 	sll	r21,r17,r21
    d2bc:	1c20b03a 	or	r16,r3,r16
    d2c0:	1080fcc4 	addi	r2,r2,1011
    d2c4:	00a5c83a 	sub	r18,zero,r2
    d2c8:	0013883a 	mov	r9,zero
    d2cc:	000b883a 	mov	r5,zero
    d2d0:	003f8f06 	br	d110 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b110>
    d2d4:	3444b03a 	or	r2,r6,r17
    d2d8:	1000231e 	bne	r2,zero,d368 <__divdf3+0x2d0>
    d2dc:	0023883a 	mov	r17,zero
    d2e0:	0029883a 	mov	r20,zero
    d2e4:	01c00084 	movi	r7,2
    d2e8:	003f9b06 	br	d158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b158>
    d2ec:	3444b03a 	or	r2,r6,r17
    d2f0:	10001926 	beq	r2,zero,d358 <__divdf3+0x2c0>
    d2f4:	88014b26 	beq	r17,zero,d824 <__divdf3+0x78c>
    d2f8:	8809883a 	mov	r4,r17
    d2fc:	d9400115 	stw	r5,4(sp)
    d300:	d9800215 	stw	r6,8(sp)
    d304:	da000415 	stw	r8,16(sp)
    d308:	da400315 	stw	r9,12(sp)
    d30c:	000285c0 	call	285c <__clzsi2>
    d310:	d9400117 	ldw	r5,4(sp)
    d314:	d9800217 	ldw	r6,8(sp)
    d318:	da000417 	ldw	r8,16(sp)
    d31c:	da400317 	ldw	r9,12(sp)
    d320:	113ffd44 	addi	r4,r2,-11
    d324:	00c00704 	movi	r3,28
    d328:	19013a16 	blt	r3,r4,d814 <__divdf3+0x77c>
    d32c:	00c00744 	movi	r3,29
    d330:	153ffe04 	addi	r20,r2,-8
    d334:	1907c83a 	sub	r3,r3,r4
    d338:	8d22983a 	sll	r17,r17,r20
    d33c:	30c6d83a 	srl	r3,r6,r3
    d340:	3528983a 	sll	r20,r6,r20
    d344:	1c62b03a 	or	r17,r3,r17
    d348:	1080fcc4 	addi	r2,r2,1011
    d34c:	0087c83a 	sub	r3,zero,r2
    d350:	000f883a 	mov	r7,zero
    d354:	003f8006 	br	d158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b158>
    d358:	0023883a 	mov	r17,zero
    d35c:	0029883a 	mov	r20,zero
    d360:	01c00044 	movi	r7,1
    d364:	003f7c06 	br	d158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b158>
    d368:	01c000c4 	movi	r7,3
    d36c:	003f7a06 	br	d158 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b158>
    d370:	02400104 	movi	r9,4
    d374:	0021883a 	mov	r16,zero
    d378:	002b883a 	mov	r21,zero
    d37c:	01400044 	movi	r5,1
    d380:	003f6306 	br	d110 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b110>
    d384:	02400304 	movi	r9,12
    d388:	014000c4 	movi	r5,3
    d38c:	003f6006 	br	d110 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b110>
    d390:	04000434 	movhi	r16,16
    d394:	0009883a 	mov	r4,zero
    d398:	843fffc4 	addi	r16,r16,-1
    d39c:	057fffc4 	movi	r21,-1
    d3a0:	0081ffc4 	movi	r2,2047
    d3a4:	003f9b06 	br	d214 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b214>
    d3a8:	00c00044 	movi	r3,1
    d3ac:	1887c83a 	sub	r3,r3,r2
    d3b0:	01000e04 	movi	r4,56
    d3b4:	20c1530e 	bge	r4,r3,d904 <__divdf3+0x86c>
    d3b8:	9900004c 	andi	r4,r19,1
    d3bc:	0005883a 	mov	r2,zero
    d3c0:	0021883a 	mov	r16,zero
    d3c4:	002b883a 	mov	r21,zero
    d3c8:	003f9206 	br	d214 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b214>
    d3cc:	8c012e36 	bltu	r17,r16,d888 <__divdf3+0x7f0>
    d3d0:	84412c26 	beq	r16,r17,d884 <__divdf3+0x7ec>
    d3d4:	a82f883a 	mov	r23,r21
    d3d8:	18ffffc4 	addi	r3,r3,-1
    d3dc:	002b883a 	mov	r21,zero
    d3e0:	a004d63a 	srli	r2,r20,24
    d3e4:	8822923a 	slli	r17,r17,8
    d3e8:	a028923a 	slli	r20,r20,8
    d3ec:	8009883a 	mov	r4,r16
    d3f0:	88acb03a 	or	r22,r17,r2
    d3f4:	dd000015 	stw	r20,0(sp)
    d3f8:	b028d43a 	srli	r20,r22,16
    d3fc:	d8c00215 	stw	r3,8(sp)
    d400:	b4bfffcc 	andi	r18,r22,65535
    d404:	a00b883a 	mov	r5,r20
    d408:	000c7300 	call	c730 <__udivsi3>
    d40c:	100b883a 	mov	r5,r2
    d410:	9009883a 	mov	r4,r18
    d414:	1023883a 	mov	r17,r2
    d418:	00020100 	call	2010 <__mulsi3>
    d41c:	8009883a 	mov	r4,r16
    d420:	a00b883a 	mov	r5,r20
    d424:	1039883a 	mov	fp,r2
    d428:	000c7940 	call	c794 <__umodsi3>
    d42c:	1004943a 	slli	r2,r2,16
    d430:	b808d43a 	srli	r4,r23,16
    d434:	d8c00217 	ldw	r3,8(sp)
    d438:	2084b03a 	or	r2,r4,r2
    d43c:	1700062e 	bgeu	r2,fp,d458 <__divdf3+0x3c0>
    d440:	1585883a 	add	r2,r2,r22
    d444:	893fffc4 	addi	r4,r17,-1
    d448:	15811d36 	bltu	r2,r22,d8c0 <__divdf3+0x828>
    d44c:	17011c2e 	bgeu	r2,fp,d8c0 <__divdf3+0x828>
    d450:	8c7fff84 	addi	r17,r17,-2
    d454:	1585883a 	add	r2,r2,r22
    d458:	1739c83a 	sub	fp,r2,fp
    d45c:	a00b883a 	mov	r5,r20
    d460:	e009883a 	mov	r4,fp
    d464:	d8c00215 	stw	r3,8(sp)
    d468:	000c7300 	call	c730 <__udivsi3>
    d46c:	100b883a 	mov	r5,r2
    d470:	9009883a 	mov	r4,r18
    d474:	1021883a 	mov	r16,r2
    d478:	00020100 	call	2010 <__mulsi3>
    d47c:	a00b883a 	mov	r5,r20
    d480:	e009883a 	mov	r4,fp
    d484:	d8800415 	stw	r2,16(sp)
    d488:	000c7940 	call	c794 <__umodsi3>
    d48c:	1004943a 	slli	r2,r2,16
    d490:	da000417 	ldw	r8,16(sp)
    d494:	bdffffcc 	andi	r23,r23,65535
    d498:	b884b03a 	or	r2,r23,r2
    d49c:	d8c00217 	ldw	r3,8(sp)
    d4a0:	1200062e 	bgeu	r2,r8,d4bc <__divdf3+0x424>
    d4a4:	1585883a 	add	r2,r2,r22
    d4a8:	813fffc4 	addi	r4,r16,-1
    d4ac:	15810236 	bltu	r2,r22,d8b8 <__divdf3+0x820>
    d4b0:	1201012e 	bgeu	r2,r8,d8b8 <__divdf3+0x820>
    d4b4:	843fff84 	addi	r16,r16,-2
    d4b8:	1585883a 	add	r2,r2,r22
    d4bc:	8822943a 	slli	r17,r17,16
    d4c0:	d9800017 	ldw	r6,0(sp)
    d4c4:	1211c83a 	sub	r8,r2,r8
    d4c8:	8c22b03a 	or	r17,r17,r16
    d4cc:	373fffcc 	andi	fp,r6,65535
    d4d0:	8abfffcc 	andi	r10,r17,65535
    d4d4:	8820d43a 	srli	r16,r17,16
    d4d8:	5009883a 	mov	r4,r10
    d4dc:	e00b883a 	mov	r5,fp
    d4e0:	302ed43a 	srli	r23,r6,16
    d4e4:	d8c00215 	stw	r3,8(sp)
    d4e8:	da000415 	stw	r8,16(sp)
    d4ec:	da800115 	stw	r10,4(sp)
    d4f0:	00020100 	call	2010 <__mulsi3>
    d4f4:	800b883a 	mov	r5,r16
    d4f8:	e009883a 	mov	r4,fp
    d4fc:	d8800515 	stw	r2,20(sp)
    d500:	00020100 	call	2010 <__mulsi3>
    d504:	8009883a 	mov	r4,r16
    d508:	b80b883a 	mov	r5,r23
    d50c:	d8800315 	stw	r2,12(sp)
    d510:	00020100 	call	2010 <__mulsi3>
    d514:	da800117 	ldw	r10,4(sp)
    d518:	b80b883a 	mov	r5,r23
    d51c:	1021883a 	mov	r16,r2
    d520:	5009883a 	mov	r4,r10
    d524:	00020100 	call	2010 <__mulsi3>
    d528:	d9c00517 	ldw	r7,20(sp)
    d52c:	da400317 	ldw	r9,12(sp)
    d530:	d8c00217 	ldw	r3,8(sp)
    d534:	3808d43a 	srli	r4,r7,16
    d538:	1245883a 	add	r2,r2,r9
    d53c:	da000417 	ldw	r8,16(sp)
    d540:	2085883a 	add	r2,r4,r2
    d544:	1240022e 	bgeu	r2,r9,d550 <__divdf3+0x4b8>
    d548:	01000074 	movhi	r4,1
    d54c:	8121883a 	add	r16,r16,r4
    d550:	1008d43a 	srli	r4,r2,16
    d554:	1004943a 	slli	r2,r2,16
    d558:	39ffffcc 	andi	r7,r7,65535
    d55c:	2409883a 	add	r4,r4,r16
    d560:	11c5883a 	add	r2,r2,r7
    d564:	4100bb36 	bltu	r8,r4,d854 <__divdf3+0x7bc>
    d568:	4100d726 	beq	r8,r4,d8c8 <__divdf3+0x830>
    d56c:	4109c83a 	sub	r4,r8,r4
    d570:	a8a1c83a 	sub	r16,r21,r2
    d574:	ac2b803a 	cmpltu	r21,r21,r16
    d578:	256bc83a 	sub	r21,r4,r21
    d57c:	b540d926 	beq	r22,r21,d8e4 <__divdf3+0x84c>
    d580:	a00b883a 	mov	r5,r20
    d584:	a809883a 	mov	r4,r21
    d588:	d8c00215 	stw	r3,8(sp)
    d58c:	000c7300 	call	c730 <__udivsi3>
    d590:	100b883a 	mov	r5,r2
    d594:	9009883a 	mov	r4,r18
    d598:	d8800515 	stw	r2,20(sp)
    d59c:	00020100 	call	2010 <__mulsi3>
    d5a0:	a809883a 	mov	r4,r21
    d5a4:	a00b883a 	mov	r5,r20
    d5a8:	d8800415 	stw	r2,16(sp)
    d5ac:	000c7940 	call	c794 <__umodsi3>
    d5b0:	1004943a 	slli	r2,r2,16
    d5b4:	8008d43a 	srli	r4,r16,16
    d5b8:	da000417 	ldw	r8,16(sp)
    d5bc:	d8c00217 	ldw	r3,8(sp)
    d5c0:	2084b03a 	or	r2,r4,r2
    d5c4:	d9c00517 	ldw	r7,20(sp)
    d5c8:	1200062e 	bgeu	r2,r8,d5e4 <__divdf3+0x54c>
    d5cc:	1585883a 	add	r2,r2,r22
    d5d0:	393fffc4 	addi	r4,r7,-1
    d5d4:	1580c536 	bltu	r2,r22,d8ec <__divdf3+0x854>
    d5d8:	1200c42e 	bgeu	r2,r8,d8ec <__divdf3+0x854>
    d5dc:	39ffff84 	addi	r7,r7,-2
    d5e0:	1585883a 	add	r2,r2,r22
    d5e4:	122bc83a 	sub	r21,r2,r8
    d5e8:	a00b883a 	mov	r5,r20
    d5ec:	a809883a 	mov	r4,r21
    d5f0:	d8c00215 	stw	r3,8(sp)
    d5f4:	d9c00515 	stw	r7,20(sp)
    d5f8:	000c7300 	call	c730 <__udivsi3>
    d5fc:	9009883a 	mov	r4,r18
    d600:	100b883a 	mov	r5,r2
    d604:	d8800415 	stw	r2,16(sp)
    d608:	00020100 	call	2010 <__mulsi3>
    d60c:	a809883a 	mov	r4,r21
    d610:	a00b883a 	mov	r5,r20
    d614:	1025883a 	mov	r18,r2
    d618:	000c7940 	call	c794 <__umodsi3>
    d61c:	1004943a 	slli	r2,r2,16
    d620:	813fffcc 	andi	r4,r16,65535
    d624:	d8c00217 	ldw	r3,8(sp)
    d628:	20a0b03a 	or	r16,r4,r2
    d62c:	d9c00517 	ldw	r7,20(sp)
    d630:	da000417 	ldw	r8,16(sp)
    d634:	8480062e 	bgeu	r16,r18,d650 <__divdf3+0x5b8>
    d638:	85a1883a 	add	r16,r16,r22
    d63c:	40bfffc4 	addi	r2,r8,-1
    d640:	8580ac36 	bltu	r16,r22,d8f4 <__divdf3+0x85c>
    d644:	8480ab2e 	bgeu	r16,r18,d8f4 <__divdf3+0x85c>
    d648:	423fff84 	addi	r8,r8,-2
    d64c:	85a1883a 	add	r16,r16,r22
    d650:	3804943a 	slli	r2,r7,16
    d654:	84a1c83a 	sub	r16,r16,r18
    d658:	e009883a 	mov	r4,fp
    d65c:	1228b03a 	or	r20,r2,r8
    d660:	a1ffffcc 	andi	r7,r20,65535
    d664:	a024d43a 	srli	r18,r20,16
    d668:	380b883a 	mov	r5,r7
    d66c:	d8c00215 	stw	r3,8(sp)
    d670:	d9c00515 	stw	r7,20(sp)
    d674:	00020100 	call	2010 <__mulsi3>
    d678:	900b883a 	mov	r5,r18
    d67c:	e009883a 	mov	r4,fp
    d680:	102b883a 	mov	r21,r2
    d684:	00020100 	call	2010 <__mulsi3>
    d688:	900b883a 	mov	r5,r18
    d68c:	b809883a 	mov	r4,r23
    d690:	1039883a 	mov	fp,r2
    d694:	00020100 	call	2010 <__mulsi3>
    d698:	d9c00517 	ldw	r7,20(sp)
    d69c:	b80b883a 	mov	r5,r23
    d6a0:	1025883a 	mov	r18,r2
    d6a4:	3809883a 	mov	r4,r7
    d6a8:	00020100 	call	2010 <__mulsi3>
    d6ac:	a808d43a 	srli	r4,r21,16
    d6b0:	1705883a 	add	r2,r2,fp
    d6b4:	d8c00217 	ldw	r3,8(sp)
    d6b8:	2085883a 	add	r2,r4,r2
    d6bc:	1700022e 	bgeu	r2,fp,d6c8 <__divdf3+0x630>
    d6c0:	01000074 	movhi	r4,1
    d6c4:	9125883a 	add	r18,r18,r4
    d6c8:	1008d43a 	srli	r4,r2,16
    d6cc:	1004943a 	slli	r2,r2,16
    d6d0:	ad7fffcc 	andi	r21,r21,65535
    d6d4:	2489883a 	add	r4,r4,r18
    d6d8:	1545883a 	add	r2,r2,r21
    d6dc:	81003836 	bltu	r16,r4,d7c0 <__divdf3+0x728>
    d6e0:	81003626 	beq	r16,r4,d7bc <__divdf3+0x724>
    d6e4:	a5000054 	ori	r20,r20,1
    d6e8:	1880ffc4 	addi	r2,r3,1023
    d6ec:	00bf2e0e 	bge	zero,r2,d3a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b3a8>
    d6f0:	a10001cc 	andi	r4,r20,7
    d6f4:	20000726 	beq	r4,zero,d714 <__divdf3+0x67c>
    d6f8:	a10003cc 	andi	r4,r20,15
    d6fc:	01400104 	movi	r5,4
    d700:	21400426 	beq	r4,r5,d714 <__divdf3+0x67c>
    d704:	a149883a 	add	r4,r20,r5
    d708:	2529803a 	cmpltu	r20,r4,r20
    d70c:	8d23883a 	add	r17,r17,r20
    d710:	2029883a 	mov	r20,r4
    d714:	8900402c 	andhi	r4,r17,256
    d718:	20000426 	beq	r4,zero,d72c <__divdf3+0x694>
    d71c:	18810004 	addi	r2,r3,1024
    d720:	00ffc034 	movhi	r3,65280
    d724:	18ffffc4 	addi	r3,r3,-1
    d728:	88e2703a 	and	r17,r17,r3
    d72c:	00c1ff84 	movi	r3,2046
    d730:	18beb416 	blt	r3,r2,d204 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b204>
    d734:	a028d0fa 	srli	r20,r20,3
    d738:	882a977a 	slli	r21,r17,29
    d73c:	8820927a 	slli	r16,r17,9
    d740:	1081ffcc 	andi	r2,r2,2047
    d744:	ad2ab03a 	or	r21,r21,r20
    d748:	8020d33a 	srli	r16,r16,12
    d74c:	9900004c 	andi	r4,r19,1
    d750:	003eb006 	br	d214 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b214>
    d754:	8080022c 	andhi	r2,r16,8
    d758:	10001226 	beq	r2,zero,d7a4 <__divdf3+0x70c>
    d75c:	8880022c 	andhi	r2,r17,8
    d760:	1000101e 	bne	r2,zero,d7a4 <__divdf3+0x70c>
    d764:	00800434 	movhi	r2,16
    d768:	8c000234 	orhi	r16,r17,8
    d76c:	10bfffc4 	addi	r2,r2,-1
    d770:	b809883a 	mov	r4,r23
    d774:	80a0703a 	and	r16,r16,r2
    d778:	a02b883a 	mov	r21,r20
    d77c:	003f0806 	br	d3a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b3a0>
    d780:	008000c4 	movi	r2,3
    d784:	3880b126 	beq	r7,r2,da4c <__divdf3+0x9b4>
    d788:	00800044 	movi	r2,1
    d78c:	38805b1e 	bne	r7,r2,d8fc <__divdf3+0x864>
    d790:	e009883a 	mov	r4,fp
    d794:	0005883a 	mov	r2,zero
    d798:	0021883a 	mov	r16,zero
    d79c:	002b883a 	mov	r21,zero
    d7a0:	003e9c06 	br	d214 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b214>
    d7a4:	00800434 	movhi	r2,16
    d7a8:	84000234 	orhi	r16,r16,8
    d7ac:	10bfffc4 	addi	r2,r2,-1
    d7b0:	b009883a 	mov	r4,r22
    d7b4:	80a0703a 	and	r16,r16,r2
    d7b8:	003ef906 	br	d3a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b3a0>
    d7bc:	103fca26 	beq	r2,zero,d6e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b6e8>
    d7c0:	b421883a 	add	r16,r22,r16
    d7c4:	a17fffc4 	addi	r5,r20,-1
    d7c8:	8580422e 	bgeu	r16,r22,d8d4 <__divdf3+0x83c>
    d7cc:	2829883a 	mov	r20,r5
    d7d0:	813fc41e 	bne	r16,r4,d6e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b6e4>
    d7d4:	d9800017 	ldw	r6,0(sp)
    d7d8:	30bfc21e 	bne	r6,r2,d6e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b6e4>
    d7dc:	003fc206 	br	d6e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b6e8>
    d7e0:	143ff604 	addi	r16,r2,-40
    d7e4:	8c20983a 	sll	r16,r17,r16
    d7e8:	002b883a 	mov	r21,zero
    d7ec:	003eb406 	br	d2c0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b2c0>
    d7f0:	d9800215 	stw	r6,8(sp)
    d7f4:	d9c00515 	stw	r7,20(sp)
    d7f8:	da000415 	stw	r8,16(sp)
    d7fc:	000285c0 	call	285c <__clzsi2>
    d800:	10800804 	addi	r2,r2,32
    d804:	da000417 	ldw	r8,16(sp)
    d808:	d9c00517 	ldw	r7,20(sp)
    d80c:	d9800217 	ldw	r6,8(sp)
    d810:	003ea106 	br	d298 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b298>
    d814:	147ff604 	addi	r17,r2,-40
    d818:	3462983a 	sll	r17,r6,r17
    d81c:	0029883a 	mov	r20,zero
    d820:	003ec906 	br	d348 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b348>
    d824:	3009883a 	mov	r4,r6
    d828:	d9400115 	stw	r5,4(sp)
    d82c:	d9800215 	stw	r6,8(sp)
    d830:	da000415 	stw	r8,16(sp)
    d834:	da400315 	stw	r9,12(sp)
    d838:	000285c0 	call	285c <__clzsi2>
    d83c:	10800804 	addi	r2,r2,32
    d840:	da400317 	ldw	r9,12(sp)
    d844:	da000417 	ldw	r8,16(sp)
    d848:	d9800217 	ldw	r6,8(sp)
    d84c:	d9400117 	ldw	r5,4(sp)
    d850:	003eb306 	br	d320 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b320>
    d854:	d9800017 	ldw	r6,0(sp)
    d858:	a9ab883a 	add	r21,r21,r6
    d85c:	a98b803a 	cmpltu	r5,r21,r6
    d860:	2d8b883a 	add	r5,r5,r22
    d864:	2a11883a 	add	r8,r5,r8
    d868:	897fffc4 	addi	r5,r17,-1
    d86c:	b2000c2e 	bgeu	r22,r8,d8a0 <__divdf3+0x808>
    d870:	41003f36 	bltu	r8,r4,d970 <__divdf3+0x8d8>
    d874:	22006c26 	beq	r4,r8,da28 <__divdf3+0x990>
    d878:	4109c83a 	sub	r4,r8,r4
    d87c:	2823883a 	mov	r17,r5
    d880:	003f3b06 	br	d570 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b570>
    d884:	ad3ed336 	bltu	r21,r20,d3d4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b3d4>
    d888:	a804d07a 	srli	r2,r21,1
    d88c:	802e97fa 	slli	r23,r16,31
    d890:	a82a97fa 	slli	r21,r21,31
    d894:	8020d07a 	srli	r16,r16,1
    d898:	b8aeb03a 	or	r23,r23,r2
    d89c:	003ed006 	br	d3e0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b3e0>
    d8a0:	b23ff51e 	bne	r22,r8,d878 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b878>
    d8a4:	d9800017 	ldw	r6,0(sp)
    d8a8:	a9bff12e 	bgeu	r21,r6,d870 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b870>
    d8ac:	b109c83a 	sub	r4,r22,r4
    d8b0:	2823883a 	mov	r17,r5
    d8b4:	003f2e06 	br	d570 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b570>
    d8b8:	2021883a 	mov	r16,r4
    d8bc:	003eff06 	br	d4bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b4bc>
    d8c0:	2023883a 	mov	r17,r4
    d8c4:	003ee406 	br	d458 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b458>
    d8c8:	a8bfe236 	bltu	r21,r2,d854 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b854>
    d8cc:	0009883a 	mov	r4,zero
    d8d0:	003f2706 	br	d570 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b570>
    d8d4:	81002d36 	bltu	r16,r4,d98c <__divdf3+0x8f4>
    d8d8:	24005626 	beq	r4,r16,da34 <__divdf3+0x99c>
    d8dc:	2829883a 	mov	r20,r5
    d8e0:	003f8006 	br	d6e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b6e4>
    d8e4:	053fffc4 	movi	r20,-1
    d8e8:	003f7f06 	br	d6e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b6e8>
    d8ec:	200f883a 	mov	r7,r4
    d8f0:	003f3c06 	br	d5e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b5e4>
    d8f4:	1011883a 	mov	r8,r2
    d8f8:	003f5506 	br	d650 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b650>
    d8fc:	e027883a 	mov	r19,fp
    d900:	003f7906 	br	d6e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b6e8>
    d904:	010007c4 	movi	r4,31
    d908:	20c02816 	blt	r4,r3,d9ac <__divdf3+0x914>
    d90c:	00800804 	movi	r2,32
    d910:	10c5c83a 	sub	r2,r2,r3
    d914:	888a983a 	sll	r5,r17,r2
    d918:	a0c8d83a 	srl	r4,r20,r3
    d91c:	a084983a 	sll	r2,r20,r2
    d920:	88e2d83a 	srl	r17,r17,r3
    d924:	2906b03a 	or	r3,r5,r4
    d928:	1004c03a 	cmpne	r2,r2,zero
    d92c:	1886b03a 	or	r3,r3,r2
    d930:	188001cc 	andi	r2,r3,7
    d934:	10000726 	beq	r2,zero,d954 <__divdf3+0x8bc>
    d938:	188003cc 	andi	r2,r3,15
    d93c:	01000104 	movi	r4,4
    d940:	11000426 	beq	r2,r4,d954 <__divdf3+0x8bc>
    d944:	1805883a 	mov	r2,r3
    d948:	10c00104 	addi	r3,r2,4
    d94c:	1885803a 	cmpltu	r2,r3,r2
    d950:	88a3883a 	add	r17,r17,r2
    d954:	8880202c 	andhi	r2,r17,128
    d958:	10002926 	beq	r2,zero,da00 <__divdf3+0x968>
    d95c:	9900004c 	andi	r4,r19,1
    d960:	00800044 	movi	r2,1
    d964:	0021883a 	mov	r16,zero
    d968:	002b883a 	mov	r21,zero
    d96c:	003e2906 	br	d214 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b214>
    d970:	d9800017 	ldw	r6,0(sp)
    d974:	8c7fff84 	addi	r17,r17,-2
    d978:	a9ab883a 	add	r21,r21,r6
    d97c:	a98b803a 	cmpltu	r5,r21,r6
    d980:	2d8b883a 	add	r5,r5,r22
    d984:	2a11883a 	add	r8,r5,r8
    d988:	003ef806 	br	d56c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b56c>
    d98c:	d9800017 	ldw	r6,0(sp)
    d990:	318f883a 	add	r7,r6,r6
    d994:	398b803a 	cmpltu	r5,r7,r6
    d998:	2d8d883a 	add	r6,r5,r22
    d99c:	81a1883a 	add	r16,r16,r6
    d9a0:	a17fff84 	addi	r5,r20,-2
    d9a4:	d9c00015 	stw	r7,0(sp)
    d9a8:	003f8806 	br	d7cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b7cc>
    d9ac:	013ff844 	movi	r4,-31
    d9b0:	2085c83a 	sub	r2,r4,r2
    d9b4:	8888d83a 	srl	r4,r17,r2
    d9b8:	00800804 	movi	r2,32
    d9bc:	18802126 	beq	r3,r2,da44 <__divdf3+0x9ac>
    d9c0:	04001004 	movi	r16,64
    d9c4:	80c7c83a 	sub	r3,r16,r3
    d9c8:	88e0983a 	sll	r16,r17,r3
    d9cc:	8504b03a 	or	r2,r16,r20
    d9d0:	1004c03a 	cmpne	r2,r2,zero
    d9d4:	2084b03a 	or	r2,r4,r2
    d9d8:	144001cc 	andi	r17,r2,7
    d9dc:	88000d1e 	bne	r17,zero,da14 <__divdf3+0x97c>
    d9e0:	0021883a 	mov	r16,zero
    d9e4:	102ad0fa 	srli	r21,r2,3
    d9e8:	9900004c 	andi	r4,r19,1
    d9ec:	0005883a 	mov	r2,zero
    d9f0:	ac6ab03a 	or	r21,r21,r17
    d9f4:	003e0706 	br	d214 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b214>
    d9f8:	1007883a 	mov	r3,r2
    d9fc:	0023883a 	mov	r17,zero
    da00:	8820927a 	slli	r16,r17,9
    da04:	1805883a 	mov	r2,r3
    da08:	8822977a 	slli	r17,r17,29
    da0c:	8020d33a 	srli	r16,r16,12
    da10:	003ff406 	br	d9e4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b9e4>
    da14:	10c003cc 	andi	r3,r2,15
    da18:	01000104 	movi	r4,4
    da1c:	193ff626 	beq	r3,r4,d9f8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b9f8>
    da20:	0023883a 	mov	r17,zero
    da24:	003fc806 	br	d948 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b948>
    da28:	a8bfd136 	bltu	r21,r2,d970 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b970>
    da2c:	2823883a 	mov	r17,r5
    da30:	003fa606 	br	d8cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b8cc>
    da34:	d9800017 	ldw	r6,0(sp)
    da38:	30bfd436 	bltu	r6,r2,d98c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b98c>
    da3c:	2829883a 	mov	r20,r5
    da40:	003f6406 	br	d7d4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b7d4>
    da44:	0021883a 	mov	r16,zero
    da48:	003fe006 	br	d9cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b9cc>
    da4c:	00800434 	movhi	r2,16
    da50:	8c000234 	orhi	r16,r17,8
    da54:	10bfffc4 	addi	r2,r2,-1
    da58:	e009883a 	mov	r4,fp
    da5c:	80a0703a 	and	r16,r16,r2
    da60:	a02b883a 	mov	r21,r20
    da64:	003e4e06 	br	d3a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153b3a0>

0000da68 <__eqdf2>:
    da68:	2804d53a 	srli	r2,r5,20
    da6c:	3806d53a 	srli	r3,r7,20
    da70:	02000434 	movhi	r8,16
    da74:	423fffc4 	addi	r8,r8,-1
    da78:	1081ffcc 	andi	r2,r2,2047
    da7c:	0281ffc4 	movi	r10,2047
    da80:	2a12703a 	and	r9,r5,r8
    da84:	18c1ffcc 	andi	r3,r3,2047
    da88:	3a10703a 	and	r8,r7,r8
    da8c:	280ad7fa 	srli	r5,r5,31
    da90:	380ed7fa 	srli	r7,r7,31
    da94:	12801026 	beq	r2,r10,dad8 <__eqdf2+0x70>
    da98:	0281ffc4 	movi	r10,2047
    da9c:	1a800a26 	beq	r3,r10,dac8 <__eqdf2+0x60>
    daa0:	10c00226 	beq	r2,r3,daac <__eqdf2+0x44>
    daa4:	00800044 	movi	r2,1
    daa8:	f800283a 	ret
    daac:	4a3ffd1e 	bne	r9,r8,daa4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153baa4>
    dab0:	21bffc1e 	bne	r4,r6,daa4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153baa4>
    dab4:	29c00c26 	beq	r5,r7,dae8 <__eqdf2+0x80>
    dab8:	103ffa1e 	bne	r2,zero,daa4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153baa4>
    dabc:	2244b03a 	or	r2,r4,r9
    dac0:	1004c03a 	cmpne	r2,r2,zero
    dac4:	f800283a 	ret
    dac8:	3214b03a 	or	r10,r6,r8
    dacc:	503ff426 	beq	r10,zero,daa0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153baa0>
    dad0:	00800044 	movi	r2,1
    dad4:	f800283a 	ret
    dad8:	2254b03a 	or	r10,r4,r9
    dadc:	503fee26 	beq	r10,zero,da98 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153ba98>
    dae0:	00800044 	movi	r2,1
    dae4:	f800283a 	ret
    dae8:	0005883a 	mov	r2,zero
    daec:	f800283a 	ret

0000daf0 <__gedf2>:
    daf0:	2804d53a 	srli	r2,r5,20
    daf4:	3806d53a 	srli	r3,r7,20
    daf8:	02000434 	movhi	r8,16
    dafc:	423fffc4 	addi	r8,r8,-1
    db00:	1081ffcc 	andi	r2,r2,2047
    db04:	0241ffc4 	movi	r9,2047
    db08:	2a14703a 	and	r10,r5,r8
    db0c:	18c1ffcc 	andi	r3,r3,2047
    db10:	3a10703a 	and	r8,r7,r8
    db14:	280ad7fa 	srli	r5,r5,31
    db18:	380ed7fa 	srli	r7,r7,31
    db1c:	12401d26 	beq	r2,r9,db94 <__gedf2+0xa4>
    db20:	0241ffc4 	movi	r9,2047
    db24:	1a401226 	beq	r3,r9,db70 <__gedf2+0x80>
    db28:	1000081e 	bne	r2,zero,db4c <__gedf2+0x5c>
    db2c:	2296b03a 	or	r11,r4,r10
    db30:	5813003a 	cmpeq	r9,r11,zero
    db34:	1800091e 	bne	r3,zero,db5c <__gedf2+0x6c>
    db38:	3218b03a 	or	r12,r6,r8
    db3c:	6000071e 	bne	r12,zero,db5c <__gedf2+0x6c>
    db40:	0005883a 	mov	r2,zero
    db44:	5800101e 	bne	r11,zero,db88 <__gedf2+0x98>
    db48:	f800283a 	ret
    db4c:	18000c1e 	bne	r3,zero,db80 <__gedf2+0x90>
    db50:	3212b03a 	or	r9,r6,r8
    db54:	48000c26 	beq	r9,zero,db88 <__gedf2+0x98>
    db58:	0013883a 	mov	r9,zero
    db5c:	39c03fcc 	andi	r7,r7,255
    db60:	48000826 	beq	r9,zero,db84 <__gedf2+0x94>
    db64:	38000926 	beq	r7,zero,db8c <__gedf2+0x9c>
    db68:	00800044 	movi	r2,1
    db6c:	f800283a 	ret
    db70:	3212b03a 	or	r9,r6,r8
    db74:	483fec26 	beq	r9,zero,db28 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bb28>
    db78:	00bfff84 	movi	r2,-2
    db7c:	f800283a 	ret
    db80:	39c03fcc 	andi	r7,r7,255
    db84:	29c00626 	beq	r5,r7,dba0 <__gedf2+0xb0>
    db88:	283ff726 	beq	r5,zero,db68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bb68>
    db8c:	00bfffc4 	movi	r2,-1
    db90:	f800283a 	ret
    db94:	2292b03a 	or	r9,r4,r10
    db98:	483fe126 	beq	r9,zero,db20 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bb20>
    db9c:	003ff606 	br	db78 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bb78>
    dba0:	18bff916 	blt	r3,r2,db88 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bb88>
    dba4:	10c00316 	blt	r2,r3,dbb4 <__gedf2+0xc4>
    dba8:	42bff736 	bltu	r8,r10,db88 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bb88>
    dbac:	52000326 	beq	r10,r8,dbbc <__gedf2+0xcc>
    dbb0:	5200042e 	bgeu	r10,r8,dbc4 <__gedf2+0xd4>
    dbb4:	283fec1e 	bne	r5,zero,db68 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bb68>
    dbb8:	003ff406 	br	db8c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bb8c>
    dbbc:	313ff236 	bltu	r6,r4,db88 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bb88>
    dbc0:	21bffc36 	bltu	r4,r6,dbb4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bbb4>
    dbc4:	0005883a 	mov	r2,zero
    dbc8:	f800283a 	ret

0000dbcc <__ledf2>:
    dbcc:	2804d53a 	srli	r2,r5,20
    dbd0:	3810d53a 	srli	r8,r7,20
    dbd4:	00c00434 	movhi	r3,16
    dbd8:	18ffffc4 	addi	r3,r3,-1
    dbdc:	1081ffcc 	andi	r2,r2,2047
    dbe0:	0241ffc4 	movi	r9,2047
    dbe4:	28d4703a 	and	r10,r5,r3
    dbe8:	4201ffcc 	andi	r8,r8,2047
    dbec:	38c6703a 	and	r3,r7,r3
    dbf0:	280ad7fa 	srli	r5,r5,31
    dbf4:	380ed7fa 	srli	r7,r7,31
    dbf8:	12401f26 	beq	r2,r9,dc78 <__ledf2+0xac>
    dbfc:	0241ffc4 	movi	r9,2047
    dc00:	42401426 	beq	r8,r9,dc54 <__ledf2+0x88>
    dc04:	1000091e 	bne	r2,zero,dc2c <__ledf2+0x60>
    dc08:	2296b03a 	or	r11,r4,r10
    dc0c:	5813003a 	cmpeq	r9,r11,zero
    dc10:	29403fcc 	andi	r5,r5,255
    dc14:	40000a1e 	bne	r8,zero,dc40 <__ledf2+0x74>
    dc18:	30d8b03a 	or	r12,r6,r3
    dc1c:	6000081e 	bne	r12,zero,dc40 <__ledf2+0x74>
    dc20:	0005883a 	mov	r2,zero
    dc24:	5800111e 	bne	r11,zero,dc6c <__ledf2+0xa0>
    dc28:	f800283a 	ret
    dc2c:	29403fcc 	andi	r5,r5,255
    dc30:	40000c1e 	bne	r8,zero,dc64 <__ledf2+0x98>
    dc34:	30d2b03a 	or	r9,r6,r3
    dc38:	48000c26 	beq	r9,zero,dc6c <__ledf2+0xa0>
    dc3c:	0013883a 	mov	r9,zero
    dc40:	39c03fcc 	andi	r7,r7,255
    dc44:	48000826 	beq	r9,zero,dc68 <__ledf2+0x9c>
    dc48:	38001126 	beq	r7,zero,dc90 <__ledf2+0xc4>
    dc4c:	00800044 	movi	r2,1
    dc50:	f800283a 	ret
    dc54:	30d2b03a 	or	r9,r6,r3
    dc58:	483fea26 	beq	r9,zero,dc04 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bc04>
    dc5c:	00800084 	movi	r2,2
    dc60:	f800283a 	ret
    dc64:	39c03fcc 	andi	r7,r7,255
    dc68:	39400726 	beq	r7,r5,dc88 <__ledf2+0xbc>
    dc6c:	2800081e 	bne	r5,zero,dc90 <__ledf2+0xc4>
    dc70:	00800044 	movi	r2,1
    dc74:	f800283a 	ret
    dc78:	2292b03a 	or	r9,r4,r10
    dc7c:	483fdf26 	beq	r9,zero,dbfc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bbfc>
    dc80:	00800084 	movi	r2,2
    dc84:	f800283a 	ret
    dc88:	4080030e 	bge	r8,r2,dc98 <__ledf2+0xcc>
    dc8c:	383fef26 	beq	r7,zero,dc4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bc4c>
    dc90:	00bfffc4 	movi	r2,-1
    dc94:	f800283a 	ret
    dc98:	123feb16 	blt	r2,r8,dc48 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bc48>
    dc9c:	1abff336 	bltu	r3,r10,dc6c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bc6c>
    dca0:	50c00326 	beq	r10,r3,dcb0 <__ledf2+0xe4>
    dca4:	50c0042e 	bgeu	r10,r3,dcb8 <__ledf2+0xec>
    dca8:	283fe81e 	bne	r5,zero,dc4c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bc4c>
    dcac:	003ff806 	br	dc90 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bc90>
    dcb0:	313fee36 	bltu	r6,r4,dc6c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bc6c>
    dcb4:	21bffc36 	bltu	r4,r6,dca8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bca8>
    dcb8:	0005883a 	mov	r2,zero
    dcbc:	f800283a 	ret

0000dcc0 <__muldf3>:
    dcc0:	deffee04 	addi	sp,sp,-72
    dcc4:	dd000c15 	stw	r20,48(sp)
    dcc8:	2828d53a 	srli	r20,r5,20
    dccc:	ddc00f15 	stw	r23,60(sp)
    dcd0:	282ed7fa 	srli	r23,r5,31
    dcd4:	dc000815 	stw	r16,32(sp)
    dcd8:	04000434 	movhi	r16,16
    dcdc:	dcc00b15 	stw	r19,44(sp)
    dce0:	843fffc4 	addi	r16,r16,-1
    dce4:	dfc01115 	stw	ra,68(sp)
    dce8:	df001015 	stw	fp,64(sp)
    dcec:	dd800e15 	stw	r22,56(sp)
    dcf0:	dd400d15 	stw	r21,52(sp)
    dcf4:	dc800a15 	stw	r18,40(sp)
    dcf8:	dc400915 	stw	r17,36(sp)
    dcfc:	a501ffcc 	andi	r20,r20,2047
    dd00:	2c20703a 	and	r16,r5,r16
    dd04:	b827883a 	mov	r19,r23
    dd08:	ba403fcc 	andi	r9,r23,255
    dd0c:	a0006026 	beq	r20,zero,de90 <__muldf3+0x1d0>
    dd10:	0081ffc4 	movi	r2,2047
    dd14:	202d883a 	mov	r22,r4
    dd18:	a0803626 	beq	r20,r2,ddf4 <__muldf3+0x134>
    dd1c:	84000434 	orhi	r16,r16,16
    dd20:	200ad77a 	srli	r5,r4,29
    dd24:	800490fa 	slli	r2,r16,3
    dd28:	202c90fa 	slli	r22,r4,3
    dd2c:	a53f0044 	addi	r20,r20,-1023
    dd30:	28a0b03a 	or	r16,r5,r2
    dd34:	002b883a 	mov	r21,zero
    dd38:	000b883a 	mov	r5,zero
    dd3c:	3804d53a 	srli	r2,r7,20
    dd40:	3838d7fa 	srli	fp,r7,31
    dd44:	04400434 	movhi	r17,16
    dd48:	8c7fffc4 	addi	r17,r17,-1
    dd4c:	1081ffcc 	andi	r2,r2,2047
    dd50:	3025883a 	mov	r18,r6
    dd54:	3c62703a 	and	r17,r7,r17
    dd58:	e2803fcc 	andi	r10,fp,255
    dd5c:	10006d26 	beq	r2,zero,df14 <__muldf3+0x254>
    dd60:	00c1ffc4 	movi	r3,2047
    dd64:	10c06526 	beq	r2,r3,defc <__muldf3+0x23c>
    dd68:	8c400434 	orhi	r17,r17,16
    dd6c:	300ed77a 	srli	r7,r6,29
    dd70:	880690fa 	slli	r3,r17,3
    dd74:	302490fa 	slli	r18,r6,3
    dd78:	10bf0044 	addi	r2,r2,-1023
    dd7c:	38e2b03a 	or	r17,r7,r3
    dd80:	000f883a 	mov	r7,zero
    dd84:	a087883a 	add	r3,r20,r2
    dd88:	010003c4 	movi	r4,15
    dd8c:	3d44b03a 	or	r2,r7,r21
    dd90:	e5ccf03a 	xor	r6,fp,r23
    dd94:	1a000044 	addi	r8,r3,1
    dd98:	20809b36 	bltu	r4,r2,e008 <__muldf3+0x348>
    dd9c:	100490ba 	slli	r2,r2,2
    dda0:	01000074 	movhi	r4,1
    dda4:	21376d04 	addi	r4,r4,-8780
    dda8:	1105883a 	add	r2,r2,r4
    ddac:	10800017 	ldw	r2,0(r2)
    ddb0:	1000683a 	jmp	r2
    ddb4:	0000e008 	cmpgei	zero,zero,896
    ddb8:	0000de14 	movui	zero,888
    ddbc:	0000de14 	movui	zero,888
    ddc0:	0000de10 	cmplti	zero,zero,888
    ddc4:	0000dfe4 	muli	zero,zero,895
    ddc8:	0000dfe4 	muli	zero,zero,895
    ddcc:	0000dfcc 	andi	zero,zero,895
    ddd0:	0000de10 	cmplti	zero,zero,888
    ddd4:	0000dfe4 	muli	zero,zero,895
    ddd8:	0000dfcc 	andi	zero,zero,895
    dddc:	0000dfe4 	muli	zero,zero,895
    dde0:	0000de10 	cmplti	zero,zero,888
    dde4:	0000dff4 	movhi	zero,895
    dde8:	0000dff4 	movhi	zero,895
    ddec:	0000dff4 	movhi	zero,895
    ddf0:	0000e354 	movui	zero,909
    ddf4:	2404b03a 	or	r2,r4,r16
    ddf8:	1000711e 	bne	r2,zero,dfc0 <__muldf3+0x300>
    ddfc:	05400204 	movi	r21,8
    de00:	0021883a 	mov	r16,zero
    de04:	002d883a 	mov	r22,zero
    de08:	01400084 	movi	r5,2
    de0c:	003fcb06 	br	dd3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bd3c>
    de10:	500d883a 	mov	r6,r10
    de14:	00800084 	movi	r2,2
    de18:	38805926 	beq	r7,r2,df80 <__muldf3+0x2c0>
    de1c:	008000c4 	movi	r2,3
    de20:	3881bb26 	beq	r7,r2,e510 <__muldf3+0x850>
    de24:	00800044 	movi	r2,1
    de28:	3881961e 	bne	r7,r2,e484 <__muldf3+0x7c4>
    de2c:	3027883a 	mov	r19,r6
    de30:	0005883a 	mov	r2,zero
    de34:	0021883a 	mov	r16,zero
    de38:	002d883a 	mov	r22,zero
    de3c:	1004953a 	slli	r2,r2,20
    de40:	98c03fcc 	andi	r3,r19,255
    de44:	04400434 	movhi	r17,16
    de48:	8c7fffc4 	addi	r17,r17,-1
    de4c:	180697fa 	slli	r3,r3,31
    de50:	8460703a 	and	r16,r16,r17
    de54:	80a0b03a 	or	r16,r16,r2
    de58:	80c6b03a 	or	r3,r16,r3
    de5c:	b005883a 	mov	r2,r22
    de60:	dfc01117 	ldw	ra,68(sp)
    de64:	df001017 	ldw	fp,64(sp)
    de68:	ddc00f17 	ldw	r23,60(sp)
    de6c:	dd800e17 	ldw	r22,56(sp)
    de70:	dd400d17 	ldw	r21,52(sp)
    de74:	dd000c17 	ldw	r20,48(sp)
    de78:	dcc00b17 	ldw	r19,44(sp)
    de7c:	dc800a17 	ldw	r18,40(sp)
    de80:	dc400917 	ldw	r17,36(sp)
    de84:	dc000817 	ldw	r16,32(sp)
    de88:	dec01204 	addi	sp,sp,72
    de8c:	f800283a 	ret
    de90:	2404b03a 	or	r2,r4,r16
    de94:	202b883a 	mov	r21,r4
    de98:	10004426 	beq	r2,zero,dfac <__muldf3+0x2ec>
    de9c:	80015126 	beq	r16,zero,e3e4 <__muldf3+0x724>
    dea0:	8009883a 	mov	r4,r16
    dea4:	d9800715 	stw	r6,28(sp)
    dea8:	d9c00215 	stw	r7,8(sp)
    deac:	da400415 	stw	r9,16(sp)
    deb0:	000285c0 	call	285c <__clzsi2>
    deb4:	d9800717 	ldw	r6,28(sp)
    deb8:	d9c00217 	ldw	r7,8(sp)
    debc:	da400417 	ldw	r9,16(sp)
    dec0:	113ffd44 	addi	r4,r2,-11
    dec4:	00c00704 	movi	r3,28
    dec8:	19014216 	blt	r3,r4,e3d4 <__muldf3+0x714>
    decc:	00c00744 	movi	r3,29
    ded0:	15bffe04 	addi	r22,r2,-8
    ded4:	1907c83a 	sub	r3,r3,r4
    ded8:	85a0983a 	sll	r16,r16,r22
    dedc:	a8c6d83a 	srl	r3,r21,r3
    dee0:	adac983a 	sll	r22,r21,r22
    dee4:	1c20b03a 	or	r16,r3,r16
    dee8:	1080fcc4 	addi	r2,r2,1011
    deec:	00a9c83a 	sub	r20,zero,r2
    def0:	002b883a 	mov	r21,zero
    def4:	000b883a 	mov	r5,zero
    def8:	003f9006 	br	dd3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bd3c>
    defc:	3446b03a 	or	r3,r6,r17
    df00:	1800281e 	bne	r3,zero,dfa4 <__muldf3+0x2e4>
    df04:	0023883a 	mov	r17,zero
    df08:	0025883a 	mov	r18,zero
    df0c:	01c00084 	movi	r7,2
    df10:	003f9c06 	br	dd84 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bd84>
    df14:	3446b03a 	or	r3,r6,r17
    df18:	18001e26 	beq	r3,zero,df94 <__muldf3+0x2d4>
    df1c:	88012126 	beq	r17,zero,e3a4 <__muldf3+0x6e4>
    df20:	8809883a 	mov	r4,r17
    df24:	d9400215 	stw	r5,8(sp)
    df28:	d9800715 	stw	r6,28(sp)
    df2c:	da400415 	stw	r9,16(sp)
    df30:	da800315 	stw	r10,12(sp)
    df34:	000285c0 	call	285c <__clzsi2>
    df38:	d9400217 	ldw	r5,8(sp)
    df3c:	d9800717 	ldw	r6,28(sp)
    df40:	da400417 	ldw	r9,16(sp)
    df44:	da800317 	ldw	r10,12(sp)
    df48:	113ffd44 	addi	r4,r2,-11
    df4c:	00c00704 	movi	r3,28
    df50:	19011016 	blt	r3,r4,e394 <__muldf3+0x6d4>
    df54:	00c00744 	movi	r3,29
    df58:	14bffe04 	addi	r18,r2,-8
    df5c:	1907c83a 	sub	r3,r3,r4
    df60:	8ca2983a 	sll	r17,r17,r18
    df64:	30c6d83a 	srl	r3,r6,r3
    df68:	34a4983a 	sll	r18,r6,r18
    df6c:	1c62b03a 	or	r17,r3,r17
    df70:	1080fcc4 	addi	r2,r2,1011
    df74:	0085c83a 	sub	r2,zero,r2
    df78:	000f883a 	mov	r7,zero
    df7c:	003f8106 	br	dd84 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bd84>
    df80:	3027883a 	mov	r19,r6
    df84:	0081ffc4 	movi	r2,2047
    df88:	0021883a 	mov	r16,zero
    df8c:	002d883a 	mov	r22,zero
    df90:	003faa06 	br	de3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153be3c>
    df94:	0023883a 	mov	r17,zero
    df98:	0025883a 	mov	r18,zero
    df9c:	01c00044 	movi	r7,1
    dfa0:	003f7806 	br	dd84 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bd84>
    dfa4:	01c000c4 	movi	r7,3
    dfa8:	003f7606 	br	dd84 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bd84>
    dfac:	05400104 	movi	r21,4
    dfb0:	0021883a 	mov	r16,zero
    dfb4:	002d883a 	mov	r22,zero
    dfb8:	01400044 	movi	r5,1
    dfbc:	003f5f06 	br	dd3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bd3c>
    dfc0:	05400304 	movi	r21,12
    dfc4:	014000c4 	movi	r5,3
    dfc8:	003f5c06 	br	dd3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bd3c>
    dfcc:	04000434 	movhi	r16,16
    dfd0:	0027883a 	mov	r19,zero
    dfd4:	843fffc4 	addi	r16,r16,-1
    dfd8:	05bfffc4 	movi	r22,-1
    dfdc:	0081ffc4 	movi	r2,2047
    dfe0:	003f9606 	br	de3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153be3c>
    dfe4:	8023883a 	mov	r17,r16
    dfe8:	b025883a 	mov	r18,r22
    dfec:	280f883a 	mov	r7,r5
    dff0:	003f8806 	br	de14 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153be14>
    dff4:	8023883a 	mov	r17,r16
    dff8:	b025883a 	mov	r18,r22
    dffc:	480d883a 	mov	r6,r9
    e000:	280f883a 	mov	r7,r5
    e004:	003f8306 	br	de14 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153be14>
    e008:	b026d43a 	srli	r19,r22,16
    e00c:	902ed43a 	srli	r23,r18,16
    e010:	b5bfffcc 	andi	r22,r22,65535
    e014:	94bfffcc 	andi	r18,r18,65535
    e018:	b00b883a 	mov	r5,r22
    e01c:	9009883a 	mov	r4,r18
    e020:	d8c00515 	stw	r3,20(sp)
    e024:	d9800715 	stw	r6,28(sp)
    e028:	da000615 	stw	r8,24(sp)
    e02c:	00020100 	call	2010 <__mulsi3>
    e030:	980b883a 	mov	r5,r19
    e034:	9009883a 	mov	r4,r18
    e038:	1029883a 	mov	r20,r2
    e03c:	00020100 	call	2010 <__mulsi3>
    e040:	b80b883a 	mov	r5,r23
    e044:	9809883a 	mov	r4,r19
    e048:	102b883a 	mov	r21,r2
    e04c:	00020100 	call	2010 <__mulsi3>
    e050:	b809883a 	mov	r4,r23
    e054:	b00b883a 	mov	r5,r22
    e058:	1039883a 	mov	fp,r2
    e05c:	00020100 	call	2010 <__mulsi3>
    e060:	a008d43a 	srli	r4,r20,16
    e064:	1545883a 	add	r2,r2,r21
    e068:	d8c00517 	ldw	r3,20(sp)
    e06c:	2085883a 	add	r2,r4,r2
    e070:	d9800717 	ldw	r6,28(sp)
    e074:	da000617 	ldw	r8,24(sp)
    e078:	1540022e 	bgeu	r2,r21,e084 <__muldf3+0x3c4>
    e07c:	01000074 	movhi	r4,1
    e080:	e139883a 	add	fp,fp,r4
    e084:	100e943a 	slli	r7,r2,16
    e088:	1004d43a 	srli	r2,r2,16
    e08c:	882ad43a 	srli	r21,r17,16
    e090:	a53fffcc 	andi	r20,r20,65535
    e094:	8c7fffcc 	andi	r17,r17,65535
    e098:	3d29883a 	add	r20,r7,r20
    e09c:	b00b883a 	mov	r5,r22
    e0a0:	8809883a 	mov	r4,r17
    e0a4:	d8c00515 	stw	r3,20(sp)
    e0a8:	d9800715 	stw	r6,28(sp)
    e0ac:	da000615 	stw	r8,24(sp)
    e0b0:	dd000115 	stw	r20,4(sp)
    e0b4:	d8800015 	stw	r2,0(sp)
    e0b8:	00020100 	call	2010 <__mulsi3>
    e0bc:	980b883a 	mov	r5,r19
    e0c0:	8809883a 	mov	r4,r17
    e0c4:	d8800215 	stw	r2,8(sp)
    e0c8:	00020100 	call	2010 <__mulsi3>
    e0cc:	9809883a 	mov	r4,r19
    e0d0:	a80b883a 	mov	r5,r21
    e0d4:	1029883a 	mov	r20,r2
    e0d8:	00020100 	call	2010 <__mulsi3>
    e0dc:	b00b883a 	mov	r5,r22
    e0e0:	a809883a 	mov	r4,r21
    e0e4:	d8800415 	stw	r2,16(sp)
    e0e8:	00020100 	call	2010 <__mulsi3>
    e0ec:	d9c00217 	ldw	r7,8(sp)
    e0f0:	1505883a 	add	r2,r2,r20
    e0f4:	d8c00517 	ldw	r3,20(sp)
    e0f8:	3826d43a 	srli	r19,r7,16
    e0fc:	d9800717 	ldw	r6,28(sp)
    e100:	da000617 	ldw	r8,24(sp)
    e104:	9885883a 	add	r2,r19,r2
    e108:	da400417 	ldw	r9,16(sp)
    e10c:	1500022e 	bgeu	r2,r20,e118 <__muldf3+0x458>
    e110:	01000074 	movhi	r4,1
    e114:	4913883a 	add	r9,r9,r4
    e118:	1028d43a 	srli	r20,r2,16
    e11c:	1004943a 	slli	r2,r2,16
    e120:	802cd43a 	srli	r22,r16,16
    e124:	843fffcc 	andi	r16,r16,65535
    e128:	3cffffcc 	andi	r19,r7,65535
    e12c:	9009883a 	mov	r4,r18
    e130:	800b883a 	mov	r5,r16
    e134:	a269883a 	add	r20,r20,r9
    e138:	d8c00515 	stw	r3,20(sp)
    e13c:	d9800715 	stw	r6,28(sp)
    e140:	da000615 	stw	r8,24(sp)
    e144:	14e7883a 	add	r19,r2,r19
    e148:	00020100 	call	2010 <__mulsi3>
    e14c:	9009883a 	mov	r4,r18
    e150:	b00b883a 	mov	r5,r22
    e154:	d8800315 	stw	r2,12(sp)
    e158:	00020100 	call	2010 <__mulsi3>
    e15c:	b809883a 	mov	r4,r23
    e160:	b00b883a 	mov	r5,r22
    e164:	d8800215 	stw	r2,8(sp)
    e168:	00020100 	call	2010 <__mulsi3>
    e16c:	b80b883a 	mov	r5,r23
    e170:	8009883a 	mov	r4,r16
    e174:	d8800415 	stw	r2,16(sp)
    e178:	00020100 	call	2010 <__mulsi3>
    e17c:	da800317 	ldw	r10,12(sp)
    e180:	d9c00217 	ldw	r7,8(sp)
    e184:	d9000017 	ldw	r4,0(sp)
    e188:	502ed43a 	srli	r23,r10,16
    e18c:	11c5883a 	add	r2,r2,r7
    e190:	24e5883a 	add	r18,r4,r19
    e194:	b885883a 	add	r2,r23,r2
    e198:	d8c00517 	ldw	r3,20(sp)
    e19c:	d9800717 	ldw	r6,28(sp)
    e1a0:	da000617 	ldw	r8,24(sp)
    e1a4:	da400417 	ldw	r9,16(sp)
    e1a8:	11c0022e 	bgeu	r2,r7,e1b4 <__muldf3+0x4f4>
    e1ac:	01000074 	movhi	r4,1
    e1b0:	4913883a 	add	r9,r9,r4
    e1b4:	100ed43a 	srli	r7,r2,16
    e1b8:	1004943a 	slli	r2,r2,16
    e1bc:	55ffffcc 	andi	r23,r10,65535
    e1c0:	3a53883a 	add	r9,r7,r9
    e1c4:	8809883a 	mov	r4,r17
    e1c8:	800b883a 	mov	r5,r16
    e1cc:	d8c00515 	stw	r3,20(sp)
    e1d0:	d9800715 	stw	r6,28(sp)
    e1d4:	da000615 	stw	r8,24(sp)
    e1d8:	da400415 	stw	r9,16(sp)
    e1dc:	15ef883a 	add	r23,r2,r23
    e1e0:	00020100 	call	2010 <__mulsi3>
    e1e4:	8809883a 	mov	r4,r17
    e1e8:	b00b883a 	mov	r5,r22
    e1ec:	d8800215 	stw	r2,8(sp)
    e1f0:	00020100 	call	2010 <__mulsi3>
    e1f4:	b00b883a 	mov	r5,r22
    e1f8:	a809883a 	mov	r4,r21
    e1fc:	d8800315 	stw	r2,12(sp)
    e200:	00020100 	call	2010 <__mulsi3>
    e204:	8009883a 	mov	r4,r16
    e208:	a80b883a 	mov	r5,r21
    e20c:	1023883a 	mov	r17,r2
    e210:	00020100 	call	2010 <__mulsi3>
    e214:	d9c00217 	ldw	r7,8(sp)
    e218:	da800317 	ldw	r10,12(sp)
    e21c:	d8c00517 	ldw	r3,20(sp)
    e220:	3808d43a 	srli	r4,r7,16
    e224:	1285883a 	add	r2,r2,r10
    e228:	d9800717 	ldw	r6,28(sp)
    e22c:	2085883a 	add	r2,r4,r2
    e230:	da000617 	ldw	r8,24(sp)
    e234:	da400417 	ldw	r9,16(sp)
    e238:	1280022e 	bgeu	r2,r10,e244 <__muldf3+0x584>
    e23c:	01000074 	movhi	r4,1
    e240:	8923883a 	add	r17,r17,r4
    e244:	1008943a 	slli	r4,r2,16
    e248:	39ffffcc 	andi	r7,r7,65535
    e24c:	e4b9883a 	add	fp,fp,r18
    e250:	21cf883a 	add	r7,r4,r7
    e254:	e4e7803a 	cmpltu	r19,fp,r19
    e258:	3d0f883a 	add	r7,r7,r20
    e25c:	bf39883a 	add	fp,r23,fp
    e260:	99c9883a 	add	r4,r19,r7
    e264:	e5ef803a 	cmpltu	r23,fp,r23
    e268:	490b883a 	add	r5,r9,r4
    e26c:	1004d43a 	srli	r2,r2,16
    e270:	b965883a 	add	r18,r23,r5
    e274:	24c9803a 	cmpltu	r4,r4,r19
    e278:	3d29803a 	cmpltu	r20,r7,r20
    e27c:	a128b03a 	or	r20,r20,r4
    e280:	95ef803a 	cmpltu	r23,r18,r23
    e284:	2a53803a 	cmpltu	r9,r5,r9
    e288:	a0a9883a 	add	r20,r20,r2
    e28c:	4deeb03a 	or	r23,r9,r23
    e290:	a5ef883a 	add	r23,r20,r23
    e294:	bc63883a 	add	r17,r23,r17
    e298:	e004927a 	slli	r2,fp,9
    e29c:	d9000117 	ldw	r4,4(sp)
    e2a0:	882e927a 	slli	r23,r17,9
    e2a4:	9022d5fa 	srli	r17,r18,23
    e2a8:	e038d5fa 	srli	fp,fp,23
    e2ac:	1104b03a 	or	r2,r2,r4
    e2b0:	9024927a 	slli	r18,r18,9
    e2b4:	1004c03a 	cmpne	r2,r2,zero
    e2b8:	bc62b03a 	or	r17,r23,r17
    e2bc:	1738b03a 	or	fp,r2,fp
    e2c0:	8880402c 	andhi	r2,r17,256
    e2c4:	e4a4b03a 	or	r18,fp,r18
    e2c8:	10000726 	beq	r2,zero,e2e8 <__muldf3+0x628>
    e2cc:	9006d07a 	srli	r3,r18,1
    e2d0:	880497fa 	slli	r2,r17,31
    e2d4:	9480004c 	andi	r18,r18,1
    e2d8:	8822d07a 	srli	r17,r17,1
    e2dc:	1ca4b03a 	or	r18,r3,r18
    e2e0:	14a4b03a 	or	r18,r2,r18
    e2e4:	4007883a 	mov	r3,r8
    e2e8:	1880ffc4 	addi	r2,r3,1023
    e2ec:	0080460e 	bge	zero,r2,e408 <__muldf3+0x748>
    e2f0:	910001cc 	andi	r4,r18,7
    e2f4:	20000726 	beq	r4,zero,e314 <__muldf3+0x654>
    e2f8:	910003cc 	andi	r4,r18,15
    e2fc:	01400104 	movi	r5,4
    e300:	21400426 	beq	r4,r5,e314 <__muldf3+0x654>
    e304:	9149883a 	add	r4,r18,r5
    e308:	24a5803a 	cmpltu	r18,r4,r18
    e30c:	8ca3883a 	add	r17,r17,r18
    e310:	2025883a 	mov	r18,r4
    e314:	8900402c 	andhi	r4,r17,256
    e318:	20000426 	beq	r4,zero,e32c <__muldf3+0x66c>
    e31c:	18810004 	addi	r2,r3,1024
    e320:	00ffc034 	movhi	r3,65280
    e324:	18ffffc4 	addi	r3,r3,-1
    e328:	88e2703a 	and	r17,r17,r3
    e32c:	00c1ff84 	movi	r3,2046
    e330:	18bf1316 	blt	r3,r2,df80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bf80>
    e334:	882c977a 	slli	r22,r17,29
    e338:	9024d0fa 	srli	r18,r18,3
    e33c:	8822927a 	slli	r17,r17,9
    e340:	1081ffcc 	andi	r2,r2,2047
    e344:	b4acb03a 	or	r22,r22,r18
    e348:	8820d33a 	srli	r16,r17,12
    e34c:	3027883a 	mov	r19,r6
    e350:	003eba06 	br	de3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153be3c>
    e354:	8080022c 	andhi	r2,r16,8
    e358:	10000926 	beq	r2,zero,e380 <__muldf3+0x6c0>
    e35c:	8880022c 	andhi	r2,r17,8
    e360:	1000071e 	bne	r2,zero,e380 <__muldf3+0x6c0>
    e364:	00800434 	movhi	r2,16
    e368:	8c000234 	orhi	r16,r17,8
    e36c:	10bfffc4 	addi	r2,r2,-1
    e370:	e027883a 	mov	r19,fp
    e374:	80a0703a 	and	r16,r16,r2
    e378:	902d883a 	mov	r22,r18
    e37c:	003f1706 	br	dfdc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bfdc>
    e380:	00800434 	movhi	r2,16
    e384:	84000234 	orhi	r16,r16,8
    e388:	10bfffc4 	addi	r2,r2,-1
    e38c:	80a0703a 	and	r16,r16,r2
    e390:	003f1206 	br	dfdc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bfdc>
    e394:	147ff604 	addi	r17,r2,-40
    e398:	3462983a 	sll	r17,r6,r17
    e39c:	0025883a 	mov	r18,zero
    e3a0:	003ef306 	br	df70 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bf70>
    e3a4:	3009883a 	mov	r4,r6
    e3a8:	d9400215 	stw	r5,8(sp)
    e3ac:	d9800715 	stw	r6,28(sp)
    e3b0:	da400415 	stw	r9,16(sp)
    e3b4:	da800315 	stw	r10,12(sp)
    e3b8:	000285c0 	call	285c <__clzsi2>
    e3bc:	10800804 	addi	r2,r2,32
    e3c0:	da800317 	ldw	r10,12(sp)
    e3c4:	da400417 	ldw	r9,16(sp)
    e3c8:	d9800717 	ldw	r6,28(sp)
    e3cc:	d9400217 	ldw	r5,8(sp)
    e3d0:	003edd06 	br	df48 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bf48>
    e3d4:	143ff604 	addi	r16,r2,-40
    e3d8:	ac20983a 	sll	r16,r21,r16
    e3dc:	002d883a 	mov	r22,zero
    e3e0:	003ec106 	br	dee8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bee8>
    e3e4:	d9800715 	stw	r6,28(sp)
    e3e8:	d9c00215 	stw	r7,8(sp)
    e3ec:	da400415 	stw	r9,16(sp)
    e3f0:	000285c0 	call	285c <__clzsi2>
    e3f4:	10800804 	addi	r2,r2,32
    e3f8:	da400417 	ldw	r9,16(sp)
    e3fc:	d9c00217 	ldw	r7,8(sp)
    e400:	d9800717 	ldw	r6,28(sp)
    e404:	003eae06 	br	dec0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bec0>
    e408:	00c00044 	movi	r3,1
    e40c:	1887c83a 	sub	r3,r3,r2
    e410:	01000e04 	movi	r4,56
    e414:	20fe8516 	blt	r4,r3,de2c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153be2c>
    e418:	010007c4 	movi	r4,31
    e41c:	20c01b16 	blt	r4,r3,e48c <__muldf3+0x7cc>
    e420:	00800804 	movi	r2,32
    e424:	10c5c83a 	sub	r2,r2,r3
    e428:	888a983a 	sll	r5,r17,r2
    e42c:	90c8d83a 	srl	r4,r18,r3
    e430:	9084983a 	sll	r2,r18,r2
    e434:	88e2d83a 	srl	r17,r17,r3
    e438:	2906b03a 	or	r3,r5,r4
    e43c:	1004c03a 	cmpne	r2,r2,zero
    e440:	1886b03a 	or	r3,r3,r2
    e444:	188001cc 	andi	r2,r3,7
    e448:	10000726 	beq	r2,zero,e468 <__muldf3+0x7a8>
    e44c:	188003cc 	andi	r2,r3,15
    e450:	01000104 	movi	r4,4
    e454:	11000426 	beq	r2,r4,e468 <__muldf3+0x7a8>
    e458:	1805883a 	mov	r2,r3
    e45c:	10c00104 	addi	r3,r2,4
    e460:	1885803a 	cmpltu	r2,r3,r2
    e464:	88a3883a 	add	r17,r17,r2
    e468:	8880202c 	andhi	r2,r17,128
    e46c:	10001c26 	beq	r2,zero,e4e0 <__muldf3+0x820>
    e470:	3027883a 	mov	r19,r6
    e474:	00800044 	movi	r2,1
    e478:	0021883a 	mov	r16,zero
    e47c:	002d883a 	mov	r22,zero
    e480:	003e6e06 	br	de3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153be3c>
    e484:	4007883a 	mov	r3,r8
    e488:	003f9706 	br	e2e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c2e8>
    e48c:	017ff844 	movi	r5,-31
    e490:	2885c83a 	sub	r2,r5,r2
    e494:	888ad83a 	srl	r5,r17,r2
    e498:	00800804 	movi	r2,32
    e49c:	18801a26 	beq	r3,r2,e508 <__muldf3+0x848>
    e4a0:	01001004 	movi	r4,64
    e4a4:	20c7c83a 	sub	r3,r4,r3
    e4a8:	88e2983a 	sll	r17,r17,r3
    e4ac:	8ca4b03a 	or	r18,r17,r18
    e4b0:	9004c03a 	cmpne	r2,r18,zero
    e4b4:	2884b03a 	or	r2,r5,r2
    e4b8:	144001cc 	andi	r17,r2,7
    e4bc:	88000d1e 	bne	r17,zero,e4f4 <__muldf3+0x834>
    e4c0:	0021883a 	mov	r16,zero
    e4c4:	102cd0fa 	srli	r22,r2,3
    e4c8:	3027883a 	mov	r19,r6
    e4cc:	0005883a 	mov	r2,zero
    e4d0:	b46cb03a 	or	r22,r22,r17
    e4d4:	003e5906 	br	de3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153be3c>
    e4d8:	1007883a 	mov	r3,r2
    e4dc:	0023883a 	mov	r17,zero
    e4e0:	8820927a 	slli	r16,r17,9
    e4e4:	1805883a 	mov	r2,r3
    e4e8:	8822977a 	slli	r17,r17,29
    e4ec:	8020d33a 	srli	r16,r16,12
    e4f0:	003ff406 	br	e4c4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c4c4>
    e4f4:	10c003cc 	andi	r3,r2,15
    e4f8:	01000104 	movi	r4,4
    e4fc:	193ff626 	beq	r3,r4,e4d8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c4d8>
    e500:	0023883a 	mov	r17,zero
    e504:	003fd506 	br	e45c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c45c>
    e508:	0023883a 	mov	r17,zero
    e50c:	003fe706 	br	e4ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c4ac>
    e510:	00800434 	movhi	r2,16
    e514:	8c000234 	orhi	r16,r17,8
    e518:	10bfffc4 	addi	r2,r2,-1
    e51c:	3027883a 	mov	r19,r6
    e520:	80a0703a 	and	r16,r16,r2
    e524:	902d883a 	mov	r22,r18
    e528:	003eac06 	br	dfdc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153bfdc>

0000e52c <__subdf3>:
    e52c:	02000434 	movhi	r8,16
    e530:	423fffc4 	addi	r8,r8,-1
    e534:	defffb04 	addi	sp,sp,-20
    e538:	2a14703a 	and	r10,r5,r8
    e53c:	3812d53a 	srli	r9,r7,20
    e540:	3a10703a 	and	r8,r7,r8
    e544:	2006d77a 	srli	r3,r4,29
    e548:	3004d77a 	srli	r2,r6,29
    e54c:	dc000015 	stw	r16,0(sp)
    e550:	501490fa 	slli	r10,r10,3
    e554:	2820d53a 	srli	r16,r5,20
    e558:	401090fa 	slli	r8,r8,3
    e55c:	dc800215 	stw	r18,8(sp)
    e560:	dc400115 	stw	r17,4(sp)
    e564:	dfc00415 	stw	ra,16(sp)
    e568:	202290fa 	slli	r17,r4,3
    e56c:	dcc00315 	stw	r19,12(sp)
    e570:	4a41ffcc 	andi	r9,r9,2047
    e574:	0101ffc4 	movi	r4,2047
    e578:	2824d7fa 	srli	r18,r5,31
    e57c:	8401ffcc 	andi	r16,r16,2047
    e580:	50c6b03a 	or	r3,r10,r3
    e584:	380ed7fa 	srli	r7,r7,31
    e588:	408ab03a 	or	r5,r8,r2
    e58c:	300c90fa 	slli	r6,r6,3
    e590:	49009626 	beq	r9,r4,e7ec <__subdf3+0x2c0>
    e594:	39c0005c 	xori	r7,r7,1
    e598:	8245c83a 	sub	r2,r16,r9
    e59c:	3c807426 	beq	r7,r18,e770 <__subdf3+0x244>
    e5a0:	0080af0e 	bge	zero,r2,e860 <__subdf3+0x334>
    e5a4:	48002a1e 	bne	r9,zero,e650 <__subdf3+0x124>
    e5a8:	2988b03a 	or	r4,r5,r6
    e5ac:	20009a1e 	bne	r4,zero,e818 <__subdf3+0x2ec>
    e5b0:	888001cc 	andi	r2,r17,7
    e5b4:	10000726 	beq	r2,zero,e5d4 <__subdf3+0xa8>
    e5b8:	888003cc 	andi	r2,r17,15
    e5bc:	01000104 	movi	r4,4
    e5c0:	11000426 	beq	r2,r4,e5d4 <__subdf3+0xa8>
    e5c4:	890b883a 	add	r5,r17,r4
    e5c8:	2c63803a 	cmpltu	r17,r5,r17
    e5cc:	1c47883a 	add	r3,r3,r17
    e5d0:	2823883a 	mov	r17,r5
    e5d4:	1880202c 	andhi	r2,r3,128
    e5d8:	10005926 	beq	r2,zero,e740 <__subdf3+0x214>
    e5dc:	84000044 	addi	r16,r16,1
    e5e0:	0081ffc4 	movi	r2,2047
    e5e4:	8080be26 	beq	r16,r2,e8e0 <__subdf3+0x3b4>
    e5e8:	017fe034 	movhi	r5,65408
    e5ec:	297fffc4 	addi	r5,r5,-1
    e5f0:	1946703a 	and	r3,r3,r5
    e5f4:	1804977a 	slli	r2,r3,29
    e5f8:	1806927a 	slli	r3,r3,9
    e5fc:	8822d0fa 	srli	r17,r17,3
    e600:	8401ffcc 	andi	r16,r16,2047
    e604:	180ad33a 	srli	r5,r3,12
    e608:	9100004c 	andi	r4,r18,1
    e60c:	1444b03a 	or	r2,r2,r17
    e610:	80c1ffcc 	andi	r3,r16,2047
    e614:	1820953a 	slli	r16,r3,20
    e618:	20c03fcc 	andi	r3,r4,255
    e61c:	180897fa 	slli	r4,r3,31
    e620:	00c00434 	movhi	r3,16
    e624:	18ffffc4 	addi	r3,r3,-1
    e628:	28c6703a 	and	r3,r5,r3
    e62c:	1c06b03a 	or	r3,r3,r16
    e630:	1906b03a 	or	r3,r3,r4
    e634:	dfc00417 	ldw	ra,16(sp)
    e638:	dcc00317 	ldw	r19,12(sp)
    e63c:	dc800217 	ldw	r18,8(sp)
    e640:	dc400117 	ldw	r17,4(sp)
    e644:	dc000017 	ldw	r16,0(sp)
    e648:	dec00504 	addi	sp,sp,20
    e64c:	f800283a 	ret
    e650:	0101ffc4 	movi	r4,2047
    e654:	813fd626 	beq	r16,r4,e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    e658:	29402034 	orhi	r5,r5,128
    e65c:	01000e04 	movi	r4,56
    e660:	2080a316 	blt	r4,r2,e8f0 <__subdf3+0x3c4>
    e664:	010007c4 	movi	r4,31
    e668:	2080c616 	blt	r4,r2,e984 <__subdf3+0x458>
    e66c:	01000804 	movi	r4,32
    e670:	2089c83a 	sub	r4,r4,r2
    e674:	2910983a 	sll	r8,r5,r4
    e678:	308ed83a 	srl	r7,r6,r2
    e67c:	3108983a 	sll	r4,r6,r4
    e680:	2884d83a 	srl	r2,r5,r2
    e684:	41ccb03a 	or	r6,r8,r7
    e688:	2008c03a 	cmpne	r4,r4,zero
    e68c:	310cb03a 	or	r6,r6,r4
    e690:	898dc83a 	sub	r6,r17,r6
    e694:	89a3803a 	cmpltu	r17,r17,r6
    e698:	1887c83a 	sub	r3,r3,r2
    e69c:	1c47c83a 	sub	r3,r3,r17
    e6a0:	3023883a 	mov	r17,r6
    e6a4:	1880202c 	andhi	r2,r3,128
    e6a8:	10002326 	beq	r2,zero,e738 <__subdf3+0x20c>
    e6ac:	04c02034 	movhi	r19,128
    e6b0:	9cffffc4 	addi	r19,r19,-1
    e6b4:	1ce6703a 	and	r19,r3,r19
    e6b8:	98007a26 	beq	r19,zero,e8a4 <__subdf3+0x378>
    e6bc:	9809883a 	mov	r4,r19
    e6c0:	000285c0 	call	285c <__clzsi2>
    e6c4:	113ffe04 	addi	r4,r2,-8
    e6c8:	00c007c4 	movi	r3,31
    e6cc:	19007b16 	blt	r3,r4,e8bc <__subdf3+0x390>
    e6d0:	00800804 	movi	r2,32
    e6d4:	1105c83a 	sub	r2,r2,r4
    e6d8:	8884d83a 	srl	r2,r17,r2
    e6dc:	9906983a 	sll	r3,r19,r4
    e6e0:	8922983a 	sll	r17,r17,r4
    e6e4:	10c4b03a 	or	r2,r2,r3
    e6e8:	24007816 	blt	r4,r16,e8cc <__subdf3+0x3a0>
    e6ec:	2421c83a 	sub	r16,r4,r16
    e6f0:	80c00044 	addi	r3,r16,1
    e6f4:	010007c4 	movi	r4,31
    e6f8:	20c09516 	blt	r4,r3,e950 <__subdf3+0x424>
    e6fc:	01400804 	movi	r5,32
    e700:	28cbc83a 	sub	r5,r5,r3
    e704:	88c8d83a 	srl	r4,r17,r3
    e708:	8962983a 	sll	r17,r17,r5
    e70c:	114a983a 	sll	r5,r2,r5
    e710:	10c6d83a 	srl	r3,r2,r3
    e714:	8804c03a 	cmpne	r2,r17,zero
    e718:	290ab03a 	or	r5,r5,r4
    e71c:	28a2b03a 	or	r17,r5,r2
    e720:	0021883a 	mov	r16,zero
    e724:	003fa206 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    e728:	2090b03a 	or	r8,r4,r2
    e72c:	40018e26 	beq	r8,zero,ed68 <__subdf3+0x83c>
    e730:	1007883a 	mov	r3,r2
    e734:	2023883a 	mov	r17,r4
    e738:	888001cc 	andi	r2,r17,7
    e73c:	103f9e1e 	bne	r2,zero,e5b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b8>
    e740:	1804977a 	slli	r2,r3,29
    e744:	8822d0fa 	srli	r17,r17,3
    e748:	1810d0fa 	srli	r8,r3,3
    e74c:	9100004c 	andi	r4,r18,1
    e750:	1444b03a 	or	r2,r2,r17
    e754:	00c1ffc4 	movi	r3,2047
    e758:	80c02826 	beq	r16,r3,e7fc <__subdf3+0x2d0>
    e75c:	01400434 	movhi	r5,16
    e760:	297fffc4 	addi	r5,r5,-1
    e764:	80e0703a 	and	r16,r16,r3
    e768:	414a703a 	and	r5,r8,r5
    e76c:	003fa806 	br	e610 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c610>
    e770:	0080630e 	bge	zero,r2,e900 <__subdf3+0x3d4>
    e774:	48003026 	beq	r9,zero,e838 <__subdf3+0x30c>
    e778:	0101ffc4 	movi	r4,2047
    e77c:	813f8c26 	beq	r16,r4,e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    e780:	29402034 	orhi	r5,r5,128
    e784:	01000e04 	movi	r4,56
    e788:	2080a90e 	bge	r4,r2,ea30 <__subdf3+0x504>
    e78c:	298cb03a 	or	r6,r5,r6
    e790:	3012c03a 	cmpne	r9,r6,zero
    e794:	0005883a 	mov	r2,zero
    e798:	4c53883a 	add	r9,r9,r17
    e79c:	4c63803a 	cmpltu	r17,r9,r17
    e7a0:	10c7883a 	add	r3,r2,r3
    e7a4:	88c7883a 	add	r3,r17,r3
    e7a8:	4823883a 	mov	r17,r9
    e7ac:	1880202c 	andhi	r2,r3,128
    e7b0:	1000d026 	beq	r2,zero,eaf4 <__subdf3+0x5c8>
    e7b4:	84000044 	addi	r16,r16,1
    e7b8:	0081ffc4 	movi	r2,2047
    e7bc:	8080fe26 	beq	r16,r2,ebb8 <__subdf3+0x68c>
    e7c0:	00bfe034 	movhi	r2,65408
    e7c4:	10bfffc4 	addi	r2,r2,-1
    e7c8:	1886703a 	and	r3,r3,r2
    e7cc:	880ad07a 	srli	r5,r17,1
    e7d0:	180497fa 	slli	r2,r3,31
    e7d4:	8900004c 	andi	r4,r17,1
    e7d8:	2922b03a 	or	r17,r5,r4
    e7dc:	1806d07a 	srli	r3,r3,1
    e7e0:	1462b03a 	or	r17,r2,r17
    e7e4:	3825883a 	mov	r18,r7
    e7e8:	003f7106 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    e7ec:	2984b03a 	or	r2,r5,r6
    e7f0:	103f6826 	beq	r2,zero,e594 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c594>
    e7f4:	39c03fcc 	andi	r7,r7,255
    e7f8:	003f6706 	br	e598 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c598>
    e7fc:	4086b03a 	or	r3,r8,r2
    e800:	18015226 	beq	r3,zero,ed4c <__subdf3+0x820>
    e804:	00c00434 	movhi	r3,16
    e808:	41400234 	orhi	r5,r8,8
    e80c:	18ffffc4 	addi	r3,r3,-1
    e810:	28ca703a 	and	r5,r5,r3
    e814:	003f7e06 	br	e610 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c610>
    e818:	10bfffc4 	addi	r2,r2,-1
    e81c:	1000491e 	bne	r2,zero,e944 <__subdf3+0x418>
    e820:	898fc83a 	sub	r7,r17,r6
    e824:	89e3803a 	cmpltu	r17,r17,r7
    e828:	1947c83a 	sub	r3,r3,r5
    e82c:	1c47c83a 	sub	r3,r3,r17
    e830:	3823883a 	mov	r17,r7
    e834:	003f9b06 	br	e6a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c6a4>
    e838:	2988b03a 	or	r4,r5,r6
    e83c:	203f5c26 	beq	r4,zero,e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    e840:	10bfffc4 	addi	r2,r2,-1
    e844:	1000931e 	bne	r2,zero,ea94 <__subdf3+0x568>
    e848:	898d883a 	add	r6,r17,r6
    e84c:	3463803a 	cmpltu	r17,r6,r17
    e850:	1947883a 	add	r3,r3,r5
    e854:	88c7883a 	add	r3,r17,r3
    e858:	3023883a 	mov	r17,r6
    e85c:	003fd306 	br	e7ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c7ac>
    e860:	1000541e 	bne	r2,zero,e9b4 <__subdf3+0x488>
    e864:	80800044 	addi	r2,r16,1
    e868:	1081ffcc 	andi	r2,r2,2047
    e86c:	01000044 	movi	r4,1
    e870:	2080a20e 	bge	r4,r2,eafc <__subdf3+0x5d0>
    e874:	8989c83a 	sub	r4,r17,r6
    e878:	8905803a 	cmpltu	r2,r17,r4
    e87c:	1967c83a 	sub	r19,r3,r5
    e880:	98a7c83a 	sub	r19,r19,r2
    e884:	9880202c 	andhi	r2,r19,128
    e888:	10006326 	beq	r2,zero,ea18 <__subdf3+0x4ec>
    e88c:	3463c83a 	sub	r17,r6,r17
    e890:	28c7c83a 	sub	r3,r5,r3
    e894:	344d803a 	cmpltu	r6,r6,r17
    e898:	19a7c83a 	sub	r19,r3,r6
    e89c:	3825883a 	mov	r18,r7
    e8a0:	983f861e 	bne	r19,zero,e6bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c6bc>
    e8a4:	8809883a 	mov	r4,r17
    e8a8:	000285c0 	call	285c <__clzsi2>
    e8ac:	10800804 	addi	r2,r2,32
    e8b0:	113ffe04 	addi	r4,r2,-8
    e8b4:	00c007c4 	movi	r3,31
    e8b8:	193f850e 	bge	r3,r4,e6d0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c6d0>
    e8bc:	10bff604 	addi	r2,r2,-40
    e8c0:	8884983a 	sll	r2,r17,r2
    e8c4:	0023883a 	mov	r17,zero
    e8c8:	243f880e 	bge	r4,r16,e6ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c6ec>
    e8cc:	00ffe034 	movhi	r3,65408
    e8d0:	18ffffc4 	addi	r3,r3,-1
    e8d4:	8121c83a 	sub	r16,r16,r4
    e8d8:	10c6703a 	and	r3,r2,r3
    e8dc:	003f3406 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    e8e0:	9100004c 	andi	r4,r18,1
    e8e4:	000b883a 	mov	r5,zero
    e8e8:	0005883a 	mov	r2,zero
    e8ec:	003f4806 	br	e610 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c610>
    e8f0:	298cb03a 	or	r6,r5,r6
    e8f4:	300cc03a 	cmpne	r6,r6,zero
    e8f8:	0005883a 	mov	r2,zero
    e8fc:	003f6406 	br	e690 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c690>
    e900:	10009a1e 	bne	r2,zero,eb6c <__subdf3+0x640>
    e904:	82400044 	addi	r9,r16,1
    e908:	4881ffcc 	andi	r2,r9,2047
    e90c:	02800044 	movi	r10,1
    e910:	5080670e 	bge	r10,r2,eab0 <__subdf3+0x584>
    e914:	0081ffc4 	movi	r2,2047
    e918:	4880af26 	beq	r9,r2,ebd8 <__subdf3+0x6ac>
    e91c:	898d883a 	add	r6,r17,r6
    e920:	1945883a 	add	r2,r3,r5
    e924:	3447803a 	cmpltu	r3,r6,r17
    e928:	1887883a 	add	r3,r3,r2
    e92c:	182297fa 	slli	r17,r3,31
    e930:	300cd07a 	srli	r6,r6,1
    e934:	1806d07a 	srli	r3,r3,1
    e938:	4821883a 	mov	r16,r9
    e93c:	89a2b03a 	or	r17,r17,r6
    e940:	003f1b06 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    e944:	0101ffc4 	movi	r4,2047
    e948:	813f441e 	bne	r16,r4,e65c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c65c>
    e94c:	003f1806 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    e950:	843ff844 	addi	r16,r16,-31
    e954:	01400804 	movi	r5,32
    e958:	1408d83a 	srl	r4,r2,r16
    e95c:	19405026 	beq	r3,r5,eaa0 <__subdf3+0x574>
    e960:	01401004 	movi	r5,64
    e964:	28c7c83a 	sub	r3,r5,r3
    e968:	10c4983a 	sll	r2,r2,r3
    e96c:	88a2b03a 	or	r17,r17,r2
    e970:	8822c03a 	cmpne	r17,r17,zero
    e974:	2462b03a 	or	r17,r4,r17
    e978:	0007883a 	mov	r3,zero
    e97c:	0021883a 	mov	r16,zero
    e980:	003f6d06 	br	e738 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c738>
    e984:	11fff804 	addi	r7,r2,-32
    e988:	01000804 	movi	r4,32
    e98c:	29ced83a 	srl	r7,r5,r7
    e990:	11004526 	beq	r2,r4,eaa8 <__subdf3+0x57c>
    e994:	01001004 	movi	r4,64
    e998:	2089c83a 	sub	r4,r4,r2
    e99c:	2904983a 	sll	r2,r5,r4
    e9a0:	118cb03a 	or	r6,r2,r6
    e9a4:	300cc03a 	cmpne	r6,r6,zero
    e9a8:	398cb03a 	or	r6,r7,r6
    e9ac:	0005883a 	mov	r2,zero
    e9b0:	003f3706 	br	e690 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c690>
    e9b4:	80002a26 	beq	r16,zero,ea60 <__subdf3+0x534>
    e9b8:	0101ffc4 	movi	r4,2047
    e9bc:	49006626 	beq	r9,r4,eb58 <__subdf3+0x62c>
    e9c0:	0085c83a 	sub	r2,zero,r2
    e9c4:	18c02034 	orhi	r3,r3,128
    e9c8:	01000e04 	movi	r4,56
    e9cc:	20807e16 	blt	r4,r2,ebc8 <__subdf3+0x69c>
    e9d0:	010007c4 	movi	r4,31
    e9d4:	2080e716 	blt	r4,r2,ed74 <__subdf3+0x848>
    e9d8:	01000804 	movi	r4,32
    e9dc:	2089c83a 	sub	r4,r4,r2
    e9e0:	1914983a 	sll	r10,r3,r4
    e9e4:	8890d83a 	srl	r8,r17,r2
    e9e8:	8908983a 	sll	r4,r17,r4
    e9ec:	1884d83a 	srl	r2,r3,r2
    e9f0:	5222b03a 	or	r17,r10,r8
    e9f4:	2006c03a 	cmpne	r3,r4,zero
    e9f8:	88e2b03a 	or	r17,r17,r3
    e9fc:	3463c83a 	sub	r17,r6,r17
    ea00:	2885c83a 	sub	r2,r5,r2
    ea04:	344d803a 	cmpltu	r6,r6,r17
    ea08:	1187c83a 	sub	r3,r2,r6
    ea0c:	4821883a 	mov	r16,r9
    ea10:	3825883a 	mov	r18,r7
    ea14:	003f2306 	br	e6a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c6a4>
    ea18:	24d0b03a 	or	r8,r4,r19
    ea1c:	40001b1e 	bne	r8,zero,ea8c <__subdf3+0x560>
    ea20:	0005883a 	mov	r2,zero
    ea24:	0009883a 	mov	r4,zero
    ea28:	0021883a 	mov	r16,zero
    ea2c:	003f4906 	br	e754 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c754>
    ea30:	010007c4 	movi	r4,31
    ea34:	20803a16 	blt	r4,r2,eb20 <__subdf3+0x5f4>
    ea38:	01000804 	movi	r4,32
    ea3c:	2089c83a 	sub	r4,r4,r2
    ea40:	2912983a 	sll	r9,r5,r4
    ea44:	3090d83a 	srl	r8,r6,r2
    ea48:	3108983a 	sll	r4,r6,r4
    ea4c:	2884d83a 	srl	r2,r5,r2
    ea50:	4a12b03a 	or	r9,r9,r8
    ea54:	2008c03a 	cmpne	r4,r4,zero
    ea58:	4912b03a 	or	r9,r9,r4
    ea5c:	003f4e06 	br	e798 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c798>
    ea60:	1c48b03a 	or	r4,r3,r17
    ea64:	20003c26 	beq	r4,zero,eb58 <__subdf3+0x62c>
    ea68:	0084303a 	nor	r2,zero,r2
    ea6c:	1000381e 	bne	r2,zero,eb50 <__subdf3+0x624>
    ea70:	3463c83a 	sub	r17,r6,r17
    ea74:	28c5c83a 	sub	r2,r5,r3
    ea78:	344d803a 	cmpltu	r6,r6,r17
    ea7c:	1187c83a 	sub	r3,r2,r6
    ea80:	4821883a 	mov	r16,r9
    ea84:	3825883a 	mov	r18,r7
    ea88:	003f0606 	br	e6a4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c6a4>
    ea8c:	2023883a 	mov	r17,r4
    ea90:	003f0906 	br	e6b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c6b8>
    ea94:	0101ffc4 	movi	r4,2047
    ea98:	813f3a1e 	bne	r16,r4,e784 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c784>
    ea9c:	003ec406 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    eaa0:	0005883a 	mov	r2,zero
    eaa4:	003fb106 	br	e96c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c96c>
    eaa8:	0005883a 	mov	r2,zero
    eaac:	003fbc06 	br	e9a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c9a0>
    eab0:	1c44b03a 	or	r2,r3,r17
    eab4:	80008e1e 	bne	r16,zero,ecf0 <__subdf3+0x7c4>
    eab8:	1000c826 	beq	r2,zero,eddc <__subdf3+0x8b0>
    eabc:	2984b03a 	or	r2,r5,r6
    eac0:	103ebb26 	beq	r2,zero,e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    eac4:	8989883a 	add	r4,r17,r6
    eac8:	1945883a 	add	r2,r3,r5
    eacc:	2447803a 	cmpltu	r3,r4,r17
    ead0:	1887883a 	add	r3,r3,r2
    ead4:	1880202c 	andhi	r2,r3,128
    ead8:	2023883a 	mov	r17,r4
    eadc:	103f1626 	beq	r2,zero,e738 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c738>
    eae0:	00bfe034 	movhi	r2,65408
    eae4:	10bfffc4 	addi	r2,r2,-1
    eae8:	5021883a 	mov	r16,r10
    eaec:	1886703a 	and	r3,r3,r2
    eaf0:	003eaf06 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    eaf4:	3825883a 	mov	r18,r7
    eaf8:	003f0f06 	br	e738 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c738>
    eafc:	1c44b03a 	or	r2,r3,r17
    eb00:	8000251e 	bne	r16,zero,eb98 <__subdf3+0x66c>
    eb04:	1000661e 	bne	r2,zero,eca0 <__subdf3+0x774>
    eb08:	2990b03a 	or	r8,r5,r6
    eb0c:	40009626 	beq	r8,zero,ed68 <__subdf3+0x83c>
    eb10:	2807883a 	mov	r3,r5
    eb14:	3023883a 	mov	r17,r6
    eb18:	3825883a 	mov	r18,r7
    eb1c:	003ea406 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    eb20:	127ff804 	addi	r9,r2,-32
    eb24:	01000804 	movi	r4,32
    eb28:	2a52d83a 	srl	r9,r5,r9
    eb2c:	11008c26 	beq	r2,r4,ed60 <__subdf3+0x834>
    eb30:	01001004 	movi	r4,64
    eb34:	2085c83a 	sub	r2,r4,r2
    eb38:	2884983a 	sll	r2,r5,r2
    eb3c:	118cb03a 	or	r6,r2,r6
    eb40:	300cc03a 	cmpne	r6,r6,zero
    eb44:	4992b03a 	or	r9,r9,r6
    eb48:	0005883a 	mov	r2,zero
    eb4c:	003f1206 	br	e798 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c798>
    eb50:	0101ffc4 	movi	r4,2047
    eb54:	493f9c1e 	bne	r9,r4,e9c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c9c8>
    eb58:	2807883a 	mov	r3,r5
    eb5c:	3023883a 	mov	r17,r6
    eb60:	4821883a 	mov	r16,r9
    eb64:	3825883a 	mov	r18,r7
    eb68:	003e9106 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    eb6c:	80001f1e 	bne	r16,zero,ebec <__subdf3+0x6c0>
    eb70:	1c48b03a 	or	r4,r3,r17
    eb74:	20005a26 	beq	r4,zero,ece0 <__subdf3+0x7b4>
    eb78:	0084303a 	nor	r2,zero,r2
    eb7c:	1000561e 	bne	r2,zero,ecd8 <__subdf3+0x7ac>
    eb80:	89a3883a 	add	r17,r17,r6
    eb84:	1945883a 	add	r2,r3,r5
    eb88:	898d803a 	cmpltu	r6,r17,r6
    eb8c:	3087883a 	add	r3,r6,r2
    eb90:	4821883a 	mov	r16,r9
    eb94:	003f0506 	br	e7ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c7ac>
    eb98:	10002b1e 	bne	r2,zero,ec48 <__subdf3+0x71c>
    eb9c:	2984b03a 	or	r2,r5,r6
    eba0:	10008026 	beq	r2,zero,eda4 <__subdf3+0x878>
    eba4:	2807883a 	mov	r3,r5
    eba8:	3023883a 	mov	r17,r6
    ebac:	3825883a 	mov	r18,r7
    ebb0:	0401ffc4 	movi	r16,2047
    ebb4:	003e7e06 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    ebb8:	3809883a 	mov	r4,r7
    ebbc:	0011883a 	mov	r8,zero
    ebc0:	0005883a 	mov	r2,zero
    ebc4:	003ee306 	br	e754 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c754>
    ebc8:	1c62b03a 	or	r17,r3,r17
    ebcc:	8822c03a 	cmpne	r17,r17,zero
    ebd0:	0005883a 	mov	r2,zero
    ebd4:	003f8906 	br	e9fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c9fc>
    ebd8:	3809883a 	mov	r4,r7
    ebdc:	4821883a 	mov	r16,r9
    ebe0:	0011883a 	mov	r8,zero
    ebe4:	0005883a 	mov	r2,zero
    ebe8:	003eda06 	br	e754 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c754>
    ebec:	0101ffc4 	movi	r4,2047
    ebf0:	49003b26 	beq	r9,r4,ece0 <__subdf3+0x7b4>
    ebf4:	0085c83a 	sub	r2,zero,r2
    ebf8:	18c02034 	orhi	r3,r3,128
    ebfc:	01000e04 	movi	r4,56
    ec00:	20806e16 	blt	r4,r2,edbc <__subdf3+0x890>
    ec04:	010007c4 	movi	r4,31
    ec08:	20807716 	blt	r4,r2,ede8 <__subdf3+0x8bc>
    ec0c:	01000804 	movi	r4,32
    ec10:	2089c83a 	sub	r4,r4,r2
    ec14:	1914983a 	sll	r10,r3,r4
    ec18:	8890d83a 	srl	r8,r17,r2
    ec1c:	8908983a 	sll	r4,r17,r4
    ec20:	1884d83a 	srl	r2,r3,r2
    ec24:	5222b03a 	or	r17,r10,r8
    ec28:	2006c03a 	cmpne	r3,r4,zero
    ec2c:	88e2b03a 	or	r17,r17,r3
    ec30:	89a3883a 	add	r17,r17,r6
    ec34:	1145883a 	add	r2,r2,r5
    ec38:	898d803a 	cmpltu	r6,r17,r6
    ec3c:	3087883a 	add	r3,r6,r2
    ec40:	4821883a 	mov	r16,r9
    ec44:	003ed906 	br	e7ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c7ac>
    ec48:	2984b03a 	or	r2,r5,r6
    ec4c:	10004226 	beq	r2,zero,ed58 <__subdf3+0x82c>
    ec50:	1808d0fa 	srli	r4,r3,3
    ec54:	8822d0fa 	srli	r17,r17,3
    ec58:	1806977a 	slli	r3,r3,29
    ec5c:	2080022c 	andhi	r2,r4,8
    ec60:	1c62b03a 	or	r17,r3,r17
    ec64:	10000826 	beq	r2,zero,ec88 <__subdf3+0x75c>
    ec68:	2812d0fa 	srli	r9,r5,3
    ec6c:	4880022c 	andhi	r2,r9,8
    ec70:	1000051e 	bne	r2,zero,ec88 <__subdf3+0x75c>
    ec74:	300cd0fa 	srli	r6,r6,3
    ec78:	2804977a 	slli	r2,r5,29
    ec7c:	4809883a 	mov	r4,r9
    ec80:	3825883a 	mov	r18,r7
    ec84:	11a2b03a 	or	r17,r2,r6
    ec88:	8806d77a 	srli	r3,r17,29
    ec8c:	200890fa 	slli	r4,r4,3
    ec90:	882290fa 	slli	r17,r17,3
    ec94:	0401ffc4 	movi	r16,2047
    ec98:	1906b03a 	or	r3,r3,r4
    ec9c:	003e4406 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    eca0:	2984b03a 	or	r2,r5,r6
    eca4:	103e4226 	beq	r2,zero,e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    eca8:	8989c83a 	sub	r4,r17,r6
    ecac:	8911803a 	cmpltu	r8,r17,r4
    ecb0:	1945c83a 	sub	r2,r3,r5
    ecb4:	1205c83a 	sub	r2,r2,r8
    ecb8:	1200202c 	andhi	r8,r2,128
    ecbc:	403e9a26 	beq	r8,zero,e728 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c728>
    ecc0:	3463c83a 	sub	r17,r6,r17
    ecc4:	28c5c83a 	sub	r2,r5,r3
    ecc8:	344d803a 	cmpltu	r6,r6,r17
    eccc:	1187c83a 	sub	r3,r2,r6
    ecd0:	3825883a 	mov	r18,r7
    ecd4:	003e3606 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    ecd8:	0101ffc4 	movi	r4,2047
    ecdc:	493fc71e 	bne	r9,r4,ebfc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cbfc>
    ece0:	2807883a 	mov	r3,r5
    ece4:	3023883a 	mov	r17,r6
    ece8:	4821883a 	mov	r16,r9
    ecec:	003e3006 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    ecf0:	10003626 	beq	r2,zero,edcc <__subdf3+0x8a0>
    ecf4:	2984b03a 	or	r2,r5,r6
    ecf8:	10001726 	beq	r2,zero,ed58 <__subdf3+0x82c>
    ecfc:	1808d0fa 	srli	r4,r3,3
    ed00:	8822d0fa 	srli	r17,r17,3
    ed04:	1806977a 	slli	r3,r3,29
    ed08:	2080022c 	andhi	r2,r4,8
    ed0c:	1c62b03a 	or	r17,r3,r17
    ed10:	10000726 	beq	r2,zero,ed30 <__subdf3+0x804>
    ed14:	2812d0fa 	srli	r9,r5,3
    ed18:	4880022c 	andhi	r2,r9,8
    ed1c:	1000041e 	bne	r2,zero,ed30 <__subdf3+0x804>
    ed20:	300cd0fa 	srli	r6,r6,3
    ed24:	2804977a 	slli	r2,r5,29
    ed28:	4809883a 	mov	r4,r9
    ed2c:	11a2b03a 	or	r17,r2,r6
    ed30:	8806d77a 	srli	r3,r17,29
    ed34:	200890fa 	slli	r4,r4,3
    ed38:	882290fa 	slli	r17,r17,3
    ed3c:	3825883a 	mov	r18,r7
    ed40:	1906b03a 	or	r3,r3,r4
    ed44:	0401ffc4 	movi	r16,2047
    ed48:	003e1906 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    ed4c:	000b883a 	mov	r5,zero
    ed50:	0005883a 	mov	r2,zero
    ed54:	003e2e06 	br	e610 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c610>
    ed58:	0401ffc4 	movi	r16,2047
    ed5c:	003e1406 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    ed60:	0005883a 	mov	r2,zero
    ed64:	003f7506 	br	eb3c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cb3c>
    ed68:	0005883a 	mov	r2,zero
    ed6c:	0009883a 	mov	r4,zero
    ed70:	003e7806 	br	e754 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c754>
    ed74:	123ff804 	addi	r8,r2,-32
    ed78:	01000804 	movi	r4,32
    ed7c:	1a10d83a 	srl	r8,r3,r8
    ed80:	11002526 	beq	r2,r4,ee18 <__subdf3+0x8ec>
    ed84:	01001004 	movi	r4,64
    ed88:	2085c83a 	sub	r2,r4,r2
    ed8c:	1884983a 	sll	r2,r3,r2
    ed90:	1444b03a 	or	r2,r2,r17
    ed94:	1004c03a 	cmpne	r2,r2,zero
    ed98:	40a2b03a 	or	r17,r8,r2
    ed9c:	0005883a 	mov	r2,zero
    eda0:	003f1606 	br	e9fc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c9fc>
    eda4:	02000434 	movhi	r8,16
    eda8:	0009883a 	mov	r4,zero
    edac:	423fffc4 	addi	r8,r8,-1
    edb0:	00bfffc4 	movi	r2,-1
    edb4:	0401ffc4 	movi	r16,2047
    edb8:	003e6606 	br	e754 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c754>
    edbc:	1c62b03a 	or	r17,r3,r17
    edc0:	8822c03a 	cmpne	r17,r17,zero
    edc4:	0005883a 	mov	r2,zero
    edc8:	003f9906 	br	ec30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cc30>
    edcc:	2807883a 	mov	r3,r5
    edd0:	3023883a 	mov	r17,r6
    edd4:	0401ffc4 	movi	r16,2047
    edd8:	003df506 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    eddc:	2807883a 	mov	r3,r5
    ede0:	3023883a 	mov	r17,r6
    ede4:	003df206 	br	e5b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153c5b0>
    ede8:	123ff804 	addi	r8,r2,-32
    edec:	01000804 	movi	r4,32
    edf0:	1a10d83a 	srl	r8,r3,r8
    edf4:	11000a26 	beq	r2,r4,ee20 <__subdf3+0x8f4>
    edf8:	01001004 	movi	r4,64
    edfc:	2085c83a 	sub	r2,r4,r2
    ee00:	1884983a 	sll	r2,r3,r2
    ee04:	1444b03a 	or	r2,r2,r17
    ee08:	1004c03a 	cmpne	r2,r2,zero
    ee0c:	40a2b03a 	or	r17,r8,r2
    ee10:	0005883a 	mov	r2,zero
    ee14:	003f8606 	br	ec30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cc30>
    ee18:	0005883a 	mov	r2,zero
    ee1c:	003fdc06 	br	ed90 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cd90>
    ee20:	0005883a 	mov	r2,zero
    ee24:	003ff706 	br	ee04 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153ce04>

0000ee28 <__fixdfsi>:
    ee28:	280cd53a 	srli	r6,r5,20
    ee2c:	00c00434 	movhi	r3,16
    ee30:	18ffffc4 	addi	r3,r3,-1
    ee34:	3181ffcc 	andi	r6,r6,2047
    ee38:	01c0ff84 	movi	r7,1022
    ee3c:	28c6703a 	and	r3,r5,r3
    ee40:	280ad7fa 	srli	r5,r5,31
    ee44:	3980120e 	bge	r7,r6,ee90 <__fixdfsi+0x68>
    ee48:	00810744 	movi	r2,1053
    ee4c:	11800c16 	blt	r2,r6,ee80 <__fixdfsi+0x58>
    ee50:	00810cc4 	movi	r2,1075
    ee54:	1185c83a 	sub	r2,r2,r6
    ee58:	01c007c4 	movi	r7,31
    ee5c:	18c00434 	orhi	r3,r3,16
    ee60:	38800d16 	blt	r7,r2,ee98 <__fixdfsi+0x70>
    ee64:	31befb44 	addi	r6,r6,-1043
    ee68:	2084d83a 	srl	r2,r4,r2
    ee6c:	1986983a 	sll	r3,r3,r6
    ee70:	1884b03a 	or	r2,r3,r2
    ee74:	28000726 	beq	r5,zero,ee94 <__fixdfsi+0x6c>
    ee78:	0085c83a 	sub	r2,zero,r2
    ee7c:	f800283a 	ret
    ee80:	00a00034 	movhi	r2,32768
    ee84:	10bfffc4 	addi	r2,r2,-1
    ee88:	2885883a 	add	r2,r5,r2
    ee8c:	f800283a 	ret
    ee90:	0005883a 	mov	r2,zero
    ee94:	f800283a 	ret
    ee98:	008104c4 	movi	r2,1043
    ee9c:	1185c83a 	sub	r2,r2,r6
    eea0:	1884d83a 	srl	r2,r3,r2
    eea4:	003ff306 	br	ee74 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153ce74>

0000eea8 <__floatsidf>:
    eea8:	defffd04 	addi	sp,sp,-12
    eeac:	dfc00215 	stw	ra,8(sp)
    eeb0:	dc400115 	stw	r17,4(sp)
    eeb4:	dc000015 	stw	r16,0(sp)
    eeb8:	20002b26 	beq	r4,zero,ef68 <__floatsidf+0xc0>
    eebc:	2023883a 	mov	r17,r4
    eec0:	2020d7fa 	srli	r16,r4,31
    eec4:	20002d16 	blt	r4,zero,ef7c <__floatsidf+0xd4>
    eec8:	8809883a 	mov	r4,r17
    eecc:	000285c0 	call	285c <__clzsi2>
    eed0:	01410784 	movi	r5,1054
    eed4:	288bc83a 	sub	r5,r5,r2
    eed8:	01010cc4 	movi	r4,1075
    eedc:	2149c83a 	sub	r4,r4,r5
    eee0:	00c007c4 	movi	r3,31
    eee4:	1900160e 	bge	r3,r4,ef40 <__floatsidf+0x98>
    eee8:	00c104c4 	movi	r3,1043
    eeec:	1947c83a 	sub	r3,r3,r5
    eef0:	88c6983a 	sll	r3,r17,r3
    eef4:	00800434 	movhi	r2,16
    eef8:	10bfffc4 	addi	r2,r2,-1
    eefc:	1886703a 	and	r3,r3,r2
    ef00:	2941ffcc 	andi	r5,r5,2047
    ef04:	800d883a 	mov	r6,r16
    ef08:	0005883a 	mov	r2,zero
    ef0c:	280a953a 	slli	r5,r5,20
    ef10:	31803fcc 	andi	r6,r6,255
    ef14:	01000434 	movhi	r4,16
    ef18:	300c97fa 	slli	r6,r6,31
    ef1c:	213fffc4 	addi	r4,r4,-1
    ef20:	1906703a 	and	r3,r3,r4
    ef24:	1946b03a 	or	r3,r3,r5
    ef28:	1986b03a 	or	r3,r3,r6
    ef2c:	dfc00217 	ldw	ra,8(sp)
    ef30:	dc400117 	ldw	r17,4(sp)
    ef34:	dc000017 	ldw	r16,0(sp)
    ef38:	dec00304 	addi	sp,sp,12
    ef3c:	f800283a 	ret
    ef40:	00c002c4 	movi	r3,11
    ef44:	1887c83a 	sub	r3,r3,r2
    ef48:	88c6d83a 	srl	r3,r17,r3
    ef4c:	8904983a 	sll	r2,r17,r4
    ef50:	01000434 	movhi	r4,16
    ef54:	213fffc4 	addi	r4,r4,-1
    ef58:	2941ffcc 	andi	r5,r5,2047
    ef5c:	1906703a 	and	r3,r3,r4
    ef60:	800d883a 	mov	r6,r16
    ef64:	003fe906 	br	ef0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cf0c>
    ef68:	000d883a 	mov	r6,zero
    ef6c:	000b883a 	mov	r5,zero
    ef70:	0007883a 	mov	r3,zero
    ef74:	0005883a 	mov	r2,zero
    ef78:	003fe406 	br	ef0c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cf0c>
    ef7c:	0123c83a 	sub	r17,zero,r4
    ef80:	003fd106 	br	eec8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cec8>

0000ef84 <__floatunsidf>:
    ef84:	defffe04 	addi	sp,sp,-8
    ef88:	dc000015 	stw	r16,0(sp)
    ef8c:	dfc00115 	stw	ra,4(sp)
    ef90:	2021883a 	mov	r16,r4
    ef94:	20002226 	beq	r4,zero,f020 <__floatunsidf+0x9c>
    ef98:	000285c0 	call	285c <__clzsi2>
    ef9c:	01010784 	movi	r4,1054
    efa0:	2089c83a 	sub	r4,r4,r2
    efa4:	01810cc4 	movi	r6,1075
    efa8:	310dc83a 	sub	r6,r6,r4
    efac:	00c007c4 	movi	r3,31
    efb0:	1980120e 	bge	r3,r6,effc <__floatunsidf+0x78>
    efb4:	00c104c4 	movi	r3,1043
    efb8:	1907c83a 	sub	r3,r3,r4
    efbc:	80ca983a 	sll	r5,r16,r3
    efc0:	00800434 	movhi	r2,16
    efc4:	10bfffc4 	addi	r2,r2,-1
    efc8:	2101ffcc 	andi	r4,r4,2047
    efcc:	0021883a 	mov	r16,zero
    efd0:	288a703a 	and	r5,r5,r2
    efd4:	2008953a 	slli	r4,r4,20
    efd8:	00c00434 	movhi	r3,16
    efdc:	18ffffc4 	addi	r3,r3,-1
    efe0:	28c6703a 	and	r3,r5,r3
    efe4:	8005883a 	mov	r2,r16
    efe8:	1906b03a 	or	r3,r3,r4
    efec:	dfc00117 	ldw	ra,4(sp)
    eff0:	dc000017 	ldw	r16,0(sp)
    eff4:	dec00204 	addi	sp,sp,8
    eff8:	f800283a 	ret
    effc:	00c002c4 	movi	r3,11
    f000:	188bc83a 	sub	r5,r3,r2
    f004:	814ad83a 	srl	r5,r16,r5
    f008:	00c00434 	movhi	r3,16
    f00c:	18ffffc4 	addi	r3,r3,-1
    f010:	81a0983a 	sll	r16,r16,r6
    f014:	2101ffcc 	andi	r4,r4,2047
    f018:	28ca703a 	and	r5,r5,r3
    f01c:	003fed06 	br	efd4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cfd4>
    f020:	0009883a 	mov	r4,zero
    f024:	000b883a 	mov	r5,zero
    f028:	003fea06 	br	efd4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153cfd4>

0000f02c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f02c:	defffe04 	addi	sp,sp,-8
    f030:	dfc00115 	stw	ra,4(sp)
    f034:	df000015 	stw	fp,0(sp)
    f038:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f03c:	d0a01417 	ldw	r2,-32688(gp)
    f040:	10000326 	beq	r2,zero,f050 <alt_get_errno+0x24>
    f044:	d0a01417 	ldw	r2,-32688(gp)
    f048:	103ee83a 	callr	r2
    f04c:	00000106 	br	f054 <alt_get_errno+0x28>
    f050:	d0a77a04 	addi	r2,gp,-25112
}
    f054:	e037883a 	mov	sp,fp
    f058:	dfc00117 	ldw	ra,4(sp)
    f05c:	df000017 	ldw	fp,0(sp)
    f060:	dec00204 	addi	sp,sp,8
    f064:	f800283a 	ret

0000f068 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f068:	defffb04 	addi	sp,sp,-20
    f06c:	dfc00415 	stw	ra,16(sp)
    f070:	df000315 	stw	fp,12(sp)
    f074:	df000304 	addi	fp,sp,12
    f078:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f07c:	e0bfff17 	ldw	r2,-4(fp)
    f080:	10000816 	blt	r2,zero,f0a4 <close+0x3c>
    f084:	01400304 	movi	r5,12
    f088:	e13fff17 	ldw	r4,-4(fp)
    f08c:	00020100 	call	2010 <__mulsi3>
    f090:	1007883a 	mov	r3,r2
    f094:	00800074 	movhi	r2,1
    f098:	10968604 	addi	r2,r2,23064
    f09c:	1885883a 	add	r2,r3,r2
    f0a0:	00000106 	br	f0a8 <close+0x40>
    f0a4:	0005883a 	mov	r2,zero
    f0a8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f0ac:	e0bffd17 	ldw	r2,-12(fp)
    f0b0:	10001926 	beq	r2,zero,f118 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f0b4:	e0bffd17 	ldw	r2,-12(fp)
    f0b8:	10800017 	ldw	r2,0(r2)
    f0bc:	10800417 	ldw	r2,16(r2)
    f0c0:	10000626 	beq	r2,zero,f0dc <close+0x74>
    f0c4:	e0bffd17 	ldw	r2,-12(fp)
    f0c8:	10800017 	ldw	r2,0(r2)
    f0cc:	10800417 	ldw	r2,16(r2)
    f0d0:	e13ffd17 	ldw	r4,-12(fp)
    f0d4:	103ee83a 	callr	r2
    f0d8:	00000106 	br	f0e0 <close+0x78>
    f0dc:	0005883a 	mov	r2,zero
    f0e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f0e4:	e13fff17 	ldw	r4,-4(fp)
    f0e8:	000f9f00 	call	f9f0 <alt_release_fd>
    if (rval < 0)
    f0ec:	e0bffe17 	ldw	r2,-8(fp)
    f0f0:	1000070e 	bge	r2,zero,f110 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f0f4:	000f02c0 	call	f02c <alt_get_errno>
    f0f8:	1007883a 	mov	r3,r2
    f0fc:	e0bffe17 	ldw	r2,-8(fp)
    f100:	0085c83a 	sub	r2,zero,r2
    f104:	18800015 	stw	r2,0(r3)
      return -1;
    f108:	00bfffc4 	movi	r2,-1
    f10c:	00000706 	br	f12c <close+0xc4>
    }
    return 0;
    f110:	0005883a 	mov	r2,zero
    f114:	00000506 	br	f12c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f118:	000f02c0 	call	f02c <alt_get_errno>
    f11c:	1007883a 	mov	r3,r2
    f120:	00801444 	movi	r2,81
    f124:	18800015 	stw	r2,0(r3)
    return -1;
    f128:	00bfffc4 	movi	r2,-1
  }
}
    f12c:	e037883a 	mov	sp,fp
    f130:	dfc00117 	ldw	ra,4(sp)
    f134:	df000017 	ldw	fp,0(sp)
    f138:	dec00204 	addi	sp,sp,8
    f13c:	f800283a 	ret

0000f140 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f140:	defffc04 	addi	sp,sp,-16
    f144:	df000315 	stw	fp,12(sp)
    f148:	df000304 	addi	fp,sp,12
    f14c:	e13ffd15 	stw	r4,-12(fp)
    f150:	e17ffe15 	stw	r5,-8(fp)
    f154:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f158:	e0bfff17 	ldw	r2,-4(fp)
}
    f15c:	e037883a 	mov	sp,fp
    f160:	df000017 	ldw	fp,0(sp)
    f164:	dec00104 	addi	sp,sp,4
    f168:	f800283a 	ret

0000f16c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f16c:	defffe04 	addi	sp,sp,-8
    f170:	dfc00115 	stw	ra,4(sp)
    f174:	df000015 	stw	fp,0(sp)
    f178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f17c:	d0a01417 	ldw	r2,-32688(gp)
    f180:	10000326 	beq	r2,zero,f190 <alt_get_errno+0x24>
    f184:	d0a01417 	ldw	r2,-32688(gp)
    f188:	103ee83a 	callr	r2
    f18c:	00000106 	br	f194 <alt_get_errno+0x28>
    f190:	d0a77a04 	addi	r2,gp,-25112
}
    f194:	e037883a 	mov	sp,fp
    f198:	dfc00117 	ldw	ra,4(sp)
    f19c:	df000017 	ldw	fp,0(sp)
    f1a0:	dec00204 	addi	sp,sp,8
    f1a4:	f800283a 	ret

0000f1a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f1a8:	defffb04 	addi	sp,sp,-20
    f1ac:	dfc00415 	stw	ra,16(sp)
    f1b0:	df000315 	stw	fp,12(sp)
    f1b4:	df000304 	addi	fp,sp,12
    f1b8:	e13ffe15 	stw	r4,-8(fp)
    f1bc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f1c0:	e0bffe17 	ldw	r2,-8(fp)
    f1c4:	10000816 	blt	r2,zero,f1e8 <fstat+0x40>
    f1c8:	01400304 	movi	r5,12
    f1cc:	e13ffe17 	ldw	r4,-8(fp)
    f1d0:	00020100 	call	2010 <__mulsi3>
    f1d4:	1007883a 	mov	r3,r2
    f1d8:	00800074 	movhi	r2,1
    f1dc:	10968604 	addi	r2,r2,23064
    f1e0:	1885883a 	add	r2,r3,r2
    f1e4:	00000106 	br	f1ec <fstat+0x44>
    f1e8:	0005883a 	mov	r2,zero
    f1ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f1f0:	e0bffd17 	ldw	r2,-12(fp)
    f1f4:	10001026 	beq	r2,zero,f238 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f1f8:	e0bffd17 	ldw	r2,-12(fp)
    f1fc:	10800017 	ldw	r2,0(r2)
    f200:	10800817 	ldw	r2,32(r2)
    f204:	10000726 	beq	r2,zero,f224 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f208:	e0bffd17 	ldw	r2,-12(fp)
    f20c:	10800017 	ldw	r2,0(r2)
    f210:	10800817 	ldw	r2,32(r2)
    f214:	e17fff17 	ldw	r5,-4(fp)
    f218:	e13ffd17 	ldw	r4,-12(fp)
    f21c:	103ee83a 	callr	r2
    f220:	00000a06 	br	f24c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f224:	e0bfff17 	ldw	r2,-4(fp)
    f228:	00c80004 	movi	r3,8192
    f22c:	10c00115 	stw	r3,4(r2)
      return 0;
    f230:	0005883a 	mov	r2,zero
    f234:	00000506 	br	f24c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f238:	000f16c0 	call	f16c <alt_get_errno>
    f23c:	1007883a 	mov	r3,r2
    f240:	00801444 	movi	r2,81
    f244:	18800015 	stw	r2,0(r3)
    return -1;
    f248:	00bfffc4 	movi	r2,-1
  }
}
    f24c:	e037883a 	mov	sp,fp
    f250:	dfc00117 	ldw	ra,4(sp)
    f254:	df000017 	ldw	fp,0(sp)
    f258:	dec00204 	addi	sp,sp,8
    f25c:	f800283a 	ret

0000f260 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f260:	defff904 	addi	sp,sp,-28
    f264:	dfc00615 	stw	ra,24(sp)
    f268:	df000515 	stw	fp,20(sp)
    f26c:	df000504 	addi	fp,sp,20
    f270:	e13ffc15 	stw	r4,-16(fp)
    f274:	e17ffd15 	stw	r5,-12(fp)
    f278:	e1bffe15 	stw	r6,-8(fp)
    f27c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f280:	e0800217 	ldw	r2,8(fp)
    f284:	d8800015 	stw	r2,0(sp)
    f288:	e1ffff17 	ldw	r7,-4(fp)
    f28c:	e1bffe17 	ldw	r6,-8(fp)
    f290:	e17ffd17 	ldw	r5,-12(fp)
    f294:	e13ffc17 	ldw	r4,-16(fp)
    f298:	000f4100 	call	f410 <alt_iic_isr_register>
}  
    f29c:	e037883a 	mov	sp,fp
    f2a0:	dfc00117 	ldw	ra,4(sp)
    f2a4:	df000017 	ldw	fp,0(sp)
    f2a8:	dec00204 	addi	sp,sp,8
    f2ac:	f800283a 	ret

0000f2b0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    f2b0:	defff904 	addi	sp,sp,-28
    f2b4:	df000615 	stw	fp,24(sp)
    f2b8:	df000604 	addi	fp,sp,24
    f2bc:	e13ffe15 	stw	r4,-8(fp)
    f2c0:	e17fff15 	stw	r5,-4(fp)
    f2c4:	e0bfff17 	ldw	r2,-4(fp)
    f2c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2cc:	0005303a 	rdctl	r2,status
    f2d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2d4:	e0fffb17 	ldw	r3,-20(fp)
    f2d8:	00bfff84 	movi	r2,-2
    f2dc:	1884703a 	and	r2,r3,r2
    f2e0:	1001703a 	wrctl	status,r2
  
  return context;
    f2e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f2e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    f2ec:	00c00044 	movi	r3,1
    f2f0:	e0bffa17 	ldw	r2,-24(fp)
    f2f4:	1884983a 	sll	r2,r3,r2
    f2f8:	1007883a 	mov	r3,r2
    f2fc:	d0a77e17 	ldw	r2,-25096(gp)
    f300:	1884b03a 	or	r2,r3,r2
    f304:	d0a77e15 	stw	r2,-25096(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f308:	d0a77e17 	ldw	r2,-25096(gp)
    f30c:	100170fa 	wrctl	ienable,r2
    f310:	e0bffc17 	ldw	r2,-16(fp)
    f314:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f318:	e0bffd17 	ldw	r2,-12(fp)
    f31c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f320:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    f324:	0001883a 	nop
}
    f328:	e037883a 	mov	sp,fp
    f32c:	df000017 	ldw	fp,0(sp)
    f330:	dec00104 	addi	sp,sp,4
    f334:	f800283a 	ret

0000f338 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    f338:	defff904 	addi	sp,sp,-28
    f33c:	df000615 	stw	fp,24(sp)
    f340:	df000604 	addi	fp,sp,24
    f344:	e13ffe15 	stw	r4,-8(fp)
    f348:	e17fff15 	stw	r5,-4(fp)
    f34c:	e0bfff17 	ldw	r2,-4(fp)
    f350:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f354:	0005303a 	rdctl	r2,status
    f358:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f35c:	e0fffb17 	ldw	r3,-20(fp)
    f360:	00bfff84 	movi	r2,-2
    f364:	1884703a 	and	r2,r3,r2
    f368:	1001703a 	wrctl	status,r2
  
  return context;
    f36c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f370:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    f374:	00c00044 	movi	r3,1
    f378:	e0bffa17 	ldw	r2,-24(fp)
    f37c:	1884983a 	sll	r2,r3,r2
    f380:	0084303a 	nor	r2,zero,r2
    f384:	1007883a 	mov	r3,r2
    f388:	d0a77e17 	ldw	r2,-25096(gp)
    f38c:	1884703a 	and	r2,r3,r2
    f390:	d0a77e15 	stw	r2,-25096(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f394:	d0a77e17 	ldw	r2,-25096(gp)
    f398:	100170fa 	wrctl	ienable,r2
    f39c:	e0bffc17 	ldw	r2,-16(fp)
    f3a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f3a4:	e0bffd17 	ldw	r2,-12(fp)
    f3a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f3ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    f3b0:	0001883a 	nop
}
    f3b4:	e037883a 	mov	sp,fp
    f3b8:	df000017 	ldw	fp,0(sp)
    f3bc:	dec00104 	addi	sp,sp,4
    f3c0:	f800283a 	ret

0000f3c4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    f3c4:	defffc04 	addi	sp,sp,-16
    f3c8:	df000315 	stw	fp,12(sp)
    f3cc:	df000304 	addi	fp,sp,12
    f3d0:	e13ffe15 	stw	r4,-8(fp)
    f3d4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f3d8:	000530fa 	rdctl	r2,ienable
    f3dc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f3e0:	00c00044 	movi	r3,1
    f3e4:	e0bfff17 	ldw	r2,-4(fp)
    f3e8:	1884983a 	sll	r2,r3,r2
    f3ec:	1007883a 	mov	r3,r2
    f3f0:	e0bffd17 	ldw	r2,-12(fp)
    f3f4:	1884703a 	and	r2,r3,r2
    f3f8:	1004c03a 	cmpne	r2,r2,zero
    f3fc:	10803fcc 	andi	r2,r2,255
}
    f400:	e037883a 	mov	sp,fp
    f404:	df000017 	ldw	fp,0(sp)
    f408:	dec00104 	addi	sp,sp,4
    f40c:	f800283a 	ret

0000f410 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f410:	defff504 	addi	sp,sp,-44
    f414:	dfc00a15 	stw	ra,40(sp)
    f418:	df000915 	stw	fp,36(sp)
    f41c:	df000904 	addi	fp,sp,36
    f420:	e13ffc15 	stw	r4,-16(fp)
    f424:	e17ffd15 	stw	r5,-12(fp)
    f428:	e1bffe15 	stw	r6,-8(fp)
    f42c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    f430:	00bffa84 	movi	r2,-22
    f434:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    f438:	e0bffd17 	ldw	r2,-12(fp)
    f43c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f440:	e0bff817 	ldw	r2,-32(fp)
    f444:	10800808 	cmpgei	r2,r2,32
    f448:	1000271e 	bne	r2,zero,f4e8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f44c:	0005303a 	rdctl	r2,status
    f450:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f454:	e0fffb17 	ldw	r3,-20(fp)
    f458:	00bfff84 	movi	r2,-2
    f45c:	1884703a 	and	r2,r3,r2
    f460:	1001703a 	wrctl	status,r2
  
  return context;
    f464:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    f468:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    f46c:	008000b4 	movhi	r2,2
    f470:	10a30f04 	addi	r2,r2,-29636
    f474:	e0fff817 	ldw	r3,-32(fp)
    f478:	180690fa 	slli	r3,r3,3
    f47c:	10c5883a 	add	r2,r2,r3
    f480:	e0fffe17 	ldw	r3,-8(fp)
    f484:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    f488:	008000b4 	movhi	r2,2
    f48c:	10a30f04 	addi	r2,r2,-29636
    f490:	e0fff817 	ldw	r3,-32(fp)
    f494:	180690fa 	slli	r3,r3,3
    f498:	10c5883a 	add	r2,r2,r3
    f49c:	10800104 	addi	r2,r2,4
    f4a0:	e0ffff17 	ldw	r3,-4(fp)
    f4a4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f4a8:	e0bffe17 	ldw	r2,-8(fp)
    f4ac:	10000526 	beq	r2,zero,f4c4 <alt_iic_isr_register+0xb4>
    f4b0:	e0bff817 	ldw	r2,-32(fp)
    f4b4:	100b883a 	mov	r5,r2
    f4b8:	e13ffc17 	ldw	r4,-16(fp)
    f4bc:	000f2b00 	call	f2b0 <alt_ic_irq_enable>
    f4c0:	00000406 	br	f4d4 <alt_iic_isr_register+0xc4>
    f4c4:	e0bff817 	ldw	r2,-32(fp)
    f4c8:	100b883a 	mov	r5,r2
    f4cc:	e13ffc17 	ldw	r4,-16(fp)
    f4d0:	000f3380 	call	f338 <alt_ic_irq_disable>
    f4d4:	e0bff715 	stw	r2,-36(fp)
    f4d8:	e0bffa17 	ldw	r2,-24(fp)
    f4dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4e0:	e0bff917 	ldw	r2,-28(fp)
    f4e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    f4e8:	e0bff717 	ldw	r2,-36(fp)
}
    f4ec:	e037883a 	mov	sp,fp
    f4f0:	dfc00117 	ldw	ra,4(sp)
    f4f4:	df000017 	ldw	fp,0(sp)
    f4f8:	dec00204 	addi	sp,sp,8
    f4fc:	f800283a 	ret

0000f500 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f500:	defffe04 	addi	sp,sp,-8
    f504:	dfc00115 	stw	ra,4(sp)
    f508:	df000015 	stw	fp,0(sp)
    f50c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f510:	d0a01417 	ldw	r2,-32688(gp)
    f514:	10000326 	beq	r2,zero,f524 <alt_get_errno+0x24>
    f518:	d0a01417 	ldw	r2,-32688(gp)
    f51c:	103ee83a 	callr	r2
    f520:	00000106 	br	f528 <alt_get_errno+0x28>
    f524:	d0a77a04 	addi	r2,gp,-25112
}
    f528:	e037883a 	mov	sp,fp
    f52c:	dfc00117 	ldw	ra,4(sp)
    f530:	df000017 	ldw	fp,0(sp)
    f534:	dec00204 	addi	sp,sp,8
    f538:	f800283a 	ret

0000f53c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f53c:	deffed04 	addi	sp,sp,-76
    f540:	dfc01215 	stw	ra,72(sp)
    f544:	df001115 	stw	fp,68(sp)
    f548:	df001104 	addi	fp,sp,68
    f54c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f550:	e0bfff17 	ldw	r2,-4(fp)
    f554:	10000816 	blt	r2,zero,f578 <isatty+0x3c>
    f558:	01400304 	movi	r5,12
    f55c:	e13fff17 	ldw	r4,-4(fp)
    f560:	00020100 	call	2010 <__mulsi3>
    f564:	1007883a 	mov	r3,r2
    f568:	00800074 	movhi	r2,1
    f56c:	10968604 	addi	r2,r2,23064
    f570:	1885883a 	add	r2,r3,r2
    f574:	00000106 	br	f57c <isatty+0x40>
    f578:	0005883a 	mov	r2,zero
    f57c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f580:	e0bfef17 	ldw	r2,-68(fp)
    f584:	10000e26 	beq	r2,zero,f5c0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f588:	e0bfef17 	ldw	r2,-68(fp)
    f58c:	10800017 	ldw	r2,0(r2)
    f590:	10800817 	ldw	r2,32(r2)
    f594:	1000021e 	bne	r2,zero,f5a0 <isatty+0x64>
    {
      return 1;
    f598:	00800044 	movi	r2,1
    f59c:	00000d06 	br	f5d4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f5a0:	e0bff004 	addi	r2,fp,-64
    f5a4:	100b883a 	mov	r5,r2
    f5a8:	e13fff17 	ldw	r4,-4(fp)
    f5ac:	000f1a80 	call	f1a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f5b0:	e0bff117 	ldw	r2,-60(fp)
    f5b4:	10880020 	cmpeqi	r2,r2,8192
    f5b8:	10803fcc 	andi	r2,r2,255
    f5bc:	00000506 	br	f5d4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f5c0:	000f5000 	call	f500 <alt_get_errno>
    f5c4:	1007883a 	mov	r3,r2
    f5c8:	00801444 	movi	r2,81
    f5cc:	18800015 	stw	r2,0(r3)
    return 0;
    f5d0:	0005883a 	mov	r2,zero
  }
}
    f5d4:	e037883a 	mov	sp,fp
    f5d8:	dfc00117 	ldw	ra,4(sp)
    f5dc:	df000017 	ldw	fp,0(sp)
    f5e0:	dec00204 	addi	sp,sp,8
    f5e4:	f800283a 	ret

0000f5e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f5e8:	defffc04 	addi	sp,sp,-16
    f5ec:	df000315 	stw	fp,12(sp)
    f5f0:	df000304 	addi	fp,sp,12
    f5f4:	e13ffd15 	stw	r4,-12(fp)
    f5f8:	e17ffe15 	stw	r5,-8(fp)
    f5fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f600:	e0fffe17 	ldw	r3,-8(fp)
    f604:	e0bffd17 	ldw	r2,-12(fp)
    f608:	18800c26 	beq	r3,r2,f63c <alt_load_section+0x54>
  {
    while( to != end )
    f60c:	00000806 	br	f630 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f610:	e0bffe17 	ldw	r2,-8(fp)
    f614:	10c00104 	addi	r3,r2,4
    f618:	e0fffe15 	stw	r3,-8(fp)
    f61c:	e0fffd17 	ldw	r3,-12(fp)
    f620:	19000104 	addi	r4,r3,4
    f624:	e13ffd15 	stw	r4,-12(fp)
    f628:	18c00017 	ldw	r3,0(r3)
    f62c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f630:	e0fffe17 	ldw	r3,-8(fp)
    f634:	e0bfff17 	ldw	r2,-4(fp)
    f638:	18bff51e 	bne	r3,r2,f610 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153d610>
    {
      *to++ = *from++;
    }
  }
}
    f63c:	0001883a 	nop
    f640:	e037883a 	mov	sp,fp
    f644:	df000017 	ldw	fp,0(sp)
    f648:	dec00104 	addi	sp,sp,4
    f64c:	f800283a 	ret

0000f650 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f650:	defffe04 	addi	sp,sp,-8
    f654:	dfc00115 	stw	ra,4(sp)
    f658:	df000015 	stw	fp,0(sp)
    f65c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f660:	01800074 	movhi	r6,1
    f664:	319b9d04 	addi	r6,r6,28276
    f668:	01400074 	movhi	r5,1
    f66c:	29545304 	addi	r5,r5,20812
    f670:	01000074 	movhi	r4,1
    f674:	211b9d04 	addi	r4,r4,28276
    f678:	000f5e80 	call	f5e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f67c:	01800034 	movhi	r6,0
    f680:	31808c04 	addi	r6,r6,560
    f684:	01400034 	movhi	r5,0
    f688:	29400804 	addi	r5,r5,32
    f68c:	01000034 	movhi	r4,0
    f690:	21000804 	addi	r4,r4,32
    f694:	000f5e80 	call	f5e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f698:	01800074 	movhi	r6,1
    f69c:	31945304 	addi	r6,r6,20812
    f6a0:	01400074 	movhi	r5,1
    f6a4:	2952b704 	addi	r5,r5,19164
    f6a8:	01000074 	movhi	r4,1
    f6ac:	2112b704 	addi	r4,r4,19164
    f6b0:	000f5e80 	call	f5e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f6b4:	001379c0 	call	1379c <alt_dcache_flush_all>
  alt_icache_flush_all();
    f6b8:	00139ec0 	call	139ec <alt_icache_flush_all>
}
    f6bc:	0001883a 	nop
    f6c0:	e037883a 	mov	sp,fp
    f6c4:	dfc00117 	ldw	ra,4(sp)
    f6c8:	df000017 	ldw	fp,0(sp)
    f6cc:	dec00204 	addi	sp,sp,8
    f6d0:	f800283a 	ret

0000f6d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f6d4:	defffe04 	addi	sp,sp,-8
    f6d8:	dfc00115 	stw	ra,4(sp)
    f6dc:	df000015 	stw	fp,0(sp)
    f6e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f6e4:	d0a01417 	ldw	r2,-32688(gp)
    f6e8:	10000326 	beq	r2,zero,f6f8 <alt_get_errno+0x24>
    f6ec:	d0a01417 	ldw	r2,-32688(gp)
    f6f0:	103ee83a 	callr	r2
    f6f4:	00000106 	br	f6fc <alt_get_errno+0x28>
    f6f8:	d0a77a04 	addi	r2,gp,-25112
}
    f6fc:	e037883a 	mov	sp,fp
    f700:	dfc00117 	ldw	ra,4(sp)
    f704:	df000017 	ldw	fp,0(sp)
    f708:	dec00204 	addi	sp,sp,8
    f70c:	f800283a 	ret

0000f710 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f710:	defff904 	addi	sp,sp,-28
    f714:	dfc00615 	stw	ra,24(sp)
    f718:	df000515 	stw	fp,20(sp)
    f71c:	df000504 	addi	fp,sp,20
    f720:	e13ffd15 	stw	r4,-12(fp)
    f724:	e17ffe15 	stw	r5,-8(fp)
    f728:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f72c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f730:	e0bffd17 	ldw	r2,-12(fp)
    f734:	10000816 	blt	r2,zero,f758 <lseek+0x48>
    f738:	01400304 	movi	r5,12
    f73c:	e13ffd17 	ldw	r4,-12(fp)
    f740:	00020100 	call	2010 <__mulsi3>
    f744:	1007883a 	mov	r3,r2
    f748:	00800074 	movhi	r2,1
    f74c:	10968604 	addi	r2,r2,23064
    f750:	1885883a 	add	r2,r3,r2
    f754:	00000106 	br	f75c <lseek+0x4c>
    f758:	0005883a 	mov	r2,zero
    f75c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f760:	e0bffc17 	ldw	r2,-16(fp)
    f764:	10001026 	beq	r2,zero,f7a8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f768:	e0bffc17 	ldw	r2,-16(fp)
    f76c:	10800017 	ldw	r2,0(r2)
    f770:	10800717 	ldw	r2,28(r2)
    f774:	10000926 	beq	r2,zero,f79c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f778:	e0bffc17 	ldw	r2,-16(fp)
    f77c:	10800017 	ldw	r2,0(r2)
    f780:	10800717 	ldw	r2,28(r2)
    f784:	e1bfff17 	ldw	r6,-4(fp)
    f788:	e17ffe17 	ldw	r5,-8(fp)
    f78c:	e13ffc17 	ldw	r4,-16(fp)
    f790:	103ee83a 	callr	r2
    f794:	e0bffb15 	stw	r2,-20(fp)
    f798:	00000506 	br	f7b0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f79c:	00bfde84 	movi	r2,-134
    f7a0:	e0bffb15 	stw	r2,-20(fp)
    f7a4:	00000206 	br	f7b0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f7a8:	00bfebc4 	movi	r2,-81
    f7ac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f7b0:	e0bffb17 	ldw	r2,-20(fp)
    f7b4:	1000070e 	bge	r2,zero,f7d4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f7b8:	000f6d40 	call	f6d4 <alt_get_errno>
    f7bc:	1007883a 	mov	r3,r2
    f7c0:	e0bffb17 	ldw	r2,-20(fp)
    f7c4:	0085c83a 	sub	r2,zero,r2
    f7c8:	18800015 	stw	r2,0(r3)
    rc = -1;
    f7cc:	00bfffc4 	movi	r2,-1
    f7d0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f7d4:	e0bffb17 	ldw	r2,-20(fp)
}
    f7d8:	e037883a 	mov	sp,fp
    f7dc:	dfc00117 	ldw	ra,4(sp)
    f7e0:	df000017 	ldw	fp,0(sp)
    f7e4:	dec00204 	addi	sp,sp,8
    f7e8:	f800283a 	ret

0000f7ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f7ec:	defffd04 	addi	sp,sp,-12
    f7f0:	dfc00215 	stw	ra,8(sp)
    f7f4:	df000115 	stw	fp,4(sp)
    f7f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f7fc:	0009883a 	mov	r4,zero
    f800:	000fcc40 	call	fcc4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f804:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f808:	000fcfc0 	call	fcfc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f80c:	01800074 	movhi	r6,1
    f810:	3193fd04 	addi	r6,r6,20468
    f814:	01400074 	movhi	r5,1
    f818:	2953fd04 	addi	r5,r5,20468
    f81c:	01000074 	movhi	r4,1
    f820:	2113fd04 	addi	r4,r4,20468
    f824:	0013b8c0 	call	13b8c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f828:	001389c0 	call	1389c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f82c:	01000074 	movhi	r4,1
    f830:	210e3f04 	addi	r4,r4,14588
    f834:	00144880 	call	14488 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f838:	d0a77f17 	ldw	r2,-25092(gp)
    f83c:	d0e78017 	ldw	r3,-25088(gp)
    f840:	d1278117 	ldw	r4,-25084(gp)
    f844:	200d883a 	mov	r6,r4
    f848:	180b883a 	mov	r5,r3
    f84c:	1009883a 	mov	r4,r2
    f850:	0000b900 	call	b90 <main>
    f854:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f858:	01000044 	movi	r4,1
    f85c:	000f0680 	call	f068 <close>
  exit (result);
    f860:	e13fff17 	ldw	r4,-4(fp)
    f864:	001449c0 	call	1449c <exit>

0000f868 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f868:	defffe04 	addi	sp,sp,-8
    f86c:	df000115 	stw	fp,4(sp)
    f870:	df000104 	addi	fp,sp,4
    f874:	e13fff15 	stw	r4,-4(fp)
}
    f878:	0001883a 	nop
    f87c:	e037883a 	mov	sp,fp
    f880:	df000017 	ldw	fp,0(sp)
    f884:	dec00104 	addi	sp,sp,4
    f888:	f800283a 	ret

0000f88c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f88c:	defffe04 	addi	sp,sp,-8
    f890:	df000115 	stw	fp,4(sp)
    f894:	df000104 	addi	fp,sp,4
    f898:	e13fff15 	stw	r4,-4(fp)
}
    f89c:	0001883a 	nop
    f8a0:	e037883a 	mov	sp,fp
    f8a4:	df000017 	ldw	fp,0(sp)
    f8a8:	dec00104 	addi	sp,sp,4
    f8ac:	f800283a 	ret

0000f8b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f8b0:	defffe04 	addi	sp,sp,-8
    f8b4:	dfc00115 	stw	ra,4(sp)
    f8b8:	df000015 	stw	fp,0(sp)
    f8bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f8c0:	d0a01417 	ldw	r2,-32688(gp)
    f8c4:	10000326 	beq	r2,zero,f8d4 <alt_get_errno+0x24>
    f8c8:	d0a01417 	ldw	r2,-32688(gp)
    f8cc:	103ee83a 	callr	r2
    f8d0:	00000106 	br	f8d8 <alt_get_errno+0x28>
    f8d4:	d0a77a04 	addi	r2,gp,-25112
}
    f8d8:	e037883a 	mov	sp,fp
    f8dc:	dfc00117 	ldw	ra,4(sp)
    f8e0:	df000017 	ldw	fp,0(sp)
    f8e4:	dec00204 	addi	sp,sp,8
    f8e8:	f800283a 	ret

0000f8ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f8ec:	defff904 	addi	sp,sp,-28
    f8f0:	dfc00615 	stw	ra,24(sp)
    f8f4:	df000515 	stw	fp,20(sp)
    f8f8:	df000504 	addi	fp,sp,20
    f8fc:	e13ffd15 	stw	r4,-12(fp)
    f900:	e17ffe15 	stw	r5,-8(fp)
    f904:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f908:	e0bffd17 	ldw	r2,-12(fp)
    f90c:	10000816 	blt	r2,zero,f930 <read+0x44>
    f910:	01400304 	movi	r5,12
    f914:	e13ffd17 	ldw	r4,-12(fp)
    f918:	00020100 	call	2010 <__mulsi3>
    f91c:	1007883a 	mov	r3,r2
    f920:	00800074 	movhi	r2,1
    f924:	10968604 	addi	r2,r2,23064
    f928:	1885883a 	add	r2,r3,r2
    f92c:	00000106 	br	f934 <read+0x48>
    f930:	0005883a 	mov	r2,zero
    f934:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f938:	e0bffb17 	ldw	r2,-20(fp)
    f93c:	10002226 	beq	r2,zero,f9c8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f940:	e0bffb17 	ldw	r2,-20(fp)
    f944:	10800217 	ldw	r2,8(r2)
    f948:	108000cc 	andi	r2,r2,3
    f94c:	10800060 	cmpeqi	r2,r2,1
    f950:	1000181e 	bne	r2,zero,f9b4 <read+0xc8>
        (fd->dev->read))
    f954:	e0bffb17 	ldw	r2,-20(fp)
    f958:	10800017 	ldw	r2,0(r2)
    f95c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f960:	10001426 	beq	r2,zero,f9b4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f964:	e0bffb17 	ldw	r2,-20(fp)
    f968:	10800017 	ldw	r2,0(r2)
    f96c:	10800517 	ldw	r2,20(r2)
    f970:	e0ffff17 	ldw	r3,-4(fp)
    f974:	180d883a 	mov	r6,r3
    f978:	e17ffe17 	ldw	r5,-8(fp)
    f97c:	e13ffb17 	ldw	r4,-20(fp)
    f980:	103ee83a 	callr	r2
    f984:	e0bffc15 	stw	r2,-16(fp)
    f988:	e0bffc17 	ldw	r2,-16(fp)
    f98c:	1000070e 	bge	r2,zero,f9ac <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f990:	000f8b00 	call	f8b0 <alt_get_errno>
    f994:	1007883a 	mov	r3,r2
    f998:	e0bffc17 	ldw	r2,-16(fp)
    f99c:	0085c83a 	sub	r2,zero,r2
    f9a0:	18800015 	stw	r2,0(r3)
          return -1;
    f9a4:	00bfffc4 	movi	r2,-1
    f9a8:	00000c06 	br	f9dc <read+0xf0>
        }
        return rval;
    f9ac:	e0bffc17 	ldw	r2,-16(fp)
    f9b0:	00000a06 	br	f9dc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f9b4:	000f8b00 	call	f8b0 <alt_get_errno>
    f9b8:	1007883a 	mov	r3,r2
    f9bc:	00800344 	movi	r2,13
    f9c0:	18800015 	stw	r2,0(r3)
    f9c4:	00000406 	br	f9d8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f9c8:	000f8b00 	call	f8b0 <alt_get_errno>
    f9cc:	1007883a 	mov	r3,r2
    f9d0:	00801444 	movi	r2,81
    f9d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f9d8:	00bfffc4 	movi	r2,-1
}
    f9dc:	e037883a 	mov	sp,fp
    f9e0:	dfc00117 	ldw	ra,4(sp)
    f9e4:	df000017 	ldw	fp,0(sp)
    f9e8:	dec00204 	addi	sp,sp,8
    f9ec:	f800283a 	ret

0000f9f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f9f0:	defffc04 	addi	sp,sp,-16
    f9f4:	dfc00315 	stw	ra,12(sp)
    f9f8:	df000215 	stw	fp,8(sp)
    f9fc:	dc000115 	stw	r16,4(sp)
    fa00:	df000204 	addi	fp,sp,8
    fa04:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    fa08:	e0bffe17 	ldw	r2,-8(fp)
    fa0c:	108000d0 	cmplti	r2,r2,3
    fa10:	1000111e 	bne	r2,zero,fa58 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    fa14:	04000074 	movhi	r16,1
    fa18:	84168604 	addi	r16,r16,23064
    fa1c:	e0bffe17 	ldw	r2,-8(fp)
    fa20:	01400304 	movi	r5,12
    fa24:	1009883a 	mov	r4,r2
    fa28:	00020100 	call	2010 <__mulsi3>
    fa2c:	8085883a 	add	r2,r16,r2
    fa30:	10800204 	addi	r2,r2,8
    fa34:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fa38:	04000074 	movhi	r16,1
    fa3c:	84168604 	addi	r16,r16,23064
    fa40:	e0bffe17 	ldw	r2,-8(fp)
    fa44:	01400304 	movi	r5,12
    fa48:	1009883a 	mov	r4,r2
    fa4c:	00020100 	call	2010 <__mulsi3>
    fa50:	8085883a 	add	r2,r16,r2
    fa54:	10000015 	stw	zero,0(r2)
  }
}
    fa58:	0001883a 	nop
    fa5c:	e6ffff04 	addi	sp,fp,-4
    fa60:	dfc00217 	ldw	ra,8(sp)
    fa64:	df000117 	ldw	fp,4(sp)
    fa68:	dc000017 	ldw	r16,0(sp)
    fa6c:	dec00304 	addi	sp,sp,12
    fa70:	f800283a 	ret

0000fa74 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fa74:	defff904 	addi	sp,sp,-28
    fa78:	df000615 	stw	fp,24(sp)
    fa7c:	df000604 	addi	fp,sp,24
    fa80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa84:	0005303a 	rdctl	r2,status
    fa88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa8c:	e0fffe17 	ldw	r3,-8(fp)
    fa90:	00bfff84 	movi	r2,-2
    fa94:	1884703a 	and	r2,r3,r2
    fa98:	1001703a 	wrctl	status,r2
  
  return context;
    fa9c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    faa0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    faa4:	d0a01617 	ldw	r2,-32680(gp)
    faa8:	10c000c4 	addi	r3,r2,3
    faac:	00bfff04 	movi	r2,-4
    fab0:	1884703a 	and	r2,r3,r2
    fab4:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fab8:	d0e01617 	ldw	r3,-32680(gp)
    fabc:	e0bfff17 	ldw	r2,-4(fp)
    fac0:	1887883a 	add	r3,r3,r2
    fac4:	00810034 	movhi	r2,1024
    fac8:	10800004 	addi	r2,r2,0
    facc:	10c0062e 	bgeu	r2,r3,fae8 <sbrk+0x74>
    fad0:	e0bffb17 	ldw	r2,-20(fp)
    fad4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fad8:	e0bffa17 	ldw	r2,-24(fp)
    fadc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fae0:	00bfffc4 	movi	r2,-1
    fae4:	00000b06 	br	fb14 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fae8:	d0a01617 	ldw	r2,-32680(gp)
    faec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    faf0:	d0e01617 	ldw	r3,-32680(gp)
    faf4:	e0bfff17 	ldw	r2,-4(fp)
    faf8:	1885883a 	add	r2,r3,r2
    fafc:	d0a01615 	stw	r2,-32680(gp)
    fb00:	e0bffb17 	ldw	r2,-20(fp)
    fb04:	e0bffc15 	stw	r2,-16(fp)
    fb08:	e0bffc17 	ldw	r2,-16(fp)
    fb0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fb10:	e0bffd17 	ldw	r2,-12(fp)
} 
    fb14:	e037883a 	mov	sp,fp
    fb18:	df000017 	ldw	fp,0(sp)
    fb1c:	dec00104 	addi	sp,sp,4
    fb20:	f800283a 	ret

0000fb24 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fb24:	defffd04 	addi	sp,sp,-12
    fb28:	dfc00215 	stw	ra,8(sp)
    fb2c:	df000115 	stw	fp,4(sp)
    fb30:	df000104 	addi	fp,sp,4
    fb34:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fb38:	e13fff17 	ldw	r4,-4(fp)
    fb3c:	00136440 	call	13644 <alt_busy_sleep>
}
    fb40:	e037883a 	mov	sp,fp
    fb44:	dfc00117 	ldw	ra,4(sp)
    fb48:	df000017 	ldw	fp,0(sp)
    fb4c:	dec00204 	addi	sp,sp,8
    fb50:	f800283a 	ret

0000fb54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fb54:	defffe04 	addi	sp,sp,-8
    fb58:	dfc00115 	stw	ra,4(sp)
    fb5c:	df000015 	stw	fp,0(sp)
    fb60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fb64:	d0a01417 	ldw	r2,-32688(gp)
    fb68:	10000326 	beq	r2,zero,fb78 <alt_get_errno+0x24>
    fb6c:	d0a01417 	ldw	r2,-32688(gp)
    fb70:	103ee83a 	callr	r2
    fb74:	00000106 	br	fb7c <alt_get_errno+0x28>
    fb78:	d0a77a04 	addi	r2,gp,-25112
}
    fb7c:	e037883a 	mov	sp,fp
    fb80:	dfc00117 	ldw	ra,4(sp)
    fb84:	df000017 	ldw	fp,0(sp)
    fb88:	dec00204 	addi	sp,sp,8
    fb8c:	f800283a 	ret

0000fb90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fb90:	defff904 	addi	sp,sp,-28
    fb94:	dfc00615 	stw	ra,24(sp)
    fb98:	df000515 	stw	fp,20(sp)
    fb9c:	df000504 	addi	fp,sp,20
    fba0:	e13ffd15 	stw	r4,-12(fp)
    fba4:	e17ffe15 	stw	r5,-8(fp)
    fba8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fbac:	e0bffd17 	ldw	r2,-12(fp)
    fbb0:	10000816 	blt	r2,zero,fbd4 <write+0x44>
    fbb4:	01400304 	movi	r5,12
    fbb8:	e13ffd17 	ldw	r4,-12(fp)
    fbbc:	00020100 	call	2010 <__mulsi3>
    fbc0:	1007883a 	mov	r3,r2
    fbc4:	00800074 	movhi	r2,1
    fbc8:	10968604 	addi	r2,r2,23064
    fbcc:	1885883a 	add	r2,r3,r2
    fbd0:	00000106 	br	fbd8 <write+0x48>
    fbd4:	0005883a 	mov	r2,zero
    fbd8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fbdc:	e0bffb17 	ldw	r2,-20(fp)
    fbe0:	10002126 	beq	r2,zero,fc68 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fbe4:	e0bffb17 	ldw	r2,-20(fp)
    fbe8:	10800217 	ldw	r2,8(r2)
    fbec:	108000cc 	andi	r2,r2,3
    fbf0:	10001826 	beq	r2,zero,fc54 <write+0xc4>
    fbf4:	e0bffb17 	ldw	r2,-20(fp)
    fbf8:	10800017 	ldw	r2,0(r2)
    fbfc:	10800617 	ldw	r2,24(r2)
    fc00:	10001426 	beq	r2,zero,fc54 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fc04:	e0bffb17 	ldw	r2,-20(fp)
    fc08:	10800017 	ldw	r2,0(r2)
    fc0c:	10800617 	ldw	r2,24(r2)
    fc10:	e0ffff17 	ldw	r3,-4(fp)
    fc14:	180d883a 	mov	r6,r3
    fc18:	e17ffe17 	ldw	r5,-8(fp)
    fc1c:	e13ffb17 	ldw	r4,-20(fp)
    fc20:	103ee83a 	callr	r2
    fc24:	e0bffc15 	stw	r2,-16(fp)
    fc28:	e0bffc17 	ldw	r2,-16(fp)
    fc2c:	1000070e 	bge	r2,zero,fc4c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    fc30:	000fb540 	call	fb54 <alt_get_errno>
    fc34:	1007883a 	mov	r3,r2
    fc38:	e0bffc17 	ldw	r2,-16(fp)
    fc3c:	0085c83a 	sub	r2,zero,r2
    fc40:	18800015 	stw	r2,0(r3)
        return -1;
    fc44:	00bfffc4 	movi	r2,-1
    fc48:	00000c06 	br	fc7c <write+0xec>
      }
      return rval;
    fc4c:	e0bffc17 	ldw	r2,-16(fp)
    fc50:	00000a06 	br	fc7c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fc54:	000fb540 	call	fb54 <alt_get_errno>
    fc58:	1007883a 	mov	r3,r2
    fc5c:	00800344 	movi	r2,13
    fc60:	18800015 	stw	r2,0(r3)
    fc64:	00000406 	br	fc78 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fc68:	000fb540 	call	fb54 <alt_get_errno>
    fc6c:	1007883a 	mov	r3,r2
    fc70:	00801444 	movi	r2,81
    fc74:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fc78:	00bfffc4 	movi	r2,-1
}
    fc7c:	e037883a 	mov	sp,fp
    fc80:	dfc00117 	ldw	ra,4(sp)
    fc84:	df000017 	ldw	fp,0(sp)
    fc88:	dec00204 	addi	sp,sp,8
    fc8c:	f800283a 	ret

0000fc90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fc90:	defffd04 	addi	sp,sp,-12
    fc94:	dfc00215 	stw	ra,8(sp)
    fc98:	df000115 	stw	fp,4(sp)
    fc9c:	df000104 	addi	fp,sp,4
    fca0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fca4:	d1601104 	addi	r5,gp,-32700
    fca8:	e13fff17 	ldw	r4,-4(fp)
    fcac:	00137f80 	call	137f8 <alt_dev_llist_insert>
}
    fcb0:	e037883a 	mov	sp,fp
    fcb4:	dfc00117 	ldw	ra,4(sp)
    fcb8:	df000017 	ldw	fp,0(sp)
    fcbc:	dec00204 	addi	sp,sp,8
    fcc0:	f800283a 	ret

0000fcc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fcc4:	defffd04 	addi	sp,sp,-12
    fcc8:	dfc00215 	stw	ra,8(sp)
    fccc:	df000115 	stw	fp,4(sp)
    fcd0:	df000104 	addi	fp,sp,4
    fcd4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    fcd8:	00142980 	call	14298 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fcdc:	00800044 	movi	r2,1
    fce0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fce4:	0001883a 	nop
    fce8:	e037883a 	mov	sp,fp
    fcec:	dfc00117 	ldw	ra,4(sp)
    fcf0:	df000017 	ldw	fp,0(sp)
    fcf4:	dec00204 	addi	sp,sp,8
    fcf8:	f800283a 	ret

0000fcfc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fcfc:	defffc04 	addi	sp,sp,-16
    fd00:	dfc00315 	stw	ra,12(sp)
    fd04:	df000215 	stw	fp,8(sp)
    fd08:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    fd0c:	01c00204 	movi	r7,8
    fd10:	000d883a 	mov	r6,zero
    fd14:	000b883a 	mov	r5,zero
    fd18:	013fc834 	movhi	r4,65312
    fd1c:	21080004 	addi	r4,r4,8192
    fd20:	0012f300 	call	12f30 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_I2C_INIT ( GYRO_I2C, gyro_i2c);
    fd24:	01000074 	movhi	r4,1
    fd28:	2116e604 	addi	r4,r4,23448
    fd2c:	001088c0 	call	1088c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    fd30:	01800204 	movi	r6,8
    fd34:	000b883a 	mov	r5,zero
    fd38:	01000074 	movhi	r4,1
    fd3c:	2116fe04 	addi	r4,r4,23544
    fd40:	00123b80 	call	123b8 <altera_avalon_jtag_uart_init>
    fd44:	01000074 	movhi	r4,1
    fd48:	2116f404 	addi	r4,r4,23504
    fd4c:	000fc900 	call	fc90 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_SPI, touch_spi);
    fd50:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
    fd54:	01bfffc4 	movi	r6,-1
    fd58:	017fffc4 	movi	r5,-1
    fd5c:	01000074 	movhi	r4,1
    fd60:	211b0c04 	addi	r4,r4,27696
    fd64:	00131000 	call	13100 <altera_modular_adc_init>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, vga_subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    fd68:	00800074 	movhi	r2,1
    fd6c:	109b1b04 	addi	r2,r2,27756
    fd70:	10800a17 	ldw	r2,40(r2)
    fd74:	10800017 	ldw	r2,0(r2)
    fd78:	1007883a 	mov	r3,r2
    fd7c:	00800074 	movhi	r2,1
    fd80:	109b1b04 	addi	r2,r2,27756
    fd84:	10c00b15 	stw	r3,44(r2)
    fd88:	00800074 	movhi	r2,1
    fd8c:	109b1b04 	addi	r2,r2,27756
    fd90:	10800a17 	ldw	r2,40(r2)
    fd94:	10800104 	addi	r2,r2,4
    fd98:	10800017 	ldw	r2,0(r2)
    fd9c:	1007883a 	mov	r3,r2
    fda0:	00800074 	movhi	r2,1
    fda4:	109b1b04 	addi	r2,r2,27756
    fda8:	10c00c15 	stw	r3,48(r2)
    fdac:	00800074 	movhi	r2,1
    fdb0:	109b1b04 	addi	r2,r2,27756
    fdb4:	10800a17 	ldw	r2,40(r2)
    fdb8:	10800204 	addi	r2,r2,8
    fdbc:	10800017 	ldw	r2,0(r2)
    fdc0:	10ffffcc 	andi	r3,r2,65535
    fdc4:	00800074 	movhi	r2,1
    fdc8:	109b1b04 	addi	r2,r2,27756
    fdcc:	10c01115 	stw	r3,68(r2)
    fdd0:	00800074 	movhi	r2,1
    fdd4:	109b1b04 	addi	r2,r2,27756
    fdd8:	10800a17 	ldw	r2,40(r2)
    fddc:	10800204 	addi	r2,r2,8
    fde0:	10800017 	ldw	r2,0(r2)
    fde4:	1006d43a 	srli	r3,r2,16
    fde8:	00800074 	movhi	r2,1
    fdec:	109b1b04 	addi	r2,r2,27756
    fdf0:	10c01215 	stw	r3,72(r2)
    fdf4:	00800074 	movhi	r2,1
    fdf8:	109b1b04 	addi	r2,r2,27756
    fdfc:	10800a17 	ldw	r2,40(r2)
    fe00:	10800304 	addi	r2,r2,12
    fe04:	10800017 	ldw	r2,0(r2)
    fe08:	1005d07a 	srai	r2,r2,1
    fe0c:	10c0004c 	andi	r3,r2,1
    fe10:	00800074 	movhi	r2,1
    fe14:	109b1b04 	addi	r2,r2,27756
    fe18:	10c00d15 	stw	r3,52(r2)
    fe1c:	00800074 	movhi	r2,1
    fe20:	109b1b04 	addi	r2,r2,27756
    fe24:	10800a17 	ldw	r2,40(r2)
    fe28:	10800304 	addi	r2,r2,12
    fe2c:	10800017 	ldw	r2,0(r2)
    fe30:	1005d23a 	srai	r2,r2,8
    fe34:	108003cc 	andi	r2,r2,15
    fe38:	10800044 	addi	r2,r2,1
    fe3c:	1007883a 	mov	r3,r2
    fe40:	00800074 	movhi	r2,1
    fe44:	109b1b04 	addi	r2,r2,27756
    fe48:	10c00e15 	stw	r3,56(r2)
    fe4c:	00800074 	movhi	r2,1
    fe50:	109b1b04 	addi	r2,r2,27756
    fe54:	10800a17 	ldw	r2,40(r2)
    fe58:	10800304 	addi	r2,r2,12
    fe5c:	10800017 	ldw	r2,0(r2)
    fe60:	1005d1ba 	srai	r2,r2,6
    fe64:	108000cc 	andi	r2,r2,3
    fe68:	10800044 	addi	r2,r2,1
    fe6c:	1007883a 	mov	r3,r2
    fe70:	00800074 	movhi	r2,1
    fe74:	109b1b04 	addi	r2,r2,27756
    fe78:	10c00f15 	stw	r3,60(r2)
    fe7c:	00800074 	movhi	r2,1
    fe80:	109b1b04 	addi	r2,r2,27756
    fe84:	10800e17 	ldw	r2,56(r2)
    fe88:	1007883a 	mov	r3,r2
    fe8c:	00800074 	movhi	r2,1
    fe90:	109b1b04 	addi	r2,r2,27756
    fe94:	10800f17 	ldw	r2,60(r2)
    fe98:	100b883a 	mov	r5,r2
    fe9c:	1809883a 	mov	r4,r3
    fea0:	00020100 	call	2010 <__mulsi3>
    fea4:	e0bffe05 	stb	r2,-8(fp)
    fea8:	e0bffe03 	ldbu	r2,-8(fp)
    feac:	10800268 	cmpgeui	r2,r2,9
    feb0:	1000051e 	bne	r2,zero,fec8 <alt_sys_init+0x1cc>
    feb4:	00800074 	movhi	r2,1
    feb8:	109b1b04 	addi	r2,r2,27756
    febc:	00c00044 	movi	r3,1
    fec0:	10c01015 	stw	r3,64(r2)
    fec4:	00000c06 	br	fef8 <alt_sys_init+0x1fc>
    fec8:	e0bffe03 	ldbu	r2,-8(fp)
    fecc:	10800468 	cmpgeui	r2,r2,17
    fed0:	1000051e 	bne	r2,zero,fee8 <alt_sys_init+0x1ec>
    fed4:	00800074 	movhi	r2,1
    fed8:	109b1b04 	addi	r2,r2,27756
    fedc:	00c00084 	movi	r3,2
    fee0:	10c01015 	stw	r3,64(r2)
    fee4:	00000406 	br	fef8 <alt_sys_init+0x1fc>
    fee8:	00800074 	movhi	r2,1
    feec:	109b1b04 	addi	r2,r2,27756
    fef0:	00c00104 	movi	r3,4
    fef4:	10c01015 	stw	r3,64(r2)
    fef8:	00800074 	movhi	r2,1
    fefc:	109b1b04 	addi	r2,r2,27756
    ff00:	10800a17 	ldw	r2,40(r2)
    ff04:	10800304 	addi	r2,r2,12
    ff08:	10800017 	ldw	r2,0(r2)
    ff0c:	1005d43a 	srai	r2,r2,16
    ff10:	e0bffe45 	stb	r2,-7(fp)
    ff14:	00800074 	movhi	r2,1
    ff18:	109b1b04 	addi	r2,r2,27756
    ff1c:	10800a17 	ldw	r2,40(r2)
    ff20:	10800304 	addi	r2,r2,12
    ff24:	10800017 	ldw	r2,0(r2)
    ff28:	1004d63a 	srli	r2,r2,24
    ff2c:	e0bffe85 	stb	r2,-6(fp)
    ff30:	00800074 	movhi	r2,1
    ff34:	109b1b04 	addi	r2,r2,27756
    ff38:	10801017 	ldw	r2,64(r2)
    ff3c:	10800058 	cmpnei	r2,r2,1
    ff40:	1000041e 	bne	r2,zero,ff54 <alt_sys_init+0x258>
    ff44:	00800074 	movhi	r2,1
    ff48:	109b1b04 	addi	r2,r2,27756
    ff4c:	10001315 	stw	zero,76(r2)
    ff50:	00000e06 	br	ff8c <alt_sys_init+0x290>
    ff54:	00800074 	movhi	r2,1
    ff58:	109b1b04 	addi	r2,r2,27756
    ff5c:	10801017 	ldw	r2,64(r2)
    ff60:	10800098 	cmpnei	r2,r2,2
    ff64:	1000051e 	bne	r2,zero,ff7c <alt_sys_init+0x280>
    ff68:	00800074 	movhi	r2,1
    ff6c:	109b1b04 	addi	r2,r2,27756
    ff70:	00c00044 	movi	r3,1
    ff74:	10c01315 	stw	r3,76(r2)
    ff78:	00000406 	br	ff8c <alt_sys_init+0x290>
    ff7c:	00800074 	movhi	r2,1
    ff80:	109b1b04 	addi	r2,r2,27756
    ff84:	00c00084 	movi	r3,2
    ff88:	10c01315 	stw	r3,76(r2)
    ff8c:	e0bffe43 	ldbu	r2,-7(fp)
    ff90:	00c00804 	movi	r3,32
    ff94:	1885c83a 	sub	r2,r3,r2
    ff98:	00ffffc4 	movi	r3,-1
    ff9c:	1886d83a 	srl	r3,r3,r2
    ffa0:	00800074 	movhi	r2,1
    ffa4:	109b1b04 	addi	r2,r2,27756
    ffa8:	10c01415 	stw	r3,80(r2)
    ffac:	e0fffe43 	ldbu	r3,-7(fp)
    ffb0:	00800074 	movhi	r2,1
    ffb4:	109b1b04 	addi	r2,r2,27756
    ffb8:	10801317 	ldw	r2,76(r2)
    ffbc:	1887883a 	add	r3,r3,r2
    ffc0:	00800074 	movhi	r2,1
    ffc4:	109b1b04 	addi	r2,r2,27756
    ffc8:	10c01515 	stw	r3,84(r2)
    ffcc:	e0bffe83 	ldbu	r2,-6(fp)
    ffd0:	00c00804 	movi	r3,32
    ffd4:	1885c83a 	sub	r2,r3,r2
    ffd8:	00ffffc4 	movi	r3,-1
    ffdc:	1886d83a 	srl	r3,r3,r2
    ffe0:	00800074 	movhi	r2,1
    ffe4:	109b1b04 	addi	r2,r2,27756
    ffe8:	10c01615 	stw	r3,88(r2)
    ffec:	01000074 	movhi	r4,1
    fff0:	211b1b04 	addi	r4,r4,27756
    fff4:	000fc900 	call	fc90 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, vga_subsystem_VGA_Pixel_DMA);
    fff8:	00800074 	movhi	r2,1
    fffc:	109b3204 	addi	r2,r2,27848
   10000:	10800a17 	ldw	r2,40(r2)
   10004:	10800017 	ldw	r2,0(r2)
   10008:	1007883a 	mov	r3,r2
   1000c:	00800074 	movhi	r2,1
   10010:	109b3204 	addi	r2,r2,27848
   10014:	10c00b15 	stw	r3,44(r2)
   10018:	00800074 	movhi	r2,1
   1001c:	109b3204 	addi	r2,r2,27848
   10020:	10800a17 	ldw	r2,40(r2)
   10024:	10800104 	addi	r2,r2,4
   10028:	10800017 	ldw	r2,0(r2)
   1002c:	1007883a 	mov	r3,r2
   10030:	00800074 	movhi	r2,1
   10034:	109b3204 	addi	r2,r2,27848
   10038:	10c00c15 	stw	r3,48(r2)
   1003c:	00800074 	movhi	r2,1
   10040:	109b3204 	addi	r2,r2,27848
   10044:	10800a17 	ldw	r2,40(r2)
   10048:	10800204 	addi	r2,r2,8
   1004c:	10800017 	ldw	r2,0(r2)
   10050:	10ffffcc 	andi	r3,r2,65535
   10054:	00800074 	movhi	r2,1
   10058:	109b3204 	addi	r2,r2,27848
   1005c:	10c01115 	stw	r3,68(r2)
   10060:	00800074 	movhi	r2,1
   10064:	109b3204 	addi	r2,r2,27848
   10068:	10800a17 	ldw	r2,40(r2)
   1006c:	10800204 	addi	r2,r2,8
   10070:	10800017 	ldw	r2,0(r2)
   10074:	1006d43a 	srli	r3,r2,16
   10078:	00800074 	movhi	r2,1
   1007c:	109b3204 	addi	r2,r2,27848
   10080:	10c01215 	stw	r3,72(r2)
   10084:	00800074 	movhi	r2,1
   10088:	109b3204 	addi	r2,r2,27848
   1008c:	10800a17 	ldw	r2,40(r2)
   10090:	10800304 	addi	r2,r2,12
   10094:	10800017 	ldw	r2,0(r2)
   10098:	1005d07a 	srai	r2,r2,1
   1009c:	10c0004c 	andi	r3,r2,1
   100a0:	00800074 	movhi	r2,1
   100a4:	109b3204 	addi	r2,r2,27848
   100a8:	10c00d15 	stw	r3,52(r2)
   100ac:	00800074 	movhi	r2,1
   100b0:	109b3204 	addi	r2,r2,27848
   100b4:	10800a17 	ldw	r2,40(r2)
   100b8:	10800304 	addi	r2,r2,12
   100bc:	10800017 	ldw	r2,0(r2)
   100c0:	1005d23a 	srai	r2,r2,8
   100c4:	108003cc 	andi	r2,r2,15
   100c8:	10800044 	addi	r2,r2,1
   100cc:	1007883a 	mov	r3,r2
   100d0:	00800074 	movhi	r2,1
   100d4:	109b3204 	addi	r2,r2,27848
   100d8:	10c00e15 	stw	r3,56(r2)
   100dc:	00800074 	movhi	r2,1
   100e0:	109b3204 	addi	r2,r2,27848
   100e4:	10800a17 	ldw	r2,40(r2)
   100e8:	10800304 	addi	r2,r2,12
   100ec:	10800017 	ldw	r2,0(r2)
   100f0:	1005d1ba 	srai	r2,r2,6
   100f4:	108000cc 	andi	r2,r2,3
   100f8:	10800044 	addi	r2,r2,1
   100fc:	1007883a 	mov	r3,r2
   10100:	00800074 	movhi	r2,1
   10104:	109b3204 	addi	r2,r2,27848
   10108:	10c00f15 	stw	r3,60(r2)
   1010c:	00800074 	movhi	r2,1
   10110:	109b3204 	addi	r2,r2,27848
   10114:	10800e17 	ldw	r2,56(r2)
   10118:	1007883a 	mov	r3,r2
   1011c:	00800074 	movhi	r2,1
   10120:	109b3204 	addi	r2,r2,27848
   10124:	10800f17 	ldw	r2,60(r2)
   10128:	100b883a 	mov	r5,r2
   1012c:	1809883a 	mov	r4,r3
   10130:	00020100 	call	2010 <__mulsi3>
   10134:	e0bffec5 	stb	r2,-5(fp)
   10138:	e0bffec3 	ldbu	r2,-5(fp)
   1013c:	10800268 	cmpgeui	r2,r2,9
   10140:	1000051e 	bne	r2,zero,10158 <alt_sys_init+0x45c>
   10144:	00800074 	movhi	r2,1
   10148:	109b3204 	addi	r2,r2,27848
   1014c:	00c00044 	movi	r3,1
   10150:	10c01015 	stw	r3,64(r2)
   10154:	00000c06 	br	10188 <alt_sys_init+0x48c>
   10158:	e0bffec3 	ldbu	r2,-5(fp)
   1015c:	10800468 	cmpgeui	r2,r2,17
   10160:	1000051e 	bne	r2,zero,10178 <alt_sys_init+0x47c>
   10164:	00800074 	movhi	r2,1
   10168:	109b3204 	addi	r2,r2,27848
   1016c:	00c00084 	movi	r3,2
   10170:	10c01015 	stw	r3,64(r2)
   10174:	00000406 	br	10188 <alt_sys_init+0x48c>
   10178:	00800074 	movhi	r2,1
   1017c:	109b3204 	addi	r2,r2,27848
   10180:	00c00104 	movi	r3,4
   10184:	10c01015 	stw	r3,64(r2)
   10188:	00800074 	movhi	r2,1
   1018c:	109b3204 	addi	r2,r2,27848
   10190:	10800a17 	ldw	r2,40(r2)
   10194:	10800304 	addi	r2,r2,12
   10198:	10800017 	ldw	r2,0(r2)
   1019c:	1005d43a 	srai	r2,r2,16
   101a0:	e0bfff05 	stb	r2,-4(fp)
   101a4:	00800074 	movhi	r2,1
   101a8:	109b3204 	addi	r2,r2,27848
   101ac:	10800a17 	ldw	r2,40(r2)
   101b0:	10800304 	addi	r2,r2,12
   101b4:	10800017 	ldw	r2,0(r2)
   101b8:	1004d63a 	srli	r2,r2,24
   101bc:	e0bfff45 	stb	r2,-3(fp)
   101c0:	00800074 	movhi	r2,1
   101c4:	109b3204 	addi	r2,r2,27848
   101c8:	10801017 	ldw	r2,64(r2)
   101cc:	10800058 	cmpnei	r2,r2,1
   101d0:	1000041e 	bne	r2,zero,101e4 <alt_sys_init+0x4e8>
   101d4:	00800074 	movhi	r2,1
   101d8:	109b3204 	addi	r2,r2,27848
   101dc:	10001315 	stw	zero,76(r2)
   101e0:	00000e06 	br	1021c <alt_sys_init+0x520>
   101e4:	00800074 	movhi	r2,1
   101e8:	109b3204 	addi	r2,r2,27848
   101ec:	10801017 	ldw	r2,64(r2)
   101f0:	10800098 	cmpnei	r2,r2,2
   101f4:	1000051e 	bne	r2,zero,1020c <alt_sys_init+0x510>
   101f8:	00800074 	movhi	r2,1
   101fc:	109b3204 	addi	r2,r2,27848
   10200:	00c00044 	movi	r3,1
   10204:	10c01315 	stw	r3,76(r2)
   10208:	00000406 	br	1021c <alt_sys_init+0x520>
   1020c:	00800074 	movhi	r2,1
   10210:	109b3204 	addi	r2,r2,27848
   10214:	00c00084 	movi	r3,2
   10218:	10c01315 	stw	r3,76(r2)
   1021c:	e0bfff03 	ldbu	r2,-4(fp)
   10220:	00c00804 	movi	r3,32
   10224:	1885c83a 	sub	r2,r3,r2
   10228:	00ffffc4 	movi	r3,-1
   1022c:	1886d83a 	srl	r3,r3,r2
   10230:	00800074 	movhi	r2,1
   10234:	109b3204 	addi	r2,r2,27848
   10238:	10c01415 	stw	r3,80(r2)
   1023c:	e0ffff03 	ldbu	r3,-4(fp)
   10240:	00800074 	movhi	r2,1
   10244:	109b3204 	addi	r2,r2,27848
   10248:	10801317 	ldw	r2,76(r2)
   1024c:	1887883a 	add	r3,r3,r2
   10250:	00800074 	movhi	r2,1
   10254:	109b3204 	addi	r2,r2,27848
   10258:	10c01515 	stw	r3,84(r2)
   1025c:	e0bfff43 	ldbu	r2,-3(fp)
   10260:	00c00804 	movi	r3,32
   10264:	1885c83a 	sub	r2,r3,r2
   10268:	00ffffc4 	movi	r3,-1
   1026c:	1886d83a 	srl	r3,r3,r2
   10270:	00800074 	movhi	r2,1
   10274:	109b3204 	addi	r2,r2,27848
   10278:	10c01615 	stw	r3,88(r2)
   1027c:	01000074 	movhi	r4,1
   10280:	211b3204 	addi	r4,r4,27848
   10284:	000fc900 	call	fc90 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
   10288:	00800074 	movhi	r2,1
   1028c:	109b4904 	addi	r2,r2,27940
   10290:	10800a17 	ldw	r2,40(r2)
   10294:	10800017 	ldw	r2,0(r2)
   10298:	1007883a 	mov	r3,r2
   1029c:	00800074 	movhi	r2,1
   102a0:	109b4904 	addi	r2,r2,27940
   102a4:	10c00b15 	stw	r3,44(r2)
   102a8:	00800074 	movhi	r2,1
   102ac:	109b4904 	addi	r2,r2,27940
   102b0:	10800a17 	ldw	r2,40(r2)
   102b4:	10800104 	addi	r2,r2,4
   102b8:	10800017 	ldw	r2,0(r2)
   102bc:	1007883a 	mov	r3,r2
   102c0:	00800074 	movhi	r2,1
   102c4:	109b4904 	addi	r2,r2,27940
   102c8:	10c00c15 	stw	r3,48(r2)
   102cc:	00800074 	movhi	r2,1
   102d0:	109b4904 	addi	r2,r2,27940
   102d4:	10800a17 	ldw	r2,40(r2)
   102d8:	10800204 	addi	r2,r2,8
   102dc:	10800017 	ldw	r2,0(r2)
   102e0:	10ffffcc 	andi	r3,r2,65535
   102e4:	00800074 	movhi	r2,1
   102e8:	109b4904 	addi	r2,r2,27940
   102ec:	10c00f15 	stw	r3,60(r2)
   102f0:	00800074 	movhi	r2,1
   102f4:	109b4904 	addi	r2,r2,27940
   102f8:	10800a17 	ldw	r2,40(r2)
   102fc:	10800204 	addi	r2,r2,8
   10300:	10800017 	ldw	r2,0(r2)
   10304:	1006d43a 	srli	r3,r2,16
   10308:	00800074 	movhi	r2,1
   1030c:	109b4904 	addi	r2,r2,27940
   10310:	10c01015 	stw	r3,64(r2)
   10314:	00800074 	movhi	r2,1
   10318:	109b4904 	addi	r2,r2,27940
   1031c:	10800a17 	ldw	r2,40(r2)
   10320:	10800304 	addi	r2,r2,12
   10324:	10800017 	ldw	r2,0(r2)
   10328:	1005d07a 	srai	r2,r2,1
   1032c:	10c0004c 	andi	r3,r2,1
   10330:	00800074 	movhi	r2,1
   10334:	109b4904 	addi	r2,r2,27940
   10338:	10c00d15 	stw	r3,52(r2)
   1033c:	00800074 	movhi	r2,1
   10340:	109b4904 	addi	r2,r2,27940
   10344:	10800a17 	ldw	r2,40(r2)
   10348:	10800304 	addi	r2,r2,12
   1034c:	10800017 	ldw	r2,0(r2)
   10350:	1005d13a 	srai	r2,r2,4
   10354:	10c003cc 	andi	r3,r2,15
   10358:	00800074 	movhi	r2,1
   1035c:	109b4904 	addi	r2,r2,27940
   10360:	10c00e15 	stw	r3,56(r2)
   10364:	00800074 	movhi	r2,1
   10368:	109b4904 	addi	r2,r2,27940
   1036c:	10800a17 	ldw	r2,40(r2)
   10370:	10800304 	addi	r2,r2,12
   10374:	10800017 	ldw	r2,0(r2)
   10378:	1005d43a 	srai	r2,r2,16
   1037c:	e0bfff85 	stb	r2,-2(fp)
   10380:	00800074 	movhi	r2,1
   10384:	109b4904 	addi	r2,r2,27940
   10388:	10800a17 	ldw	r2,40(r2)
   1038c:	10800304 	addi	r2,r2,12
   10390:	10800017 	ldw	r2,0(r2)
   10394:	1004d63a 	srli	r2,r2,24
   10398:	e0bfffc5 	stb	r2,-1(fp)
   1039c:	00800074 	movhi	r2,1
   103a0:	109b4904 	addi	r2,r2,27940
   103a4:	10800e17 	ldw	r2,56(r2)
   103a8:	10800058 	cmpnei	r2,r2,1
   103ac:	1000041e 	bne	r2,zero,103c0 <alt_sys_init+0x6c4>
   103b0:	00800074 	movhi	r2,1
   103b4:	109b4904 	addi	r2,r2,27940
   103b8:	10001115 	stw	zero,68(r2)
   103bc:	00000e06 	br	103f8 <alt_sys_init+0x6fc>
   103c0:	00800074 	movhi	r2,1
   103c4:	109b4904 	addi	r2,r2,27940
   103c8:	10800e17 	ldw	r2,56(r2)
   103cc:	10800098 	cmpnei	r2,r2,2
   103d0:	1000051e 	bne	r2,zero,103e8 <alt_sys_init+0x6ec>
   103d4:	00800074 	movhi	r2,1
   103d8:	109b4904 	addi	r2,r2,27940
   103dc:	00c00044 	movi	r3,1
   103e0:	10c01115 	stw	r3,68(r2)
   103e4:	00000406 	br	103f8 <alt_sys_init+0x6fc>
   103e8:	00800074 	movhi	r2,1
   103ec:	109b4904 	addi	r2,r2,27940
   103f0:	00c00084 	movi	r3,2
   103f4:	10c01115 	stw	r3,68(r2)
   103f8:	e0bfff83 	ldbu	r2,-2(fp)
   103fc:	00c00804 	movi	r3,32
   10400:	1885c83a 	sub	r2,r3,r2
   10404:	00ffffc4 	movi	r3,-1
   10408:	1886d83a 	srl	r3,r3,r2
   1040c:	00800074 	movhi	r2,1
   10410:	109b4904 	addi	r2,r2,27940
   10414:	10c01215 	stw	r3,72(r2)
   10418:	e0ffff83 	ldbu	r3,-2(fp)
   1041c:	00800074 	movhi	r2,1
   10420:	109b4904 	addi	r2,r2,27940
   10424:	10801117 	ldw	r2,68(r2)
   10428:	1887883a 	add	r3,r3,r2
   1042c:	00800074 	movhi	r2,1
   10430:	109b4904 	addi	r2,r2,27940
   10434:	10c01315 	stw	r3,76(r2)
   10438:	e0bfffc3 	ldbu	r2,-1(fp)
   1043c:	00c00804 	movi	r3,32
   10440:	1885c83a 	sub	r2,r3,r2
   10444:	00ffffc4 	movi	r3,-1
   10448:	1886d83a 	srl	r3,r3,r2
   1044c:	00800074 	movhi	r2,1
   10450:	109b4904 	addi	r2,r2,27940
   10454:	10c01415 	stw	r3,80(r2)
   10458:	01000074 	movhi	r4,1
   1045c:	211b4904 	addi	r4,r4,27940
   10460:	000fc900 	call	fc90 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_RGB_RESAMPLER, vga_subsystem_Char_Buf_Subsystem_Char_Buf_RGB_Resampler);
   10464:	00800074 	movhi	r2,1
   10468:	109b5e04 	addi	r2,r2,28024
   1046c:	10800a17 	ldw	r2,40(r2)
   10470:	10800017 	ldw	r2,0(r2)
   10474:	10c003cc 	andi	r3,r2,15
   10478:	00800074 	movhi	r2,1
   1047c:	109b5e04 	addi	r2,r2,28024
   10480:	10c00b15 	stw	r3,44(r2)
   10484:	00800074 	movhi	r2,1
   10488:	109b5e04 	addi	r2,r2,28024
   1048c:	10800a17 	ldw	r2,40(r2)
   10490:	10800017 	ldw	r2,0(r2)
   10494:	1005d13a 	srai	r2,r2,4
   10498:	10c0004c 	andi	r3,r2,1
   1049c:	00800074 	movhi	r2,1
   104a0:	109b5e04 	addi	r2,r2,28024
   104a4:	10c00c15 	stw	r3,48(r2)
   104a8:	00800074 	movhi	r2,1
   104ac:	109b5e04 	addi	r2,r2,28024
   104b0:	10800a17 	ldw	r2,40(r2)
   104b4:	10800017 	ldw	r2,0(r2)
   104b8:	1005d17a 	srai	r2,r2,5
   104bc:	10c0004c 	andi	r3,r2,1
   104c0:	00800074 	movhi	r2,1
   104c4:	109b5e04 	addi	r2,r2,28024
   104c8:	10c00d15 	stw	r3,52(r2)
   104cc:	00800074 	movhi	r2,1
   104d0:	109b5e04 	addi	r2,r2,28024
   104d4:	10800a17 	ldw	r2,40(r2)
   104d8:	10800017 	ldw	r2,0(r2)
   104dc:	1005d43a 	srai	r2,r2,16
   104e0:	10c003cc 	andi	r3,r2,15
   104e4:	00800074 	movhi	r2,1
   104e8:	109b5e04 	addi	r2,r2,28024
   104ec:	10c00e15 	stw	r3,56(r2)
   104f0:	00800074 	movhi	r2,1
   104f4:	109b5e04 	addi	r2,r2,28024
   104f8:	10800a17 	ldw	r2,40(r2)
   104fc:	10800017 	ldw	r2,0(r2)
   10500:	1005d53a 	srai	r2,r2,20
   10504:	10c0004c 	andi	r3,r2,1
   10508:	00800074 	movhi	r2,1
   1050c:	109b5e04 	addi	r2,r2,28024
   10510:	10c00f15 	stw	r3,60(r2)
   10514:	00800074 	movhi	r2,1
   10518:	109b5e04 	addi	r2,r2,28024
   1051c:	10800a17 	ldw	r2,40(r2)
   10520:	10800017 	ldw	r2,0(r2)
   10524:	1005d57a 	srai	r2,r2,21
   10528:	10c0004c 	andi	r3,r2,1
   1052c:	00800074 	movhi	r2,1
   10530:	109b5e04 	addi	r2,r2,28024
   10534:	10c01015 	stw	r3,64(r2)
   10538:	01000074 	movhi	r4,1
   1053c:	211b5e04 	addi	r4,r4,28024
   10540:	000fc900 	call	fc90 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, vga_subsystem_VGA_Pixel_RGB_Resampler);
   10544:	00800074 	movhi	r2,1
   10548:	109b6f04 	addi	r2,r2,28092
   1054c:	10800a17 	ldw	r2,40(r2)
   10550:	10800017 	ldw	r2,0(r2)
   10554:	10c003cc 	andi	r3,r2,15
   10558:	00800074 	movhi	r2,1
   1055c:	109b6f04 	addi	r2,r2,28092
   10560:	10c00b15 	stw	r3,44(r2)
   10564:	00800074 	movhi	r2,1
   10568:	109b6f04 	addi	r2,r2,28092
   1056c:	10800a17 	ldw	r2,40(r2)
   10570:	10800017 	ldw	r2,0(r2)
   10574:	1005d13a 	srai	r2,r2,4
   10578:	10c0004c 	andi	r3,r2,1
   1057c:	00800074 	movhi	r2,1
   10580:	109b6f04 	addi	r2,r2,28092
   10584:	10c00c15 	stw	r3,48(r2)
   10588:	00800074 	movhi	r2,1
   1058c:	109b6f04 	addi	r2,r2,28092
   10590:	10800a17 	ldw	r2,40(r2)
   10594:	10800017 	ldw	r2,0(r2)
   10598:	1005d17a 	srai	r2,r2,5
   1059c:	10c0004c 	andi	r3,r2,1
   105a0:	00800074 	movhi	r2,1
   105a4:	109b6f04 	addi	r2,r2,28092
   105a8:	10c00d15 	stw	r3,52(r2)
   105ac:	00800074 	movhi	r2,1
   105b0:	109b6f04 	addi	r2,r2,28092
   105b4:	10800a17 	ldw	r2,40(r2)
   105b8:	10800017 	ldw	r2,0(r2)
   105bc:	1005d43a 	srai	r2,r2,16
   105c0:	10c003cc 	andi	r3,r2,15
   105c4:	00800074 	movhi	r2,1
   105c8:	109b6f04 	addi	r2,r2,28092
   105cc:	10c00e15 	stw	r3,56(r2)
   105d0:	00800074 	movhi	r2,1
   105d4:	109b6f04 	addi	r2,r2,28092
   105d8:	10800a17 	ldw	r2,40(r2)
   105dc:	10800017 	ldw	r2,0(r2)
   105e0:	1005d53a 	srai	r2,r2,20
   105e4:	10c0004c 	andi	r3,r2,1
   105e8:	00800074 	movhi	r2,1
   105ec:	109b6f04 	addi	r2,r2,28092
   105f0:	10c00f15 	stw	r3,60(r2)
   105f4:	00800074 	movhi	r2,1
   105f8:	109b6f04 	addi	r2,r2,28092
   105fc:	10800a17 	ldw	r2,40(r2)
   10600:	10800017 	ldw	r2,0(r2)
   10604:	1005d57a 	srai	r2,r2,21
   10608:	10c0004c 	andi	r3,r2,1
   1060c:	00800074 	movhi	r2,1
   10610:	109b6f04 	addi	r2,r2,28092
   10614:	10c01015 	stw	r3,64(r2)
   10618:	01000074 	movhi	r4,1
   1061c:	211b6f04 	addi	r4,r4,28092
   10620:	000fc900 	call	fc90 <alt_dev_reg>
}
   10624:	0001883a 	nop
   10628:	e037883a 	mov	sp,fp
   1062c:	dfc00117 	ldw	ra,4(sp)
   10630:	df000017 	ldw	fp,0(sp)
   10634:	dec00204 	addi	sp,sp,8
   10638:	f800283a 	ret

0001063c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1063c:	defff904 	addi	sp,sp,-28
   10640:	dfc00615 	stw	ra,24(sp)
   10644:	df000515 	stw	fp,20(sp)
   10648:	df000504 	addi	fp,sp,20
   1064c:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   10650:	008000b4 	movhi	r2,2
   10654:	10a1a804 	addi	r2,r2,-31072
   10658:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   1065c:	e0bfff17 	ldw	r2,-4(fp)
   10660:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   10664:	e0bffc17 	ldw	r2,-16(fp)
   10668:	10800717 	ldw	r2,28(r2)
   1066c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   10670:	e0bffd17 	ldw	r2,-12(fp)
   10674:	10800217 	ldw	r2,8(r2)
   10678:	10800098 	cmpnei	r2,r2,2
   1067c:	1000251e 	bne	r2,zero,10714 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   10680:	e0bffd17 	ldw	r2,-12(fp)
   10684:	10c00017 	ldw	r3,0(r2)
   10688:	e0bffd17 	ldw	r2,-12(fp)
   1068c:	10800117 	ldw	r2,4(r2)
   10690:	e13ffe04 	addi	r4,fp,-8
   10694:	200f883a 	mov	r7,r4
   10698:	100d883a 	mov	r6,r2
   1069c:	180b883a 	mov	r5,r3
   106a0:	e13ffc17 	ldw	r4,-16(fp)
   106a4:	0010dec0 	call	10dec <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   106a8:	e0bffd17 	ldw	r2,-12(fp)
   106ac:	10c00117 	ldw	r3,4(r2)
   106b0:	e0bffe17 	ldw	r2,-8(fp)
   106b4:	1887c83a 	sub	r3,r3,r2
   106b8:	e0bffd17 	ldw	r2,-12(fp)
   106bc:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   106c0:	e0bffd17 	ldw	r2,-12(fp)
   106c4:	10c00017 	ldw	r3,0(r2)
   106c8:	e0bffe17 	ldw	r2,-8(fp)
   106cc:	1887883a 	add	r3,r3,r2
   106d0:	e0bffd17 	ldw	r2,-12(fp)
   106d4:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   106d8:	e0bffd17 	ldw	r2,-12(fp)
   106dc:	10800117 	ldw	r2,4(r2)
   106e0:	10000c26 	beq	r2,zero,10714 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   106e4:	01400704 	movi	r5,28
   106e8:	e13ffc17 	ldw	r4,-16(fp)
   106ec:	0011fa40 	call	11fa4 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   106f0:	01400084 	movi	r5,2
   106f4:	e13ffc17 	ldw	r4,-16(fp)
   106f8:	00120480 	call	12048 <alt_avalon_i2c_int_enable>
   106fc:	00000e06 	br	10738 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   10700:	e0bffb17 	ldw	r2,-20(fp)
   10704:	10bfffc4 	addi	r2,r2,-1
   10708:	e0bffb15 	stw	r2,-20(fp)
   1070c:	e0bffb17 	ldw	r2,-20(fp)
   10710:	10000426 	beq	r2,zero,10724 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   10714:	e13ffc17 	ldw	r4,-16(fp)
   10718:	0010da80 	call	10da8 <alt_avalon_i2c_is_busy>
   1071c:	103ff81e 	bne	r2,zero,10700 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153e700>
   10720:	00000106 	br	10728 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   10724:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   10728:	e13ffc17 	ldw	r4,-16(fp)
   1072c:	0010a500 	call	10a50 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   10730:	e0bffd17 	ldw	r2,-12(fp)
   10734:	10000215 	stw	zero,8(r2)
}
   10738:	e037883a 	mov	sp,fp
   1073c:	dfc00117 	ldw	ra,4(sp)
   10740:	df000017 	ldw	fp,0(sp)
   10744:	dec00204 	addi	sp,sp,8
   10748:	f800283a 	ret

0001074c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1074c:	defffc04 	addi	sp,sp,-16
   10750:	dfc00315 	stw	ra,12(sp)
   10754:	df000215 	stw	fp,8(sp)
   10758:	df000204 	addi	fp,sp,8
   1075c:	e13ffe15 	stw	r4,-8(fp)
   10760:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   10764:	e0bfff17 	ldw	r2,-4(fp)
   10768:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   1076c:	e1ffff17 	ldw	r7,-4(fp)
   10770:	000d883a 	mov	r6,zero
   10774:	01400074 	movhi	r5,1
   10778:	29418f04 	addi	r5,r5,1596
   1077c:	e13ffe17 	ldw	r4,-8(fp)
   10780:	00108380 	call	10838 <alt_avalon_i2c_register_callback>
}
   10784:	0001883a 	nop
   10788:	e037883a 	mov	sp,fp
   1078c:	dfc00117 	ldw	ra,4(sp)
   10790:	df000017 	ldw	fp,0(sp)
   10794:	dec00204 	addi	sp,sp,8
   10798:	f800283a 	ret

0001079c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   1079c:	defff904 	addi	sp,sp,-28
   107a0:	dfc00615 	stw	ra,24(sp)
   107a4:	df000515 	stw	fp,20(sp)
   107a8:	df000504 	addi	fp,sp,20
   107ac:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   107b0:	e0bfff17 	ldw	r2,-4(fp)
   107b4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   107b8:	014007c4 	movi	r5,31
   107bc:	e13ffb17 	ldw	r4,-20(fp)
   107c0:	0011fe00 	call	11fe0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   107c4:	01400704 	movi	r5,28
   107c8:	e13ffb17 	ldw	r4,-20(fp)
   107cc:	0011fa40 	call	11fa4 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   107d0:	e0bffb17 	ldw	r2,-20(fp)
   107d4:	10800617 	ldw	r2,24(r2)
   107d8:	10001126 	beq	r2,zero,10820 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107dc:	0005303a 	rdctl	r2,status
   107e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107e4:	e0fffd17 	ldw	r3,-12(fp)
   107e8:	00bfff84 	movi	r2,-2
   107ec:	1884703a 	and	r2,r3,r2
   107f0:	1001703a 	wrctl	status,r2
  
  return context;
   107f4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   107f8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   107fc:	e0bffb17 	ldw	r2,-20(fp)
   10800:	10800617 	ldw	r2,24(r2)
   10804:	e13ffb17 	ldw	r4,-20(fp)
   10808:	103ee83a 	callr	r2
   1080c:	e0bffc17 	ldw	r2,-16(fp)
   10810:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10814:	e0bffe17 	ldw	r2,-8(fp)
   10818:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   1081c:	0001883a 	nop
   10820:	0001883a 	nop
}
   10824:	e037883a 	mov	sp,fp
   10828:	dfc00117 	ldw	ra,4(sp)
   1082c:	df000017 	ldw	fp,0(sp)
   10830:	dec00204 	addi	sp,sp,8
   10834:	f800283a 	ret

00010838 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   10838:	defffb04 	addi	sp,sp,-20
   1083c:	df000415 	stw	fp,16(sp)
   10840:	df000404 	addi	fp,sp,16
   10844:	e13ffc15 	stw	r4,-16(fp)
   10848:	e17ffd15 	stw	r5,-12(fp)
   1084c:	e1bffe15 	stw	r6,-8(fp)
   10850:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   10854:	e0bffc17 	ldw	r2,-16(fp)
   10858:	e0fffd17 	ldw	r3,-12(fp)
   1085c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   10860:	e0bffc17 	ldw	r2,-16(fp)
   10864:	e0ffff17 	ldw	r3,-4(fp)
   10868:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   1086c:	e0bffc17 	ldw	r2,-16(fp)
   10870:	e0fffe17 	ldw	r3,-8(fp)
   10874:	10c00815 	stw	r3,32(r2)

    return ;
   10878:	0001883a 	nop
}
   1087c:	e037883a 	mov	sp,fp
   10880:	df000017 	ldw	fp,0(sp)
   10884:	dec00104 	addi	sp,sp,4
   10888:	f800283a 	ret

0001088c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   1088c:	defff704 	addi	sp,sp,-36
   10890:	dfc00815 	stw	ra,32(sp)
   10894:	df000715 	stw	fp,28(sp)
   10898:	df000704 	addi	fp,sp,28
   1089c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   108a0:	e13fff17 	ldw	r4,-4(fp)
   108a4:	0010a500 	call	10a50 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   108a8:	014007c4 	movi	r5,31
   108ac:	e13fff17 	ldw	r4,-4(fp)
   108b0:	0011fe00 	call	11fe0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   108b4:	01400704 	movi	r5,28
   108b8:	e13fff17 	ldw	r4,-4(fp)
   108bc:	0011fa40 	call	11fa4 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   108c0:	014000c4 	movi	r5,3
   108c4:	e13fff17 	ldw	r4,-4(fp)
   108c8:	00121ec0 	call	121ec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   108cc:	014000c4 	movi	r5,3
   108d0:	e13fff17 	ldw	r4,-4(fp)
   108d4:	001213c0 	call	1213c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   108d8:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   108dc:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   108e0:	e0bffb04 	addi	r2,fp,-20
   108e4:	018000b4 	movhi	r6,2
   108e8:	31a1a804 	addi	r6,r6,-31072
   108ec:	100b883a 	mov	r5,r2
   108f0:	e13fff17 	ldw	r4,-4(fp)
   108f4:	0010cac0 	call	10cac <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   108f8:	e0bffb04 	addi	r2,fp,-20
   108fc:	100b883a 	mov	r5,r2
   10900:	e13fff17 	ldw	r4,-4(fp)
   10904:	0010b4c0 	call	10b4c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   10908:	d1601704 	addi	r5,gp,-32676
   1090c:	e13fff17 	ldw	r4,-4(fp)
   10910:	00137f80 	call	137f8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   10914:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   10918:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   1091c:	e0bffa17 	ldw	r2,-24(fp)
   10920:	10000c1e 	bne	r2,zero,10954 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   10924:	e0bfff17 	ldw	r2,-4(fp)
   10928:	10c00417 	ldw	r3,16(r2)
   1092c:	e0bfff17 	ldw	r2,-4(fp)
   10930:	10800517 	ldw	r2,20(r2)
   10934:	d8000015 	stw	zero,0(sp)
   10938:	e1ffff17 	ldw	r7,-4(fp)
   1093c:	01800074 	movhi	r6,1
   10940:	3181e704 	addi	r6,r6,1948
   10944:	100b883a 	mov	r5,r2
   10948:	1809883a 	mov	r4,r3
   1094c:	000f2600 	call	f260 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   10950:	00000406 	br	10964 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   10954:	01000074 	movhi	r4,1
   10958:	21144b04 	addi	r4,r4,20780
   1095c:	0013e8c0 	call	13e8c <alt_printf>
    }

    return;
   10960:	0001883a 	nop

}
   10964:	e037883a 	mov	sp,fp
   10968:	dfc00117 	ldw	ra,4(sp)
   1096c:	df000017 	ldw	fp,0(sp)
   10970:	dec00204 	addi	sp,sp,8
   10974:	f800283a 	ret

00010978 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   10978:	defffc04 	addi	sp,sp,-16
   1097c:	dfc00315 	stw	ra,12(sp)
   10980:	df000215 	stw	fp,8(sp)
   10984:	df000204 	addi	fp,sp,8
   10988:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   1098c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   10990:	d1601704 	addi	r5,gp,-32676
   10994:	e13fff17 	ldw	r4,-4(fp)
   10998:	001395c0 	call	1395c <alt_find_dev>
   1099c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   109a0:	e0bffe17 	ldw	r2,-8(fp)
}
   109a4:	e037883a 	mov	sp,fp
   109a8:	dfc00117 	ldw	ra,4(sp)
   109ac:	df000017 	ldw	fp,0(sp)
   109b0:	dec00204 	addi	sp,sp,8
   109b4:	f800283a 	ret

000109b8 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   109b8:	defffc04 	addi	sp,sp,-16
   109bc:	df000315 	stw	fp,12(sp)
   109c0:	df000304 	addi	fp,sp,12
   109c4:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   109c8:	e0bfff17 	ldw	r2,-4(fp)
   109cc:	10800717 	ldw	r2,28(r2)
   109d0:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   109d4:	e0bfff17 	ldw	r2,-4(fp)
   109d8:	10800317 	ldw	r2,12(r2)
   109dc:	10800204 	addi	r2,r2,8
   109e0:	10800037 	ldwio	r2,0(r2)
   109e4:	1080004c 	andi	r2,r2,1
   109e8:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   109ec:	e0bffe17 	ldw	r2,-8(fp)
   109f0:	10000226 	beq	r2,zero,109fc <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   109f4:	00bffe44 	movi	r2,-7
   109f8:	00001106 	br	10a40 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   109fc:	e0bfff17 	ldw	r2,-4(fp)
   10a00:	10c00617 	ldw	r3,24(r2)
   10a04:	00800074 	movhi	r2,1
   10a08:	10818f04 	addi	r2,r2,1596
   10a0c:	1880021e 	bne	r3,r2,10a18 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   10a10:	e0bffd17 	ldw	r2,-12(fp)
   10a14:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   10a18:	e0bfff17 	ldw	r2,-4(fp)
   10a1c:	10800317 	ldw	r2,12(r2)
   10a20:	10800204 	addi	r2,r2,8
   10a24:	e0ffff17 	ldw	r3,-4(fp)
   10a28:	18c00317 	ldw	r3,12(r3)
   10a2c:	18c00204 	addi	r3,r3,8
   10a30:	18c00037 	ldwio	r3,0(r3)
   10a34:	18c00054 	ori	r3,r3,1
   10a38:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   10a3c:	0005883a 	mov	r2,zero
}
   10a40:	e037883a 	mov	sp,fp
   10a44:	df000017 	ldw	fp,0(sp)
   10a48:	dec00104 	addi	sp,sp,4
   10a4c:	f800283a 	ret

00010a50 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   10a50:	defffe04 	addi	sp,sp,-8
   10a54:	df000115 	stw	fp,4(sp)
   10a58:	df000104 	addi	fp,sp,4
   10a5c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   10a60:	e0bfff17 	ldw	r2,-4(fp)
   10a64:	10800317 	ldw	r2,12(r2)
   10a68:	10800204 	addi	r2,r2,8
   10a6c:	e0ffff17 	ldw	r3,-4(fp)
   10a70:	18c00317 	ldw	r3,12(r3)
   10a74:	18c00204 	addi	r3,r3,8
   10a78:	19000037 	ldwio	r4,0(r3)
   10a7c:	00ffff84 	movi	r3,-2
   10a80:	20c6703a 	and	r3,r4,r3
   10a84:	10c00035 	stwio	r3,0(r2)

}
   10a88:	0001883a 	nop
   10a8c:	e037883a 	mov	sp,fp
   10a90:	df000017 	ldw	fp,0(sp)
   10a94:	dec00104 	addi	sp,sp,4
   10a98:	f800283a 	ret

00010a9c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   10a9c:	defffd04 	addi	sp,sp,-12
   10aa0:	df000215 	stw	fp,8(sp)
   10aa4:	df000204 	addi	fp,sp,8
   10aa8:	e13ffe15 	stw	r4,-8(fp)
   10aac:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   10ab0:	e0bffe17 	ldw	r2,-8(fp)
   10ab4:	10c00d17 	ldw	r3,52(r2)
   10ab8:	e0bfff17 	ldw	r2,-4(fp)
   10abc:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   10ac0:	e0bffe17 	ldw	r2,-8(fp)
   10ac4:	10800317 	ldw	r2,12(r2)
   10ac8:	10800204 	addi	r2,r2,8
   10acc:	10800037 	ldwio	r2,0(r2)
   10ad0:	1080008c 	andi	r2,r2,2
   10ad4:	1005d07a 	srai	r2,r2,1
   10ad8:	1007883a 	mov	r3,r2
   10adc:	e0bfff17 	ldw	r2,-4(fp)
   10ae0:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   10ae4:	e0bffe17 	ldw	r2,-8(fp)
   10ae8:	10800317 	ldw	r2,12(r2)
   10aec:	10800904 	addi	r2,r2,36
   10af0:	10800037 	ldwio	r2,0(r2)
   10af4:	1007883a 	mov	r3,r2
   10af8:	e0bfff17 	ldw	r2,-4(fp)
   10afc:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   10b00:	e0bffe17 	ldw	r2,-8(fp)
   10b04:	10800317 	ldw	r2,12(r2)
   10b08:	10800804 	addi	r2,r2,32
   10b0c:	10800037 	ldwio	r2,0(r2)
   10b10:	1007883a 	mov	r3,r2
   10b14:	e0bfff17 	ldw	r2,-4(fp)
   10b18:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   10b1c:	e0bffe17 	ldw	r2,-8(fp)
   10b20:	10800317 	ldw	r2,12(r2)
   10b24:	10800a04 	addi	r2,r2,40
   10b28:	10800037 	ldwio	r2,0(r2)
   10b2c:	1007883a 	mov	r3,r2
   10b30:	e0bfff17 	ldw	r2,-4(fp)
   10b34:	10c0030d 	sth	r3,12(r2)
}
   10b38:	0001883a 	nop
   10b3c:	e037883a 	mov	sp,fp
   10b40:	df000017 	ldw	fp,0(sp)
   10b44:	dec00104 	addi	sp,sp,4
   10b48:	f800283a 	ret

00010b4c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   10b4c:	defffd04 	addi	sp,sp,-12
   10b50:	df000215 	stw	fp,8(sp)
   10b54:	df000204 	addi	fp,sp,8
   10b58:	e13ffe15 	stw	r4,-8(fp)
   10b5c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   10b60:	e0bfff17 	ldw	r2,-4(fp)
   10b64:	10c00017 	ldw	r3,0(r2)
   10b68:	e0bffe17 	ldw	r2,-8(fp)
   10b6c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   10b70:	e0bffe17 	ldw	r2,-8(fp)
   10b74:	10800317 	ldw	r2,12(r2)
   10b78:	10c00204 	addi	r3,r2,8
   10b7c:	e0bffe17 	ldw	r2,-8(fp)
   10b80:	10800317 	ldw	r2,12(r2)
   10b84:	10800204 	addi	r2,r2,8
   10b88:	10800037 	ldwio	r2,0(r2)
   10b8c:	1009883a 	mov	r4,r2
   10b90:	00bfff44 	movi	r2,-3
   10b94:	2088703a 	and	r4,r4,r2
   10b98:	e0bfff17 	ldw	r2,-4(fp)
   10b9c:	10800117 	ldw	r2,4(r2)
   10ba0:	1085883a 	add	r2,r2,r2
   10ba4:	1080008c 	andi	r2,r2,2
   10ba8:	2084b03a 	or	r2,r4,r2
   10bac:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   10bb0:	e0bffe17 	ldw	r2,-8(fp)
   10bb4:	10800317 	ldw	r2,12(r2)
   10bb8:	10800904 	addi	r2,r2,36
   10bbc:	e0ffff17 	ldw	r3,-4(fp)
   10bc0:	18c0020b 	ldhu	r3,8(r3)
   10bc4:	18ffffcc 	andi	r3,r3,65535
   10bc8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   10bcc:	e0bffe17 	ldw	r2,-8(fp)
   10bd0:	10800317 	ldw	r2,12(r2)
   10bd4:	10800804 	addi	r2,r2,32
   10bd8:	e0ffff17 	ldw	r3,-4(fp)
   10bdc:	18c0028b 	ldhu	r3,10(r3)
   10be0:	18ffffcc 	andi	r3,r3,65535
   10be4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   10be8:	e0bffe17 	ldw	r2,-8(fp)
   10bec:	10800317 	ldw	r2,12(r2)
   10bf0:	10800a04 	addi	r2,r2,40
   10bf4:	e0ffff17 	ldw	r3,-4(fp)
   10bf8:	18c0030b 	ldhu	r3,12(r3)
   10bfc:	18ffffcc 	andi	r3,r3,65535
   10c00:	10c00035 	stwio	r3,0(r2)
}
   10c04:	0001883a 	nop
   10c08:	e037883a 	mov	sp,fp
   10c0c:	df000017 	ldw	fp,0(sp)
   10c10:	dec00104 	addi	sp,sp,4
   10c14:	f800283a 	ret

00010c18 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   10c18:	defffb04 	addi	sp,sp,-20
   10c1c:	dfc00415 	stw	ra,16(sp)
   10c20:	df000315 	stw	fp,12(sp)
   10c24:	df000304 	addi	fp,sp,12
   10c28:	e13ffd15 	stw	r4,-12(fp)
   10c2c:	e17ffe15 	stw	r5,-8(fp)
   10c30:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   10c34:	e0bffe17 	ldw	r2,-8(fp)
   10c38:	1080028b 	ldhu	r2,10(r2)
   10c3c:	10bfffcc 	andi	r2,r2,65535
   10c40:	10000426 	beq	r2,zero,10c54 <alt_avalon_i2c_master_config_speed_get+0x3c>
   10c44:	e0bffe17 	ldw	r2,-8(fp)
   10c48:	1080020b 	ldhu	r2,8(r2)
   10c4c:	10bfffcc 	andi	r2,r2,65535
   10c50:	1000021e 	bne	r2,zero,10c5c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   10c54:	00bfff44 	movi	r2,-3
   10c58:	00000f06 	br	10c98 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   10c5c:	e0bffd17 	ldw	r2,-12(fp)
   10c60:	11000c17 	ldw	r4,48(r2)
   10c64:	e0bffe17 	ldw	r2,-8(fp)
   10c68:	1080028b 	ldhu	r2,10(r2)
   10c6c:	10ffffcc 	andi	r3,r2,65535
   10c70:	e0bffe17 	ldw	r2,-8(fp)
   10c74:	1080020b 	ldhu	r2,8(r2)
   10c78:	10bfffcc 	andi	r2,r2,65535
   10c7c:	1885883a 	add	r2,r3,r2
   10c80:	100b883a 	mov	r5,r2
   10c84:	000c7300 	call	c730 <__udivsi3>
   10c88:	1007883a 	mov	r3,r2
   10c8c:	e0bfff17 	ldw	r2,-4(fp)
   10c90:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   10c94:	0005883a 	mov	r2,zero
}
   10c98:	e037883a 	mov	sp,fp
   10c9c:	dfc00117 	ldw	ra,4(sp)
   10ca0:	df000017 	ldw	fp,0(sp)
   10ca4:	dec00204 	addi	sp,sp,8
   10ca8:	f800283a 	ret

00010cac <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   10cac:	defff904 	addi	sp,sp,-28
   10cb0:	dfc00615 	stw	ra,24(sp)
   10cb4:	df000515 	stw	fp,20(sp)
   10cb8:	df000504 	addi	fp,sp,20
   10cbc:	e13ffd15 	stw	r4,-12(fp)
   10cc0:	e17ffe15 	stw	r5,-8(fp)
   10cc4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   10cc8:	e0ffff17 	ldw	r3,-4(fp)
   10ccc:	008001b4 	movhi	r2,6
   10cd0:	1086a004 	addi	r2,r2,6784
   10cd4:	10c00436 	bltu	r2,r3,10ce8 <alt_avalon_i2c_master_config_speed_set+0x3c>
   10cd8:	e0bfff17 	ldw	r2,-4(fp)
   10cdc:	10000226 	beq	r2,zero,10ce8 <alt_avalon_i2c_master_config_speed_set+0x3c>
   10ce0:	e0bfff17 	ldw	r2,-4(fp)
   10ce4:	1000021e 	bne	r2,zero,10cf0 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   10ce8:	00bfff04 	movi	r2,-4
   10cec:	00002906 	br	10d94 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   10cf0:	e0bffd17 	ldw	r2,-12(fp)
   10cf4:	10c00c17 	ldw	r3,48(r2)
   10cf8:	e0bfff17 	ldw	r2,-4(fp)
   10cfc:	1085883a 	add	r2,r2,r2
   10d00:	100b883a 	mov	r5,r2
   10d04:	1809883a 	mov	r4,r3
   10d08:	000c7300 	call	c730 <__udivsi3>
   10d0c:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   10d10:	e0bffb17 	ldw	r2,-20(fp)
   10d14:	10800f04 	addi	r2,r2,60
   10d18:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   10d1c:	e0bffb17 	ldw	r2,-20(fp)
   10d20:	10bff104 	addi	r2,r2,-60
   10d24:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   10d28:	e0ffff17 	ldw	r3,-4(fp)
   10d2c:	008000b4 	movhi	r2,2
   10d30:	10a1a804 	addi	r2,r2,-31072
   10d34:	10c0042e 	bgeu	r2,r3,10d48 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   10d38:	e0bffe17 	ldw	r2,-8(fp)
   10d3c:	00c00044 	movi	r3,1
   10d40:	10c00115 	stw	r3,4(r2)
   10d44:	00000206 	br	10d50 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   10d48:	e0bffe17 	ldw	r2,-8(fp)
   10d4c:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   10d50:	e0bffb17 	ldw	r2,-20(fp)
   10d54:	1007883a 	mov	r3,r2
   10d58:	e0bffe17 	ldw	r2,-8(fp)
   10d5c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   10d60:	e0bffc17 	ldw	r2,-16(fp)
   10d64:	1007883a 	mov	r3,r2
   10d68:	e0bffe17 	ldw	r2,-8(fp)
   10d6c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   10d70:	e0bffb17 	ldw	r2,-20(fp)
   10d74:	1007883a 	mov	r3,r2
   10d78:	e0bffb17 	ldw	r2,-20(fp)
   10d7c:	1004d07a 	srli	r2,r2,1
   10d80:	1885c83a 	sub	r2,r3,r2
   10d84:	1007883a 	mov	r3,r2
   10d88:	e0bffe17 	ldw	r2,-8(fp)
   10d8c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   10d90:	0005883a 	mov	r2,zero

}
   10d94:	e037883a 	mov	sp,fp
   10d98:	dfc00117 	ldw	ra,4(sp)
   10d9c:	df000017 	ldw	fp,0(sp)
   10da0:	dec00204 	addi	sp,sp,8
   10da4:	f800283a 	ret

00010da8 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   10da8:	defffe04 	addi	sp,sp,-8
   10dac:	df000115 	stw	fp,4(sp)
   10db0:	df000104 	addi	fp,sp,4
   10db4:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   10db8:	e0bfff17 	ldw	r2,-4(fp)
   10dbc:	10800317 	ldw	r2,12(r2)
   10dc0:	10800504 	addi	r2,r2,20
   10dc4:	10800037 	ldwio	r2,0(r2)
   10dc8:	1080004c 	andi	r2,r2,1
   10dcc:	10000226 	beq	r2,zero,10dd8 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   10dd0:	00800044 	movi	r2,1
   10dd4:	00000106 	br	10ddc <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   10dd8:	0005883a 	mov	r2,zero
}
   10ddc:	e037883a 	mov	sp,fp
   10de0:	df000017 	ldw	fp,0(sp)
   10de4:	dec00104 	addi	sp,sp,4
   10de8:	f800283a 	ret

00010dec <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   10dec:	defffb04 	addi	sp,sp,-20
   10df0:	df000415 	stw	fp,16(sp)
   10df4:	df000404 	addi	fp,sp,16
   10df8:	e13ffc15 	stw	r4,-16(fp)
   10dfc:	e17ffd15 	stw	r5,-12(fp)
   10e00:	e1bffe15 	stw	r6,-8(fp)
   10e04:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   10e08:	e0bfff17 	ldw	r2,-4(fp)
   10e0c:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   10e10:	00001406 	br	10e64 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   10e14:	e0bfff17 	ldw	r2,-4(fp)
   10e18:	10800017 	ldw	r2,0(r2)
   10e1c:	e0fffd17 	ldw	r3,-12(fp)
   10e20:	1885883a 	add	r2,r3,r2
   10e24:	e0fffc17 	ldw	r3,-16(fp)
   10e28:	18c00317 	ldw	r3,12(r3)
   10e2c:	18c00104 	addi	r3,r3,4
   10e30:	18c00037 	ldwio	r3,0(r3)
   10e34:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   10e38:	e0bfff17 	ldw	r2,-4(fp)
   10e3c:	10800017 	ldw	r2,0(r2)
   10e40:	10c00044 	addi	r3,r2,1
   10e44:	e0bfff17 	ldw	r2,-4(fp)
   10e48:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   10e4c:	e0bfff17 	ldw	r2,-4(fp)
   10e50:	10c00017 	ldw	r3,0(r2)
   10e54:	e0bffe17 	ldw	r2,-8(fp)
   10e58:	1880021e 	bne	r3,r2,10e64 <alt_avalon_i2c_rx_read_available+0x78>
   10e5c:	e0bffe17 	ldw	r2,-8(fp)
   10e60:	1000061e 	bne	r2,zero,10e7c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   10e64:	e0bffc17 	ldw	r2,-16(fp)
   10e68:	10800317 	ldw	r2,12(r2)
   10e6c:	10800704 	addi	r2,r2,28
   10e70:	10800037 	ldwio	r2,0(r2)
   10e74:	103fe71e 	bne	r2,zero,10e14 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153ee14>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   10e78:	00000106 	br	10e80 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   10e7c:	0001883a 	nop
    }
}
   10e80:	0001883a 	nop
   10e84:	e037883a 	mov	sp,fp
   10e88:	df000017 	ldw	fp,0(sp)
   10e8c:	dec00104 	addi	sp,sp,4
   10e90:	f800283a 	ret

00010e94 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   10e94:	defffa04 	addi	sp,sp,-24
   10e98:	dfc00515 	stw	ra,20(sp)
   10e9c:	df000415 	stw	fp,16(sp)
   10ea0:	df000404 	addi	fp,sp,16
   10ea4:	e13ffe15 	stw	r4,-8(fp)
   10ea8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   10eac:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   10eb0:	008000b4 	movhi	r2,2
   10eb4:	10a1a804 	addi	r2,r2,-31072
   10eb8:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   10ebc:	00000d06 	br	10ef4 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   10ec0:	e0bffd17 	ldw	r2,-12(fp)
   10ec4:	108002a8 	cmpgeui	r2,r2,10
   10ec8:	1000021e 	bne	r2,zero,10ed4 <alt_avalon_i2c_rx_read+0x40>
   10ecc:	0109c404 	movi	r4,10000
   10ed0:	00136440 	call	13644 <alt_busy_sleep>
      if (--timeout == 0)
   10ed4:	e0bffd17 	ldw	r2,-12(fp)
   10ed8:	10bfffc4 	addi	r2,r2,-1
   10edc:	e0bffd15 	stw	r2,-12(fp)
   10ee0:	e0bffd17 	ldw	r2,-12(fp)
   10ee4:	1000031e 	bne	r2,zero,10ef4 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   10ee8:	00bfff84 	movi	r2,-2
   10eec:	e0bffc15 	stw	r2,-16(fp)
        break;
   10ef0:	00000506 	br	10f08 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   10ef4:	e0bffe17 	ldw	r2,-8(fp)
   10ef8:	10800317 	ldw	r2,12(r2)
   10efc:	10800704 	addi	r2,r2,28
   10f00:	10800037 	ldwio	r2,0(r2)
   10f04:	103fee26 	beq	r2,zero,10ec0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153eec0>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   10f08:	e0bffe17 	ldw	r2,-8(fp)
   10f0c:	10800317 	ldw	r2,12(r2)
   10f10:	10800104 	addi	r2,r2,4
   10f14:	10800037 	ldwio	r2,0(r2)
   10f18:	1007883a 	mov	r3,r2
   10f1c:	e0bfff17 	ldw	r2,-4(fp)
   10f20:	10c00005 	stb	r3,0(r2)
        
    return status;
   10f24:	e0bffc17 	ldw	r2,-16(fp)
}
   10f28:	e037883a 	mov	sp,fp
   10f2c:	dfc00117 	ldw	ra,4(sp)
   10f30:	df000017 	ldw	fp,0(sp)
   10f34:	dec00204 	addi	sp,sp,8
   10f38:	f800283a 	ret

00010f3c <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   10f3c:	defff804 	addi	sp,sp,-32
   10f40:	dfc00715 	stw	ra,28(sp)
   10f44:	df000615 	stw	fp,24(sp)
   10f48:	df000604 	addi	fp,sp,24
   10f4c:	e13ffc15 	stw	r4,-16(fp)
   10f50:	2809883a 	mov	r4,r5
   10f54:	3007883a 	mov	r3,r6
   10f58:	3805883a 	mov	r2,r7
   10f5c:	e13ffd05 	stb	r4,-12(fp)
   10f60:	e0fffe05 	stb	r3,-8(fp)
   10f64:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   10f68:	0089c404 	movi	r2,10000
   10f6c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   10f70:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   10f74:	00000c06 	br	10fa8 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   10f78:	e0bffa17 	ldw	r2,-24(fp)
   10f7c:	108002a8 	cmpgeui	r2,r2,10
   10f80:	1000021e 	bne	r2,zero,10f8c <alt_avalon_i2c_cmd_write+0x50>
   10f84:	0109c404 	movi	r4,10000
   10f88:	00136440 	call	13644 <alt_busy_sleep>
      if (--timeout == 0)
   10f8c:	e0bffa17 	ldw	r2,-24(fp)
   10f90:	10bfffc4 	addi	r2,r2,-1
   10f94:	e0bffa15 	stw	r2,-24(fp)
   10f98:	e0bffa17 	ldw	r2,-24(fp)
   10f9c:	1000021e 	bne	r2,zero,10fa8 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   10fa0:	00bfff84 	movi	r2,-2
   10fa4:	00001906 	br	1100c <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   10fa8:	e0bffc17 	ldw	r2,-16(fp)
   10fac:	10800317 	ldw	r2,12(r2)
   10fb0:	10800404 	addi	r2,r2,16
   10fb4:	10800037 	ldwio	r2,0(r2)
   10fb8:	1080004c 	andi	r2,r2,1
   10fbc:	103fee26 	beq	r2,zero,10f78 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153ef78>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   10fc0:	e0bffc17 	ldw	r2,-16(fp)
   10fc4:	10800317 	ldw	r2,12(r2)
   10fc8:	e13ffd03 	ldbu	r4,-12(fp)
   10fcc:	e0fffe03 	ldbu	r3,-8(fp)
   10fd0:	1806927a 	slli	r3,r3,9
   10fd4:	20c8b03a 	or	r4,r4,r3
   10fd8:	e0ffff03 	ldbu	r3,-4(fp)
   10fdc:	1806923a 	slli	r3,r3,8
   10fe0:	20c6b03a 	or	r3,r4,r3
   10fe4:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   10fe8:	e0bffb04 	addi	r2,fp,-20
   10fec:	100b883a 	mov	r5,r2
   10ff0:	e13ffc17 	ldw	r4,-16(fp)
   10ff4:	001117c0 	call	1117c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   10ff8:	e0bffb04 	addi	r2,fp,-20
   10ffc:	100b883a 	mov	r5,r2
   11000:	e13ffc17 	ldw	r4,-16(fp)
   11004:	00111c80 	call	111c8 <alt_avalon_i2c_check_arblost>
    
    return status;
   11008:	e0bffb17 	ldw	r2,-20(fp)
}
   1100c:	e037883a 	mov	sp,fp
   11010:	dfc00117 	ldw	ra,4(sp)
   11014:	df000017 	ldw	fp,0(sp)
   11018:	dec00204 	addi	sp,sp,8
   1101c:	f800283a 	ret

00011020 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   11020:	defffa04 	addi	sp,sp,-24
   11024:	dfc00515 	stw	ra,20(sp)
   11028:	df000415 	stw	fp,16(sp)
   1102c:	df000404 	addi	fp,sp,16
   11030:	e13ffd15 	stw	r4,-12(fp)
   11034:	e17ffe15 	stw	r5,-8(fp)
   11038:	3005883a 	mov	r2,r6
   1103c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   11040:	e0bffd17 	ldw	r2,-12(fp)
   11044:	10800d17 	ldw	r2,52(r2)
   11048:	10800058 	cmpnei	r2,r2,1
   1104c:	10001c1e 	bne	r2,zero,110c0 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   11050:	e0bffd17 	ldw	r2,-12(fp)
   11054:	10800917 	ldw	r2,36(r2)
   11058:	109e0014 	ori	r2,r2,30720
   1105c:	1004d1fa 	srli	r2,r2,7
   11060:	1007883a 	mov	r3,r2
   11064:	00bfff84 	movi	r2,-2
   11068:	1884703a 	and	r2,r3,r2
   1106c:	1007883a 	mov	r3,r2
   11070:	e0bffe17 	ldw	r2,-8(fp)
   11074:	1884b03a 	or	r2,r3,r2
   11078:	10803fcc 	andi	r2,r2,255
   1107c:	e0ffff03 	ldbu	r3,-4(fp)
   11080:	000f883a 	mov	r7,zero
   11084:	180d883a 	mov	r6,r3
   11088:	100b883a 	mov	r5,r2
   1108c:	e13ffd17 	ldw	r4,-12(fp)
   11090:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   11094:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   11098:	e0bffd17 	ldw	r2,-12(fp)
   1109c:	10800917 	ldw	r2,36(r2)
   110a0:	10803fcc 	andi	r2,r2,255
   110a4:	000f883a 	mov	r7,zero
   110a8:	000d883a 	mov	r6,zero
   110ac:	100b883a 	mov	r5,r2
   110b0:	e13ffd17 	ldw	r4,-12(fp)
   110b4:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   110b8:	e0bffc15 	stw	r2,-16(fp)
   110bc:	00000e06 	br	110f8 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   110c0:	e0bffd17 	ldw	r2,-12(fp)
   110c4:	10800917 	ldw	r2,36(r2)
   110c8:	1085883a 	add	r2,r2,r2
   110cc:	1007883a 	mov	r3,r2
   110d0:	e0bffe17 	ldw	r2,-8(fp)
   110d4:	1884b03a 	or	r2,r3,r2
   110d8:	10803fcc 	andi	r2,r2,255
   110dc:	e0ffff03 	ldbu	r3,-4(fp)
   110e0:	000f883a 	mov	r7,zero
   110e4:	180d883a 	mov	r6,r3
   110e8:	100b883a 	mov	r5,r2
   110ec:	e13ffd17 	ldw	r4,-12(fp)
   110f0:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   110f4:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   110f8:	e0bffc17 	ldw	r2,-16(fp)
}
   110fc:	e037883a 	mov	sp,fp
   11100:	dfc00117 	ldw	ra,4(sp)
   11104:	df000017 	ldw	fp,0(sp)
   11108:	dec00204 	addi	sp,sp,8
   1110c:	f800283a 	ret

00011110 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   11110:	defffd04 	addi	sp,sp,-12
   11114:	df000215 	stw	fp,8(sp)
   11118:	df000204 	addi	fp,sp,8
   1111c:	e13ffe15 	stw	r4,-8(fp)
   11120:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   11124:	e0bffe17 	ldw	r2,-8(fp)
   11128:	10c00917 	ldw	r3,36(r2)
   1112c:	e0bfff17 	ldw	r2,-4(fp)
   11130:	10c00015 	stw	r3,0(r2)
}
   11134:	0001883a 	nop
   11138:	e037883a 	mov	sp,fp
   1113c:	df000017 	ldw	fp,0(sp)
   11140:	dec00104 	addi	sp,sp,4
   11144:	f800283a 	ret

00011148 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   11148:	defffd04 	addi	sp,sp,-12
   1114c:	df000215 	stw	fp,8(sp)
   11150:	df000204 	addi	fp,sp,8
   11154:	e13ffe15 	stw	r4,-8(fp)
   11158:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   1115c:	e0bffe17 	ldw	r2,-8(fp)
   11160:	e0ffff17 	ldw	r3,-4(fp)
   11164:	10c00915 	stw	r3,36(r2)
}
   11168:	0001883a 	nop
   1116c:	e037883a 	mov	sp,fp
   11170:	df000017 	ldw	fp,0(sp)
   11174:	dec00104 	addi	sp,sp,4
   11178:	f800283a 	ret

0001117c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   1117c:	defffd04 	addi	sp,sp,-12
   11180:	df000215 	stw	fp,8(sp)
   11184:	df000204 	addi	fp,sp,8
   11188:	e13ffe15 	stw	r4,-8(fp)
   1118c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   11190:	e0bffe17 	ldw	r2,-8(fp)
   11194:	10800317 	ldw	r2,12(r2)
   11198:	10800404 	addi	r2,r2,16
   1119c:	10800037 	ldwio	r2,0(r2)
   111a0:	1080010c 	andi	r2,r2,4
   111a4:	10000326 	beq	r2,zero,111b4 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   111a8:	e0bfff17 	ldw	r2,-4(fp)
   111ac:	00fffec4 	movi	r3,-5
   111b0:	10c00015 	stw	r3,0(r2)
    }
}
   111b4:	0001883a 	nop
   111b8:	e037883a 	mov	sp,fp
   111bc:	df000017 	ldw	fp,0(sp)
   111c0:	dec00104 	addi	sp,sp,4
   111c4:	f800283a 	ret

000111c8 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   111c8:	defffd04 	addi	sp,sp,-12
   111cc:	df000215 	stw	fp,8(sp)
   111d0:	df000204 	addi	fp,sp,8
   111d4:	e13ffe15 	stw	r4,-8(fp)
   111d8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   111dc:	e0bffe17 	ldw	r2,-8(fp)
   111e0:	10800317 	ldw	r2,12(r2)
   111e4:	10800404 	addi	r2,r2,16
   111e8:	10800037 	ldwio	r2,0(r2)
   111ec:	1080020c 	andi	r2,r2,8
   111f0:	10000326 	beq	r2,zero,11200 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   111f4:	e0bfff17 	ldw	r2,-4(fp)
   111f8:	00fffe84 	movi	r3,-6
   111fc:	10c00015 	stw	r3,0(r2)
    }
}
   11200:	0001883a 	nop
   11204:	e037883a 	mov	sp,fp
   11208:	df000017 	ldw	fp,0(sp)
   1120c:	dec00104 	addi	sp,sp,4
   11210:	f800283a 	ret

00011214 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11214:	defff804 	addi	sp,sp,-32
   11218:	dfc00715 	stw	ra,28(sp)
   1121c:	df000615 	stw	fp,24(sp)
   11220:	df000604 	addi	fp,sp,24
   11224:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11228:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1122c:	e0bfff17 	ldw	r2,-4(fp)
   11230:	10800717 	ldw	r2,28(r2)
   11234:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   11238:	e0bffb17 	ldw	r2,-20(fp)
   1123c:	10800117 	ldw	r2,4(r2)
   11240:	10800044 	addi	r2,r2,1
   11244:	0149c404 	movi	r5,10000
   11248:	1009883a 	mov	r4,r2
   1124c:	00020100 	call	2010 <__mulsi3>
   11250:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   11254:	e0bffd04 	addi	r2,fp,-12
   11258:	100b883a 	mov	r5,r2
   1125c:	e13fff17 	ldw	r4,-4(fp)
   11260:	00120ac0 	call	120ac <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   11264:	e0bffd17 	ldw	r2,-12(fp)
   11268:	100b883a 	mov	r5,r2
   1126c:	e13fff17 	ldw	r4,-4(fp)
   11270:	0011fe00 	call	11fe0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   11274:	e0bffc04 	addi	r2,fp,-16
   11278:	100b883a 	mov	r5,r2
   1127c:	e13fff17 	ldw	r4,-4(fp)
   11280:	001117c0 	call	1117c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   11284:	e0bffc17 	ldw	r2,-16(fp)
   11288:	10002226 	beq	r2,zero,11314 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   1128c:	e0bffb17 	ldw	r2,-20(fp)
   11290:	10800217 	ldw	r2,8(r2)
   11294:	10001d26 	beq	r2,zero,1130c <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   11298:	00000d06 	br	112d0 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   1129c:	e0bffa17 	ldw	r2,-24(fp)
   112a0:	108002a8 	cmpgeui	r2,r2,10
   112a4:	1000021e 	bne	r2,zero,112b0 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   112a8:	0109c404 	movi	r4,10000
   112ac:	00136440 	call	13644 <alt_busy_sleep>
              if (--timeout == 0)
   112b0:	e0bffa17 	ldw	r2,-24(fp)
   112b4:	10bfffc4 	addi	r2,r2,-1
   112b8:	e0bffa15 	stw	r2,-24(fp)
   112bc:	e0bffa17 	ldw	r2,-24(fp)
   112c0:	1000031e 	bne	r2,zero,112d0 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   112c4:	00bfff84 	movi	r2,-2
   112c8:	e0bffc15 	stw	r2,-16(fp)
                 break;
   112cc:	00000306 	br	112dc <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   112d0:	e13fff17 	ldw	r4,-4(fp)
   112d4:	0010da80 	call	10da8 <alt_avalon_i2c_is_busy>
   112d8:	103ff01e 	bne	r2,zero,1129c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153f29c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   112dc:	e0bffb17 	ldw	r2,-20(fp)
   112e0:	10800017 	ldw	r2,0(r2)
   112e4:	e0fffe04 	addi	r3,fp,-8
   112e8:	180f883a 	mov	r7,r3
   112ec:	000d883a 	mov	r6,zero
   112f0:	100b883a 	mov	r5,r2
   112f4:	e13fff17 	ldw	r4,-4(fp)
   112f8:	0010dec0 	call	10dec <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   112fc:	e13fff17 	ldw	r4,-4(fp)
   11300:	0010a500 	call	10a50 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   11304:	e0bffb17 	ldw	r2,-20(fp)
   11308:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   1130c:	e0bffc17 	ldw	r2,-16(fp)
   11310:	00000a06 	br	1133c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   11314:	e0bffb17 	ldw	r2,-20(fp)
   11318:	10800217 	ldw	r2,8(r2)
   1131c:	10000626 	beq	r2,zero,11338 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   11320:	e0bffd17 	ldw	r2,-12(fp)
   11324:	100b883a 	mov	r5,r2
   11328:	e13fff17 	ldw	r4,-4(fp)
   1132c:	00120480 	call	12048 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   11330:	00bffe44 	movi	r2,-7
   11334:	00000106 	br	1133c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   11338:	0005883a 	mov	r2,zero
}
   1133c:	e037883a 	mov	sp,fp
   11340:	dfc00117 	ldw	ra,4(sp)
   11344:	df000017 	ldw	fp,0(sp)
   11348:	dec00204 	addi	sp,sp,8
   1134c:	f800283a 	ret

00011350 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   11350:	defff704 	addi	sp,sp,-36
   11354:	dfc00815 	stw	ra,32(sp)
   11358:	df000715 	stw	fp,28(sp)
   1135c:	df000704 	addi	fp,sp,28
   11360:	e13ffc15 	stw	r4,-16(fp)
   11364:	e17ffd15 	stw	r5,-12(fp)
   11368:	e1bffe15 	stw	r6,-8(fp)
   1136c:	3805883a 	mov	r2,r7
   11370:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   11374:	0089c404 	movi	r2,10000
   11378:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   1137c:	00002206 	br	11408 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   11380:	e0bffb17 	ldw	r2,-20(fp)
   11384:	108002a8 	cmpgeui	r2,r2,10
   11388:	1000021e 	bne	r2,zero,11394 <alt_avalon_i2c_master_tx+0x44>
   1138c:	0109c404 	movi	r4,10000
   11390:	00136440 	call	13644 <alt_busy_sleep>
      if (use_interrupts)
   11394:	e0bfff03 	ldbu	r2,-4(fp)
   11398:	10000926 	beq	r2,zero,113c0 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   1139c:	00800044 	movi	r2,1
   113a0:	d8800015 	stw	r2,0(sp)
   113a4:	000f883a 	mov	r7,zero
   113a8:	e1bffe17 	ldw	r6,-8(fp)
   113ac:	e17ffd17 	ldw	r5,-12(fp)
   113b0:	e13ffc17 	ldw	r4,-16(fp)
   113b4:	00118fc0 	call	118fc <alt_avalon_i2c_master_transmit_using_interrupts>
   113b8:	e0bffa15 	stw	r2,-24(fp)
   113bc:	00000806 	br	113e0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   113c0:	00800044 	movi	r2,1
   113c4:	d8800015 	stw	r2,0(sp)
   113c8:	000f883a 	mov	r7,zero
   113cc:	e1bffe17 	ldw	r6,-8(fp)
   113d0:	e17ffd17 	ldw	r5,-12(fp)
   113d4:	e13ffc17 	ldw	r4,-16(fp)
   113d8:	001173c0 	call	1173c <alt_avalon_i2c_master_transmit>
   113dc:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   113e0:	e0bffa17 	ldw	r2,-24(fp)
   113e4:	10bffea0 	cmpeqi	r2,r2,-6
   113e8:	1000061e 	bne	r2,zero,11404 <alt_avalon_i2c_master_tx+0xb4>
   113ec:	e0bffa17 	ldw	r2,-24(fp)
   113f0:	10bffee0 	cmpeqi	r2,r2,-5
   113f4:	1000031e 	bne	r2,zero,11404 <alt_avalon_i2c_master_tx+0xb4>
   113f8:	e0bffa17 	ldw	r2,-24(fp)
   113fc:	10bffe58 	cmpnei	r2,r2,-7
   11400:	1000061e 	bne	r2,zero,1141c <alt_avalon_i2c_master_tx+0xcc>
   11404:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   11408:	e0bffb17 	ldw	r2,-20(fp)
   1140c:	10ffffc4 	addi	r3,r2,-1
   11410:	e0fffb15 	stw	r3,-20(fp)
   11414:	103fda1e 	bne	r2,zero,11380 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153f380>
   11418:	00000106 	br	11420 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   1141c:	0001883a 	nop
    }

    return status;
   11420:	e0bffa17 	ldw	r2,-24(fp)
}        
   11424:	e037883a 	mov	sp,fp
   11428:	dfc00117 	ldw	ra,4(sp)
   1142c:	df000017 	ldw	fp,0(sp)
   11430:	dec00204 	addi	sp,sp,8
   11434:	f800283a 	ret

00011438 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   11438:	defff704 	addi	sp,sp,-36
   1143c:	dfc00815 	stw	ra,32(sp)
   11440:	df000715 	stw	fp,28(sp)
   11444:	df000704 	addi	fp,sp,28
   11448:	e13ffc15 	stw	r4,-16(fp)
   1144c:	e17ffd15 	stw	r5,-12(fp)
   11450:	e1bffe15 	stw	r6,-8(fp)
   11454:	3805883a 	mov	r2,r7
   11458:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   1145c:	0089c404 	movi	r2,10000
   11460:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   11464:	e0bfff03 	ldbu	r2,-4(fp)
   11468:	10003426 	beq	r2,zero,1153c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   1146c:	00001706 	br	114cc <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   11470:	e0bffb17 	ldw	r2,-20(fp)
   11474:	108002a8 	cmpgeui	r2,r2,10
   11478:	1000021e 	bne	r2,zero,11484 <alt_avalon_i2c_master_rx+0x4c>
   1147c:	0109c404 	movi	r4,10000
   11480:	00136440 	call	13644 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   11484:	00800044 	movi	r2,1
   11488:	d8800015 	stw	r2,0(sp)
   1148c:	000f883a 	mov	r7,zero
   11490:	e1bffe17 	ldw	r6,-8(fp)
   11494:	e17ffd17 	ldw	r5,-12(fp)
   11498:	e13ffc17 	ldw	r4,-16(fp)
   1149c:	0011d180 	call	11d18 <alt_avalon_i2c_master_receive_using_interrupts>
   114a0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   114a4:	e0bffa17 	ldw	r2,-24(fp)
   114a8:	10bffea0 	cmpeqi	r2,r2,-6
   114ac:	1000061e 	bne	r2,zero,114c8 <alt_avalon_i2c_master_rx+0x90>
   114b0:	e0bffa17 	ldw	r2,-24(fp)
   114b4:	10bffee0 	cmpeqi	r2,r2,-5
   114b8:	1000031e 	bne	r2,zero,114c8 <alt_avalon_i2c_master_rx+0x90>
   114bc:	e0bffa17 	ldw	r2,-24(fp)
   114c0:	10bffe58 	cmpnei	r2,r2,-7
   114c4:	1000221e 	bne	r2,zero,11550 <alt_avalon_i2c_master_rx+0x118>
   114c8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   114cc:	e0bffb17 	ldw	r2,-20(fp)
   114d0:	10ffffc4 	addi	r3,r2,-1
   114d4:	e0fffb15 	stw	r3,-20(fp)
   114d8:	103fe51e 	bne	r2,zero,11470 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153f470>
   114dc:	00001f06 	br	1155c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   114e0:	e0bffb17 	ldw	r2,-20(fp)
   114e4:	108002a8 	cmpgeui	r2,r2,10
   114e8:	1000021e 	bne	r2,zero,114f4 <alt_avalon_i2c_master_rx+0xbc>
   114ec:	0109c404 	movi	r4,10000
   114f0:	00136440 	call	13644 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   114f4:	00800044 	movi	r2,1
   114f8:	d8800015 	stw	r2,0(sp)
   114fc:	000f883a 	mov	r7,zero
   11500:	e1bffe17 	ldw	r6,-8(fp)
   11504:	e17ffd17 	ldw	r5,-12(fp)
   11508:	e13ffc17 	ldw	r4,-16(fp)
   1150c:	0011b080 	call	11b08 <alt_avalon_i2c_master_receive>
   11510:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11514:	e0bffa17 	ldw	r2,-24(fp)
   11518:	10bffea0 	cmpeqi	r2,r2,-6
   1151c:	1000061e 	bne	r2,zero,11538 <alt_avalon_i2c_master_rx+0x100>
   11520:	e0bffa17 	ldw	r2,-24(fp)
   11524:	10bffee0 	cmpeqi	r2,r2,-5
   11528:	1000031e 	bne	r2,zero,11538 <alt_avalon_i2c_master_rx+0x100>
   1152c:	e0bffa17 	ldw	r2,-24(fp)
   11530:	10bffe58 	cmpnei	r2,r2,-7
   11534:	1000081e 	bne	r2,zero,11558 <alt_avalon_i2c_master_rx+0x120>
   11538:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   1153c:	e0bffb17 	ldw	r2,-20(fp)
   11540:	10ffffc4 	addi	r3,r2,-1
   11544:	e0fffb15 	stw	r3,-20(fp)
   11548:	103fe51e 	bne	r2,zero,114e0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153f4e0>
   1154c:	00000306 	br	1155c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   11550:	0001883a 	nop
   11554:	00000106 	br	1155c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   11558:	0001883a 	nop
      }
    }
    
    return status;
   1155c:	e0bffa17 	ldw	r2,-24(fp)
}        
   11560:	e037883a 	mov	sp,fp
   11564:	dfc00117 	ldw	ra,4(sp)
   11568:	df000017 	ldw	fp,0(sp)
   1156c:	dec00204 	addi	sp,sp,8
   11570:	f800283a 	ret

00011574 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   11574:	defff604 	addi	sp,sp,-40
   11578:	dfc00915 	stw	ra,36(sp)
   1157c:	df000815 	stw	fp,32(sp)
   11580:	df000804 	addi	fp,sp,32
   11584:	e13ffb15 	stw	r4,-20(fp)
   11588:	e17ffc15 	stw	r5,-16(fp)
   1158c:	e1bffd15 	stw	r6,-12(fp)
   11590:	e1fffe15 	stw	r7,-8(fp)
   11594:	e0800317 	ldw	r2,12(fp)
   11598:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   1159c:	0089c404 	movi	r2,10000
   115a0:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   115a4:	e0bfff03 	ldbu	r2,-4(fp)
   115a8:	10005626 	beq	r2,zero,11704 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   115ac:	00002806 	br	11650 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   115b0:	e0bffa17 	ldw	r2,-24(fp)
   115b4:	108002a8 	cmpgeui	r2,r2,10
   115b8:	1000021e 	bne	r2,zero,115c4 <alt_avalon_i2c_master_tx_rx+0x50>
   115bc:	0109c404 	movi	r4,10000
   115c0:	00136440 	call	13644 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   115c4:	d8000015 	stw	zero,0(sp)
   115c8:	000f883a 	mov	r7,zero
   115cc:	e1bffd17 	ldw	r6,-12(fp)
   115d0:	e17ffc17 	ldw	r5,-16(fp)
   115d4:	e13ffb17 	ldw	r4,-20(fp)
   115d8:	00118fc0 	call	118fc <alt_avalon_i2c_master_transmit_using_interrupts>
   115dc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   115e0:	e0bff917 	ldw	r2,-28(fp)
   115e4:	10bffea0 	cmpeqi	r2,r2,-6
   115e8:	1000191e 	bne	r2,zero,11650 <alt_avalon_i2c_master_tx_rx+0xdc>
   115ec:	e0bff917 	ldw	r2,-28(fp)
   115f0:	10bffee0 	cmpeqi	r2,r2,-5
   115f4:	1000161e 	bne	r2,zero,11650 <alt_avalon_i2c_master_tx_rx+0xdc>
   115f8:	e0bff917 	ldw	r2,-28(fp)
   115fc:	10bffe58 	cmpnei	r2,r2,-7
   11600:	1000011e 	bne	r2,zero,11608 <alt_avalon_i2c_master_tx_rx+0x94>
   11604:	00001206 	br	11650 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   11608:	00800044 	movi	r2,1
   1160c:	d8800015 	stw	r2,0(sp)
   11610:	01c00044 	movi	r7,1
   11614:	e1800217 	ldw	r6,8(fp)
   11618:	e17ffe17 	ldw	r5,-8(fp)
   1161c:	e13ffb17 	ldw	r4,-20(fp)
   11620:	0011d180 	call	11d18 <alt_avalon_i2c_master_receive_using_interrupts>
   11624:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11628:	e0bff917 	ldw	r2,-28(fp)
   1162c:	10bffea0 	cmpeqi	r2,r2,-6
   11630:	1000061e 	bne	r2,zero,1164c <alt_avalon_i2c_master_tx_rx+0xd8>
   11634:	e0bff917 	ldw	r2,-28(fp)
   11638:	10bffee0 	cmpeqi	r2,r2,-5
   1163c:	1000031e 	bne	r2,zero,1164c <alt_avalon_i2c_master_tx_rx+0xd8>
   11640:	e0bff917 	ldw	r2,-28(fp)
   11644:	10bffe58 	cmpnei	r2,r2,-7
   11648:	1000331e 	bne	r2,zero,11718 <alt_avalon_i2c_master_tx_rx+0x1a4>
   1164c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   11650:	e0bffa17 	ldw	r2,-24(fp)
   11654:	10ffffc4 	addi	r3,r2,-1
   11658:	e0fffa15 	stw	r3,-24(fp)
   1165c:	103fd41e 	bne	r2,zero,115b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153f5b0>
   11660:	00003006 	br	11724 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   11664:	e0bffa17 	ldw	r2,-24(fp)
   11668:	108002a8 	cmpgeui	r2,r2,10
   1166c:	1000021e 	bne	r2,zero,11678 <alt_avalon_i2c_master_tx_rx+0x104>
   11670:	0109c404 	movi	r4,10000
   11674:	00136440 	call	13644 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   11678:	d8000015 	stw	zero,0(sp)
   1167c:	000f883a 	mov	r7,zero
   11680:	e1bffd17 	ldw	r6,-12(fp)
   11684:	e17ffc17 	ldw	r5,-16(fp)
   11688:	e13ffb17 	ldw	r4,-20(fp)
   1168c:	001173c0 	call	1173c <alt_avalon_i2c_master_transmit>
   11690:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11694:	e0bff917 	ldw	r2,-28(fp)
   11698:	10bffea0 	cmpeqi	r2,r2,-6
   1169c:	1000191e 	bne	r2,zero,11704 <alt_avalon_i2c_master_tx_rx+0x190>
   116a0:	e0bff917 	ldw	r2,-28(fp)
   116a4:	10bffee0 	cmpeqi	r2,r2,-5
   116a8:	1000161e 	bne	r2,zero,11704 <alt_avalon_i2c_master_tx_rx+0x190>
   116ac:	e0bff917 	ldw	r2,-28(fp)
   116b0:	10bffe58 	cmpnei	r2,r2,-7
   116b4:	1000011e 	bne	r2,zero,116bc <alt_avalon_i2c_master_tx_rx+0x148>
   116b8:	00001206 	br	11704 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   116bc:	00800044 	movi	r2,1
   116c0:	d8800015 	stw	r2,0(sp)
   116c4:	01c00044 	movi	r7,1
   116c8:	e1800217 	ldw	r6,8(fp)
   116cc:	e17ffe17 	ldw	r5,-8(fp)
   116d0:	e13ffb17 	ldw	r4,-20(fp)
   116d4:	0011b080 	call	11b08 <alt_avalon_i2c_master_receive>
   116d8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   116dc:	e0bff917 	ldw	r2,-28(fp)
   116e0:	10bffea0 	cmpeqi	r2,r2,-6
   116e4:	1000061e 	bne	r2,zero,11700 <alt_avalon_i2c_master_tx_rx+0x18c>
   116e8:	e0bff917 	ldw	r2,-28(fp)
   116ec:	10bffee0 	cmpeqi	r2,r2,-5
   116f0:	1000031e 	bne	r2,zero,11700 <alt_avalon_i2c_master_tx_rx+0x18c>
   116f4:	e0bff917 	ldw	r2,-28(fp)
   116f8:	10bffe58 	cmpnei	r2,r2,-7
   116fc:	1000081e 	bne	r2,zero,11720 <alt_avalon_i2c_master_tx_rx+0x1ac>
   11700:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   11704:	e0bffa17 	ldw	r2,-24(fp)
   11708:	10ffffc4 	addi	r3,r2,-1
   1170c:	e0fffa15 	stw	r3,-24(fp)
   11710:	103fd41e 	bne	r2,zero,11664 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153f664>
   11714:	00000306 	br	11724 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   11718:	0001883a 	nop
   1171c:	00000106 	br	11724 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   11720:	0001883a 	nop
      }
    }
    
    return status;
   11724:	e0bff917 	ldw	r2,-28(fp)
}                                       
   11728:	e037883a 	mov	sp,fp
   1172c:	dfc00117 	ldw	ra,4(sp)
   11730:	df000017 	ldw	fp,0(sp)
   11734:	dec00204 	addi	sp,sp,8
   11738:	f800283a 	ret

0001173c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1173c:	defff704 	addi	sp,sp,-36
   11740:	dfc00815 	stw	ra,32(sp)
   11744:	df000715 	stw	fp,28(sp)
   11748:	df000704 	addi	fp,sp,28
   1174c:	e13ffb15 	stw	r4,-20(fp)
   11750:	e17ffc15 	stw	r5,-16(fp)
   11754:	e1bffd15 	stw	r6,-12(fp)
   11758:	3807883a 	mov	r3,r7
   1175c:	e0800217 	ldw	r2,8(fp)
   11760:	e0fffe05 	stb	r3,-8(fp)
   11764:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11768:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   1176c:	0149c404 	movi	r5,10000
   11770:	e13ffd17 	ldw	r4,-12(fp)
   11774:	00020100 	call	2010 <__mulsi3>
   11778:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   1177c:	e0bffd17 	ldw	r2,-12(fp)
   11780:	1000021e 	bne	r2,zero,1178c <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   11784:	0005883a 	mov	r2,zero
   11788:	00005706 	br	118e8 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   1178c:	e0bffe03 	ldbu	r2,-8(fp)
   11790:	10000a1e 	bne	r2,zero,117bc <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   11794:	e13ffb17 	ldw	r4,-20(fp)
   11798:	00109b80 	call	109b8 <alt_avalon_i2c_enable>
   1179c:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   117a0:	e0bffa17 	ldw	r2,-24(fp)
   117a4:	10000226 	beq	r2,zero,117b0 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   117a8:	e0bffa17 	ldw	r2,-24(fp)
   117ac:	00004e06 	br	118e8 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   117b0:	01400704 	movi	r5,28
   117b4:	e13ffb17 	ldw	r4,-20(fp)
   117b8:	0011fa40 	call	11fa4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   117bc:	e0bffe03 	ldbu	r2,-8(fp)
   117c0:	100d883a 	mov	r6,r2
   117c4:	000b883a 	mov	r5,zero
   117c8:	e13ffb17 	ldw	r4,-20(fp)
   117cc:	00110200 	call	11020 <alt_avalon_i2c_send_address>
   117d0:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   117d4:	e0bffa17 	ldw	r2,-24(fp)
   117d8:	1000271e 	bne	r2,zero,11878 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   117dc:	00000f06 	br	1181c <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   117e0:	e0bffc17 	ldw	r2,-16(fp)
   117e4:	10800003 	ldbu	r2,0(r2)
   117e8:	10803fcc 	andi	r2,r2,255
   117ec:	000f883a 	mov	r7,zero
   117f0:	000d883a 	mov	r6,zero
   117f4:	100b883a 	mov	r5,r2
   117f8:	e13ffb17 	ldw	r4,-20(fp)
   117fc:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   11800:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   11804:	e0bffc17 	ldw	r2,-16(fp)
   11808:	10800044 	addi	r2,r2,1
   1180c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   11810:	e0bffd17 	ldw	r2,-12(fp)
   11814:	10bfffc4 	addi	r2,r2,-1
   11818:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1181c:	e0bffd17 	ldw	r2,-12(fp)
   11820:	108000b0 	cmpltui	r2,r2,2
   11824:	1000021e 	bne	r2,zero,11830 <alt_avalon_i2c_master_transmit+0xf4>
   11828:	e0bffa17 	ldw	r2,-24(fp)
   1182c:	103fec26 	beq	r2,zero,117e0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153f7e0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   11830:	e0bffa17 	ldw	r2,-24(fp)
   11834:	1000101e 	bne	r2,zero,11878 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11838:	e0bffc17 	ldw	r2,-16(fp)
   1183c:	10800003 	ldbu	r2,0(r2)
   11840:	10803fcc 	andi	r2,r2,255
   11844:	e0ffff03 	ldbu	r3,-4(fp)
   11848:	180f883a 	mov	r7,r3
   1184c:	000d883a 	mov	r6,zero
   11850:	100b883a 	mov	r5,r2
   11854:	e13ffb17 	ldw	r4,-20(fp)
   11858:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   1185c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   11860:	e0bffc17 	ldw	r2,-16(fp)
   11864:	10800044 	addi	r2,r2,1
   11868:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1186c:	e0bffd17 	ldw	r2,-12(fp)
   11870:	10bfffc4 	addi	r2,r2,-1
   11874:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   11878:	e0bfff03 	ldbu	r2,-4(fp)
   1187c:	1000101e 	bne	r2,zero,118c0 <alt_avalon_i2c_master_transmit+0x184>
   11880:	e0bffa17 	ldw	r2,-24(fp)
   11884:	10001726 	beq	r2,zero,118e4 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   11888:	00000d06 	br	118c0 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   1188c:	e0bff917 	ldw	r2,-28(fp)
   11890:	108002a8 	cmpgeui	r2,r2,10
   11894:	1000021e 	bne	r2,zero,118a0 <alt_avalon_i2c_master_transmit+0x164>
   11898:	0109c404 	movi	r4,10000
   1189c:	00136440 	call	13644 <alt_busy_sleep>
            if (--timeout == 0)
   118a0:	e0bff917 	ldw	r2,-28(fp)
   118a4:	10bfffc4 	addi	r2,r2,-1
   118a8:	e0bff915 	stw	r2,-28(fp)
   118ac:	e0bff917 	ldw	r2,-28(fp)
   118b0:	1000031e 	bne	r2,zero,118c0 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   118b4:	00bfff84 	movi	r2,-2
   118b8:	e0bffa15 	stw	r2,-24(fp)
               break;
   118bc:	00000306 	br	118cc <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   118c0:	e13ffb17 	ldw	r4,-20(fp)
   118c4:	0010da80 	call	10da8 <alt_avalon_i2c_is_busy>
   118c8:	103ff01e 	bne	r2,zero,1188c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153f88c>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   118cc:	e0bffa04 	addi	r2,fp,-24
   118d0:	100b883a 	mov	r5,r2
   118d4:	e13ffb17 	ldw	r4,-20(fp)
   118d8:	001117c0 	call	1117c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   118dc:	e13ffb17 	ldw	r4,-20(fp)
   118e0:	0010a500 	call	10a50 <alt_avalon_i2c_disable>
    }


    return status;
   118e4:	e0bffa17 	ldw	r2,-24(fp)
}
   118e8:	e037883a 	mov	sp,fp
   118ec:	dfc00117 	ldw	ra,4(sp)
   118f0:	df000017 	ldw	fp,0(sp)
   118f4:	dec00204 	addi	sp,sp,8
   118f8:	f800283a 	ret

000118fc <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   118fc:	defff604 	addi	sp,sp,-40
   11900:	dfc00915 	stw	ra,36(sp)
   11904:	df000815 	stw	fp,32(sp)
   11908:	df000804 	addi	fp,sp,32
   1190c:	e13ffb15 	stw	r4,-20(fp)
   11910:	e17ffc15 	stw	r5,-16(fp)
   11914:	e1bffd15 	stw	r6,-12(fp)
   11918:	3807883a 	mov	r3,r7
   1191c:	e0800217 	ldw	r2,8(fp)
   11920:	e0fffe05 	stb	r3,-8(fp)
   11924:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11928:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   1192c:	0149c404 	movi	r5,10000
   11930:	e13ffd17 	ldw	r4,-12(fp)
   11934:	00020100 	call	2010 <__mulsi3>
   11938:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   1193c:	e0bffb17 	ldw	r2,-20(fp)
   11940:	10800717 	ldw	r2,28(r2)
   11944:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   11948:	e0bffd17 	ldw	r2,-12(fp)
   1194c:	1000021e 	bne	r2,zero,11958 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   11950:	0005883a 	mov	r2,zero
   11954:	00006706 	br	11af4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   11958:	e0bffb17 	ldw	r2,-20(fp)
   1195c:	10c00617 	ldw	r3,24(r2)
   11960:	00800074 	movhi	r2,1
   11964:	10818f04 	addi	r2,r2,1596
   11968:	18800226 	beq	r3,r2,11974 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   1196c:	00bfff44 	movi	r2,-3
   11970:	00006006 	br	11af4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   11974:	e0bffe03 	ldbu	r2,-8(fp)
   11978:	10000a1e 	bne	r2,zero,119a4 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1197c:	e13ffb17 	ldw	r4,-20(fp)
   11980:	00109b80 	call	109b8 <alt_avalon_i2c_enable>
   11984:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   11988:	e0bff817 	ldw	r2,-32(fp)
   1198c:	10000226 	beq	r2,zero,11998 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   11990:	e0bff817 	ldw	r2,-32(fp)
   11994:	00005706 	br	11af4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11998:	01400704 	movi	r5,28
   1199c:	e13ffb17 	ldw	r4,-20(fp)
   119a0:	0011fa40 	call	11fa4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   119a4:	e0bffe03 	ldbu	r2,-8(fp)
   119a8:	100d883a 	mov	r6,r2
   119ac:	000b883a 	mov	r5,zero
   119b0:	e13ffb17 	ldw	r4,-20(fp)
   119b4:	00110200 	call	11020 <alt_avalon_i2c_send_address>
   119b8:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   119bc:	e0bff817 	ldw	r2,-32(fp)
   119c0:	1000271e 	bne	r2,zero,11a60 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   119c4:	00000f06 	br	11a04 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   119c8:	e0bffc17 	ldw	r2,-16(fp)
   119cc:	10800003 	ldbu	r2,0(r2)
   119d0:	10803fcc 	andi	r2,r2,255
   119d4:	000f883a 	mov	r7,zero
   119d8:	000d883a 	mov	r6,zero
   119dc:	100b883a 	mov	r5,r2
   119e0:	e13ffb17 	ldw	r4,-20(fp)
   119e4:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   119e8:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   119ec:	e0bffc17 	ldw	r2,-16(fp)
   119f0:	10800044 	addi	r2,r2,1
   119f4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   119f8:	e0bffd17 	ldw	r2,-12(fp)
   119fc:	10bfffc4 	addi	r2,r2,-1
   11a00:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   11a04:	e0bffd17 	ldw	r2,-12(fp)
   11a08:	108000b0 	cmpltui	r2,r2,2
   11a0c:	1000021e 	bne	r2,zero,11a18 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   11a10:	e0bff817 	ldw	r2,-32(fp)
   11a14:	103fec26 	beq	r2,zero,119c8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153f9c8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   11a18:	e0bff817 	ldw	r2,-32(fp)
   11a1c:	1000101e 	bne	r2,zero,11a60 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11a20:	e0bffc17 	ldw	r2,-16(fp)
   11a24:	10800003 	ldbu	r2,0(r2)
   11a28:	10803fcc 	andi	r2,r2,255
   11a2c:	e0ffff03 	ldbu	r3,-4(fp)
   11a30:	180f883a 	mov	r7,r3
   11a34:	000d883a 	mov	r6,zero
   11a38:	100b883a 	mov	r5,r2
   11a3c:	e13ffb17 	ldw	r4,-20(fp)
   11a40:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   11a44:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   11a48:	e0bffc17 	ldw	r2,-16(fp)
   11a4c:	10800044 	addi	r2,r2,1
   11a50:	e0bffc15 	stw	r2,-16(fp)
            --size;
   11a54:	e0bffd17 	ldw	r2,-12(fp)
   11a58:	10bfffc4 	addi	r2,r2,-1
   11a5c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   11a60:	e0bff817 	ldw	r2,-32(fp)
   11a64:	10001426 	beq	r2,zero,11ab8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   11a68:	00000d06 	br	11aa0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   11a6c:	e0bff917 	ldw	r2,-28(fp)
   11a70:	108002a8 	cmpgeui	r2,r2,10
   11a74:	1000021e 	bne	r2,zero,11a80 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   11a78:	0109c404 	movi	r4,10000
   11a7c:	00136440 	call	13644 <alt_busy_sleep>
            if (--timeout == 0)
   11a80:	e0bff917 	ldw	r2,-28(fp)
   11a84:	10bfffc4 	addi	r2,r2,-1
   11a88:	e0bff915 	stw	r2,-28(fp)
   11a8c:	e0bff917 	ldw	r2,-28(fp)
   11a90:	1000031e 	bne	r2,zero,11aa0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   11a94:	00bfff84 	movi	r2,-2
   11a98:	e0bff815 	stw	r2,-32(fp)
               break;
   11a9c:	00000306 	br	11aac <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   11aa0:	e13ffb17 	ldw	r4,-20(fp)
   11aa4:	0010da80 	call	10da8 <alt_avalon_i2c_is_busy>
   11aa8:	103ff01e 	bne	r2,zero,11a6c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153fa6c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   11aac:	e13ffb17 	ldw	r4,-20(fp)
   11ab0:	0010a500 	call	10a50 <alt_avalon_i2c_disable>
   11ab4:	00000e06 	br	11af0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   11ab8:	e0bfff03 	ldbu	r2,-4(fp)
   11abc:	10000c26 	beq	r2,zero,11af0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11ac0:	01400704 	movi	r5,28
   11ac4:	e13ffb17 	ldw	r4,-20(fp)
   11ac8:	0011fa40 	call	11fa4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   11acc:	000b883a 	mov	r5,zero
   11ad0:	e13ffb17 	ldw	r4,-20(fp)
   11ad4:	00121ec0 	call	121ec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   11ad8:	e0bffa17 	ldw	r2,-24(fp)
   11adc:	00c00044 	movi	r3,1
   11ae0:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   11ae4:	01400044 	movi	r5,1
   11ae8:	e13ffb17 	ldw	r4,-20(fp)
   11aec:	00120480 	call	12048 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   11af0:	e0bff817 	ldw	r2,-32(fp)
}
   11af4:	e037883a 	mov	sp,fp
   11af8:	dfc00117 	ldw	ra,4(sp)
   11afc:	df000017 	ldw	fp,0(sp)
   11b00:	dec00204 	addi	sp,sp,8
   11b04:	f800283a 	ret

00011b08 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   11b08:	defff404 	addi	sp,sp,-48
   11b0c:	dfc00b15 	stw	ra,44(sp)
   11b10:	df000a15 	stw	fp,40(sp)
   11b14:	df000a04 	addi	fp,sp,40
   11b18:	e13ffb15 	stw	r4,-20(fp)
   11b1c:	e17ffc15 	stw	r5,-16(fp)
   11b20:	e1bffd15 	stw	r6,-12(fp)
   11b24:	3807883a 	mov	r3,r7
   11b28:	e0800217 	ldw	r2,8(fp)
   11b2c:	e0fffe05 	stb	r3,-8(fp)
   11b30:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11b34:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   11b38:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   11b3c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   11b40:	e0bffd17 	ldw	r2,-12(fp)
   11b44:	1000021e 	bne	r2,zero,11b50 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   11b48:	0005883a 	mov	r2,zero
   11b4c:	00006d06 	br	11d04 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   11b50:	e0bffe03 	ldbu	r2,-8(fp)
   11b54:	10000a1e 	bne	r2,zero,11b80 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   11b58:	e13ffb17 	ldw	r4,-20(fp)
   11b5c:	00109b80 	call	109b8 <alt_avalon_i2c_enable>
   11b60:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   11b64:	e0bff917 	ldw	r2,-28(fp)
   11b68:	10000226 	beq	r2,zero,11b74 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   11b6c:	e0bff917 	ldw	r2,-28(fp)
   11b70:	00006406 	br	11d04 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11b74:	01400704 	movi	r5,28
   11b78:	e13ffb17 	ldw	r4,-20(fp)
   11b7c:	0011fa40 	call	11fa4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   11b80:	e0bffe03 	ldbu	r2,-8(fp)
   11b84:	100d883a 	mov	r6,r2
   11b88:	01400044 	movi	r5,1
   11b8c:	e13ffb17 	ldw	r4,-20(fp)
   11b90:	00110200 	call	11020 <alt_avalon_i2c_send_address>
   11b94:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   11b98:	e0bff917 	ldw	r2,-28(fp)
   11b9c:	1000341e 	bne	r2,zero,11c70 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   11ba0:	00001906 	br	11c08 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   11ba4:	000f883a 	mov	r7,zero
   11ba8:	000d883a 	mov	r6,zero
   11bac:	000b883a 	mov	r5,zero
   11bb0:	e13ffb17 	ldw	r4,-20(fp)
   11bb4:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   11bb8:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   11bbc:	e0bff817 	ldw	r2,-32(fp)
   11bc0:	10800044 	addi	r2,r2,1
   11bc4:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   11bc8:	e0bff917 	ldw	r2,-28(fp)
   11bcc:	10000e1e 	bne	r2,zero,11c08 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   11bd0:	e0bffa04 	addi	r2,fp,-24
   11bd4:	100f883a 	mov	r7,r2
   11bd8:	000d883a 	mov	r6,zero
   11bdc:	e17ffc17 	ldw	r5,-16(fp)
   11be0:	e13ffb17 	ldw	r4,-20(fp)
   11be4:	0010dec0 	call	10dec <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   11be8:	e0bffa17 	ldw	r2,-24(fp)
   11bec:	e0fffc17 	ldw	r3,-16(fp)
   11bf0:	1885883a 	add	r2,r3,r2
   11bf4:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   11bf8:	e0bffa17 	ldw	r2,-24(fp)
   11bfc:	e0fff717 	ldw	r3,-36(fp)
   11c00:	1885883a 	add	r2,r3,r2
   11c04:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   11c08:	e0bffd17 	ldw	r2,-12(fp)
   11c0c:	10bfffc4 	addi	r2,r2,-1
   11c10:	e0fff817 	ldw	r3,-32(fp)
   11c14:	1880022e 	bgeu	r3,r2,11c20 <alt_avalon_i2c_master_receive+0x118>
   11c18:	e0bff917 	ldw	r2,-28(fp)
   11c1c:	103fe126 	beq	r2,zero,11ba4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153fba4>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   11c20:	e0bff917 	ldw	r2,-28(fp)
   11c24:	1000121e 	bne	r2,zero,11c70 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11c28:	e0bfff03 	ldbu	r2,-4(fp)
   11c2c:	100f883a 	mov	r7,r2
   11c30:	000d883a 	mov	r6,zero
   11c34:	000b883a 	mov	r5,zero
   11c38:	e13ffb17 	ldw	r4,-20(fp)
   11c3c:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   11c40:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   11c44:	00000a06 	br	11c70 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   11c48:	e17ffc17 	ldw	r5,-16(fp)
   11c4c:	e13ffb17 	ldw	r4,-20(fp)
   11c50:	0010e940 	call	10e94 <alt_avalon_i2c_rx_read>
   11c54:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   11c58:	e0bffc17 	ldw	r2,-16(fp)
   11c5c:	10800044 	addi	r2,r2,1
   11c60:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   11c64:	e0bff717 	ldw	r2,-36(fp)
   11c68:	10800044 	addi	r2,r2,1
   11c6c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   11c70:	e0fff717 	ldw	r3,-36(fp)
   11c74:	e0bffd17 	ldw	r2,-12(fp)
   11c78:	1880022e 	bgeu	r3,r2,11c84 <alt_avalon_i2c_master_receive+0x17c>
   11c7c:	e0bff917 	ldw	r2,-28(fp)
   11c80:	103ff126 	beq	r2,zero,11c48 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153fc48>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   11c84:	e0bfff03 	ldbu	r2,-4(fp)
   11c88:	1000021e 	bne	r2,zero,11c94 <alt_avalon_i2c_master_receive+0x18c>
   11c8c:	e0bff917 	ldw	r2,-28(fp)
   11c90:	10001b26 	beq	r2,zero,11d00 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   11c94:	0149c404 	movi	r5,10000
   11c98:	e13ffd17 	ldw	r4,-12(fp)
   11c9c:	00020100 	call	2010 <__mulsi3>
   11ca0:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   11ca4:	00000d06 	br	11cdc <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   11ca8:	e0bff617 	ldw	r2,-40(fp)
   11cac:	108002a8 	cmpgeui	r2,r2,10
   11cb0:	1000021e 	bne	r2,zero,11cbc <alt_avalon_i2c_master_receive+0x1b4>
   11cb4:	0109c404 	movi	r4,10000
   11cb8:	00136440 	call	13644 <alt_busy_sleep>
            if (--timeout == 0)
   11cbc:	e0bff617 	ldw	r2,-40(fp)
   11cc0:	10bfffc4 	addi	r2,r2,-1
   11cc4:	e0bff615 	stw	r2,-40(fp)
   11cc8:	e0bff617 	ldw	r2,-40(fp)
   11ccc:	1000031e 	bne	r2,zero,11cdc <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   11cd0:	00bfff84 	movi	r2,-2
   11cd4:	e0bff915 	stw	r2,-28(fp)
               break;
   11cd8:	00000306 	br	11ce8 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   11cdc:	e13ffb17 	ldw	r4,-20(fp)
   11ce0:	0010da80 	call	10da8 <alt_avalon_i2c_is_busy>
   11ce4:	103ff01e 	bne	r2,zero,11ca8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153fca8>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   11ce8:	e0bff904 	addi	r2,fp,-28
   11cec:	100b883a 	mov	r5,r2
   11cf0:	e13ffb17 	ldw	r4,-20(fp)
   11cf4:	001117c0 	call	1117c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   11cf8:	e13ffb17 	ldw	r4,-20(fp)
   11cfc:	0010a500 	call	10a50 <alt_avalon_i2c_disable>
    }

    return status;
   11d00:	e0bff917 	ldw	r2,-28(fp)
}
   11d04:	e037883a 	mov	sp,fp
   11d08:	dfc00117 	ldw	ra,4(sp)
   11d0c:	df000017 	ldw	fp,0(sp)
   11d10:	dec00204 	addi	sp,sp,8
   11d14:	f800283a 	ret

00011d18 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   11d18:	defff504 	addi	sp,sp,-44
   11d1c:	dfc00a15 	stw	ra,40(sp)
   11d20:	df000915 	stw	fp,36(sp)
   11d24:	df000904 	addi	fp,sp,36
   11d28:	e13ffb15 	stw	r4,-20(fp)
   11d2c:	e17ffc15 	stw	r5,-16(fp)
   11d30:	e1bffd15 	stw	r6,-12(fp)
   11d34:	3807883a 	mov	r3,r7
   11d38:	e0800217 	ldw	r2,8(fp)
   11d3c:	e0fffe05 	stb	r3,-8(fp)
   11d40:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11d44:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   11d48:	e0bffb17 	ldw	r2,-20(fp)
   11d4c:	10800717 	ldw	r2,28(r2)
   11d50:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   11d54:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   11d58:	e0bffd17 	ldw	r2,-12(fp)
   11d5c:	1000021e 	bne	r2,zero,11d68 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   11d60:	0005883a 	mov	r2,zero
   11d64:	00006306 	br	11ef4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   11d68:	e0bffb17 	ldw	r2,-20(fp)
   11d6c:	10c00617 	ldw	r3,24(r2)
   11d70:	00800074 	movhi	r2,1
   11d74:	10818f04 	addi	r2,r2,1596
   11d78:	18800226 	beq	r3,r2,11d84 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   11d7c:	00bfff44 	movi	r2,-3
   11d80:	00005c06 	br	11ef4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   11d84:	e0bffe03 	ldbu	r2,-8(fp)
   11d88:	10000a1e 	bne	r2,zero,11db4 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   11d8c:	e13ffb17 	ldw	r4,-20(fp)
   11d90:	00109b80 	call	109b8 <alt_avalon_i2c_enable>
   11d94:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   11d98:	e0bff717 	ldw	r2,-36(fp)
   11d9c:	10000226 	beq	r2,zero,11da8 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   11da0:	e0bff717 	ldw	r2,-36(fp)
   11da4:	00005306 	br	11ef4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11da8:	01400704 	movi	r5,28
   11dac:	e13ffb17 	ldw	r4,-20(fp)
   11db0:	0011fa40 	call	11fa4 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   11db4:	e0bffe03 	ldbu	r2,-8(fp)
   11db8:	100d883a 	mov	r6,r2
   11dbc:	01400044 	movi	r5,1
   11dc0:	e13ffb17 	ldw	r4,-20(fp)
   11dc4:	00110200 	call	11020 <alt_avalon_i2c_send_address>
   11dc8:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   11dcc:	e0bff717 	ldw	r2,-36(fp)
   11dd0:	1000191e 	bne	r2,zero,11e38 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   11dd4:	00000906 	br	11dfc <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   11dd8:	000f883a 	mov	r7,zero
   11ddc:	000d883a 	mov	r6,zero
   11de0:	000b883a 	mov	r5,zero
   11de4:	e13ffb17 	ldw	r4,-20(fp)
   11de8:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   11dec:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   11df0:	e0bff917 	ldw	r2,-28(fp)
   11df4:	10800044 	addi	r2,r2,1
   11df8:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   11dfc:	e0bffd17 	ldw	r2,-12(fp)
   11e00:	10bfffc4 	addi	r2,r2,-1
   11e04:	e0fff917 	ldw	r3,-28(fp)
   11e08:	1880022e 	bgeu	r3,r2,11e14 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   11e0c:	e0bff717 	ldw	r2,-36(fp)
   11e10:	103ff126 	beq	r2,zero,11dd8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153fdd8>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   11e14:	e0bff717 	ldw	r2,-36(fp)
   11e18:	1000071e 	bne	r2,zero,11e38 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11e1c:	e0bfff03 	ldbu	r2,-4(fp)
   11e20:	100f883a 	mov	r7,r2
   11e24:	000d883a 	mov	r6,zero
   11e28:	000b883a 	mov	r5,zero
   11e2c:	e13ffb17 	ldw	r4,-20(fp)
   11e30:	0010f3c0 	call	10f3c <alt_avalon_i2c_cmd_write>
   11e34:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   11e38:	e0bff717 	ldw	r2,-36(fp)
   11e3c:	10001826 	beq	r2,zero,11ea0 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   11e40:	0149c404 	movi	r5,10000
   11e44:	e13ffd17 	ldw	r4,-12(fp)
   11e48:	00020100 	call	2010 <__mulsi3>
   11e4c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   11e50:	00000d06 	br	11e88 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   11e54:	e0bff817 	ldw	r2,-32(fp)
   11e58:	108002a8 	cmpgeui	r2,r2,10
   11e5c:	1000021e 	bne	r2,zero,11e68 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   11e60:	0109c404 	movi	r4,10000
   11e64:	00136440 	call	13644 <alt_busy_sleep>
            if (--timeout == 0)
   11e68:	e0bff817 	ldw	r2,-32(fp)
   11e6c:	10bfffc4 	addi	r2,r2,-1
   11e70:	e0bff815 	stw	r2,-32(fp)
   11e74:	e0bff817 	ldw	r2,-32(fp)
   11e78:	1000031e 	bne	r2,zero,11e88 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   11e7c:	00bfff84 	movi	r2,-2
   11e80:	e0bff715 	stw	r2,-36(fp)
               break;
   11e84:	00000306 	br	11e94 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   11e88:	e13ffb17 	ldw	r4,-20(fp)
   11e8c:	0010da80 	call	10da8 <alt_avalon_i2c_is_busy>
   11e90:	103ff01e 	bne	r2,zero,11e54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2153fe54>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   11e94:	e13ffb17 	ldw	r4,-20(fp)
   11e98:	0010a500 	call	10a50 <alt_avalon_i2c_disable>
   11e9c:	00001406 	br	11ef0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   11ea0:	e0bfff03 	ldbu	r2,-4(fp)
   11ea4:	10001226 	beq	r2,zero,11ef0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11ea8:	01400704 	movi	r5,28
   11eac:	e13ffb17 	ldw	r4,-20(fp)
   11eb0:	0011fa40 	call	11fa4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   11eb4:	000b883a 	mov	r5,zero
   11eb8:	e13ffb17 	ldw	r4,-20(fp)
   11ebc:	001213c0 	call	1213c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   11ec0:	e0bffa17 	ldw	r2,-24(fp)
   11ec4:	00c00084 	movi	r3,2
   11ec8:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   11ecc:	e0bffa17 	ldw	r2,-24(fp)
   11ed0:	e0fffc17 	ldw	r3,-16(fp)
   11ed4:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   11ed8:	e0bffa17 	ldw	r2,-24(fp)
   11edc:	e0fffd17 	ldw	r3,-12(fp)
   11ee0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   11ee4:	01400084 	movi	r5,2
   11ee8:	e13ffb17 	ldw	r4,-20(fp)
   11eec:	00120480 	call	12048 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   11ef0:	e0bff717 	ldw	r2,-36(fp)
}
   11ef4:	e037883a 	mov	sp,fp
   11ef8:	dfc00117 	ldw	ra,4(sp)
   11efc:	df000017 	ldw	fp,0(sp)
   11f00:	dec00204 	addi	sp,sp,8
   11f04:	f800283a 	ret

00011f08 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   11f08:	defffd04 	addi	sp,sp,-12
   11f0c:	df000215 	stw	fp,8(sp)
   11f10:	df000204 	addi	fp,sp,8
   11f14:	e13ffe15 	stw	r4,-8(fp)
   11f18:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   11f1c:	e0bffe17 	ldw	r2,-8(fp)
   11f20:	10800317 	ldw	r2,12(r2)
   11f24:	10800404 	addi	r2,r2,16
   11f28:	10c00037 	ldwio	r3,0(r2)
   11f2c:	e0bffe17 	ldw	r2,-8(fp)
   11f30:	10800317 	ldw	r2,12(r2)
   11f34:	10800304 	addi	r2,r2,12
   11f38:	10800037 	ldwio	r2,0(r2)
   11f3c:	1884703a 	and	r2,r3,r2
   11f40:	1007883a 	mov	r3,r2
   11f44:	e0bfff17 	ldw	r2,-4(fp)
   11f48:	10c00015 	stw	r3,0(r2)
}
   11f4c:	0001883a 	nop
   11f50:	e037883a 	mov	sp,fp
   11f54:	df000017 	ldw	fp,0(sp)
   11f58:	dec00104 	addi	sp,sp,4
   11f5c:	f800283a 	ret

00011f60 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   11f60:	defffd04 	addi	sp,sp,-12
   11f64:	df000215 	stw	fp,8(sp)
   11f68:	df000204 	addi	fp,sp,8
   11f6c:	e13ffe15 	stw	r4,-8(fp)
   11f70:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   11f74:	e0bffe17 	ldw	r2,-8(fp)
   11f78:	10800317 	ldw	r2,12(r2)
   11f7c:	10800404 	addi	r2,r2,16
   11f80:	10800037 	ldwio	r2,0(r2)
   11f84:	1007883a 	mov	r3,r2
   11f88:	e0bfff17 	ldw	r2,-4(fp)
   11f8c:	10c00015 	stw	r3,0(r2)
}
   11f90:	0001883a 	nop
   11f94:	e037883a 	mov	sp,fp
   11f98:	df000017 	ldw	fp,0(sp)
   11f9c:	dec00104 	addi	sp,sp,4
   11fa0:	f800283a 	ret

00011fa4 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   11fa4:	defffd04 	addi	sp,sp,-12
   11fa8:	df000215 	stw	fp,8(sp)
   11fac:	df000204 	addi	fp,sp,8
   11fb0:	e13ffe15 	stw	r4,-8(fp)
   11fb4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   11fb8:	e0bffe17 	ldw	r2,-8(fp)
   11fbc:	10800317 	ldw	r2,12(r2)
   11fc0:	10800404 	addi	r2,r2,16
   11fc4:	e0ffff17 	ldw	r3,-4(fp)
   11fc8:	10c00035 	stwio	r3,0(r2)
}
   11fcc:	0001883a 	nop
   11fd0:	e037883a 	mov	sp,fp
   11fd4:	df000017 	ldw	fp,0(sp)
   11fd8:	dec00104 	addi	sp,sp,4
   11fdc:	f800283a 	ret

00011fe0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   11fe0:	defffb04 	addi	sp,sp,-20
   11fe4:	dfc00415 	stw	ra,16(sp)
   11fe8:	df000315 	stw	fp,12(sp)
   11fec:	df000304 	addi	fp,sp,12
   11ff0:	e13ffe15 	stw	r4,-8(fp)
   11ff4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   11ff8:	e17ffd04 	addi	r5,fp,-12
   11ffc:	e13ffe17 	ldw	r4,-8(fp)
   12000:	00120ac0 	call	120ac <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   12004:	e0bfff17 	ldw	r2,-4(fp)
   12008:	0086303a 	nor	r3,zero,r2
   1200c:	e0bffd17 	ldw	r2,-12(fp)
   12010:	1884703a 	and	r2,r3,r2
   12014:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   12018:	e0bffe17 	ldw	r2,-8(fp)
   1201c:	10800317 	ldw	r2,12(r2)
   12020:	10800304 	addi	r2,r2,12
   12024:	e0fffd17 	ldw	r3,-12(fp)
   12028:	18c007cc 	andi	r3,r3,31
   1202c:	10c00035 	stwio	r3,0(r2)
}
   12030:	0001883a 	nop
   12034:	e037883a 	mov	sp,fp
   12038:	dfc00117 	ldw	ra,4(sp)
   1203c:	df000017 	ldw	fp,0(sp)
   12040:	dec00204 	addi	sp,sp,8
   12044:	f800283a 	ret

00012048 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   12048:	defffb04 	addi	sp,sp,-20
   1204c:	dfc00415 	stw	ra,16(sp)
   12050:	df000315 	stw	fp,12(sp)
   12054:	df000304 	addi	fp,sp,12
   12058:	e13ffe15 	stw	r4,-8(fp)
   1205c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   12060:	e17ffd04 	addi	r5,fp,-12
   12064:	e13ffe17 	ldw	r4,-8(fp)
   12068:	00120ac0 	call	120ac <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   1206c:	e0fffd17 	ldw	r3,-12(fp)
   12070:	e0bfff17 	ldw	r2,-4(fp)
   12074:	1884b03a 	or	r2,r3,r2
   12078:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   1207c:	e0bffe17 	ldw	r2,-8(fp)
   12080:	10800317 	ldw	r2,12(r2)
   12084:	10800304 	addi	r2,r2,12
   12088:	e0fffd17 	ldw	r3,-12(fp)
   1208c:	18c007cc 	andi	r3,r3,31
   12090:	10c00035 	stwio	r3,0(r2)
}
   12094:	0001883a 	nop
   12098:	e037883a 	mov	sp,fp
   1209c:	dfc00117 	ldw	ra,4(sp)
   120a0:	df000017 	ldw	fp,0(sp)
   120a4:	dec00204 	addi	sp,sp,8
   120a8:	f800283a 	ret

000120ac <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   120ac:	defffd04 	addi	sp,sp,-12
   120b0:	df000215 	stw	fp,8(sp)
   120b4:	df000204 	addi	fp,sp,8
   120b8:	e13ffe15 	stw	r4,-8(fp)
   120bc:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   120c0:	e0bffe17 	ldw	r2,-8(fp)
   120c4:	10800317 	ldw	r2,12(r2)
   120c8:	10800304 	addi	r2,r2,12
   120cc:	10800037 	ldwio	r2,0(r2)
   120d0:	10c007cc 	andi	r3,r2,31
   120d4:	e0bfff17 	ldw	r2,-4(fp)
   120d8:	10c00015 	stw	r3,0(r2)
}
   120dc:	0001883a 	nop
   120e0:	e037883a 	mov	sp,fp
   120e4:	df000017 	ldw	fp,0(sp)
   120e8:	dec00104 	addi	sp,sp,4
   120ec:	f800283a 	ret

000120f0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   120f0:	defffd04 	addi	sp,sp,-12
   120f4:	df000215 	stw	fp,8(sp)
   120f8:	df000204 	addi	fp,sp,8
   120fc:	e13ffe15 	stw	r4,-8(fp)
   12100:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   12104:	e0bffe17 	ldw	r2,-8(fp)
   12108:	10800317 	ldw	r2,12(r2)
   1210c:	10800204 	addi	r2,r2,8
   12110:	10800037 	ldwio	r2,0(r2)
   12114:	10800c0c 	andi	r2,r2,48
   12118:	1005d13a 	srai	r2,r2,4
   1211c:	1007883a 	mov	r3,r2
   12120:	e0bfff17 	ldw	r2,-4(fp)
   12124:	10c00015 	stw	r3,0(r2)
}
   12128:	0001883a 	nop
   1212c:	e037883a 	mov	sp,fp
   12130:	df000017 	ldw	fp,0(sp)
   12134:	dec00104 	addi	sp,sp,4
   12138:	f800283a 	ret

0001213c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   1213c:	defffd04 	addi	sp,sp,-12
   12140:	df000215 	stw	fp,8(sp)
   12144:	df000204 	addi	fp,sp,8
   12148:	e13ffe15 	stw	r4,-8(fp)
   1214c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   12150:	e0bffe17 	ldw	r2,-8(fp)
   12154:	10800317 	ldw	r2,12(r2)
   12158:	10800204 	addi	r2,r2,8
   1215c:	e0fffe17 	ldw	r3,-8(fp)
   12160:	18c00317 	ldw	r3,12(r3)
   12164:	18c00204 	addi	r3,r3,8
   12168:	18c00037 	ldwio	r3,0(r3)
   1216c:	1809883a 	mov	r4,r3
   12170:	00fff3c4 	movi	r3,-49
   12174:	20c8703a 	and	r4,r4,r3
   12178:	e0ffff17 	ldw	r3,-4(fp)
   1217c:	1806913a 	slli	r3,r3,4
   12180:	18c00c0c 	andi	r3,r3,48
   12184:	20c6b03a 	or	r3,r4,r3
   12188:	10c00035 	stwio	r3,0(r2)
}
   1218c:	0001883a 	nop
   12190:	e037883a 	mov	sp,fp
   12194:	df000017 	ldw	fp,0(sp)
   12198:	dec00104 	addi	sp,sp,4
   1219c:	f800283a 	ret

000121a0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   121a0:	defffd04 	addi	sp,sp,-12
   121a4:	df000215 	stw	fp,8(sp)
   121a8:	df000204 	addi	fp,sp,8
   121ac:	e13ffe15 	stw	r4,-8(fp)
   121b0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   121b4:	e0bffe17 	ldw	r2,-8(fp)
   121b8:	10800317 	ldw	r2,12(r2)
   121bc:	10800204 	addi	r2,r2,8
   121c0:	10800037 	ldwio	r2,0(r2)
   121c4:	1080030c 	andi	r2,r2,12
   121c8:	1005d0ba 	srai	r2,r2,2
   121cc:	1007883a 	mov	r3,r2
   121d0:	e0bfff17 	ldw	r2,-4(fp)
   121d4:	10c00015 	stw	r3,0(r2)
}
   121d8:	0001883a 	nop
   121dc:	e037883a 	mov	sp,fp
   121e0:	df000017 	ldw	fp,0(sp)
   121e4:	dec00104 	addi	sp,sp,4
   121e8:	f800283a 	ret

000121ec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   121ec:	defffd04 	addi	sp,sp,-12
   121f0:	df000215 	stw	fp,8(sp)
   121f4:	df000204 	addi	fp,sp,8
   121f8:	e13ffe15 	stw	r4,-8(fp)
   121fc:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   12200:	e0bffe17 	ldw	r2,-8(fp)
   12204:	10800317 	ldw	r2,12(r2)
   12208:	10c00204 	addi	r3,r2,8
   1220c:	e0bffe17 	ldw	r2,-8(fp)
   12210:	10800317 	ldw	r2,12(r2)
   12214:	10800204 	addi	r2,r2,8
   12218:	10800037 	ldwio	r2,0(r2)
   1221c:	1009883a 	mov	r4,r2
   12220:	00bffcc4 	movi	r2,-13
   12224:	2088703a 	and	r4,r4,r2
   12228:	e0bfff17 	ldw	r2,-4(fp)
   1222c:	1085883a 	add	r2,r2,r2
   12230:	1085883a 	add	r2,r2,r2
   12234:	1080030c 	andi	r2,r2,12
   12238:	2084b03a 	or	r2,r4,r2
   1223c:	18800035 	stwio	r2,0(r3)
}
   12240:	0001883a 	nop
   12244:	e037883a 	mov	sp,fp
   12248:	df000017 	ldw	fp,0(sp)
   1224c:	dec00104 	addi	sp,sp,4
   12250:	f800283a 	ret

00012254 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12254:	defffa04 	addi	sp,sp,-24
   12258:	dfc00515 	stw	ra,20(sp)
   1225c:	df000415 	stw	fp,16(sp)
   12260:	df000404 	addi	fp,sp,16
   12264:	e13ffd15 	stw	r4,-12(fp)
   12268:	e17ffe15 	stw	r5,-8(fp)
   1226c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12270:	e0bffd17 	ldw	r2,-12(fp)
   12274:	10800017 	ldw	r2,0(r2)
   12278:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1227c:	e0bffc17 	ldw	r2,-16(fp)
   12280:	10c00a04 	addi	r3,r2,40
   12284:	e0bffd17 	ldw	r2,-12(fp)
   12288:	10800217 	ldw	r2,8(r2)
   1228c:	100f883a 	mov	r7,r2
   12290:	e1bfff17 	ldw	r6,-4(fp)
   12294:	e17ffe17 	ldw	r5,-8(fp)
   12298:	1809883a 	mov	r4,r3
   1229c:	001287c0 	call	1287c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   122a0:	e037883a 	mov	sp,fp
   122a4:	dfc00117 	ldw	ra,4(sp)
   122a8:	df000017 	ldw	fp,0(sp)
   122ac:	dec00204 	addi	sp,sp,8
   122b0:	f800283a 	ret

000122b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   122b4:	defffa04 	addi	sp,sp,-24
   122b8:	dfc00515 	stw	ra,20(sp)
   122bc:	df000415 	stw	fp,16(sp)
   122c0:	df000404 	addi	fp,sp,16
   122c4:	e13ffd15 	stw	r4,-12(fp)
   122c8:	e17ffe15 	stw	r5,-8(fp)
   122cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   122d0:	e0bffd17 	ldw	r2,-12(fp)
   122d4:	10800017 	ldw	r2,0(r2)
   122d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   122dc:	e0bffc17 	ldw	r2,-16(fp)
   122e0:	10c00a04 	addi	r3,r2,40
   122e4:	e0bffd17 	ldw	r2,-12(fp)
   122e8:	10800217 	ldw	r2,8(r2)
   122ec:	100f883a 	mov	r7,r2
   122f0:	e1bfff17 	ldw	r6,-4(fp)
   122f4:	e17ffe17 	ldw	r5,-8(fp)
   122f8:	1809883a 	mov	r4,r3
   122fc:	0012a980 	call	12a98 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12300:	e037883a 	mov	sp,fp
   12304:	dfc00117 	ldw	ra,4(sp)
   12308:	df000017 	ldw	fp,0(sp)
   1230c:	dec00204 	addi	sp,sp,8
   12310:	f800283a 	ret

00012314 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   12314:	defffc04 	addi	sp,sp,-16
   12318:	dfc00315 	stw	ra,12(sp)
   1231c:	df000215 	stw	fp,8(sp)
   12320:	df000204 	addi	fp,sp,8
   12324:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12328:	e0bfff17 	ldw	r2,-4(fp)
   1232c:	10800017 	ldw	r2,0(r2)
   12330:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   12334:	e0bffe17 	ldw	r2,-8(fp)
   12338:	10c00a04 	addi	r3,r2,40
   1233c:	e0bfff17 	ldw	r2,-4(fp)
   12340:	10800217 	ldw	r2,8(r2)
   12344:	100b883a 	mov	r5,r2
   12348:	1809883a 	mov	r4,r3
   1234c:	00127240 	call	12724 <altera_avalon_jtag_uart_close>
}
   12350:	e037883a 	mov	sp,fp
   12354:	dfc00117 	ldw	ra,4(sp)
   12358:	df000017 	ldw	fp,0(sp)
   1235c:	dec00204 	addi	sp,sp,8
   12360:	f800283a 	ret

00012364 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   12364:	defffa04 	addi	sp,sp,-24
   12368:	dfc00515 	stw	ra,20(sp)
   1236c:	df000415 	stw	fp,16(sp)
   12370:	df000404 	addi	fp,sp,16
   12374:	e13ffd15 	stw	r4,-12(fp)
   12378:	e17ffe15 	stw	r5,-8(fp)
   1237c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   12380:	e0bffd17 	ldw	r2,-12(fp)
   12384:	10800017 	ldw	r2,0(r2)
   12388:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1238c:	e0bffc17 	ldw	r2,-16(fp)
   12390:	10800a04 	addi	r2,r2,40
   12394:	e1bfff17 	ldw	r6,-4(fp)
   12398:	e17ffe17 	ldw	r5,-8(fp)
   1239c:	1009883a 	mov	r4,r2
   123a0:	001278c0 	call	1278c <altera_avalon_jtag_uart_ioctl>
}
   123a4:	e037883a 	mov	sp,fp
   123a8:	dfc00117 	ldw	ra,4(sp)
   123ac:	df000017 	ldw	fp,0(sp)
   123b0:	dec00204 	addi	sp,sp,8
   123b4:	f800283a 	ret

000123b8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   123b8:	defffa04 	addi	sp,sp,-24
   123bc:	dfc00515 	stw	ra,20(sp)
   123c0:	df000415 	stw	fp,16(sp)
   123c4:	df000404 	addi	fp,sp,16
   123c8:	e13ffd15 	stw	r4,-12(fp)
   123cc:	e17ffe15 	stw	r5,-8(fp)
   123d0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   123d4:	e0bffd17 	ldw	r2,-12(fp)
   123d8:	00c00044 	movi	r3,1
   123dc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   123e0:	e0bffd17 	ldw	r2,-12(fp)
   123e4:	10800017 	ldw	r2,0(r2)
   123e8:	10800104 	addi	r2,r2,4
   123ec:	1007883a 	mov	r3,r2
   123f0:	e0bffd17 	ldw	r2,-12(fp)
   123f4:	10800817 	ldw	r2,32(r2)
   123f8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   123fc:	e0bffe17 	ldw	r2,-8(fp)
   12400:	e0ffff17 	ldw	r3,-4(fp)
   12404:	d8000015 	stw	zero,0(sp)
   12408:	e1fffd17 	ldw	r7,-12(fp)
   1240c:	01800074 	movhi	r6,1
   12410:	31891e04 	addi	r6,r6,9336
   12414:	180b883a 	mov	r5,r3
   12418:	1009883a 	mov	r4,r2
   1241c:	000f2600 	call	f260 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   12420:	e0bffd17 	ldw	r2,-12(fp)
   12424:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12428:	e0bffd17 	ldw	r2,-12(fp)
   1242c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12430:	d0e78317 	ldw	r3,-25076(gp)
   12434:	e1fffd17 	ldw	r7,-12(fp)
   12438:	01800074 	movhi	r6,1
   1243c:	3189a104 	addi	r6,r6,9860
   12440:	180b883a 	mov	r5,r3
   12444:	1009883a 	mov	r4,r2
   12448:	00135180 	call	13518 <alt_alarm_start>
   1244c:	1000040e 	bge	r2,zero,12460 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   12450:	e0fffd17 	ldw	r3,-12(fp)
   12454:	00a00034 	movhi	r2,32768
   12458:	10bfffc4 	addi	r2,r2,-1
   1245c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   12460:	0001883a 	nop
   12464:	e037883a 	mov	sp,fp
   12468:	dfc00117 	ldw	ra,4(sp)
   1246c:	df000017 	ldw	fp,0(sp)
   12470:	dec00204 	addi	sp,sp,8
   12474:	f800283a 	ret

00012478 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   12478:	defff804 	addi	sp,sp,-32
   1247c:	df000715 	stw	fp,28(sp)
   12480:	df000704 	addi	fp,sp,28
   12484:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   12488:	e0bfff17 	ldw	r2,-4(fp)
   1248c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   12490:	e0bffb17 	ldw	r2,-20(fp)
   12494:	10800017 	ldw	r2,0(r2)
   12498:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1249c:	e0bffc17 	ldw	r2,-16(fp)
   124a0:	10800104 	addi	r2,r2,4
   124a4:	10800037 	ldwio	r2,0(r2)
   124a8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   124ac:	e0bffd17 	ldw	r2,-12(fp)
   124b0:	1080c00c 	andi	r2,r2,768
   124b4:	10006d26 	beq	r2,zero,1266c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   124b8:	e0bffd17 	ldw	r2,-12(fp)
   124bc:	1080400c 	andi	r2,r2,256
   124c0:	10003526 	beq	r2,zero,12598 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   124c4:	00800074 	movhi	r2,1
   124c8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   124cc:	e0bffb17 	ldw	r2,-20(fp)
   124d0:	10800a17 	ldw	r2,40(r2)
   124d4:	10800044 	addi	r2,r2,1
   124d8:	1081ffcc 	andi	r2,r2,2047
   124dc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   124e0:	e0bffb17 	ldw	r2,-20(fp)
   124e4:	10c00b17 	ldw	r3,44(r2)
   124e8:	e0bffe17 	ldw	r2,-8(fp)
   124ec:	18801526 	beq	r3,r2,12544 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   124f0:	e0bffc17 	ldw	r2,-16(fp)
   124f4:	10800037 	ldwio	r2,0(r2)
   124f8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   124fc:	e0bff917 	ldw	r2,-28(fp)
   12500:	10a0000c 	andi	r2,r2,32768
   12504:	10001126 	beq	r2,zero,1254c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12508:	e0bffb17 	ldw	r2,-20(fp)
   1250c:	10800a17 	ldw	r2,40(r2)
   12510:	e0fff917 	ldw	r3,-28(fp)
   12514:	1809883a 	mov	r4,r3
   12518:	e0fffb17 	ldw	r3,-20(fp)
   1251c:	1885883a 	add	r2,r3,r2
   12520:	10800e04 	addi	r2,r2,56
   12524:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12528:	e0bffb17 	ldw	r2,-20(fp)
   1252c:	10800a17 	ldw	r2,40(r2)
   12530:	10800044 	addi	r2,r2,1
   12534:	10c1ffcc 	andi	r3,r2,2047
   12538:	e0bffb17 	ldw	r2,-20(fp)
   1253c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   12540:	003fe206 	br	124cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215404cc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   12544:	0001883a 	nop
   12548:	00000106 	br	12550 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1254c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   12550:	e0bff917 	ldw	r2,-28(fp)
   12554:	10bfffec 	andhi	r2,r2,65535
   12558:	10000f26 	beq	r2,zero,12598 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1255c:	e0bffb17 	ldw	r2,-20(fp)
   12560:	10c00817 	ldw	r3,32(r2)
   12564:	00bfff84 	movi	r2,-2
   12568:	1886703a 	and	r3,r3,r2
   1256c:	e0bffb17 	ldw	r2,-20(fp)
   12570:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   12574:	e0bffc17 	ldw	r2,-16(fp)
   12578:	10800104 	addi	r2,r2,4
   1257c:	1007883a 	mov	r3,r2
   12580:	e0bffb17 	ldw	r2,-20(fp)
   12584:	10800817 	ldw	r2,32(r2)
   12588:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1258c:	e0bffc17 	ldw	r2,-16(fp)
   12590:	10800104 	addi	r2,r2,4
   12594:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12598:	e0bffd17 	ldw	r2,-12(fp)
   1259c:	1080800c 	andi	r2,r2,512
   125a0:	103fbe26 	beq	r2,zero,1249c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154049c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   125a4:	e0bffd17 	ldw	r2,-12(fp)
   125a8:	1004d43a 	srli	r2,r2,16
   125ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   125b0:	00001406 	br	12604 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   125b4:	e0bffc17 	ldw	r2,-16(fp)
   125b8:	e0fffb17 	ldw	r3,-20(fp)
   125bc:	18c00d17 	ldw	r3,52(r3)
   125c0:	e13ffb17 	ldw	r4,-20(fp)
   125c4:	20c7883a 	add	r3,r4,r3
   125c8:	18c20e04 	addi	r3,r3,2104
   125cc:	18c00003 	ldbu	r3,0(r3)
   125d0:	18c03fcc 	andi	r3,r3,255
   125d4:	18c0201c 	xori	r3,r3,128
   125d8:	18ffe004 	addi	r3,r3,-128
   125dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   125e0:	e0bffb17 	ldw	r2,-20(fp)
   125e4:	10800d17 	ldw	r2,52(r2)
   125e8:	10800044 	addi	r2,r2,1
   125ec:	10c1ffcc 	andi	r3,r2,2047
   125f0:	e0bffb17 	ldw	r2,-20(fp)
   125f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   125f8:	e0bffa17 	ldw	r2,-24(fp)
   125fc:	10bfffc4 	addi	r2,r2,-1
   12600:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12604:	e0bffa17 	ldw	r2,-24(fp)
   12608:	10000526 	beq	r2,zero,12620 <altera_avalon_jtag_uart_irq+0x1a8>
   1260c:	e0bffb17 	ldw	r2,-20(fp)
   12610:	10c00d17 	ldw	r3,52(r2)
   12614:	e0bffb17 	ldw	r2,-20(fp)
   12618:	10800c17 	ldw	r2,48(r2)
   1261c:	18bfe51e 	bne	r3,r2,125b4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215405b4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12620:	e0bffa17 	ldw	r2,-24(fp)
   12624:	103f9d26 	beq	r2,zero,1249c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154049c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12628:	e0bffb17 	ldw	r2,-20(fp)
   1262c:	10c00817 	ldw	r3,32(r2)
   12630:	00bfff44 	movi	r2,-3
   12634:	1886703a 	and	r3,r3,r2
   12638:	e0bffb17 	ldw	r2,-20(fp)
   1263c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12640:	e0bffb17 	ldw	r2,-20(fp)
   12644:	10800017 	ldw	r2,0(r2)
   12648:	10800104 	addi	r2,r2,4
   1264c:	1007883a 	mov	r3,r2
   12650:	e0bffb17 	ldw	r2,-20(fp)
   12654:	10800817 	ldw	r2,32(r2)
   12658:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1265c:	e0bffc17 	ldw	r2,-16(fp)
   12660:	10800104 	addi	r2,r2,4
   12664:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   12668:	003f8c06 	br	1249c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154049c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1266c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   12670:	0001883a 	nop
   12674:	e037883a 	mov	sp,fp
   12678:	df000017 	ldw	fp,0(sp)
   1267c:	dec00104 	addi	sp,sp,4
   12680:	f800283a 	ret

00012684 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   12684:	defff804 	addi	sp,sp,-32
   12688:	df000715 	stw	fp,28(sp)
   1268c:	df000704 	addi	fp,sp,28
   12690:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   12694:	e0bffb17 	ldw	r2,-20(fp)
   12698:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1269c:	e0bff917 	ldw	r2,-28(fp)
   126a0:	10800017 	ldw	r2,0(r2)
   126a4:	10800104 	addi	r2,r2,4
   126a8:	10800037 	ldwio	r2,0(r2)
   126ac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   126b0:	e0bffa17 	ldw	r2,-24(fp)
   126b4:	1081000c 	andi	r2,r2,1024
   126b8:	10000b26 	beq	r2,zero,126e8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   126bc:	e0bff917 	ldw	r2,-28(fp)
   126c0:	10800017 	ldw	r2,0(r2)
   126c4:	10800104 	addi	r2,r2,4
   126c8:	1007883a 	mov	r3,r2
   126cc:	e0bff917 	ldw	r2,-28(fp)
   126d0:	10800817 	ldw	r2,32(r2)
   126d4:	10810014 	ori	r2,r2,1024
   126d8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   126dc:	e0bff917 	ldw	r2,-28(fp)
   126e0:	10000915 	stw	zero,36(r2)
   126e4:	00000a06 	br	12710 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   126e8:	e0bff917 	ldw	r2,-28(fp)
   126ec:	10c00917 	ldw	r3,36(r2)
   126f0:	00a00034 	movhi	r2,32768
   126f4:	10bfff04 	addi	r2,r2,-4
   126f8:	10c00536 	bltu	r2,r3,12710 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   126fc:	e0bff917 	ldw	r2,-28(fp)
   12700:	10800917 	ldw	r2,36(r2)
   12704:	10c00044 	addi	r3,r2,1
   12708:	e0bff917 	ldw	r2,-28(fp)
   1270c:	10c00915 	stw	r3,36(r2)
   12710:	d0a78317 	ldw	r2,-25076(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   12714:	e037883a 	mov	sp,fp
   12718:	df000017 	ldw	fp,0(sp)
   1271c:	dec00104 	addi	sp,sp,4
   12720:	f800283a 	ret

00012724 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   12724:	defffd04 	addi	sp,sp,-12
   12728:	df000215 	stw	fp,8(sp)
   1272c:	df000204 	addi	fp,sp,8
   12730:	e13ffe15 	stw	r4,-8(fp)
   12734:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12738:	00000506 	br	12750 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1273c:	e0bfff17 	ldw	r2,-4(fp)
   12740:	1090000c 	andi	r2,r2,16384
   12744:	10000226 	beq	r2,zero,12750 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   12748:	00bffd44 	movi	r2,-11
   1274c:	00000b06 	br	1277c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12750:	e0bffe17 	ldw	r2,-8(fp)
   12754:	10c00d17 	ldw	r3,52(r2)
   12758:	e0bffe17 	ldw	r2,-8(fp)
   1275c:	10800c17 	ldw	r2,48(r2)
   12760:	18800526 	beq	r3,r2,12778 <altera_avalon_jtag_uart_close+0x54>
   12764:	e0bffe17 	ldw	r2,-8(fp)
   12768:	10c00917 	ldw	r3,36(r2)
   1276c:	e0bffe17 	ldw	r2,-8(fp)
   12770:	10800117 	ldw	r2,4(r2)
   12774:	18bff136 	bltu	r3,r2,1273c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154073c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   12778:	0005883a 	mov	r2,zero
}
   1277c:	e037883a 	mov	sp,fp
   12780:	df000017 	ldw	fp,0(sp)
   12784:	dec00104 	addi	sp,sp,4
   12788:	f800283a 	ret

0001278c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1278c:	defffa04 	addi	sp,sp,-24
   12790:	df000515 	stw	fp,20(sp)
   12794:	df000504 	addi	fp,sp,20
   12798:	e13ffd15 	stw	r4,-12(fp)
   1279c:	e17ffe15 	stw	r5,-8(fp)
   127a0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   127a4:	00bff9c4 	movi	r2,-25
   127a8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   127ac:	e0bffe17 	ldw	r2,-8(fp)
   127b0:	10da8060 	cmpeqi	r3,r2,27137
   127b4:	1800031e 	bne	r3,zero,127c4 <altera_avalon_jtag_uart_ioctl+0x38>
   127b8:	109a80a0 	cmpeqi	r2,r2,27138
   127bc:	1000181e 	bne	r2,zero,12820 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   127c0:	00002906 	br	12868 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   127c4:	e0bffd17 	ldw	r2,-12(fp)
   127c8:	10c00117 	ldw	r3,4(r2)
   127cc:	00a00034 	movhi	r2,32768
   127d0:	10bfffc4 	addi	r2,r2,-1
   127d4:	18802126 	beq	r3,r2,1285c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   127d8:	e0bfff17 	ldw	r2,-4(fp)
   127dc:	10800017 	ldw	r2,0(r2)
   127e0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   127e4:	e0bffc17 	ldw	r2,-16(fp)
   127e8:	10800090 	cmplti	r2,r2,2
   127ec:	1000061e 	bne	r2,zero,12808 <altera_avalon_jtag_uart_ioctl+0x7c>
   127f0:	e0fffc17 	ldw	r3,-16(fp)
   127f4:	00a00034 	movhi	r2,32768
   127f8:	10bfffc4 	addi	r2,r2,-1
   127fc:	18800226 	beq	r3,r2,12808 <altera_avalon_jtag_uart_ioctl+0x7c>
   12800:	e0bffc17 	ldw	r2,-16(fp)
   12804:	00000206 	br	12810 <altera_avalon_jtag_uart_ioctl+0x84>
   12808:	00a00034 	movhi	r2,32768
   1280c:	10bfff84 	addi	r2,r2,-2
   12810:	e0fffd17 	ldw	r3,-12(fp)
   12814:	18800115 	stw	r2,4(r3)
      rc = 0;
   12818:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1281c:	00000f06 	br	1285c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12820:	e0bffd17 	ldw	r2,-12(fp)
   12824:	10c00117 	ldw	r3,4(r2)
   12828:	00a00034 	movhi	r2,32768
   1282c:	10bfffc4 	addi	r2,r2,-1
   12830:	18800c26 	beq	r3,r2,12864 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12834:	e0bffd17 	ldw	r2,-12(fp)
   12838:	10c00917 	ldw	r3,36(r2)
   1283c:	e0bffd17 	ldw	r2,-12(fp)
   12840:	10800117 	ldw	r2,4(r2)
   12844:	1885803a 	cmpltu	r2,r3,r2
   12848:	10c03fcc 	andi	r3,r2,255
   1284c:	e0bfff17 	ldw	r2,-4(fp)
   12850:	10c00015 	stw	r3,0(r2)
      rc = 0;
   12854:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12858:	00000206 	br	12864 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1285c:	0001883a 	nop
   12860:	00000106 	br	12868 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   12864:	0001883a 	nop

  default:
    break;
  }

  return rc;
   12868:	e0bffb17 	ldw	r2,-20(fp)
}
   1286c:	e037883a 	mov	sp,fp
   12870:	df000017 	ldw	fp,0(sp)
   12874:	dec00104 	addi	sp,sp,4
   12878:	f800283a 	ret

0001287c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1287c:	defff304 	addi	sp,sp,-52
   12880:	dfc00c15 	stw	ra,48(sp)
   12884:	df000b15 	stw	fp,44(sp)
   12888:	df000b04 	addi	fp,sp,44
   1288c:	e13ffc15 	stw	r4,-16(fp)
   12890:	e17ffd15 	stw	r5,-12(fp)
   12894:	e1bffe15 	stw	r6,-8(fp)
   12898:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1289c:	e0bffd17 	ldw	r2,-12(fp)
   128a0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   128a4:	00004706 	br	129c4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   128a8:	e0bffc17 	ldw	r2,-16(fp)
   128ac:	10800a17 	ldw	r2,40(r2)
   128b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   128b4:	e0bffc17 	ldw	r2,-16(fp)
   128b8:	10800b17 	ldw	r2,44(r2)
   128bc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   128c0:	e0fff717 	ldw	r3,-36(fp)
   128c4:	e0bff817 	ldw	r2,-32(fp)
   128c8:	18800536 	bltu	r3,r2,128e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   128cc:	e0fff717 	ldw	r3,-36(fp)
   128d0:	e0bff817 	ldw	r2,-32(fp)
   128d4:	1885c83a 	sub	r2,r3,r2
   128d8:	e0bff615 	stw	r2,-40(fp)
   128dc:	00000406 	br	128f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   128e0:	00c20004 	movi	r3,2048
   128e4:	e0bff817 	ldw	r2,-32(fp)
   128e8:	1885c83a 	sub	r2,r3,r2
   128ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   128f0:	e0bff617 	ldw	r2,-40(fp)
   128f4:	10001e26 	beq	r2,zero,12970 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   128f8:	e0fffe17 	ldw	r3,-8(fp)
   128fc:	e0bff617 	ldw	r2,-40(fp)
   12900:	1880022e 	bgeu	r3,r2,1290c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   12904:	e0bffe17 	ldw	r2,-8(fp)
   12908:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1290c:	e0bffc17 	ldw	r2,-16(fp)
   12910:	10c00e04 	addi	r3,r2,56
   12914:	e0bff817 	ldw	r2,-32(fp)
   12918:	1885883a 	add	r2,r3,r2
   1291c:	e1bff617 	ldw	r6,-40(fp)
   12920:	100b883a 	mov	r5,r2
   12924:	e13ff517 	ldw	r4,-44(fp)
   12928:	00080000 	call	8000 <memcpy>
      ptr   += n;
   1292c:	e0fff517 	ldw	r3,-44(fp)
   12930:	e0bff617 	ldw	r2,-40(fp)
   12934:	1885883a 	add	r2,r3,r2
   12938:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1293c:	e0fffe17 	ldw	r3,-8(fp)
   12940:	e0bff617 	ldw	r2,-40(fp)
   12944:	1885c83a 	sub	r2,r3,r2
   12948:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1294c:	e0fff817 	ldw	r3,-32(fp)
   12950:	e0bff617 	ldw	r2,-40(fp)
   12954:	1885883a 	add	r2,r3,r2
   12958:	10c1ffcc 	andi	r3,r2,2047
   1295c:	e0bffc17 	ldw	r2,-16(fp)
   12960:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   12964:	e0bffe17 	ldw	r2,-8(fp)
   12968:	00bfcf16 	blt	zero,r2,128a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215408a8>
   1296c:	00000106 	br	12974 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   12970:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   12974:	e0fff517 	ldw	r3,-44(fp)
   12978:	e0bffd17 	ldw	r2,-12(fp)
   1297c:	1880141e 	bne	r3,r2,129d0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   12980:	e0bfff17 	ldw	r2,-4(fp)
   12984:	1090000c 	andi	r2,r2,16384
   12988:	1000131e 	bne	r2,zero,129d8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1298c:	0001883a 	nop
   12990:	e0bffc17 	ldw	r2,-16(fp)
   12994:	10c00a17 	ldw	r3,40(r2)
   12998:	e0bff717 	ldw	r2,-36(fp)
   1299c:	1880051e 	bne	r3,r2,129b4 <altera_avalon_jtag_uart_read+0x138>
   129a0:	e0bffc17 	ldw	r2,-16(fp)
   129a4:	10c00917 	ldw	r3,36(r2)
   129a8:	e0bffc17 	ldw	r2,-16(fp)
   129ac:	10800117 	ldw	r2,4(r2)
   129b0:	18bff736 	bltu	r3,r2,12990 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21540990>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   129b4:	e0bffc17 	ldw	r2,-16(fp)
   129b8:	10c00a17 	ldw	r3,40(r2)
   129bc:	e0bff717 	ldw	r2,-36(fp)
   129c0:	18800726 	beq	r3,r2,129e0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   129c4:	e0bffe17 	ldw	r2,-8(fp)
   129c8:	00bfb716 	blt	zero,r2,128a8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215408a8>
   129cc:	00000506 	br	129e4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   129d0:	0001883a 	nop
   129d4:	00000306 	br	129e4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   129d8:	0001883a 	nop
   129dc:	00000106 	br	129e4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   129e0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   129e4:	e0fff517 	ldw	r3,-44(fp)
   129e8:	e0bffd17 	ldw	r2,-12(fp)
   129ec:	18801826 	beq	r3,r2,12a50 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   129f0:	0005303a 	rdctl	r2,status
   129f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   129f8:	e0fffb17 	ldw	r3,-20(fp)
   129fc:	00bfff84 	movi	r2,-2
   12a00:	1884703a 	and	r2,r3,r2
   12a04:	1001703a 	wrctl	status,r2
  
  return context;
   12a08:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12a0c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12a10:	e0bffc17 	ldw	r2,-16(fp)
   12a14:	10800817 	ldw	r2,32(r2)
   12a18:	10c00054 	ori	r3,r2,1
   12a1c:	e0bffc17 	ldw	r2,-16(fp)
   12a20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12a24:	e0bffc17 	ldw	r2,-16(fp)
   12a28:	10800017 	ldw	r2,0(r2)
   12a2c:	10800104 	addi	r2,r2,4
   12a30:	1007883a 	mov	r3,r2
   12a34:	e0bffc17 	ldw	r2,-16(fp)
   12a38:	10800817 	ldw	r2,32(r2)
   12a3c:	18800035 	stwio	r2,0(r3)
   12a40:	e0bffa17 	ldw	r2,-24(fp)
   12a44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12a48:	e0bff917 	ldw	r2,-28(fp)
   12a4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12a50:	e0fff517 	ldw	r3,-44(fp)
   12a54:	e0bffd17 	ldw	r2,-12(fp)
   12a58:	18800426 	beq	r3,r2,12a6c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   12a5c:	e0fff517 	ldw	r3,-44(fp)
   12a60:	e0bffd17 	ldw	r2,-12(fp)
   12a64:	1885c83a 	sub	r2,r3,r2
   12a68:	00000606 	br	12a84 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   12a6c:	e0bfff17 	ldw	r2,-4(fp)
   12a70:	1090000c 	andi	r2,r2,16384
   12a74:	10000226 	beq	r2,zero,12a80 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   12a78:	00bffd44 	movi	r2,-11
   12a7c:	00000106 	br	12a84 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   12a80:	00bffec4 	movi	r2,-5
}
   12a84:	e037883a 	mov	sp,fp
   12a88:	dfc00117 	ldw	ra,4(sp)
   12a8c:	df000017 	ldw	fp,0(sp)
   12a90:	dec00204 	addi	sp,sp,8
   12a94:	f800283a 	ret

00012a98 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12a98:	defff304 	addi	sp,sp,-52
   12a9c:	dfc00c15 	stw	ra,48(sp)
   12aa0:	df000b15 	stw	fp,44(sp)
   12aa4:	df000b04 	addi	fp,sp,44
   12aa8:	e13ffc15 	stw	r4,-16(fp)
   12aac:	e17ffd15 	stw	r5,-12(fp)
   12ab0:	e1bffe15 	stw	r6,-8(fp)
   12ab4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   12ab8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12abc:	e0bffd17 	ldw	r2,-12(fp)
   12ac0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12ac4:	00003706 	br	12ba4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   12ac8:	e0bffc17 	ldw	r2,-16(fp)
   12acc:	10800c17 	ldw	r2,48(r2)
   12ad0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   12ad4:	e0bffc17 	ldw	r2,-16(fp)
   12ad8:	10800d17 	ldw	r2,52(r2)
   12adc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   12ae0:	e0fff917 	ldw	r3,-28(fp)
   12ae4:	e0bff517 	ldw	r2,-44(fp)
   12ae8:	1880062e 	bgeu	r3,r2,12b04 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12aec:	e0fff517 	ldw	r3,-44(fp)
   12af0:	e0bff917 	ldw	r2,-28(fp)
   12af4:	1885c83a 	sub	r2,r3,r2
   12af8:	10bfffc4 	addi	r2,r2,-1
   12afc:	e0bff615 	stw	r2,-40(fp)
   12b00:	00000b06 	br	12b30 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   12b04:	e0bff517 	ldw	r2,-44(fp)
   12b08:	10000526 	beq	r2,zero,12b20 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12b0c:	00c20004 	movi	r3,2048
   12b10:	e0bff917 	ldw	r2,-28(fp)
   12b14:	1885c83a 	sub	r2,r3,r2
   12b18:	e0bff615 	stw	r2,-40(fp)
   12b1c:	00000406 	br	12b30 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12b20:	00c1ffc4 	movi	r3,2047
   12b24:	e0bff917 	ldw	r2,-28(fp)
   12b28:	1885c83a 	sub	r2,r3,r2
   12b2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12b30:	e0bff617 	ldw	r2,-40(fp)
   12b34:	10001e26 	beq	r2,zero,12bb0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   12b38:	e0fffe17 	ldw	r3,-8(fp)
   12b3c:	e0bff617 	ldw	r2,-40(fp)
   12b40:	1880022e 	bgeu	r3,r2,12b4c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   12b44:	e0bffe17 	ldw	r2,-8(fp)
   12b48:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12b4c:	e0bffc17 	ldw	r2,-16(fp)
   12b50:	10c20e04 	addi	r3,r2,2104
   12b54:	e0bff917 	ldw	r2,-28(fp)
   12b58:	1885883a 	add	r2,r3,r2
   12b5c:	e1bff617 	ldw	r6,-40(fp)
   12b60:	e17ffd17 	ldw	r5,-12(fp)
   12b64:	1009883a 	mov	r4,r2
   12b68:	00080000 	call	8000 <memcpy>
      ptr   += n;
   12b6c:	e0fffd17 	ldw	r3,-12(fp)
   12b70:	e0bff617 	ldw	r2,-40(fp)
   12b74:	1885883a 	add	r2,r3,r2
   12b78:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   12b7c:	e0fffe17 	ldw	r3,-8(fp)
   12b80:	e0bff617 	ldw	r2,-40(fp)
   12b84:	1885c83a 	sub	r2,r3,r2
   12b88:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12b8c:	e0fff917 	ldw	r3,-28(fp)
   12b90:	e0bff617 	ldw	r2,-40(fp)
   12b94:	1885883a 	add	r2,r3,r2
   12b98:	10c1ffcc 	andi	r3,r2,2047
   12b9c:	e0bffc17 	ldw	r2,-16(fp)
   12ba0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12ba4:	e0bffe17 	ldw	r2,-8(fp)
   12ba8:	00bfc716 	blt	zero,r2,12ac8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21540ac8>
   12bac:	00000106 	br	12bb4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   12bb0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bb4:	0005303a 	rdctl	r2,status
   12bb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bbc:	e0fffb17 	ldw	r3,-20(fp)
   12bc0:	00bfff84 	movi	r2,-2
   12bc4:	1884703a 	and	r2,r3,r2
   12bc8:	1001703a 	wrctl	status,r2
  
  return context;
   12bcc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   12bd0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12bd4:	e0bffc17 	ldw	r2,-16(fp)
   12bd8:	10800817 	ldw	r2,32(r2)
   12bdc:	10c00094 	ori	r3,r2,2
   12be0:	e0bffc17 	ldw	r2,-16(fp)
   12be4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12be8:	e0bffc17 	ldw	r2,-16(fp)
   12bec:	10800017 	ldw	r2,0(r2)
   12bf0:	10800104 	addi	r2,r2,4
   12bf4:	1007883a 	mov	r3,r2
   12bf8:	e0bffc17 	ldw	r2,-16(fp)
   12bfc:	10800817 	ldw	r2,32(r2)
   12c00:	18800035 	stwio	r2,0(r3)
   12c04:	e0bffa17 	ldw	r2,-24(fp)
   12c08:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c0c:	e0bff817 	ldw	r2,-32(fp)
   12c10:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   12c14:	e0bffe17 	ldw	r2,-8(fp)
   12c18:	0080100e 	bge	zero,r2,12c5c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   12c1c:	e0bfff17 	ldw	r2,-4(fp)
   12c20:	1090000c 	andi	r2,r2,16384
   12c24:	1000101e 	bne	r2,zero,12c68 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   12c28:	0001883a 	nop
   12c2c:	e0bffc17 	ldw	r2,-16(fp)
   12c30:	10c00d17 	ldw	r3,52(r2)
   12c34:	e0bff517 	ldw	r2,-44(fp)
   12c38:	1880051e 	bne	r3,r2,12c50 <altera_avalon_jtag_uart_write+0x1b8>
   12c3c:	e0bffc17 	ldw	r2,-16(fp)
   12c40:	10c00917 	ldw	r3,36(r2)
   12c44:	e0bffc17 	ldw	r2,-16(fp)
   12c48:	10800117 	ldw	r2,4(r2)
   12c4c:	18bff736 	bltu	r3,r2,12c2c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21540c2c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   12c50:	e0bffc17 	ldw	r2,-16(fp)
   12c54:	10800917 	ldw	r2,36(r2)
   12c58:	1000051e 	bne	r2,zero,12c70 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   12c5c:	e0bffe17 	ldw	r2,-8(fp)
   12c60:	00bfd016 	blt	zero,r2,12ba4 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21540ba4>
   12c64:	00000306 	br	12c74 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   12c68:	0001883a 	nop
   12c6c:	00000106 	br	12c74 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   12c70:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   12c74:	e0fffd17 	ldw	r3,-12(fp)
   12c78:	e0bff717 	ldw	r2,-36(fp)
   12c7c:	18800426 	beq	r3,r2,12c90 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   12c80:	e0fffd17 	ldw	r3,-12(fp)
   12c84:	e0bff717 	ldw	r2,-36(fp)
   12c88:	1885c83a 	sub	r2,r3,r2
   12c8c:	00000606 	br	12ca8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   12c90:	e0bfff17 	ldw	r2,-4(fp)
   12c94:	1090000c 	andi	r2,r2,16384
   12c98:	10000226 	beq	r2,zero,12ca4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   12c9c:	00bffd44 	movi	r2,-11
   12ca0:	00000106 	br	12ca8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   12ca4:	00bffec4 	movi	r2,-5
}
   12ca8:	e037883a 	mov	sp,fp
   12cac:	dfc00117 	ldw	ra,4(sp)
   12cb0:	df000017 	ldw	fp,0(sp)
   12cb4:	dec00204 	addi	sp,sp,8
   12cb8:	f800283a 	ret

00012cbc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   12cbc:	defff404 	addi	sp,sp,-48
   12cc0:	df000b15 	stw	fp,44(sp)
   12cc4:	df000b04 	addi	fp,sp,44
   12cc8:	e13ffc15 	stw	r4,-16(fp)
   12ccc:	e17ffd15 	stw	r5,-12(fp)
   12cd0:	e1bffe15 	stw	r6,-8(fp)
   12cd4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   12cd8:	e0ffff17 	ldw	r3,-4(fp)
   12cdc:	e0bffe17 	ldw	r2,-8(fp)
   12ce0:	1885883a 	add	r2,r3,r2
   12ce4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   12ce8:	e0c00217 	ldw	r3,8(fp)
   12cec:	e0800117 	ldw	r2,4(fp)
   12cf0:	1885883a 	add	r2,r3,r2
   12cf4:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   12cf8:	e0800117 	ldw	r2,4(fp)
   12cfc:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   12d00:	e0bffe17 	ldw	r2,-8(fp)
   12d04:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   12d08:	00800044 	movi	r2,1
   12d0c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   12d10:	e0bffc17 	ldw	r2,-16(fp)
   12d14:	10800504 	addi	r2,r2,20
   12d18:	1009883a 	mov	r4,r2
   12d1c:	00c00044 	movi	r3,1
   12d20:	e0bffd17 	ldw	r2,-12(fp)
   12d24:	1884983a 	sll	r2,r3,r2
   12d28:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   12d2c:	e0800317 	ldw	r2,12(fp)
   12d30:	1080008c 	andi	r2,r2,2
   12d34:	1000051e 	bne	r2,zero,12d4c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   12d38:	e0bffc17 	ldw	r2,-16(fp)
   12d3c:	10800304 	addi	r2,r2,12
   12d40:	1007883a 	mov	r3,r2
   12d44:	00810004 	movi	r2,1024
   12d48:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   12d4c:	e0bffc17 	ldw	r2,-16(fp)
   12d50:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   12d54:	e0bffc17 	ldw	r2,-16(fp)
   12d58:	10800204 	addi	r2,r2,8
   12d5c:	10800037 	ldwio	r2,0(r2)
   12d60:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   12d64:	e0bffa17 	ldw	r2,-24(fp)
   12d68:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   12d6c:	10000226 	beq	r2,zero,12d78 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   12d70:	e0bff717 	ldw	r2,-36(fp)
   12d74:	1000031e 	bne	r2,zero,12d84 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   12d78:	e0bffa17 	ldw	r2,-24(fp)
   12d7c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   12d80:	103ff426 	beq	r2,zero,12d54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21540d54>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   12d84:	e0bffa17 	ldw	r2,-24(fp)
   12d88:	1080100c 	andi	r2,r2,64
   12d8c:	10001e26 	beq	r2,zero,12e08 <alt_avalon_spi_command+0x14c>
   12d90:	e0bff717 	ldw	r2,-36(fp)
   12d94:	00801c0e 	bge	zero,r2,12e08 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   12d98:	e0bff717 	ldw	r2,-36(fp)
   12d9c:	10bfffc4 	addi	r2,r2,-1
   12da0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   12da4:	e0ffff17 	ldw	r3,-4(fp)
   12da8:	e0bff817 	ldw	r2,-32(fp)
   12dac:	18800a2e 	bgeu	r3,r2,12dd8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   12db0:	e0bffc17 	ldw	r2,-16(fp)
   12db4:	10800104 	addi	r2,r2,4
   12db8:	1009883a 	mov	r4,r2
   12dbc:	e0bfff17 	ldw	r2,-4(fp)
   12dc0:	10c00044 	addi	r3,r2,1
   12dc4:	e0ffff15 	stw	r3,-4(fp)
   12dc8:	10800003 	ldbu	r2,0(r2)
   12dcc:	10803fcc 	andi	r2,r2,255
   12dd0:	20800035 	stwio	r2,0(r4)
   12dd4:	00000c06 	br	12e08 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   12dd8:	e0bff517 	ldw	r2,-44(fp)
   12ddc:	10000826 	beq	r2,zero,12e00 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   12de0:	e0bff517 	ldw	r2,-44(fp)
   12de4:	10bfffc4 	addi	r2,r2,-1
   12de8:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   12dec:	e0bffc17 	ldw	r2,-16(fp)
   12df0:	10800104 	addi	r2,r2,4
   12df4:	0007883a 	mov	r3,zero
   12df8:	10c00035 	stwio	r3,0(r2)
   12dfc:	00000206 	br	12e08 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   12e00:	00bf0004 	movi	r2,-1024
   12e04:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   12e08:	e0bffa17 	ldw	r2,-24(fp)
   12e0c:	1080200c 	andi	r2,r2,128
   12e10:	103fd026 	beq	r2,zero,12d54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21540d54>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   12e14:	e0bffc17 	ldw	r2,-16(fp)
   12e18:	10800037 	ldwio	r2,0(r2)
   12e1c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   12e20:	e0bff617 	ldw	r2,-40(fp)
   12e24:	10000426 	beq	r2,zero,12e38 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   12e28:	e0bff617 	ldw	r2,-40(fp)
   12e2c:	10bfffc4 	addi	r2,r2,-1
   12e30:	e0bff615 	stw	r2,-40(fp)
   12e34:	00000506 	br	12e4c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   12e38:	e0800217 	ldw	r2,8(fp)
   12e3c:	10c00044 	addi	r3,r2,1
   12e40:	e0c00215 	stw	r3,8(fp)
   12e44:	e0fffb17 	ldw	r3,-20(fp)
   12e48:	10c00005 	stb	r3,0(r2)
      credits++;
   12e4c:	e0bff717 	ldw	r2,-36(fp)
   12e50:	10800044 	addi	r2,r2,1
   12e54:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   12e58:	e0bff617 	ldw	r2,-40(fp)
   12e5c:	103fbd1e 	bne	r2,zero,12d54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21540d54>
   12e60:	e0c00217 	ldw	r3,8(fp)
   12e64:	e0bff917 	ldw	r2,-28(fp)
   12e68:	18bfba1e 	bne	r3,r2,12d54 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21540d54>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   12e6c:	e0bffc17 	ldw	r2,-16(fp)
   12e70:	10800204 	addi	r2,r2,8
   12e74:	10800037 	ldwio	r2,0(r2)
   12e78:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   12e7c:	e0bffa17 	ldw	r2,-24(fp)
   12e80:	1080080c 	andi	r2,r2,32
   12e84:	103ff926 	beq	r2,zero,12e6c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21540e6c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   12e88:	e0800317 	ldw	r2,12(fp)
   12e8c:	1080004c 	andi	r2,r2,1
   12e90:	1000041e 	bne	r2,zero,12ea4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   12e94:	e0bffc17 	ldw	r2,-16(fp)
   12e98:	10800304 	addi	r2,r2,12
   12e9c:	0007883a 	mov	r3,zero
   12ea0:	10c00035 	stwio	r3,0(r2)

  return read_length;
   12ea4:	e0800117 	ldw	r2,4(fp)
}
   12ea8:	e037883a 	mov	sp,fp
   12eac:	df000017 	ldw	fp,0(sp)
   12eb0:	dec00104 	addi	sp,sp,4
   12eb4:	f800283a 	ret

00012eb8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12eb8:	defffa04 	addi	sp,sp,-24
   12ebc:	dfc00515 	stw	ra,20(sp)
   12ec0:	df000415 	stw	fp,16(sp)
   12ec4:	df000404 	addi	fp,sp,16
   12ec8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   12ecc:	0007883a 	mov	r3,zero
   12ed0:	e0bfff17 	ldw	r2,-4(fp)
   12ed4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   12ed8:	e0bfff17 	ldw	r2,-4(fp)
   12edc:	10800104 	addi	r2,r2,4
   12ee0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ee4:	0005303a 	rdctl	r2,status
   12ee8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12eec:	e0fffd17 	ldw	r3,-12(fp)
   12ef0:	00bfff84 	movi	r2,-2
   12ef4:	1884703a 	and	r2,r3,r2
   12ef8:	1001703a 	wrctl	status,r2
  
  return context;
   12efc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   12f00:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   12f04:	00141900 	call	14190 <alt_tick>
   12f08:	e0bffc17 	ldw	r2,-16(fp)
   12f0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f10:	e0bffe17 	ldw	r2,-8(fp)
   12f14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   12f18:	0001883a 	nop
   12f1c:	e037883a 	mov	sp,fp
   12f20:	dfc00117 	ldw	ra,4(sp)
   12f24:	df000017 	ldw	fp,0(sp)
   12f28:	dec00204 	addi	sp,sp,8
   12f2c:	f800283a 	ret

00012f30 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   12f30:	defff804 	addi	sp,sp,-32
   12f34:	dfc00715 	stw	ra,28(sp)
   12f38:	df000615 	stw	fp,24(sp)
   12f3c:	df000604 	addi	fp,sp,24
   12f40:	e13ffc15 	stw	r4,-16(fp)
   12f44:	e17ffd15 	stw	r5,-12(fp)
   12f48:	e1bffe15 	stw	r6,-8(fp)
   12f4c:	e1ffff15 	stw	r7,-4(fp)
   12f50:	e0bfff17 	ldw	r2,-4(fp)
   12f54:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   12f58:	d0a78317 	ldw	r2,-25076(gp)
   12f5c:	1000021e 	bne	r2,zero,12f68 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   12f60:	e0bffb17 	ldw	r2,-20(fp)
   12f64:	d0a78315 	stw	r2,-25076(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   12f68:	e0bffc17 	ldw	r2,-16(fp)
   12f6c:	10800104 	addi	r2,r2,4
   12f70:	00c001c4 	movi	r3,7
   12f74:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   12f78:	d8000015 	stw	zero,0(sp)
   12f7c:	e1fffc17 	ldw	r7,-16(fp)
   12f80:	01800074 	movhi	r6,1
   12f84:	318bae04 	addi	r6,r6,11960
   12f88:	e17ffe17 	ldw	r5,-8(fp)
   12f8c:	e13ffd17 	ldw	r4,-12(fp)
   12f90:	000f2600 	call	f260 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   12f94:	0001883a 	nop
   12f98:	e037883a 	mov	sp,fp
   12f9c:	dfc00117 	ldw	ra,4(sp)
   12fa0:	df000017 	ldw	fp,0(sp)
   12fa4:	dec00204 	addi	sp,sp,8
   12fa8:	f800283a 	ret

00012fac <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
   12fac:	defff904 	addi	sp,sp,-28
   12fb0:	dfc00615 	stw	ra,24(sp)
   12fb4:	df000515 	stw	fp,20(sp)
   12fb8:	df000504 	addi	fp,sp,20
   12fbc:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
   12fc0:	e0bfff17 	ldw	r2,-4(fp)
   12fc4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
   12fc8:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
   12fcc:	e0bffb17 	ldw	r2,-20(fp)
   12fd0:	10001a26 	beq	r2,zero,1303c <alt_adc_irq+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fd4:	0005303a 	rdctl	r2,status
   12fd8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fdc:	e0fffe17 	ldw	r3,-8(fp)
   12fe0:	00bfff84 	movi	r2,-2
   12fe4:	1884703a 	and	r2,r3,r2
   12fe8:	1001703a 	wrctl	status,r2
  
  return context;
   12fec:	e0bffe17 	ldw	r2,-8(fp)
	{
	    cpu_sr = alt_irq_disable_all();
   12ff0:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
   12ff4:	e0bffb17 	ldw	r2,-20(fp)
   12ff8:	10800a17 	ldw	r2,40(r2)
   12ffc:	10000626 	beq	r2,zero,13018 <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
   13000:	e0bffb17 	ldw	r2,-20(fp)
   13004:	10800a17 	ldw	r2,40(r2)
   13008:	e0fffb17 	ldw	r3,-20(fp)
   1300c:	18c00b17 	ldw	r3,44(r3)
   13010:	1809883a 	mov	r4,r3
   13014:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
   13018:	e0bffb17 	ldw	r2,-20(fp)
   1301c:	10800c17 	ldw	r2,48(r2)
   13020:	1009883a 	mov	r4,r2
   13024:	00134580 	call	13458 <adc_clear_interrupt_status>
   13028:	e0bffc17 	ldw	r2,-16(fp)
   1302c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13030:	e0bffd17 	ldw	r2,-12(fp)
   13034:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
   13038:	0001883a 	nop
   1303c:	0001883a 	nop
}
   13040:	e037883a 	mov	sp,fp
   13044:	dfc00117 	ldw	ra,4(sp)
   13048:	df000017 	ldw	fp,0(sp)
   1304c:	dec00204 	addi	sp,sp,8
   13050:	f800283a 	ret

00013054 <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
   13054:	defff804 	addi	sp,sp,-32
   13058:	df000715 	stw	fp,28(sp)
   1305c:	df000704 	addi	fp,sp,28
   13060:	e13ffd15 	stw	r4,-12(fp)
   13064:	e17ffe15 	stw	r5,-8(fp)
   13068:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
   1306c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
   13070:	e0bfff17 	ldw	r2,-4(fp)
   13074:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
   13078:	e0bffe17 	ldw	r2,-8(fp)
   1307c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
   13080:	e0bffd17 	ldw	r2,-12(fp)
   13084:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
   13088:	e0bffa17 	ldw	r2,-24(fp)
   1308c:	1000021e 	bne	r2,zero,13098 <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
   13090:	00bffa84 	movi	r2,-22
   13094:	00001606 	br	130f0 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
   13098:	e03ff915 	stw	zero,-28(fp)
   1309c:	00001006 	br	130e0 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
   130a0:	e0bff917 	ldw	r2,-28(fp)
   130a4:	1085883a 	add	r2,r2,r2
   130a8:	1085883a 	add	r2,r2,r2
   130ac:	1007883a 	mov	r3,r2
   130b0:	e0bffc17 	ldw	r2,-16(fp)
   130b4:	1885883a 	add	r2,r3,r2
   130b8:	10800037 	ldwio	r2,0(r2)
   130bc:	1007883a 	mov	r3,r2
   130c0:	e0bffa17 	ldw	r2,-24(fp)
   130c4:	10c00015 	stw	r3,0(r2)

       dest_buf++;
   130c8:	e0bffa17 	ldw	r2,-24(fp)
   130cc:	10800104 	addi	r2,r2,4
   130d0:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
   130d4:	e0bff917 	ldw	r2,-28(fp)
   130d8:	10800044 	addi	r2,r2,1
   130dc:	e0bff915 	stw	r2,-28(fp)
   130e0:	e0fff917 	ldw	r3,-28(fp)
   130e4:	e0bffb17 	ldw	r2,-20(fp)
   130e8:	18bfed36 	bltu	r3,r2,130a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215410a0>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
   130ec:	0005883a 	mov	r2,zero

}
   130f0:	e037883a 	mov	sp,fp
   130f4:	df000017 	ldw	fp,0(sp)
   130f8:	dec00104 	addi	sp,sp,4
   130fc:	f800283a 	ret

00013100 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
   13100:	defffa04 	addi	sp,sp,-24
   13104:	dfc00515 	stw	ra,20(sp)
   13108:	df000415 	stw	fp,16(sp)
   1310c:	df000404 	addi	fp,sp,16
   13110:	e13ffd15 	stw	r4,-12(fp)
   13114:	e17ffe15 	stw	r5,-8(fp)
   13118:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
   1311c:	d1601904 	addi	r5,gp,-32668
   13120:	e13ffd17 	ldw	r4,-12(fp)
   13124:	00137f80 	call	137f8 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
   13128:	e0bffe17 	ldw	r2,-8(fp)
   1312c:	10000b16 	blt	r2,zero,1315c <altera_modular_adc_init+0x5c>
   13130:	e0bfff17 	ldw	r2,-4(fp)
   13134:	10000916 	blt	r2,zero,1315c <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
   13138:	e0bffe17 	ldw	r2,-8(fp)
   1313c:	e0ffff17 	ldw	r3,-4(fp)
   13140:	d8000015 	stw	zero,0(sp)
   13144:	e1fffd17 	ldw	r7,-12(fp)
   13148:	01800074 	movhi	r6,1
   1314c:	318beb04 	addi	r6,r6,12204
   13150:	180b883a 	mov	r5,r3
   13154:	1009883a 	mov	r4,r2
   13158:	000f2600 	call	f260 <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
   1315c:	0001883a 	nop
   13160:	e037883a 	mov	sp,fp
   13164:	dfc00117 	ldw	ra,4(sp)
   13168:	df000017 	ldw	fp,0(sp)
   1316c:	dec00204 	addi	sp,sp,8
   13170:	f800283a 	ret

00013174 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
   13174:	defffa04 	addi	sp,sp,-24
   13178:	dfc00515 	stw	ra,20(sp)
   1317c:	df000415 	stw	fp,16(sp)
   13180:	df000404 	addi	fp,sp,16
   13184:	e13ffc15 	stw	r4,-16(fp)
   13188:	e17ffd15 	stw	r5,-12(fp)
   1318c:	e1bffe15 	stw	r6,-8(fp)
   13190:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   13194:	e0bffc17 	ldw	r2,-16(fp)
   13198:	e0fffd17 	ldw	r3,-12(fp)
   1319c:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
   131a0:	e0bffc17 	ldw	r2,-16(fp)
   131a4:	e0fffe17 	ldw	r3,-8(fp)
   131a8:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
   131ac:	e0bffc17 	ldw	r2,-16(fp)
   131b0:	e0ffff17 	ldw	r3,-4(fp)
   131b4:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
   131b8:	e0bffd17 	ldw	r2,-12(fp)
   131bc:	10000726 	beq	r2,zero,131dc <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
   131c0:	e0bfff17 	ldw	r2,-4(fp)
   131c4:	1009883a 	mov	r4,r2
   131c8:	00134580 	call	13458 <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
   131cc:	e0bfff17 	ldw	r2,-4(fp)
   131d0:	1009883a 	mov	r4,r2
   131d4:	00133cc0 	call	133cc <adc_interrupt_enable>
                adc_clear_interrupt_status(sample_store_base);
	}
	
    
	
    return ;
   131d8:	00000706 	br	131f8 <alt_adc_register_callback+0x84>
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
   131dc:	e0bfff17 	ldw	r2,-4(fp)
   131e0:	1009883a 	mov	r4,r2
   131e4:	00134100 	call	13410 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
   131e8:	e0bfff17 	ldw	r2,-4(fp)
   131ec:	1009883a 	mov	r4,r2
   131f0:	00134580 	call	13458 <adc_clear_interrupt_status>
	}
	
    
	
    return ;
   131f4:	0001883a 	nop
}
   131f8:	e037883a 	mov	sp,fp
   131fc:	dfc00117 	ldw	ra,4(sp)
   13200:	df000017 	ldw	fp,0(sp)
   13204:	dec00204 	addi	sp,sp,8
   13208:	f800283a 	ret

0001320c <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
   1320c:	defffc04 	addi	sp,sp,-16
   13210:	dfc00315 	stw	ra,12(sp)
   13214:	df000215 	stw	fp,8(sp)
   13218:	df000204 	addi	fp,sp,8
   1321c:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
   13220:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
   13224:	d1601904 	addi	r5,gp,-32668
   13228:	e13fff17 	ldw	r4,-4(fp)
   1322c:	001395c0 	call	1395c <alt_find_dev>
   13230:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   13234:	e0bffe17 	ldw	r2,-8(fp)
}
   13238:	e037883a 	mov	sp,fp
   1323c:	dfc00117 	ldw	ra,4(sp)
   13240:	df000017 	ldw	fp,0(sp)
   13244:	dec00204 	addi	sp,sp,8
   13248:	f800283a 	ret

0001324c <adc_stop>:

void adc_stop(int sequencer_base)
{
   1324c:	defffe04 	addi	sp,sp,-8
   13250:	df000115 	stw	fp,4(sp)
   13254:	df000104 	addi	fp,sp,4
   13258:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
   1325c:	e0bfff17 	ldw	r2,-4(fp)
   13260:	e0ffff17 	ldw	r3,-4(fp)
   13264:	19000037 	ldwio	r4,0(r3)
   13268:	00ffff84 	movi	r3,-2
   1326c:	20c6703a 	and	r3,r4,r3
   13270:	10c00035 	stwio	r3,0(r2)
   13274:	0001883a 	nop
   13278:	e0bfff17 	ldw	r2,-4(fp)
   1327c:	10800037 	ldwio	r2,0(r2)
   13280:	1080004c 	andi	r2,r2,1
   13284:	103ffc1e 	bne	r2,zero,13278 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21541278>
}
   13288:	0001883a 	nop
   1328c:	e037883a 	mov	sp,fp
   13290:	df000017 	ldw	fp,0(sp)
   13294:	dec00104 	addi	sp,sp,4
   13298:	f800283a 	ret

0001329c <adc_start>:

void adc_start(int sequencer_base)
{
   1329c:	defffe04 	addi	sp,sp,-8
   132a0:	df000115 	stw	fp,4(sp)
   132a4:	df000104 	addi	fp,sp,4
   132a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
   132ac:	e0bfff17 	ldw	r2,-4(fp)
   132b0:	e0ffff17 	ldw	r3,-4(fp)
   132b4:	18c00037 	ldwio	r3,0(r3)
   132b8:	18c00054 	ori	r3,r3,1
   132bc:	10c00035 	stwio	r3,0(r2)
}
   132c0:	0001883a 	nop
   132c4:	e037883a 	mov	sp,fp
   132c8:	df000017 	ldw	fp,0(sp)
   132cc:	dec00104 	addi	sp,sp,4
   132d0:	f800283a 	ret

000132d4 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
   132d4:	defffe04 	addi	sp,sp,-8
   132d8:	df000115 	stw	fp,4(sp)
   132dc:	df000104 	addi	fp,sp,4
   132e0:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
   132e4:	e0bfff17 	ldw	r2,-4(fp)
   132e8:	e0ffff17 	ldw	r3,-4(fp)
   132ec:	19000037 	ldwio	r4,0(r3)
   132f0:	00fffc44 	movi	r3,-15
   132f4:	20c6703a 	and	r3,r4,r3
   132f8:	18c00094 	ori	r3,r3,2
   132fc:	10c00035 	stwio	r3,0(r2)
}
   13300:	0001883a 	nop
   13304:	e037883a 	mov	sp,fp
   13308:	df000017 	ldw	fp,0(sp)
   1330c:	dec00104 	addi	sp,sp,4
   13310:	f800283a 	ret

00013314 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
   13314:	defffe04 	addi	sp,sp,-8
   13318:	df000115 	stw	fp,4(sp)
   1331c:	df000104 	addi	fp,sp,4
   13320:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
   13324:	e0bfff17 	ldw	r2,-4(fp)
   13328:	e0ffff17 	ldw	r3,-4(fp)
   1332c:	19000037 	ldwio	r4,0(r3)
   13330:	00fffc44 	movi	r3,-15
   13334:	20c6703a 	and	r3,r4,r3
   13338:	10c00035 	stwio	r3,0(r2)
}
   1333c:	0001883a 	nop
   13340:	e037883a 	mov	sp,fp
   13344:	df000017 	ldw	fp,0(sp)
   13348:	dec00104 	addi	sp,sp,4
   1334c:	f800283a 	ret

00013350 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
   13350:	defffc04 	addi	sp,sp,-16
   13354:	dfc00315 	stw	ra,12(sp)
   13358:	df000215 	stw	fp,8(sp)
   1335c:	df000204 	addi	fp,sp,8
   13360:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
   13364:	e0bfff17 	ldw	r2,-4(fp)
   13368:	10800037 	ldwio	r2,0(r2)
   1336c:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
   13370:	e13fff17 	ldw	r4,-4(fp)
   13374:	001324c0 	call	1324c <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
   13378:	e0bfff17 	ldw	r2,-4(fp)
   1337c:	e0ffff17 	ldw	r3,-4(fp)
   13380:	18c00037 	ldwio	r3,0(r3)
   13384:	18c00394 	ori	r3,r3,14
   13388:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
   1338c:	e13fff17 	ldw	r4,-4(fp)
   13390:	001329c0 	call	1329c <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
   13394:	0001883a 	nop
   13398:	e0bfff17 	ldw	r2,-4(fp)
   1339c:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
   133a0:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
   133a4:	103ffc1e 	bne	r2,zero,13398 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21541398>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
   133a8:	e0bfff17 	ldw	r2,-4(fp)
   133ac:	e0fffe17 	ldw	r3,-8(fp)
   133b0:	10c00035 	stwio	r3,0(r2)
}
   133b4:	0001883a 	nop
   133b8:	e037883a 	mov	sp,fp
   133bc:	dfc00117 	ldw	ra,4(sp)
   133c0:	df000017 	ldw	fp,0(sp)
   133c4:	dec00204 	addi	sp,sp,8
   133c8:	f800283a 	ret

000133cc <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
   133cc:	defffe04 	addi	sp,sp,-8
   133d0:	df000115 	stw	fp,4(sp)
   133d4:	df000104 	addi	fp,sp,4
   133d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
   133dc:	e0bfff17 	ldw	r2,-4(fp)
   133e0:	10804004 	addi	r2,r2,256
   133e4:	1007883a 	mov	r3,r2
   133e8:	e0bfff17 	ldw	r2,-4(fp)
   133ec:	10804004 	addi	r2,r2,256
   133f0:	10800037 	ldwio	r2,0(r2)
   133f4:	10800054 	ori	r2,r2,1
   133f8:	18800035 	stwio	r2,0(r3)
}
   133fc:	0001883a 	nop
   13400:	e037883a 	mov	sp,fp
   13404:	df000017 	ldw	fp,0(sp)
   13408:	dec00104 	addi	sp,sp,4
   1340c:	f800283a 	ret

00013410 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
   13410:	defffe04 	addi	sp,sp,-8
   13414:	df000115 	stw	fp,4(sp)
   13418:	df000104 	addi	fp,sp,4
   1341c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
   13420:	e0bfff17 	ldw	r2,-4(fp)
   13424:	10804004 	addi	r2,r2,256
   13428:	1009883a 	mov	r4,r2
   1342c:	e0bfff17 	ldw	r2,-4(fp)
   13430:	10804004 	addi	r2,r2,256
   13434:	10c00037 	ldwio	r3,0(r2)
   13438:	00bfff84 	movi	r2,-2
   1343c:	1884703a 	and	r2,r3,r2
   13440:	20800035 	stwio	r2,0(r4)
}
   13444:	0001883a 	nop
   13448:	e037883a 	mov	sp,fp
   1344c:	df000017 	ldw	fp,0(sp)
   13450:	dec00104 	addi	sp,sp,4
   13454:	f800283a 	ret

00013458 <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
   13458:	defffe04 	addi	sp,sp,-8
   1345c:	df000115 	stw	fp,4(sp)
   13460:	df000104 	addi	fp,sp,4
   13464:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
   13468:	e0bfff17 	ldw	r2,-4(fp)
   1346c:	10804104 	addi	r2,r2,260
   13470:	1007883a 	mov	r3,r2
   13474:	e0bfff17 	ldw	r2,-4(fp)
   13478:	10804104 	addi	r2,r2,260
   1347c:	10800037 	ldwio	r2,0(r2)
   13480:	10800054 	ori	r2,r2,1
   13484:	18800035 	stwio	r2,0(r3)
}
   13488:	0001883a 	nop
   1348c:	e037883a 	mov	sp,fp
   13490:	df000017 	ldw	fp,0(sp)
   13494:	dec00104 	addi	sp,sp,4
   13498:	f800283a 	ret

0001349c <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
   1349c:	defffe04 	addi	sp,sp,-8
   134a0:	df000115 	stw	fp,4(sp)
   134a4:	df000104 	addi	fp,sp,4
   134a8:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
   134ac:	e0bfff17 	ldw	r2,-4(fp)
   134b0:	10804104 	addi	r2,r2,260
   134b4:	10800037 	ldwio	r2,0(r2)
   134b8:	1080004c 	andi	r2,r2,1
   134bc:	10000226 	beq	r2,zero,134c8 <adc_interrupt_asserted+0x2c>
   134c0:	00bfffc4 	movi	r2,-1
   134c4:	00000106 	br	134cc <adc_interrupt_asserted+0x30>
   134c8:	0005883a 	mov	r2,zero
}
   134cc:	e037883a 	mov	sp,fp
   134d0:	df000017 	ldw	fp,0(sp)
   134d4:	dec00104 	addi	sp,sp,4
   134d8:	f800283a 	ret

000134dc <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
   134dc:	defffe04 	addi	sp,sp,-8
   134e0:	df000115 	stw	fp,4(sp)
   134e4:	df000104 	addi	fp,sp,4
   134e8:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
   134ec:	0001883a 	nop
   134f0:	e0bfff17 	ldw	r2,-4(fp)
   134f4:	10804104 	addi	r2,r2,260
   134f8:	10800037 	ldwio	r2,0(r2)
   134fc:	1080004c 	andi	r2,r2,1
   13500:	103ffb26 	beq	r2,zero,134f0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215414f0>
}
   13504:	0001883a 	nop
   13508:	e037883a 	mov	sp,fp
   1350c:	df000017 	ldw	fp,0(sp)
   13510:	dec00104 	addi	sp,sp,4
   13514:	f800283a 	ret

00013518 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   13518:	defff504 	addi	sp,sp,-44
   1351c:	df000a15 	stw	fp,40(sp)
   13520:	df000a04 	addi	fp,sp,40
   13524:	e13ffc15 	stw	r4,-16(fp)
   13528:	e17ffd15 	stw	r5,-12(fp)
   1352c:	e1bffe15 	stw	r6,-8(fp)
   13530:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   13534:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13538:	d0a78317 	ldw	r2,-25076(gp)
  
  if (alt_ticks_per_second ())
   1353c:	10003c26 	beq	r2,zero,13630 <alt_alarm_start+0x118>
  {
    if (alarm)
   13540:	e0bffc17 	ldw	r2,-16(fp)
   13544:	10003826 	beq	r2,zero,13628 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   13548:	e0bffc17 	ldw	r2,-16(fp)
   1354c:	e0fffe17 	ldw	r3,-8(fp)
   13550:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   13554:	e0bffc17 	ldw	r2,-16(fp)
   13558:	e0ffff17 	ldw	r3,-4(fp)
   1355c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13560:	0005303a 	rdctl	r2,status
   13564:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13568:	e0fff917 	ldw	r3,-28(fp)
   1356c:	00bfff84 	movi	r2,-2
   13570:	1884703a 	and	r2,r3,r2
   13574:	1001703a 	wrctl	status,r2
  
  return context;
   13578:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1357c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   13580:	d0a78417 	ldw	r2,-25072(gp)
      
      current_nticks = alt_nticks();
   13584:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   13588:	e0fffd17 	ldw	r3,-12(fp)
   1358c:	e0bff617 	ldw	r2,-40(fp)
   13590:	1885883a 	add	r2,r3,r2
   13594:	10c00044 	addi	r3,r2,1
   13598:	e0bffc17 	ldw	r2,-16(fp)
   1359c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   135a0:	e0bffc17 	ldw	r2,-16(fp)
   135a4:	10c00217 	ldw	r3,8(r2)
   135a8:	e0bff617 	ldw	r2,-40(fp)
   135ac:	1880042e 	bgeu	r3,r2,135c0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   135b0:	e0bffc17 	ldw	r2,-16(fp)
   135b4:	00c00044 	movi	r3,1
   135b8:	10c00405 	stb	r3,16(r2)
   135bc:	00000206 	br	135c8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   135c0:	e0bffc17 	ldw	r2,-16(fp)
   135c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   135c8:	e0bffc17 	ldw	r2,-16(fp)
   135cc:	d0e01b04 	addi	r3,gp,-32660
   135d0:	e0fffa15 	stw	r3,-24(fp)
   135d4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   135d8:	e0bffb17 	ldw	r2,-20(fp)
   135dc:	e0fffa17 	ldw	r3,-24(fp)
   135e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   135e4:	e0bffa17 	ldw	r2,-24(fp)
   135e8:	10c00017 	ldw	r3,0(r2)
   135ec:	e0bffb17 	ldw	r2,-20(fp)
   135f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   135f4:	e0bffa17 	ldw	r2,-24(fp)
   135f8:	10800017 	ldw	r2,0(r2)
   135fc:	e0fffb17 	ldw	r3,-20(fp)
   13600:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13604:	e0bffa17 	ldw	r2,-24(fp)
   13608:	e0fffb17 	ldw	r3,-20(fp)
   1360c:	10c00015 	stw	r3,0(r2)
   13610:	e0bff817 	ldw	r2,-32(fp)
   13614:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13618:	e0bff717 	ldw	r2,-36(fp)
   1361c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   13620:	0005883a 	mov	r2,zero
   13624:	00000306 	br	13634 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   13628:	00bffa84 	movi	r2,-22
   1362c:	00000106 	br	13634 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   13630:	00bfde84 	movi	r2,-134
  }
}
   13634:	e037883a 	mov	sp,fp
   13638:	df000017 	ldw	fp,0(sp)
   1363c:	dec00104 	addi	sp,sp,4
   13640:	f800283a 	ret

00013644 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   13644:	defffa04 	addi	sp,sp,-24
   13648:	dfc00515 	stw	ra,20(sp)
   1364c:	df000415 	stw	fp,16(sp)
   13650:	df000404 	addi	fp,sp,16
   13654:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   13658:	00800244 	movi	r2,9
   1365c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   13660:	014003f4 	movhi	r5,15
   13664:	29509004 	addi	r5,r5,16960
   13668:	e13ffd17 	ldw	r4,-12(fp)
   1366c:	00020100 	call	2010 <__mulsi3>
   13670:	100b883a 	mov	r5,r2
   13674:	01017db4 	movhi	r4,1526
   13678:	21384004 	addi	r4,r4,-7936
   1367c:	000c7300 	call	c730 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   13680:	100b883a 	mov	r5,r2
   13684:	01200034 	movhi	r4,32768
   13688:	213fffc4 	addi	r4,r4,-1
   1368c:	000c7300 	call	c730 <__udivsi3>
   13690:	100b883a 	mov	r5,r2
   13694:	e13fff17 	ldw	r4,-4(fp)
   13698:	000c7300 	call	c730 <__udivsi3>
   1369c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   136a0:	e0bffe17 	ldw	r2,-8(fp)
   136a4:	10002a26 	beq	r2,zero,13750 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   136a8:	e03ffc15 	stw	zero,-16(fp)
   136ac:	00001706 	br	1370c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   136b0:	00a00034 	movhi	r2,32768
   136b4:	10bfffc4 	addi	r2,r2,-1
   136b8:	10bfffc4 	addi	r2,r2,-1
   136bc:	103ffe1e 	bne	r2,zero,136b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215416b8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   136c0:	014003f4 	movhi	r5,15
   136c4:	29509004 	addi	r5,r5,16960
   136c8:	e13ffd17 	ldw	r4,-12(fp)
   136cc:	00020100 	call	2010 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   136d0:	100b883a 	mov	r5,r2
   136d4:	01017db4 	movhi	r4,1526
   136d8:	21384004 	addi	r4,r4,-7936
   136dc:	000c7300 	call	c730 <__udivsi3>
   136e0:	100b883a 	mov	r5,r2
   136e4:	01200034 	movhi	r4,32768
   136e8:	213fffc4 	addi	r4,r4,-1
   136ec:	000c7300 	call	c730 <__udivsi3>
   136f0:	1007883a 	mov	r3,r2
   136f4:	e0bfff17 	ldw	r2,-4(fp)
   136f8:	10c5c83a 	sub	r2,r2,r3
   136fc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   13700:	e0bffc17 	ldw	r2,-16(fp)
   13704:	10800044 	addi	r2,r2,1
   13708:	e0bffc15 	stw	r2,-16(fp)
   1370c:	e0fffc17 	ldw	r3,-16(fp)
   13710:	e0bffe17 	ldw	r2,-8(fp)
   13714:	18bfe616 	blt	r3,r2,136b0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215416b0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   13718:	014003f4 	movhi	r5,15
   1371c:	29509004 	addi	r5,r5,16960
   13720:	e13ffd17 	ldw	r4,-12(fp)
   13724:	00020100 	call	2010 <__mulsi3>
   13728:	100b883a 	mov	r5,r2
   1372c:	01017db4 	movhi	r4,1526
   13730:	21384004 	addi	r4,r4,-7936
   13734:	000c7300 	call	c730 <__udivsi3>
   13738:	e17fff17 	ldw	r5,-4(fp)
   1373c:	1009883a 	mov	r4,r2
   13740:	00020100 	call	2010 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13744:	10bfffc4 	addi	r2,r2,-1
   13748:	103ffe1e 	bne	r2,zero,13744 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21541744>
   1374c:	00000d06 	br	13784 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   13750:	014003f4 	movhi	r5,15
   13754:	29509004 	addi	r5,r5,16960
   13758:	e13ffd17 	ldw	r4,-12(fp)
   1375c:	00020100 	call	2010 <__mulsi3>
   13760:	100b883a 	mov	r5,r2
   13764:	01017db4 	movhi	r4,1526
   13768:	21384004 	addi	r4,r4,-7936
   1376c:	000c7300 	call	c730 <__udivsi3>
   13770:	e17fff17 	ldw	r5,-4(fp)
   13774:	1009883a 	mov	r4,r2
   13778:	00020100 	call	2010 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1377c:	10bfffc4 	addi	r2,r2,-1
   13780:	00bffe16 	blt	zero,r2,1377c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154177c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   13784:	0005883a 	mov	r2,zero
}
   13788:	e037883a 	mov	sp,fp
   1378c:	dfc00117 	ldw	ra,4(sp)
   13790:	df000017 	ldw	fp,0(sp)
   13794:	dec00204 	addi	sp,sp,8
   13798:	f800283a 	ret

0001379c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1379c:	deffff04 	addi	sp,sp,-4
   137a0:	df000015 	stw	fp,0(sp)
   137a4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   137a8:	0001883a 	nop
   137ac:	e037883a 	mov	sp,fp
   137b0:	df000017 	ldw	fp,0(sp)
   137b4:	dec00104 	addi	sp,sp,4
   137b8:	f800283a 	ret

000137bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   137bc:	defffe04 	addi	sp,sp,-8
   137c0:	dfc00115 	stw	ra,4(sp)
   137c4:	df000015 	stw	fp,0(sp)
   137c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   137cc:	d0a01417 	ldw	r2,-32688(gp)
   137d0:	10000326 	beq	r2,zero,137e0 <alt_get_errno+0x24>
   137d4:	d0a01417 	ldw	r2,-32688(gp)
   137d8:	103ee83a 	callr	r2
   137dc:	00000106 	br	137e4 <alt_get_errno+0x28>
   137e0:	d0a77a04 	addi	r2,gp,-25112
}
   137e4:	e037883a 	mov	sp,fp
   137e8:	dfc00117 	ldw	ra,4(sp)
   137ec:	df000017 	ldw	fp,0(sp)
   137f0:	dec00204 	addi	sp,sp,8
   137f4:	f800283a 	ret

000137f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   137f8:	defffa04 	addi	sp,sp,-24
   137fc:	dfc00515 	stw	ra,20(sp)
   13800:	df000415 	stw	fp,16(sp)
   13804:	df000404 	addi	fp,sp,16
   13808:	e13ffe15 	stw	r4,-8(fp)
   1380c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13810:	e0bffe17 	ldw	r2,-8(fp)
   13814:	10000326 	beq	r2,zero,13824 <alt_dev_llist_insert+0x2c>
   13818:	e0bffe17 	ldw	r2,-8(fp)
   1381c:	10800217 	ldw	r2,8(r2)
   13820:	1000061e 	bne	r2,zero,1383c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   13824:	00137bc0 	call	137bc <alt_get_errno>
   13828:	1007883a 	mov	r3,r2
   1382c:	00800584 	movi	r2,22
   13830:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13834:	00bffa84 	movi	r2,-22
   13838:	00001306 	br	13888 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1383c:	e0bffe17 	ldw	r2,-8(fp)
   13840:	e0ffff17 	ldw	r3,-4(fp)
   13844:	e0fffc15 	stw	r3,-16(fp)
   13848:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1384c:	e0bffd17 	ldw	r2,-12(fp)
   13850:	e0fffc17 	ldw	r3,-16(fp)
   13854:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13858:	e0bffc17 	ldw	r2,-16(fp)
   1385c:	10c00017 	ldw	r3,0(r2)
   13860:	e0bffd17 	ldw	r2,-12(fp)
   13864:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13868:	e0bffc17 	ldw	r2,-16(fp)
   1386c:	10800017 	ldw	r2,0(r2)
   13870:	e0fffd17 	ldw	r3,-12(fp)
   13874:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13878:	e0bffc17 	ldw	r2,-16(fp)
   1387c:	e0fffd17 	ldw	r3,-12(fp)
   13880:	10c00015 	stw	r3,0(r2)

  return 0;  
   13884:	0005883a 	mov	r2,zero
}
   13888:	e037883a 	mov	sp,fp
   1388c:	dfc00117 	ldw	ra,4(sp)
   13890:	df000017 	ldw	fp,0(sp)
   13894:	dec00204 	addi	sp,sp,8
   13898:	f800283a 	ret

0001389c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1389c:	defffd04 	addi	sp,sp,-12
   138a0:	dfc00215 	stw	ra,8(sp)
   138a4:	df000115 	stw	fp,4(sp)
   138a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   138ac:	00800074 	movhi	r2,1
   138b0:	1092b604 	addi	r2,r2,19160
   138b4:	e0bfff15 	stw	r2,-4(fp)
   138b8:	00000606 	br	138d4 <_do_ctors+0x38>
        (*ctor) (); 
   138bc:	e0bfff17 	ldw	r2,-4(fp)
   138c0:	10800017 	ldw	r2,0(r2)
   138c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   138c8:	e0bfff17 	ldw	r2,-4(fp)
   138cc:	10bfff04 	addi	r2,r2,-4
   138d0:	e0bfff15 	stw	r2,-4(fp)
   138d4:	e0ffff17 	ldw	r3,-4(fp)
   138d8:	00800074 	movhi	r2,1
   138dc:	1092b704 	addi	r2,r2,19164
   138e0:	18bff62e 	bgeu	r3,r2,138bc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215418bc>
        (*ctor) (); 
}
   138e4:	0001883a 	nop
   138e8:	e037883a 	mov	sp,fp
   138ec:	dfc00117 	ldw	ra,4(sp)
   138f0:	df000017 	ldw	fp,0(sp)
   138f4:	dec00204 	addi	sp,sp,8
   138f8:	f800283a 	ret

000138fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   138fc:	defffd04 	addi	sp,sp,-12
   13900:	dfc00215 	stw	ra,8(sp)
   13904:	df000115 	stw	fp,4(sp)
   13908:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1390c:	00800074 	movhi	r2,1
   13910:	1092b604 	addi	r2,r2,19160
   13914:	e0bfff15 	stw	r2,-4(fp)
   13918:	00000606 	br	13934 <_do_dtors+0x38>
        (*dtor) (); 
   1391c:	e0bfff17 	ldw	r2,-4(fp)
   13920:	10800017 	ldw	r2,0(r2)
   13924:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13928:	e0bfff17 	ldw	r2,-4(fp)
   1392c:	10bfff04 	addi	r2,r2,-4
   13930:	e0bfff15 	stw	r2,-4(fp)
   13934:	e0ffff17 	ldw	r3,-4(fp)
   13938:	00800074 	movhi	r2,1
   1393c:	1092b704 	addi	r2,r2,19164
   13940:	18bff62e 	bgeu	r3,r2,1391c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154191c>
        (*dtor) (); 
}
   13944:	0001883a 	nop
   13948:	e037883a 	mov	sp,fp
   1394c:	dfc00117 	ldw	ra,4(sp)
   13950:	df000017 	ldw	fp,0(sp)
   13954:	dec00204 	addi	sp,sp,8
   13958:	f800283a 	ret

0001395c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1395c:	defffa04 	addi	sp,sp,-24
   13960:	dfc00515 	stw	ra,20(sp)
   13964:	df000415 	stw	fp,16(sp)
   13968:	df000404 	addi	fp,sp,16
   1396c:	e13ffe15 	stw	r4,-8(fp)
   13970:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13974:	e0bfff17 	ldw	r2,-4(fp)
   13978:	10800017 	ldw	r2,0(r2)
   1397c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13980:	e13ffe17 	ldw	r4,-8(fp)
   13984:	00034080 	call	3408 <strlen>
   13988:	10800044 	addi	r2,r2,1
   1398c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13990:	00000d06 	br	139c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13994:	e0bffc17 	ldw	r2,-16(fp)
   13998:	10800217 	ldw	r2,8(r2)
   1399c:	e0fffd17 	ldw	r3,-12(fp)
   139a0:	180d883a 	mov	r6,r3
   139a4:	e17ffe17 	ldw	r5,-8(fp)
   139a8:	1009883a 	mov	r4,r2
   139ac:	00144d40 	call	144d4 <memcmp>
   139b0:	1000021e 	bne	r2,zero,139bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   139b4:	e0bffc17 	ldw	r2,-16(fp)
   139b8:	00000706 	br	139d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   139bc:	e0bffc17 	ldw	r2,-16(fp)
   139c0:	10800017 	ldw	r2,0(r2)
   139c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   139c8:	e0fffc17 	ldw	r3,-16(fp)
   139cc:	e0bfff17 	ldw	r2,-4(fp)
   139d0:	18bff01e 	bne	r3,r2,13994 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21541994>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   139d4:	0005883a 	mov	r2,zero
}
   139d8:	e037883a 	mov	sp,fp
   139dc:	dfc00117 	ldw	ra,4(sp)
   139e0:	df000017 	ldw	fp,0(sp)
   139e4:	dec00204 	addi	sp,sp,8
   139e8:	f800283a 	ret

000139ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   139ec:	deffff04 	addi	sp,sp,-4
   139f0:	df000015 	stw	fp,0(sp)
   139f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   139f8:	0001883a 	nop
   139fc:	e037883a 	mov	sp,fp
   13a00:	df000017 	ldw	fp,0(sp)
   13a04:	dec00104 	addi	sp,sp,4
   13a08:	f800283a 	ret

00013a0c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   13a0c:	defffe04 	addi	sp,sp,-8
   13a10:	df000115 	stw	fp,4(sp)
   13a14:	df000104 	addi	fp,sp,4
   13a18:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   13a1c:	e0bfff17 	ldw	r2,-4(fp)
   13a20:	10bffe84 	addi	r2,r2,-6
   13a24:	10c00428 	cmpgeui	r3,r2,16
   13a28:	18001a1e 	bne	r3,zero,13a94 <alt_exception_cause_generated_bad_addr+0x88>
   13a2c:	100690ba 	slli	r3,r2,2
   13a30:	00800074 	movhi	r2,1
   13a34:	108e9104 	addi	r2,r2,14916
   13a38:	1885883a 	add	r2,r3,r2
   13a3c:	10800017 	ldw	r2,0(r2)
   13a40:	1000683a 	jmp	r2
   13a44:	00013a84 	movi	zero,1258
   13a48:	00013a84 	movi	zero,1258
   13a4c:	00013a94 	movui	zero,1258
   13a50:	00013a94 	movui	zero,1258
   13a54:	00013a94 	movui	zero,1258
   13a58:	00013a84 	movi	zero,1258
   13a5c:	00013a8c 	andi	zero,zero,1258
   13a60:	00013a94 	movui	zero,1258
   13a64:	00013a84 	movi	zero,1258
   13a68:	00013a84 	movi	zero,1258
   13a6c:	00013a94 	movui	zero,1258
   13a70:	00013a84 	movi	zero,1258
   13a74:	00013a8c 	andi	zero,zero,1258
   13a78:	00013a94 	movui	zero,1258
   13a7c:	00013a94 	movui	zero,1258
   13a80:	00013a84 	movi	zero,1258
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   13a84:	00800044 	movi	r2,1
   13a88:	00000306 	br	13a98 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   13a8c:	0005883a 	mov	r2,zero
   13a90:	00000106 	br	13a98 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   13a94:	0005883a 	mov	r2,zero
  }
}
   13a98:	e037883a 	mov	sp,fp
   13a9c:	df000017 	ldw	fp,0(sp)
   13aa0:	dec00104 	addi	sp,sp,4
   13aa4:	f800283a 	ret

00013aa8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13aa8:	defff804 	addi	sp,sp,-32
   13aac:	dfc00715 	stw	ra,28(sp)
   13ab0:	df000615 	stw	fp,24(sp)
   13ab4:	dc000515 	stw	r16,20(sp)
   13ab8:	df000604 	addi	fp,sp,24
   13abc:	e13ffb15 	stw	r4,-20(fp)
   13ac0:	e17ffc15 	stw	r5,-16(fp)
   13ac4:	e1bffd15 	stw	r6,-12(fp)
   13ac8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   13acc:	e1bffe17 	ldw	r6,-8(fp)
   13ad0:	e17ffd17 	ldw	r5,-12(fp)
   13ad4:	e13ffc17 	ldw	r4,-16(fp)
   13ad8:	0013d300 	call	13d30 <open>
   13adc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   13ae0:	e0bffa17 	ldw	r2,-24(fp)
   13ae4:	10002216 	blt	r2,zero,13b70 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   13ae8:	04000074 	movhi	r16,1
   13aec:	84168604 	addi	r16,r16,23064
   13af0:	e0bffa17 	ldw	r2,-24(fp)
   13af4:	01400304 	movi	r5,12
   13af8:	1009883a 	mov	r4,r2
   13afc:	00020100 	call	2010 <__mulsi3>
   13b00:	8085883a 	add	r2,r16,r2
   13b04:	10c00017 	ldw	r3,0(r2)
   13b08:	e0bffb17 	ldw	r2,-20(fp)
   13b0c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13b10:	04000074 	movhi	r16,1
   13b14:	84168604 	addi	r16,r16,23064
   13b18:	e0bffa17 	ldw	r2,-24(fp)
   13b1c:	01400304 	movi	r5,12
   13b20:	1009883a 	mov	r4,r2
   13b24:	00020100 	call	2010 <__mulsi3>
   13b28:	8085883a 	add	r2,r16,r2
   13b2c:	10800104 	addi	r2,r2,4
   13b30:	10c00017 	ldw	r3,0(r2)
   13b34:	e0bffb17 	ldw	r2,-20(fp)
   13b38:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13b3c:	04000074 	movhi	r16,1
   13b40:	84168604 	addi	r16,r16,23064
   13b44:	e0bffa17 	ldw	r2,-24(fp)
   13b48:	01400304 	movi	r5,12
   13b4c:	1009883a 	mov	r4,r2
   13b50:	00020100 	call	2010 <__mulsi3>
   13b54:	8085883a 	add	r2,r16,r2
   13b58:	10800204 	addi	r2,r2,8
   13b5c:	10c00017 	ldw	r3,0(r2)
   13b60:	e0bffb17 	ldw	r2,-20(fp)
   13b64:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13b68:	e13ffa17 	ldw	r4,-24(fp)
   13b6c:	000f9f00 	call	f9f0 <alt_release_fd>
  }
} 
   13b70:	0001883a 	nop
   13b74:	e6ffff04 	addi	sp,fp,-4
   13b78:	dfc00217 	ldw	ra,8(sp)
   13b7c:	df000117 	ldw	fp,4(sp)
   13b80:	dc000017 	ldw	r16,0(sp)
   13b84:	dec00304 	addi	sp,sp,12
   13b88:	f800283a 	ret

00013b8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13b8c:	defffb04 	addi	sp,sp,-20
   13b90:	dfc00415 	stw	ra,16(sp)
   13b94:	df000315 	stw	fp,12(sp)
   13b98:	df000304 	addi	fp,sp,12
   13b9c:	e13ffd15 	stw	r4,-12(fp)
   13ba0:	e17ffe15 	stw	r5,-8(fp)
   13ba4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13ba8:	01c07fc4 	movi	r7,511
   13bac:	01800044 	movi	r6,1
   13bb0:	e17ffd17 	ldw	r5,-12(fp)
   13bb4:	01000074 	movhi	r4,1
   13bb8:	21168904 	addi	r4,r4,23076
   13bbc:	0013aa80 	call	13aa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13bc0:	01c07fc4 	movi	r7,511
   13bc4:	000d883a 	mov	r6,zero
   13bc8:	e17ffe17 	ldw	r5,-8(fp)
   13bcc:	01000074 	movhi	r4,1
   13bd0:	21168604 	addi	r4,r4,23064
   13bd4:	0013aa80 	call	13aa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13bd8:	01c07fc4 	movi	r7,511
   13bdc:	01800044 	movi	r6,1
   13be0:	e17fff17 	ldw	r5,-4(fp)
   13be4:	01000074 	movhi	r4,1
   13be8:	21168c04 	addi	r4,r4,23088
   13bec:	0013aa80 	call	13aa8 <alt_open_fd>
}  
   13bf0:	0001883a 	nop
   13bf4:	e037883a 	mov	sp,fp
   13bf8:	dfc00117 	ldw	ra,4(sp)
   13bfc:	df000017 	ldw	fp,0(sp)
   13c00:	dec00204 	addi	sp,sp,8
   13c04:	f800283a 	ret

00013c08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c08:	defffe04 	addi	sp,sp,-8
   13c0c:	dfc00115 	stw	ra,4(sp)
   13c10:	df000015 	stw	fp,0(sp)
   13c14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c18:	d0a01417 	ldw	r2,-32688(gp)
   13c1c:	10000326 	beq	r2,zero,13c2c <alt_get_errno+0x24>
   13c20:	d0a01417 	ldw	r2,-32688(gp)
   13c24:	103ee83a 	callr	r2
   13c28:	00000106 	br	13c30 <alt_get_errno+0x28>
   13c2c:	d0a77a04 	addi	r2,gp,-25112
}
   13c30:	e037883a 	mov	sp,fp
   13c34:	dfc00117 	ldw	ra,4(sp)
   13c38:	df000017 	ldw	fp,0(sp)
   13c3c:	dec00204 	addi	sp,sp,8
   13c40:	f800283a 	ret

00013c44 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13c44:	defffb04 	addi	sp,sp,-20
   13c48:	dfc00415 	stw	ra,16(sp)
   13c4c:	df000315 	stw	fp,12(sp)
   13c50:	dc000215 	stw	r16,8(sp)
   13c54:	df000304 	addi	fp,sp,12
   13c58:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13c5c:	e0bffe17 	ldw	r2,-8(fp)
   13c60:	10800217 	ldw	r2,8(r2)
   13c64:	10d00034 	orhi	r3,r2,16384
   13c68:	e0bffe17 	ldw	r2,-8(fp)
   13c6c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13c70:	e03ffd15 	stw	zero,-12(fp)
   13c74:	00002306 	br	13d04 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13c78:	04000074 	movhi	r16,1
   13c7c:	84168604 	addi	r16,r16,23064
   13c80:	e0bffd17 	ldw	r2,-12(fp)
   13c84:	01400304 	movi	r5,12
   13c88:	1009883a 	mov	r4,r2
   13c8c:	00020100 	call	2010 <__mulsi3>
   13c90:	8085883a 	add	r2,r16,r2
   13c94:	10c00017 	ldw	r3,0(r2)
   13c98:	e0bffe17 	ldw	r2,-8(fp)
   13c9c:	10800017 	ldw	r2,0(r2)
   13ca0:	1880151e 	bne	r3,r2,13cf8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13ca4:	04000074 	movhi	r16,1
   13ca8:	84168604 	addi	r16,r16,23064
   13cac:	e0bffd17 	ldw	r2,-12(fp)
   13cb0:	01400304 	movi	r5,12
   13cb4:	1009883a 	mov	r4,r2
   13cb8:	00020100 	call	2010 <__mulsi3>
   13cbc:	8085883a 	add	r2,r16,r2
   13cc0:	10800204 	addi	r2,r2,8
   13cc4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13cc8:	10000b0e 	bge	r2,zero,13cf8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   13ccc:	01400304 	movi	r5,12
   13cd0:	e13ffd17 	ldw	r4,-12(fp)
   13cd4:	00020100 	call	2010 <__mulsi3>
   13cd8:	1007883a 	mov	r3,r2
   13cdc:	00800074 	movhi	r2,1
   13ce0:	10968604 	addi	r2,r2,23064
   13ce4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13ce8:	e0bffe17 	ldw	r2,-8(fp)
   13cec:	18800226 	beq	r3,r2,13cf8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13cf0:	00bffcc4 	movi	r2,-13
   13cf4:	00000806 	br	13d18 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13cf8:	e0bffd17 	ldw	r2,-12(fp)
   13cfc:	10800044 	addi	r2,r2,1
   13d00:	e0bffd15 	stw	r2,-12(fp)
   13d04:	d0a01317 	ldw	r2,-32692(gp)
   13d08:	1007883a 	mov	r3,r2
   13d0c:	e0bffd17 	ldw	r2,-12(fp)
   13d10:	18bfd92e 	bgeu	r3,r2,13c78 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21541c78>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13d14:	0005883a 	mov	r2,zero
}
   13d18:	e6ffff04 	addi	sp,fp,-4
   13d1c:	dfc00217 	ldw	ra,8(sp)
   13d20:	df000117 	ldw	fp,4(sp)
   13d24:	dc000017 	ldw	r16,0(sp)
   13d28:	dec00304 	addi	sp,sp,12
   13d2c:	f800283a 	ret

00013d30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13d30:	defff604 	addi	sp,sp,-40
   13d34:	dfc00915 	stw	ra,36(sp)
   13d38:	df000815 	stw	fp,32(sp)
   13d3c:	df000804 	addi	fp,sp,32
   13d40:	e13ffd15 	stw	r4,-12(fp)
   13d44:	e17ffe15 	stw	r5,-8(fp)
   13d48:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13d4c:	00bfffc4 	movi	r2,-1
   13d50:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   13d54:	00bffb44 	movi	r2,-19
   13d58:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   13d5c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13d60:	d1601104 	addi	r5,gp,-32700
   13d64:	e13ffd17 	ldw	r4,-12(fp)
   13d68:	001395c0 	call	1395c <alt_find_dev>
   13d6c:	e0bff815 	stw	r2,-32(fp)
   13d70:	e0bff817 	ldw	r2,-32(fp)
   13d74:	1000051e 	bne	r2,zero,13d8c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   13d78:	e13ffd17 	ldw	r4,-12(fp)
   13d7c:	00142bc0 	call	142bc <alt_find_file>
   13d80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   13d84:	00800044 	movi	r2,1
   13d88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13d8c:	e0bff817 	ldw	r2,-32(fp)
   13d90:	10002b26 	beq	r2,zero,13e40 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13d94:	e13ff817 	ldw	r4,-32(fp)
   13d98:	00143c40 	call	143c4 <alt_get_fd>
   13d9c:	e0bff915 	stw	r2,-28(fp)
   13da0:	e0bff917 	ldw	r2,-28(fp)
   13da4:	1000030e 	bge	r2,zero,13db4 <open+0x84>
    {
      status = index;
   13da8:	e0bff917 	ldw	r2,-28(fp)
   13dac:	e0bffa15 	stw	r2,-24(fp)
   13db0:	00002506 	br	13e48 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   13db4:	01400304 	movi	r5,12
   13db8:	e13ff917 	ldw	r4,-28(fp)
   13dbc:	00020100 	call	2010 <__mulsi3>
   13dc0:	1007883a 	mov	r3,r2
   13dc4:	00800074 	movhi	r2,1
   13dc8:	10968604 	addi	r2,r2,23064
   13dcc:	1885883a 	add	r2,r3,r2
   13dd0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   13dd4:	e0fffe17 	ldw	r3,-8(fp)
   13dd8:	00900034 	movhi	r2,16384
   13ddc:	10bfffc4 	addi	r2,r2,-1
   13de0:	1886703a 	and	r3,r3,r2
   13de4:	e0bffc17 	ldw	r2,-16(fp)
   13de8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   13dec:	e0bffb17 	ldw	r2,-20(fp)
   13df0:	1000051e 	bne	r2,zero,13e08 <open+0xd8>
   13df4:	e13ffc17 	ldw	r4,-16(fp)
   13df8:	0013c440 	call	13c44 <alt_file_locked>
   13dfc:	e0bffa15 	stw	r2,-24(fp)
   13e00:	e0bffa17 	ldw	r2,-24(fp)
   13e04:	10001016 	blt	r2,zero,13e48 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   13e08:	e0bff817 	ldw	r2,-32(fp)
   13e0c:	10800317 	ldw	r2,12(r2)
   13e10:	10000826 	beq	r2,zero,13e34 <open+0x104>
   13e14:	e0bff817 	ldw	r2,-32(fp)
   13e18:	10800317 	ldw	r2,12(r2)
   13e1c:	e1ffff17 	ldw	r7,-4(fp)
   13e20:	e1bffe17 	ldw	r6,-8(fp)
   13e24:	e17ffd17 	ldw	r5,-12(fp)
   13e28:	e13ffc17 	ldw	r4,-16(fp)
   13e2c:	103ee83a 	callr	r2
   13e30:	00000106 	br	13e38 <open+0x108>
   13e34:	0005883a 	mov	r2,zero
   13e38:	e0bffa15 	stw	r2,-24(fp)
   13e3c:	00000206 	br	13e48 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13e40:	00bffb44 	movi	r2,-19
   13e44:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13e48:	e0bffa17 	ldw	r2,-24(fp)
   13e4c:	1000090e 	bge	r2,zero,13e74 <open+0x144>
  {
    alt_release_fd (index);  
   13e50:	e13ff917 	ldw	r4,-28(fp)
   13e54:	000f9f00 	call	f9f0 <alt_release_fd>
    ALT_ERRNO = -status;
   13e58:	0013c080 	call	13c08 <alt_get_errno>
   13e5c:	1007883a 	mov	r3,r2
   13e60:	e0bffa17 	ldw	r2,-24(fp)
   13e64:	0085c83a 	sub	r2,zero,r2
   13e68:	18800015 	stw	r2,0(r3)
    return -1;
   13e6c:	00bfffc4 	movi	r2,-1
   13e70:	00000106 	br	13e78 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   13e74:	e0bff917 	ldw	r2,-28(fp)
}
   13e78:	e037883a 	mov	sp,fp
   13e7c:	dfc00117 	ldw	ra,4(sp)
   13e80:	df000017 	ldw	fp,0(sp)
   13e84:	dec00204 	addi	sp,sp,8
   13e88:	f800283a 	ret

00013e8c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   13e8c:	defff204 	addi	sp,sp,-56
   13e90:	dfc00a15 	stw	ra,40(sp)
   13e94:	df000915 	stw	fp,36(sp)
   13e98:	df000904 	addi	fp,sp,36
   13e9c:	e13fff15 	stw	r4,-4(fp)
   13ea0:	e1400215 	stw	r5,8(fp)
   13ea4:	e1800315 	stw	r6,12(fp)
   13ea8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   13eac:	e0800204 	addi	r2,fp,8
   13eb0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   13eb4:	e0bfff17 	ldw	r2,-4(fp)
   13eb8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   13ebc:	00006f06 	br	1407c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   13ec0:	e0bff807 	ldb	r2,-32(fp)
   13ec4:	10800960 	cmpeqi	r2,r2,37
   13ec8:	1000041e 	bne	r2,zero,13edc <alt_printf+0x50>
        {
            alt_putchar(c);
   13ecc:	e0bff807 	ldb	r2,-32(fp)
   13ed0:	1009883a 	mov	r4,r2
   13ed4:	00140b80 	call	140b8 <alt_putchar>
   13ed8:	00006806 	br	1407c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   13edc:	e0bff717 	ldw	r2,-36(fp)
   13ee0:	10c00044 	addi	r3,r2,1
   13ee4:	e0fff715 	stw	r3,-36(fp)
   13ee8:	10800003 	ldbu	r2,0(r2)
   13eec:	e0bff805 	stb	r2,-32(fp)
   13ef0:	e0bff807 	ldb	r2,-32(fp)
   13ef4:	10006926 	beq	r2,zero,1409c <alt_printf+0x210>
            {
                if (c == '%')
   13ef8:	e0bff807 	ldb	r2,-32(fp)
   13efc:	10800958 	cmpnei	r2,r2,37
   13f00:	1000041e 	bne	r2,zero,13f14 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   13f04:	e0bff807 	ldb	r2,-32(fp)
   13f08:	1009883a 	mov	r4,r2
   13f0c:	00140b80 	call	140b8 <alt_putchar>
   13f10:	00005a06 	br	1407c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   13f14:	e0bff807 	ldb	r2,-32(fp)
   13f18:	108018d8 	cmpnei	r2,r2,99
   13f1c:	1000081e 	bne	r2,zero,13f40 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   13f20:	e0bffe17 	ldw	r2,-8(fp)
   13f24:	10c00104 	addi	r3,r2,4
   13f28:	e0fffe15 	stw	r3,-8(fp)
   13f2c:	10800017 	ldw	r2,0(r2)
   13f30:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   13f34:	e13ffd17 	ldw	r4,-12(fp)
   13f38:	00140b80 	call	140b8 <alt_putchar>
   13f3c:	00004f06 	br	1407c <alt_printf+0x1f0>
                }
                else if (c == 'x')
   13f40:	e0bff807 	ldb	r2,-32(fp)
   13f44:	10801e18 	cmpnei	r2,r2,120
   13f48:	1000341e 	bne	r2,zero,1401c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   13f4c:	e0bffe17 	ldw	r2,-8(fp)
   13f50:	10c00104 	addi	r3,r2,4
   13f54:	e0fffe15 	stw	r3,-8(fp)
   13f58:	10800017 	ldw	r2,0(r2)
   13f5c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   13f60:	e0bffb17 	ldw	r2,-20(fp)
   13f64:	1000031e 	bne	r2,zero,13f74 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   13f68:	01000c04 	movi	r4,48
   13f6c:	00140b80 	call	140b8 <alt_putchar>
                        continue;
   13f70:	00004206 	br	1407c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   13f74:	00800704 	movi	r2,28
   13f78:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   13f7c:	00000306 	br	13f8c <alt_printf+0x100>
                        digit_shift -= 4;
   13f80:	e0bff917 	ldw	r2,-28(fp)
   13f84:	10bfff04 	addi	r2,r2,-4
   13f88:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   13f8c:	00c003c4 	movi	r3,15
   13f90:	e0bff917 	ldw	r2,-28(fp)
   13f94:	1884983a 	sll	r2,r3,r2
   13f98:	1007883a 	mov	r3,r2
   13f9c:	e0bffb17 	ldw	r2,-20(fp)
   13fa0:	1884703a 	and	r2,r3,r2
   13fa4:	103ff626 	beq	r2,zero,13f80 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21541f80>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   13fa8:	00001906 	br	14010 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   13fac:	00c003c4 	movi	r3,15
   13fb0:	e0bff917 	ldw	r2,-28(fp)
   13fb4:	1884983a 	sll	r2,r3,r2
   13fb8:	1007883a 	mov	r3,r2
   13fbc:	e0bffb17 	ldw	r2,-20(fp)
   13fc0:	1886703a 	and	r3,r3,r2
   13fc4:	e0bff917 	ldw	r2,-28(fp)
   13fc8:	1884d83a 	srl	r2,r3,r2
   13fcc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   13fd0:	e0bffc17 	ldw	r2,-16(fp)
   13fd4:	108002a8 	cmpgeui	r2,r2,10
   13fd8:	1000041e 	bne	r2,zero,13fec <alt_printf+0x160>
                            c = '0' + digit;
   13fdc:	e0bffc17 	ldw	r2,-16(fp)
   13fe0:	10800c04 	addi	r2,r2,48
   13fe4:	e0bff805 	stb	r2,-32(fp)
   13fe8:	00000306 	br	13ff8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   13fec:	e0bffc17 	ldw	r2,-16(fp)
   13ff0:	108015c4 	addi	r2,r2,87
   13ff4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   13ff8:	e0bff807 	ldb	r2,-32(fp)
   13ffc:	1009883a 	mov	r4,r2
   14000:	00140b80 	call	140b8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   14004:	e0bff917 	ldw	r2,-28(fp)
   14008:	10bfff04 	addi	r2,r2,-4
   1400c:	e0bff915 	stw	r2,-28(fp)
   14010:	e0bff917 	ldw	r2,-28(fp)
   14014:	103fe50e 	bge	r2,zero,13fac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21541fac>
   14018:	00001806 	br	1407c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   1401c:	e0bff807 	ldb	r2,-32(fp)
   14020:	10801cd8 	cmpnei	r2,r2,115
   14024:	1000151e 	bne	r2,zero,1407c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   14028:	e0bffe17 	ldw	r2,-8(fp)
   1402c:	10c00104 	addi	r3,r2,4
   14030:	e0fffe15 	stw	r3,-8(fp)
   14034:	10800017 	ldw	r2,0(r2)
   14038:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   1403c:	00000906 	br	14064 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   14040:	e0bffa17 	ldw	r2,-24(fp)
   14044:	10c00044 	addi	r3,r2,1
   14048:	e0fffa15 	stw	r3,-24(fp)
   1404c:	10800003 	ldbu	r2,0(r2)
   14050:	10803fcc 	andi	r2,r2,255
   14054:	1080201c 	xori	r2,r2,128
   14058:	10bfe004 	addi	r2,r2,-128
   1405c:	1009883a 	mov	r4,r2
   14060:	00140b80 	call	140b8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   14064:	e0bffa17 	ldw	r2,-24(fp)
   14068:	10800003 	ldbu	r2,0(r2)
   1406c:	10803fcc 	andi	r2,r2,255
   14070:	1080201c 	xori	r2,r2,128
   14074:	10bfe004 	addi	r2,r2,-128
   14078:	103ff11e 	bne	r2,zero,14040 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542040>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1407c:	e0bff717 	ldw	r2,-36(fp)
   14080:	10c00044 	addi	r3,r2,1
   14084:	e0fff715 	stw	r3,-36(fp)
   14088:	10800003 	ldbu	r2,0(r2)
   1408c:	e0bff805 	stb	r2,-32(fp)
   14090:	e0bff807 	ldb	r2,-32(fp)
   14094:	103f8a1e 	bne	r2,zero,13ec0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21541ec0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   14098:	00000106 	br	140a0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   1409c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   140a0:	0001883a 	nop
   140a4:	e037883a 	mov	sp,fp
   140a8:	dfc00117 	ldw	ra,4(sp)
   140ac:	df000017 	ldw	fp,0(sp)
   140b0:	dec00504 	addi	sp,sp,20
   140b4:	f800283a 	ret

000140b8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   140b8:	defffd04 	addi	sp,sp,-12
   140bc:	dfc00215 	stw	ra,8(sp)
   140c0:	df000115 	stw	fp,4(sp)
   140c4:	df000104 	addi	fp,sp,4
   140c8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   140cc:	d0a00d17 	ldw	r2,-32716(gp)
   140d0:	10800217 	ldw	r2,8(r2)
   140d4:	100b883a 	mov	r5,r2
   140d8:	e13fff17 	ldw	r4,-4(fp)
   140dc:	00145f00 	call	145f0 <putc>
#endif
#endif
}
   140e0:	e037883a 	mov	sp,fp
   140e4:	dfc00117 	ldw	ra,4(sp)
   140e8:	df000017 	ldw	fp,0(sp)
   140ec:	dec00204 	addi	sp,sp,8
   140f0:	f800283a 	ret

000140f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   140f4:	defffa04 	addi	sp,sp,-24
   140f8:	df000515 	stw	fp,20(sp)
   140fc:	df000504 	addi	fp,sp,20
   14100:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14104:	0005303a 	rdctl	r2,status
   14108:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1410c:	e0fffc17 	ldw	r3,-16(fp)
   14110:	00bfff84 	movi	r2,-2
   14114:	1884703a 	and	r2,r3,r2
   14118:	1001703a 	wrctl	status,r2
  
  return context;
   1411c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14120:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14124:	e0bfff17 	ldw	r2,-4(fp)
   14128:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1412c:	e0bffd17 	ldw	r2,-12(fp)
   14130:	10800017 	ldw	r2,0(r2)
   14134:	e0fffd17 	ldw	r3,-12(fp)
   14138:	18c00117 	ldw	r3,4(r3)
   1413c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14140:	e0bffd17 	ldw	r2,-12(fp)
   14144:	10800117 	ldw	r2,4(r2)
   14148:	e0fffd17 	ldw	r3,-12(fp)
   1414c:	18c00017 	ldw	r3,0(r3)
   14150:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14154:	e0bffd17 	ldw	r2,-12(fp)
   14158:	e0fffd17 	ldw	r3,-12(fp)
   1415c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14160:	e0bffd17 	ldw	r2,-12(fp)
   14164:	e0fffd17 	ldw	r3,-12(fp)
   14168:	10c00015 	stw	r3,0(r2)
   1416c:	e0bffb17 	ldw	r2,-20(fp)
   14170:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14174:	e0bffe17 	ldw	r2,-8(fp)
   14178:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1417c:	0001883a 	nop
   14180:	e037883a 	mov	sp,fp
   14184:	df000017 	ldw	fp,0(sp)
   14188:	dec00104 	addi	sp,sp,4
   1418c:	f800283a 	ret

00014190 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14190:	defffb04 	addi	sp,sp,-20
   14194:	dfc00415 	stw	ra,16(sp)
   14198:	df000315 	stw	fp,12(sp)
   1419c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   141a0:	d0a01b17 	ldw	r2,-32660(gp)
   141a4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   141a8:	d0a78417 	ldw	r2,-25072(gp)
   141ac:	10800044 	addi	r2,r2,1
   141b0:	d0a78415 	stw	r2,-25072(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   141b4:	00002e06 	br	14270 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   141b8:	e0bffd17 	ldw	r2,-12(fp)
   141bc:	10800017 	ldw	r2,0(r2)
   141c0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   141c4:	e0bffd17 	ldw	r2,-12(fp)
   141c8:	10800403 	ldbu	r2,16(r2)
   141cc:	10803fcc 	andi	r2,r2,255
   141d0:	10000426 	beq	r2,zero,141e4 <alt_tick+0x54>
   141d4:	d0a78417 	ldw	r2,-25072(gp)
   141d8:	1000021e 	bne	r2,zero,141e4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   141dc:	e0bffd17 	ldw	r2,-12(fp)
   141e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   141e4:	e0bffd17 	ldw	r2,-12(fp)
   141e8:	10800217 	ldw	r2,8(r2)
   141ec:	d0e78417 	ldw	r3,-25072(gp)
   141f0:	18801d36 	bltu	r3,r2,14268 <alt_tick+0xd8>
   141f4:	e0bffd17 	ldw	r2,-12(fp)
   141f8:	10800403 	ldbu	r2,16(r2)
   141fc:	10803fcc 	andi	r2,r2,255
   14200:	1000191e 	bne	r2,zero,14268 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14204:	e0bffd17 	ldw	r2,-12(fp)
   14208:	10800317 	ldw	r2,12(r2)
   1420c:	e0fffd17 	ldw	r3,-12(fp)
   14210:	18c00517 	ldw	r3,20(r3)
   14214:	1809883a 	mov	r4,r3
   14218:	103ee83a 	callr	r2
   1421c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14220:	e0bfff17 	ldw	r2,-4(fp)
   14224:	1000031e 	bne	r2,zero,14234 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   14228:	e13ffd17 	ldw	r4,-12(fp)
   1422c:	00140f40 	call	140f4 <alt_alarm_stop>
   14230:	00000d06 	br	14268 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   14234:	e0bffd17 	ldw	r2,-12(fp)
   14238:	10c00217 	ldw	r3,8(r2)
   1423c:	e0bfff17 	ldw	r2,-4(fp)
   14240:	1887883a 	add	r3,r3,r2
   14244:	e0bffd17 	ldw	r2,-12(fp)
   14248:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1424c:	e0bffd17 	ldw	r2,-12(fp)
   14250:	10c00217 	ldw	r3,8(r2)
   14254:	d0a78417 	ldw	r2,-25072(gp)
   14258:	1880032e 	bgeu	r3,r2,14268 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1425c:	e0bffd17 	ldw	r2,-12(fp)
   14260:	00c00044 	movi	r3,1
   14264:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   14268:	e0bffe17 	ldw	r2,-8(fp)
   1426c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14270:	e0fffd17 	ldw	r3,-12(fp)
   14274:	d0a01b04 	addi	r2,gp,-32660
   14278:	18bfcf1e 	bne	r3,r2,141b8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215421b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1427c:	0001883a 	nop
}
   14280:	0001883a 	nop
   14284:	e037883a 	mov	sp,fp
   14288:	dfc00117 	ldw	ra,4(sp)
   1428c:	df000017 	ldw	fp,0(sp)
   14290:	dec00204 	addi	sp,sp,8
   14294:	f800283a 	ret

00014298 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   14298:	deffff04 	addi	sp,sp,-4
   1429c:	df000015 	stw	fp,0(sp)
   142a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   142a4:	000170fa 	wrctl	ienable,zero
}
   142a8:	0001883a 	nop
   142ac:	e037883a 	mov	sp,fp
   142b0:	df000017 	ldw	fp,0(sp)
   142b4:	dec00104 	addi	sp,sp,4
   142b8:	f800283a 	ret

000142bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   142bc:	defffb04 	addi	sp,sp,-20
   142c0:	dfc00415 	stw	ra,16(sp)
   142c4:	df000315 	stw	fp,12(sp)
   142c8:	df000304 	addi	fp,sp,12
   142cc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   142d0:	d0a00f17 	ldw	r2,-32708(gp)
   142d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   142d8:	00003106 	br	143a0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   142dc:	e0bffd17 	ldw	r2,-12(fp)
   142e0:	10800217 	ldw	r2,8(r2)
   142e4:	1009883a 	mov	r4,r2
   142e8:	00034080 	call	3408 <strlen>
   142ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   142f0:	e0bffd17 	ldw	r2,-12(fp)
   142f4:	10c00217 	ldw	r3,8(r2)
   142f8:	e0bffe17 	ldw	r2,-8(fp)
   142fc:	10bfffc4 	addi	r2,r2,-1
   14300:	1885883a 	add	r2,r3,r2
   14304:	10800003 	ldbu	r2,0(r2)
   14308:	10803fcc 	andi	r2,r2,255
   1430c:	1080201c 	xori	r2,r2,128
   14310:	10bfe004 	addi	r2,r2,-128
   14314:	10800bd8 	cmpnei	r2,r2,47
   14318:	1000031e 	bne	r2,zero,14328 <alt_find_file+0x6c>
    {
      len -= 1;
   1431c:	e0bffe17 	ldw	r2,-8(fp)
   14320:	10bfffc4 	addi	r2,r2,-1
   14324:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14328:	e0bffe17 	ldw	r2,-8(fp)
   1432c:	e0ffff17 	ldw	r3,-4(fp)
   14330:	1885883a 	add	r2,r3,r2
   14334:	10800003 	ldbu	r2,0(r2)
   14338:	10803fcc 	andi	r2,r2,255
   1433c:	1080201c 	xori	r2,r2,128
   14340:	10bfe004 	addi	r2,r2,-128
   14344:	10800be0 	cmpeqi	r2,r2,47
   14348:	1000081e 	bne	r2,zero,1436c <alt_find_file+0xb0>
   1434c:	e0bffe17 	ldw	r2,-8(fp)
   14350:	e0ffff17 	ldw	r3,-4(fp)
   14354:	1885883a 	add	r2,r3,r2
   14358:	10800003 	ldbu	r2,0(r2)
   1435c:	10803fcc 	andi	r2,r2,255
   14360:	1080201c 	xori	r2,r2,128
   14364:	10bfe004 	addi	r2,r2,-128
   14368:	10000a1e 	bne	r2,zero,14394 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1436c:	e0bffd17 	ldw	r2,-12(fp)
   14370:	10800217 	ldw	r2,8(r2)
   14374:	e0fffe17 	ldw	r3,-8(fp)
   14378:	180d883a 	mov	r6,r3
   1437c:	e17fff17 	ldw	r5,-4(fp)
   14380:	1009883a 	mov	r4,r2
   14384:	00144d40 	call	144d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14388:	1000021e 	bne	r2,zero,14394 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1438c:	e0bffd17 	ldw	r2,-12(fp)
   14390:	00000706 	br	143b0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   14394:	e0bffd17 	ldw	r2,-12(fp)
   14398:	10800017 	ldw	r2,0(r2)
   1439c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   143a0:	e0fffd17 	ldw	r3,-12(fp)
   143a4:	d0a00f04 	addi	r2,gp,-32708
   143a8:	18bfcc1e 	bne	r3,r2,142dc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215422dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   143ac:	0005883a 	mov	r2,zero
}
   143b0:	e037883a 	mov	sp,fp
   143b4:	dfc00117 	ldw	ra,4(sp)
   143b8:	df000017 	ldw	fp,0(sp)
   143bc:	dec00204 	addi	sp,sp,8
   143c0:	f800283a 	ret

000143c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   143c4:	defffa04 	addi	sp,sp,-24
   143c8:	dfc00515 	stw	ra,20(sp)
   143cc:	df000415 	stw	fp,16(sp)
   143d0:	dc000315 	stw	r16,12(sp)
   143d4:	df000404 	addi	fp,sp,16
   143d8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   143dc:	00bffa04 	movi	r2,-24
   143e0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   143e4:	e03ffc15 	stw	zero,-16(fp)
   143e8:	00001d06 	br	14460 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   143ec:	04000074 	movhi	r16,1
   143f0:	84168604 	addi	r16,r16,23064
   143f4:	e0bffc17 	ldw	r2,-16(fp)
   143f8:	01400304 	movi	r5,12
   143fc:	1009883a 	mov	r4,r2
   14400:	00020100 	call	2010 <__mulsi3>
   14404:	8085883a 	add	r2,r16,r2
   14408:	10800017 	ldw	r2,0(r2)
   1440c:	1000111e 	bne	r2,zero,14454 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   14410:	04000074 	movhi	r16,1
   14414:	84168604 	addi	r16,r16,23064
   14418:	e0bffc17 	ldw	r2,-16(fp)
   1441c:	01400304 	movi	r5,12
   14420:	1009883a 	mov	r4,r2
   14424:	00020100 	call	2010 <__mulsi3>
   14428:	8085883a 	add	r2,r16,r2
   1442c:	e0fffe17 	ldw	r3,-8(fp)
   14430:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   14434:	d0e01317 	ldw	r3,-32692(gp)
   14438:	e0bffc17 	ldw	r2,-16(fp)
   1443c:	1880020e 	bge	r3,r2,14448 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   14440:	e0bffc17 	ldw	r2,-16(fp)
   14444:	d0a01315 	stw	r2,-32692(gp)
      }
      rc = i;
   14448:	e0bffc17 	ldw	r2,-16(fp)
   1444c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   14450:	00000606 	br	1446c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14454:	e0bffc17 	ldw	r2,-16(fp)
   14458:	10800044 	addi	r2,r2,1
   1445c:	e0bffc15 	stw	r2,-16(fp)
   14460:	e0bffc17 	ldw	r2,-16(fp)
   14464:	10800810 	cmplti	r2,r2,32
   14468:	103fe01e 	bne	r2,zero,143ec <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215423ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1446c:	e0bffd17 	ldw	r2,-12(fp)
}
   14470:	e6ffff04 	addi	sp,fp,-4
   14474:	dfc00217 	ldw	ra,8(sp)
   14478:	df000117 	ldw	fp,4(sp)
   1447c:	dc000017 	ldw	r16,0(sp)
   14480:	dec00304 	addi	sp,sp,12
   14484:	f800283a 	ret

00014488 <atexit>:
   14488:	200b883a 	mov	r5,r4
   1448c:	000f883a 	mov	r7,zero
   14490:	000d883a 	mov	r6,zero
   14494:	0009883a 	mov	r4,zero
   14498:	00148101 	jmpi	14810 <__register_exitproc>

0001449c <exit>:
   1449c:	defffe04 	addi	sp,sp,-8
   144a0:	000b883a 	mov	r5,zero
   144a4:	dc000015 	stw	r16,0(sp)
   144a8:	dfc00115 	stw	ra,4(sp)
   144ac:	2021883a 	mov	r16,r4
   144b0:	00149280 	call	14928 <__call_exitprocs>
   144b4:	00800074 	movhi	r2,1
   144b8:	109b8c04 	addi	r2,r2,28208
   144bc:	11000017 	ldw	r4,0(r2)
   144c0:	20800f17 	ldw	r2,60(r4)
   144c4:	10000126 	beq	r2,zero,144cc <exit+0x30>
   144c8:	103ee83a 	callr	r2
   144cc:	8009883a 	mov	r4,r16
   144d0:	0014aa80 	call	14aa8 <_exit>

000144d4 <memcmp>:
   144d4:	01c000c4 	movi	r7,3
   144d8:	3980192e 	bgeu	r7,r6,14540 <memcmp+0x6c>
   144dc:	2144b03a 	or	r2,r4,r5
   144e0:	11c4703a 	and	r2,r2,r7
   144e4:	10000f26 	beq	r2,zero,14524 <memcmp+0x50>
   144e8:	20800003 	ldbu	r2,0(r4)
   144ec:	28c00003 	ldbu	r3,0(r5)
   144f0:	10c0151e 	bne	r2,r3,14548 <memcmp+0x74>
   144f4:	31bfff84 	addi	r6,r6,-2
   144f8:	01ffffc4 	movi	r7,-1
   144fc:	00000406 	br	14510 <memcmp+0x3c>
   14500:	20800003 	ldbu	r2,0(r4)
   14504:	28c00003 	ldbu	r3,0(r5)
   14508:	31bfffc4 	addi	r6,r6,-1
   1450c:	10c00e1e 	bne	r2,r3,14548 <memcmp+0x74>
   14510:	21000044 	addi	r4,r4,1
   14514:	29400044 	addi	r5,r5,1
   14518:	31fff91e 	bne	r6,r7,14500 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542500>
   1451c:	0005883a 	mov	r2,zero
   14520:	f800283a 	ret
   14524:	20c00017 	ldw	r3,0(r4)
   14528:	28800017 	ldw	r2,0(r5)
   1452c:	18bfee1e 	bne	r3,r2,144e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215424e8>
   14530:	31bfff04 	addi	r6,r6,-4
   14534:	21000104 	addi	r4,r4,4
   14538:	29400104 	addi	r5,r5,4
   1453c:	39bff936 	bltu	r7,r6,14524 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542524>
   14540:	303fe91e 	bne	r6,zero,144e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215424e8>
   14544:	003ff506 	br	1451c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154251c>
   14548:	10c5c83a 	sub	r2,r2,r3
   1454c:	f800283a 	ret

00014550 <_putc_r>:
   14550:	defffc04 	addi	sp,sp,-16
   14554:	dc000215 	stw	r16,8(sp)
   14558:	dfc00315 	stw	ra,12(sp)
   1455c:	2021883a 	mov	r16,r4
   14560:	20000226 	beq	r4,zero,1456c <_putc_r+0x1c>
   14564:	20800e17 	ldw	r2,56(r4)
   14568:	10001b26 	beq	r2,zero,145d8 <_putc_r+0x88>
   1456c:	30800217 	ldw	r2,8(r6)
   14570:	10bfffc4 	addi	r2,r2,-1
   14574:	30800215 	stw	r2,8(r6)
   14578:	10000a16 	blt	r2,zero,145a4 <_putc_r+0x54>
   1457c:	30800017 	ldw	r2,0(r6)
   14580:	11400005 	stb	r5,0(r2)
   14584:	30800017 	ldw	r2,0(r6)
   14588:	10c00044 	addi	r3,r2,1
   1458c:	30c00015 	stw	r3,0(r6)
   14590:	10800003 	ldbu	r2,0(r2)
   14594:	dfc00317 	ldw	ra,12(sp)
   14598:	dc000217 	ldw	r16,8(sp)
   1459c:	dec00404 	addi	sp,sp,16
   145a0:	f800283a 	ret
   145a4:	30c00617 	ldw	r3,24(r6)
   145a8:	10c00616 	blt	r2,r3,145c4 <_putc_r+0x74>
   145ac:	30800017 	ldw	r2,0(r6)
   145b0:	00c00284 	movi	r3,10
   145b4:	11400005 	stb	r5,0(r2)
   145b8:	30800017 	ldw	r2,0(r6)
   145bc:	11400003 	ldbu	r5,0(r2)
   145c0:	28fff11e 	bne	r5,r3,14588 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542588>
   145c4:	8009883a 	mov	r4,r16
   145c8:	dfc00317 	ldw	ra,12(sp)
   145cc:	dc000217 	ldw	r16,8(sp)
   145d0:	dec00404 	addi	sp,sp,16
   145d4:	00146b81 	jmpi	146b8 <__swbuf_r>
   145d8:	d9400015 	stw	r5,0(sp)
   145dc:	d9800115 	stw	r6,4(sp)
   145e0:	000736c0 	call	736c <__sinit>
   145e4:	d9800117 	ldw	r6,4(sp)
   145e8:	d9400017 	ldw	r5,0(sp)
   145ec:	003fdf06 	br	1456c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154256c>

000145f0 <putc>:
   145f0:	00800074 	movhi	r2,1
   145f4:	defffc04 	addi	sp,sp,-16
   145f8:	109b8d04 	addi	r2,r2,28212
   145fc:	dc000115 	stw	r16,4(sp)
   14600:	14000017 	ldw	r16,0(r2)
   14604:	dc400215 	stw	r17,8(sp)
   14608:	dfc00315 	stw	ra,12(sp)
   1460c:	2023883a 	mov	r17,r4
   14610:	80000226 	beq	r16,zero,1461c <putc+0x2c>
   14614:	80800e17 	ldw	r2,56(r16)
   14618:	10001a26 	beq	r2,zero,14684 <putc+0x94>
   1461c:	28800217 	ldw	r2,8(r5)
   14620:	10bfffc4 	addi	r2,r2,-1
   14624:	28800215 	stw	r2,8(r5)
   14628:	10000b16 	blt	r2,zero,14658 <putc+0x68>
   1462c:	28800017 	ldw	r2,0(r5)
   14630:	14400005 	stb	r17,0(r2)
   14634:	28800017 	ldw	r2,0(r5)
   14638:	10c00044 	addi	r3,r2,1
   1463c:	28c00015 	stw	r3,0(r5)
   14640:	10800003 	ldbu	r2,0(r2)
   14644:	dfc00317 	ldw	ra,12(sp)
   14648:	dc400217 	ldw	r17,8(sp)
   1464c:	dc000117 	ldw	r16,4(sp)
   14650:	dec00404 	addi	sp,sp,16
   14654:	f800283a 	ret
   14658:	28c00617 	ldw	r3,24(r5)
   1465c:	10c00e16 	blt	r2,r3,14698 <putc+0xa8>
   14660:	28800017 	ldw	r2,0(r5)
   14664:	01000284 	movi	r4,10
   14668:	14400005 	stb	r17,0(r2)
   1466c:	28800017 	ldw	r2,0(r5)
   14670:	10c00003 	ldbu	r3,0(r2)
   14674:	193ff01e 	bne	r3,r4,14638 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542638>
   14678:	280d883a 	mov	r6,r5
   1467c:	180b883a 	mov	r5,r3
   14680:	00000706 	br	146a0 <putc+0xb0>
   14684:	8009883a 	mov	r4,r16
   14688:	d9400015 	stw	r5,0(sp)
   1468c:	000736c0 	call	736c <__sinit>
   14690:	d9400017 	ldw	r5,0(sp)
   14694:	003fe106 	br	1461c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154261c>
   14698:	280d883a 	mov	r6,r5
   1469c:	880b883a 	mov	r5,r17
   146a0:	8009883a 	mov	r4,r16
   146a4:	dfc00317 	ldw	ra,12(sp)
   146a8:	dc400217 	ldw	r17,8(sp)
   146ac:	dc000117 	ldw	r16,4(sp)
   146b0:	dec00404 	addi	sp,sp,16
   146b4:	00146b81 	jmpi	146b8 <__swbuf_r>

000146b8 <__swbuf_r>:
   146b8:	defffb04 	addi	sp,sp,-20
   146bc:	dcc00315 	stw	r19,12(sp)
   146c0:	dc800215 	stw	r18,8(sp)
   146c4:	dc000015 	stw	r16,0(sp)
   146c8:	dfc00415 	stw	ra,16(sp)
   146cc:	dc400115 	stw	r17,4(sp)
   146d0:	2025883a 	mov	r18,r4
   146d4:	2827883a 	mov	r19,r5
   146d8:	3021883a 	mov	r16,r6
   146dc:	20000226 	beq	r4,zero,146e8 <__swbuf_r+0x30>
   146e0:	20800e17 	ldw	r2,56(r4)
   146e4:	10004226 	beq	r2,zero,147f0 <__swbuf_r+0x138>
   146e8:	80800617 	ldw	r2,24(r16)
   146ec:	8100030b 	ldhu	r4,12(r16)
   146f0:	80800215 	stw	r2,8(r16)
   146f4:	2080020c 	andi	r2,r4,8
   146f8:	10003626 	beq	r2,zero,147d4 <__swbuf_r+0x11c>
   146fc:	80c00417 	ldw	r3,16(r16)
   14700:	18003426 	beq	r3,zero,147d4 <__swbuf_r+0x11c>
   14704:	2088000c 	andi	r2,r4,8192
   14708:	9c403fcc 	andi	r17,r19,255
   1470c:	10001a26 	beq	r2,zero,14778 <__swbuf_r+0xc0>
   14710:	80800017 	ldw	r2,0(r16)
   14714:	81000517 	ldw	r4,20(r16)
   14718:	10c7c83a 	sub	r3,r2,r3
   1471c:	1900200e 	bge	r3,r4,147a0 <__swbuf_r+0xe8>
   14720:	18c00044 	addi	r3,r3,1
   14724:	81000217 	ldw	r4,8(r16)
   14728:	11400044 	addi	r5,r2,1
   1472c:	81400015 	stw	r5,0(r16)
   14730:	213fffc4 	addi	r4,r4,-1
   14734:	81000215 	stw	r4,8(r16)
   14738:	14c00005 	stb	r19,0(r2)
   1473c:	80800517 	ldw	r2,20(r16)
   14740:	10c01e26 	beq	r2,r3,147bc <__swbuf_r+0x104>
   14744:	8080030b 	ldhu	r2,12(r16)
   14748:	1080004c 	andi	r2,r2,1
   1474c:	10000226 	beq	r2,zero,14758 <__swbuf_r+0xa0>
   14750:	00800284 	movi	r2,10
   14754:	88801926 	beq	r17,r2,147bc <__swbuf_r+0x104>
   14758:	8805883a 	mov	r2,r17
   1475c:	dfc00417 	ldw	ra,16(sp)
   14760:	dcc00317 	ldw	r19,12(sp)
   14764:	dc800217 	ldw	r18,8(sp)
   14768:	dc400117 	ldw	r17,4(sp)
   1476c:	dc000017 	ldw	r16,0(sp)
   14770:	dec00504 	addi	sp,sp,20
   14774:	f800283a 	ret
   14778:	81401917 	ldw	r5,100(r16)
   1477c:	00b7ffc4 	movi	r2,-8193
   14780:	21080014 	ori	r4,r4,8192
   14784:	2884703a 	and	r2,r5,r2
   14788:	80801915 	stw	r2,100(r16)
   1478c:	80800017 	ldw	r2,0(r16)
   14790:	8100030d 	sth	r4,12(r16)
   14794:	81000517 	ldw	r4,20(r16)
   14798:	10c7c83a 	sub	r3,r2,r3
   1479c:	193fe016 	blt	r3,r4,14720 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542720>
   147a0:	800b883a 	mov	r5,r16
   147a4:	9009883a 	mov	r4,r18
   147a8:	000b6c00 	call	b6c0 <_fflush_r>
   147ac:	1000071e 	bne	r2,zero,147cc <__swbuf_r+0x114>
   147b0:	80800017 	ldw	r2,0(r16)
   147b4:	00c00044 	movi	r3,1
   147b8:	003fda06 	br	14724 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542724>
   147bc:	800b883a 	mov	r5,r16
   147c0:	9009883a 	mov	r4,r18
   147c4:	000b6c00 	call	b6c0 <_fflush_r>
   147c8:	103fe326 	beq	r2,zero,14758 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542758>
   147cc:	00bfffc4 	movi	r2,-1
   147d0:	003fe206 	br	1475c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154275c>
   147d4:	800b883a 	mov	r5,r16
   147d8:	9009883a 	mov	r4,r18
   147dc:	000b11c0 	call	b11c <__swsetup_r>
   147e0:	103ffa1e 	bne	r2,zero,147cc <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215427cc>
   147e4:	8100030b 	ldhu	r4,12(r16)
   147e8:	80c00417 	ldw	r3,16(r16)
   147ec:	003fc506 	br	14704 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542704>
   147f0:	000736c0 	call	736c <__sinit>
   147f4:	003fbc06 	br	146e8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215426e8>

000147f8 <__swbuf>:
   147f8:	00800074 	movhi	r2,1
   147fc:	109b8d04 	addi	r2,r2,28212
   14800:	280d883a 	mov	r6,r5
   14804:	200b883a 	mov	r5,r4
   14808:	11000017 	ldw	r4,0(r2)
   1480c:	00146b81 	jmpi	146b8 <__swbuf_r>

00014810 <__register_exitproc>:
   14810:	defffa04 	addi	sp,sp,-24
   14814:	dc000315 	stw	r16,12(sp)
   14818:	04000074 	movhi	r16,1
   1481c:	841b8c04 	addi	r16,r16,28208
   14820:	80c00017 	ldw	r3,0(r16)
   14824:	dc400415 	stw	r17,16(sp)
   14828:	dfc00515 	stw	ra,20(sp)
   1482c:	18805217 	ldw	r2,328(r3)
   14830:	2023883a 	mov	r17,r4
   14834:	10003726 	beq	r2,zero,14914 <__register_exitproc+0x104>
   14838:	10c00117 	ldw	r3,4(r2)
   1483c:	010007c4 	movi	r4,31
   14840:	20c00e16 	blt	r4,r3,1487c <__register_exitproc+0x6c>
   14844:	1a000044 	addi	r8,r3,1
   14848:	8800221e 	bne	r17,zero,148d4 <__register_exitproc+0xc4>
   1484c:	18c00084 	addi	r3,r3,2
   14850:	18c7883a 	add	r3,r3,r3
   14854:	18c7883a 	add	r3,r3,r3
   14858:	12000115 	stw	r8,4(r2)
   1485c:	10c7883a 	add	r3,r2,r3
   14860:	19400015 	stw	r5,0(r3)
   14864:	0005883a 	mov	r2,zero
   14868:	dfc00517 	ldw	ra,20(sp)
   1486c:	dc400417 	ldw	r17,16(sp)
   14870:	dc000317 	ldw	r16,12(sp)
   14874:	dec00604 	addi	sp,sp,24
   14878:	f800283a 	ret
   1487c:	00800034 	movhi	r2,0
   14880:	108a3004 	addi	r2,r2,10432
   14884:	10002626 	beq	r2,zero,14920 <__register_exitproc+0x110>
   14888:	01006404 	movi	r4,400
   1488c:	d9400015 	stw	r5,0(sp)
   14890:	d9800115 	stw	r6,4(sp)
   14894:	d9c00215 	stw	r7,8(sp)
   14898:	00028c00 	call	28c0 <malloc>
   1489c:	d9400017 	ldw	r5,0(sp)
   148a0:	d9800117 	ldw	r6,4(sp)
   148a4:	d9c00217 	ldw	r7,8(sp)
   148a8:	10001d26 	beq	r2,zero,14920 <__register_exitproc+0x110>
   148ac:	81000017 	ldw	r4,0(r16)
   148b0:	10000115 	stw	zero,4(r2)
   148b4:	02000044 	movi	r8,1
   148b8:	22405217 	ldw	r9,328(r4)
   148bc:	0007883a 	mov	r3,zero
   148c0:	12400015 	stw	r9,0(r2)
   148c4:	20805215 	stw	r2,328(r4)
   148c8:	10006215 	stw	zero,392(r2)
   148cc:	10006315 	stw	zero,396(r2)
   148d0:	883fde26 	beq	r17,zero,1484c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154284c>
   148d4:	18c9883a 	add	r4,r3,r3
   148d8:	2109883a 	add	r4,r4,r4
   148dc:	1109883a 	add	r4,r2,r4
   148e0:	21802215 	stw	r6,136(r4)
   148e4:	01800044 	movi	r6,1
   148e8:	12406217 	ldw	r9,392(r2)
   148ec:	30cc983a 	sll	r6,r6,r3
   148f0:	4992b03a 	or	r9,r9,r6
   148f4:	12406215 	stw	r9,392(r2)
   148f8:	21c04215 	stw	r7,264(r4)
   148fc:	01000084 	movi	r4,2
   14900:	893fd21e 	bne	r17,r4,1484c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154284c>
   14904:	11006317 	ldw	r4,396(r2)
   14908:	218cb03a 	or	r6,r4,r6
   1490c:	11806315 	stw	r6,396(r2)
   14910:	003fce06 	br	1484c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154284c>
   14914:	18805304 	addi	r2,r3,332
   14918:	18805215 	stw	r2,328(r3)
   1491c:	003fc606 	br	14838 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542838>
   14920:	00bfffc4 	movi	r2,-1
   14924:	003fd006 	br	14868 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542868>

00014928 <__call_exitprocs>:
   14928:	defff504 	addi	sp,sp,-44
   1492c:	df000915 	stw	fp,36(sp)
   14930:	dd400615 	stw	r21,24(sp)
   14934:	dc800315 	stw	r18,12(sp)
   14938:	dfc00a15 	stw	ra,40(sp)
   1493c:	ddc00815 	stw	r23,32(sp)
   14940:	dd800715 	stw	r22,28(sp)
   14944:	dd000515 	stw	r20,20(sp)
   14948:	dcc00415 	stw	r19,16(sp)
   1494c:	dc400215 	stw	r17,8(sp)
   14950:	dc000115 	stw	r16,4(sp)
   14954:	d9000015 	stw	r4,0(sp)
   14958:	2839883a 	mov	fp,r5
   1495c:	04800044 	movi	r18,1
   14960:	057fffc4 	movi	r21,-1
   14964:	00800074 	movhi	r2,1
   14968:	109b8c04 	addi	r2,r2,28208
   1496c:	12000017 	ldw	r8,0(r2)
   14970:	45005217 	ldw	r20,328(r8)
   14974:	44c05204 	addi	r19,r8,328
   14978:	a0001c26 	beq	r20,zero,149ec <__call_exitprocs+0xc4>
   1497c:	a0800117 	ldw	r2,4(r20)
   14980:	15ffffc4 	addi	r23,r2,-1
   14984:	b8000d16 	blt	r23,zero,149bc <__call_exitprocs+0x94>
   14988:	14000044 	addi	r16,r2,1
   1498c:	8421883a 	add	r16,r16,r16
   14990:	8421883a 	add	r16,r16,r16
   14994:	84402004 	addi	r17,r16,128
   14998:	a463883a 	add	r17,r20,r17
   1499c:	a421883a 	add	r16,r20,r16
   149a0:	e0001e26 	beq	fp,zero,14a1c <__call_exitprocs+0xf4>
   149a4:	80804017 	ldw	r2,256(r16)
   149a8:	e0801c26 	beq	fp,r2,14a1c <__call_exitprocs+0xf4>
   149ac:	bdffffc4 	addi	r23,r23,-1
   149b0:	843fff04 	addi	r16,r16,-4
   149b4:	8c7fff04 	addi	r17,r17,-4
   149b8:	bd7ff91e 	bne	r23,r21,149a0 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215429a0>
   149bc:	00800034 	movhi	r2,0
   149c0:	108a3504 	addi	r2,r2,10452
   149c4:	10000926 	beq	r2,zero,149ec <__call_exitprocs+0xc4>
   149c8:	a0800117 	ldw	r2,4(r20)
   149cc:	1000301e 	bne	r2,zero,14a90 <__call_exitprocs+0x168>
   149d0:	a0800017 	ldw	r2,0(r20)
   149d4:	10003226 	beq	r2,zero,14aa0 <__call_exitprocs+0x178>
   149d8:	a009883a 	mov	r4,r20
   149dc:	98800015 	stw	r2,0(r19)
   149e0:	00028d40 	call	28d4 <free>
   149e4:	9d000017 	ldw	r20,0(r19)
   149e8:	a03fe41e 	bne	r20,zero,1497c <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x2154297c>
   149ec:	dfc00a17 	ldw	ra,40(sp)
   149f0:	df000917 	ldw	fp,36(sp)
   149f4:	ddc00817 	ldw	r23,32(sp)
   149f8:	dd800717 	ldw	r22,28(sp)
   149fc:	dd400617 	ldw	r21,24(sp)
   14a00:	dd000517 	ldw	r20,20(sp)
   14a04:	dcc00417 	ldw	r19,16(sp)
   14a08:	dc800317 	ldw	r18,12(sp)
   14a0c:	dc400217 	ldw	r17,8(sp)
   14a10:	dc000117 	ldw	r16,4(sp)
   14a14:	dec00b04 	addi	sp,sp,44
   14a18:	f800283a 	ret
   14a1c:	a0800117 	ldw	r2,4(r20)
   14a20:	80c00017 	ldw	r3,0(r16)
   14a24:	10bfffc4 	addi	r2,r2,-1
   14a28:	15c01426 	beq	r2,r23,14a7c <__call_exitprocs+0x154>
   14a2c:	80000015 	stw	zero,0(r16)
   14a30:	183fde26 	beq	r3,zero,149ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215429ac>
   14a34:	95c8983a 	sll	r4,r18,r23
   14a38:	a0806217 	ldw	r2,392(r20)
   14a3c:	a5800117 	ldw	r22,4(r20)
   14a40:	2084703a 	and	r2,r4,r2
   14a44:	10000b26 	beq	r2,zero,14a74 <__call_exitprocs+0x14c>
   14a48:	a0806317 	ldw	r2,396(r20)
   14a4c:	2088703a 	and	r4,r4,r2
   14a50:	20000c1e 	bne	r4,zero,14a84 <__call_exitprocs+0x15c>
   14a54:	89400017 	ldw	r5,0(r17)
   14a58:	d9000017 	ldw	r4,0(sp)
   14a5c:	183ee83a 	callr	r3
   14a60:	a0800117 	ldw	r2,4(r20)
   14a64:	15bfbf1e 	bne	r2,r22,14964 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542964>
   14a68:	98800017 	ldw	r2,0(r19)
   14a6c:	153fcf26 	beq	r2,r20,149ac <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x215429ac>
   14a70:	003fbc06 	br	14964 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542964>
   14a74:	183ee83a 	callr	r3
   14a78:	003ff906 	br	14a60 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542a60>
   14a7c:	a5c00115 	stw	r23,4(r20)
   14a80:	003feb06 	br	14a30 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542a30>
   14a84:	89000017 	ldw	r4,0(r17)
   14a88:	183ee83a 	callr	r3
   14a8c:	003ff406 	br	14a60 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542a60>
   14a90:	a0800017 	ldw	r2,0(r20)
   14a94:	a027883a 	mov	r19,r20
   14a98:	1029883a 	mov	r20,r2
   14a9c:	003fb606 	br	14978 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542978>
   14aa0:	0005883a 	mov	r2,zero
   14aa4:	003ffb06 	br	14a94 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542a94>

00014aa8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14aa8:	defffd04 	addi	sp,sp,-12
   14aac:	df000215 	stw	fp,8(sp)
   14ab0:	df000204 	addi	fp,sp,8
   14ab4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14ab8:	0001883a 	nop
   14abc:	e0bfff17 	ldw	r2,-4(fp)
   14ac0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14ac4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14ac8:	10000226 	beq	r2,zero,14ad4 <_exit+0x2c>
    ALT_SIM_FAIL();
   14acc:	002af070 	cmpltui	zero,zero,43969
   14ad0:	00000106 	br	14ad8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14ad4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14ad8:	003fff06 	br	14ad8 <__alt_mem_vga_subsystem_Char_Buf_Subsystem_Onchip_SRAM+0x21542ad8>
