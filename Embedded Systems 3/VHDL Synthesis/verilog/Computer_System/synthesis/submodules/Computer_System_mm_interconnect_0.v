// Computer_System_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module Computer_System_mm_interconnect_0 (
		input  wire        System_PLL_sys_clk_clk,                                         //                                   System_PLL_sys_clk.clk
		input  wire        video_pll_0_lcd_clk_clk,                                        //                                  video_pll_0_lcd_clk.clk
		input  wire        joyirq_reset_reset_bridge_in_reset_reset,                       //                   joyirq_reset_reset_bridge_in_reset.reset
		input  wire        JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset_reset,      //  JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset.reset
		input  wire        Nios2_reset_reset_bridge_in_reset_reset,                        //                    Nios2_reset_reset_bridge_in_reset.reset
		input  wire        SDRAM_reset_reset_bridge_in_reset_reset,                        //                    SDRAM_reset_reset_bridge_in_reset.reset
		input  wire        video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset,     // video_pixel_buffer_dma_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] JTAG_to_FPGA_Bridge_master_address,                             //                           JTAG_to_FPGA_Bridge_master.address
		output wire        JTAG_to_FPGA_Bridge_master_waitrequest,                         //                                                     .waitrequest
		input  wire [3:0]  JTAG_to_FPGA_Bridge_master_byteenable,                          //                                                     .byteenable
		input  wire        JTAG_to_FPGA_Bridge_master_read,                                //                                                     .read
		output wire [31:0] JTAG_to_FPGA_Bridge_master_readdata,                            //                                                     .readdata
		output wire        JTAG_to_FPGA_Bridge_master_readdatavalid,                       //                                                     .readdatavalid
		input  wire        JTAG_to_FPGA_Bridge_master_write,                               //                                                     .write
		input  wire [31:0] JTAG_to_FPGA_Bridge_master_writedata,                           //                                                     .writedata
		input  wire [31:0] Nios2_data_master_address,                                      //                                    Nios2_data_master.address
		output wire        Nios2_data_master_waitrequest,                                  //                                                     .waitrequest
		input  wire [3:0]  Nios2_data_master_byteenable,                                   //                                                     .byteenable
		input  wire        Nios2_data_master_read,                                         //                                                     .read
		output wire [31:0] Nios2_data_master_readdata,                                     //                                                     .readdata
		input  wire        Nios2_data_master_write,                                        //                                                     .write
		input  wire [31:0] Nios2_data_master_writedata,                                    //                                                     .writedata
		input  wire        Nios2_data_master_debugaccess,                                  //                                                     .debugaccess
		input  wire [27:0] Nios2_instruction_master_address,                               //                             Nios2_instruction_master.address
		output wire        Nios2_instruction_master_waitrequest,                           //                                                     .waitrequest
		input  wire        Nios2_instruction_master_read,                                  //                                                     .read
		output wire [31:0] Nios2_instruction_master_readdata,                              //                                                     .readdata
		input  wire [31:0] vga_subsystem_pixel_dma_master_address,                         //                       vga_subsystem_pixel_dma_master.address
		output wire        vga_subsystem_pixel_dma_master_waitrequest,                     //                                                     .waitrequest
		input  wire        vga_subsystem_pixel_dma_master_read,                            //                                                     .read
		output wire [15:0] vga_subsystem_pixel_dma_master_readdata,                        //                                                     .readdata
		output wire        vga_subsystem_pixel_dma_master_readdatavalid,                   //                                                     .readdatavalid
		input  wire        vga_subsystem_pixel_dma_master_lock,                            //                                                     .lock
		input  wire [31:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_address,       //     video_pixel_buffer_dma_0_avalon_pixel_dma_master.address
		output wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_waitrequest,   //                                                     .waitrequest
		input  wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_read,          //                                                     .read
		output wire [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdata,      //                                                     .readdata
		output wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdatavalid, //                                                     .readdatavalid
		input  wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_lock,          //                                                     .lock
		output wire [1:0]  adc_pll_pll_slave_address,                                      //                                    adc_pll_pll_slave.address
		output wire        adc_pll_pll_slave_write,                                        //                                                     .write
		output wire        adc_pll_pll_slave_read,                                         //                                                     .read
		input  wire [31:0] adc_pll_pll_slave_readdata,                                     //                                                     .readdata
		output wire [31:0] adc_pll_pll_slave_writedata,                                    //                                                     .writedata
		output wire [3:0]  gyro_i2c_csr_address,                                           //                                         gyro_i2c_csr.address
		output wire        gyro_i2c_csr_write,                                             //                                                     .write
		output wire        gyro_i2c_csr_read,                                              //                                                     .read
		input  wire [31:0] gyro_i2c_csr_readdata,                                          //                                                     .readdata
		output wire [31:0] gyro_i2c_csr_writedata,                                         //                                                     .writedata
		output wire [1:0]  HEX3_HEX0_s1_address,                                           //                                         HEX3_HEX0_s1.address
		output wire        HEX3_HEX0_s1_write,                                             //                                                     .write
		input  wire [31:0] HEX3_HEX0_s1_readdata,                                          //                                                     .readdata
		output wire [31:0] HEX3_HEX0_s1_writedata,                                         //                                                     .writedata
		output wire        HEX3_HEX0_s1_chipselect,                                        //                                                     .chipselect
		output wire [1:0]  HEX5_HEX4_s1_address,                                           //                                         HEX5_HEX4_s1.address
		output wire        HEX5_HEX4_s1_write,                                             //                                                     .write
		input  wire [31:0] HEX5_HEX4_s1_readdata,                                          //                                                     .readdata
		output wire [31:0] HEX5_HEX4_s1_writedata,                                         //                                                     .writedata
		output wire        HEX5_HEX4_s1_chipselect,                                        //                                                     .chipselect
		output wire [2:0]  Interval_Timer_s1_address,                                      //                                    Interval_Timer_s1.address
		output wire        Interval_Timer_s1_write,                                        //                                                     .write
		input  wire [15:0] Interval_Timer_s1_readdata,                                     //                                                     .readdata
		output wire [15:0] Interval_Timer_s1_writedata,                                    //                                                     .writedata
		output wire        Interval_Timer_s1_chipselect,                                   //                                                     .chipselect
		output wire [2:0]  Interval_Timer_2_s1_address,                                    //                                  Interval_Timer_2_s1.address
		output wire        Interval_Timer_2_s1_write,                                      //                                                     .write
		input  wire [15:0] Interval_Timer_2_s1_readdata,                                   //                                                     .readdata
		output wire [15:0] Interval_Timer_2_s1_writedata,                                  //                                                     .writedata
		output wire        Interval_Timer_2_s1_chipselect,                                 //                                                     .chipselect
		output wire [1:0]  joyirq_s1_address,                                              //                                            joyirq_s1.address
		output wire        joyirq_s1_write,                                                //                                                     .write
		input  wire [31:0] joyirq_s1_readdata,                                             //                                                     .readdata
		output wire [31:0] joyirq_s1_writedata,                                            //                                                     .writedata
		output wire        joyirq_s1_chipselect,                                           //                                                     .chipselect
		output wire [0:0]  JTAG_UART_avalon_jtag_slave_address,                            //                          JTAG_UART_avalon_jtag_slave.address
		output wire        JTAG_UART_avalon_jtag_slave_write,                              //                                                     .write
		output wire        JTAG_UART_avalon_jtag_slave_read,                               //                                                     .read
		input  wire [31:0] JTAG_UART_avalon_jtag_slave_readdata,                           //                                                     .readdata
		output wire [31:0] JTAG_UART_avalon_jtag_slave_writedata,                          //                                                     .writedata
		input  wire        JTAG_UART_avalon_jtag_slave_waitrequest,                        //                                                     .waitrequest
		output wire        JTAG_UART_avalon_jtag_slave_chipselect,                         //                                                     .chipselect
		output wire [1:0]  LEDs_s1_address,                                                //                                              LEDs_s1.address
		output wire        LEDs_s1_write,                                                  //                                                     .write
		input  wire [31:0] LEDs_s1_readdata,                                               //                                                     .readdata
		output wire [31:0] LEDs_s1_writedata,                                              //                                                     .writedata
		output wire        LEDs_s1_chipselect,                                             //                                                     .chipselect
		output wire [6:0]  modular_adc_0_sample_store_csr_address,                         //                       modular_adc_0_sample_store_csr.address
		output wire        modular_adc_0_sample_store_csr_write,                           //                                                     .write
		output wire        modular_adc_0_sample_store_csr_read,                            //                                                     .read
		input  wire [31:0] modular_adc_0_sample_store_csr_readdata,                        //                                                     .readdata
		output wire [31:0] modular_adc_0_sample_store_csr_writedata,                       //                                                     .writedata
		output wire [0:0]  modular_adc_0_sequencer_csr_address,                            //                          modular_adc_0_sequencer_csr.address
		output wire        modular_adc_0_sequencer_csr_write,                              //                                                     .write
		output wire        modular_adc_0_sequencer_csr_read,                               //                                                     .read
		input  wire [31:0] modular_adc_0_sequencer_csr_readdata,                           //                                                     .readdata
		output wire [31:0] modular_adc_0_sequencer_csr_writedata,                          //                                                     .writedata
		output wire [8:0]  Nios2_debug_mem_slave_address,                                  //                                Nios2_debug_mem_slave.address
		output wire        Nios2_debug_mem_slave_write,                                    //                                                     .write
		output wire        Nios2_debug_mem_slave_read,                                     //                                                     .read
		input  wire [31:0] Nios2_debug_mem_slave_readdata,                                 //                                                     .readdata
		output wire [31:0] Nios2_debug_mem_slave_writedata,                                //                                                     .writedata
		output wire [3:0]  Nios2_debug_mem_slave_byteenable,                               //                                                     .byteenable
		input  wire        Nios2_debug_mem_slave_waitrequest,                              //                                                     .waitrequest
		output wire        Nios2_debug_mem_slave_debugaccess,                              //                                                     .debugaccess
		output wire [1:0]  penirq_s1_address,                                              //                                            penirq_s1.address
		output wire        penirq_s1_write,                                                //                                                     .write
		input  wire [31:0] penirq_s1_readdata,                                             //                                                     .readdata
		output wire [31:0] penirq_s1_writedata,                                            //                                                     .writedata
		output wire        penirq_s1_chipselect,                                           //                                                     .chipselect
		output wire [1:0]  Pushbuttons_s1_address,                                         //                                       Pushbuttons_s1.address
		output wire        Pushbuttons_s1_write,                                           //                                                     .write
		input  wire [31:0] Pushbuttons_s1_readdata,                                        //                                                     .readdata
		output wire [31:0] Pushbuttons_s1_writedata,                                       //                                                     .writedata
		output wire        Pushbuttons_s1_chipselect,                                      //                                                     .chipselect
		output wire        PWMX_s1_write,                                                  //                                              PWMX_s1.write
		output wire        PWMX_s1_read,                                                   //                                                     .read
		input  wire [31:0] PWMX_s1_readdata,                                               //                                                     .readdata
		output wire [31:0] PWMX_s1_writedata,                                              //                                                     .writedata
		output wire        PWMY_s1_write,                                                  //                                              PWMY_s1.write
		output wire        PWMY_s1_read,                                                   //                                                     .read
		input  wire [31:0] PWMY_s1_readdata,                                               //                                                     .readdata
		output wire [31:0] PWMY_s1_writedata,                                              //                                                     .writedata
		output wire [24:0] SDRAM_s1_address,                                               //                                             SDRAM_s1.address
		output wire        SDRAM_s1_write,                                                 //                                                     .write
		output wire        SDRAM_s1_read,                                                  //                                                     .read
		input  wire [15:0] SDRAM_s1_readdata,                                              //                                                     .readdata
		output wire [15:0] SDRAM_s1_writedata,                                             //                                                     .writedata
		output wire [1:0]  SDRAM_s1_byteenable,                                            //                                                     .byteenable
		input  wire        SDRAM_s1_readdatavalid,                                         //                                                     .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                                           //                                                     .waitrequest
		output wire        SDRAM_s1_chipselect,                                            //                                                     .chipselect
		output wire [1:0]  Slider_Switches_s1_address,                                     //                                   Slider_Switches_s1.address
		input  wire [31:0] Slider_Switches_s1_readdata,                                    //                                                     .readdata
		output wire [2:0]  touch_spi_spi_control_port_address,                             //                           touch_spi_spi_control_port.address
		output wire        touch_spi_spi_control_port_write,                               //                                                     .write
		output wire        touch_spi_spi_control_port_read,                                //                                                     .read
		input  wire [15:0] touch_spi_spi_control_port_readdata,                            //                                                     .readdata
		output wire [15:0] touch_spi_spi_control_port_writedata,                           //                                                     .writedata
		output wire        touch_spi_spi_control_port_chipselect,                          //                                                     .chipselect
		output wire        vga_subsystem_char_buf_rgb_read,                                //                           vga_subsystem_char_buf_rgb.read
		input  wire [31:0] vga_subsystem_char_buf_rgb_readdata,                            //                                                     .readdata
		output wire [1:0]  vga_subsystem_char_buffer_control_slave_address,                //              vga_subsystem_char_buffer_control_slave.address
		output wire        vga_subsystem_char_buffer_control_slave_write,                  //                                                     .write
		output wire        vga_subsystem_char_buffer_control_slave_read,                   //                                                     .read
		input  wire [31:0] vga_subsystem_char_buffer_control_slave_readdata,               //                                                     .readdata
		output wire [31:0] vga_subsystem_char_buffer_control_slave_writedata,              //                                                     .writedata
		output wire [3:0]  vga_subsystem_char_buffer_control_slave_byteenable,             //                                                     .byteenable
		output wire [10:0] vga_subsystem_char_buffer_slave_address,                        //                      vga_subsystem_char_buffer_slave.address
		output wire        vga_subsystem_char_buffer_slave_write,                          //                                                     .write
		input  wire [31:0] vga_subsystem_char_buffer_slave_readdata,                       //                                                     .readdata
		output wire [31:0] vga_subsystem_char_buffer_slave_writedata,                      //                                                     .writedata
		output wire [3:0]  vga_subsystem_char_buffer_slave_byteenable,                     //                                                     .byteenable
		output wire        vga_subsystem_char_buffer_slave_chipselect,                     //                                                     .chipselect
		output wire        vga_subsystem_char_buffer_slave_clken,                          //                                                     .clken
		output wire [1:0]  vga_subsystem_pixel_dma_control_slave_address,                  //                vga_subsystem_pixel_dma_control_slave.address
		output wire        vga_subsystem_pixel_dma_control_slave_write,                    //                                                     .write
		output wire        vga_subsystem_pixel_dma_control_slave_read,                     //                                                     .read
		input  wire [31:0] vga_subsystem_pixel_dma_control_slave_readdata,                 //                                                     .readdata
		output wire [31:0] vga_subsystem_pixel_dma_control_slave_writedata,                //                                                     .writedata
		output wire [3:0]  vga_subsystem_pixel_dma_control_slave_byteenable,               //                                                     .byteenable
		output wire        vga_subsystem_rgb_slave_read,                                   //                              vga_subsystem_rgb_slave.read
		input  wire [31:0] vga_subsystem_rgb_slave_readdata,                               //                                                     .readdata
		output wire [1:0]  video_pixel_buffer_dma_0_avalon_control_slave_address,          //        video_pixel_buffer_dma_0_avalon_control_slave.address
		output wire        video_pixel_buffer_dma_0_avalon_control_slave_write,            //                                                     .write
		output wire        video_pixel_buffer_dma_0_avalon_control_slave_read,             //                                                     .read
		input  wire [31:0] video_pixel_buffer_dma_0_avalon_control_slave_readdata,         //                                                     .readdata
		output wire [31:0] video_pixel_buffer_dma_0_avalon_control_slave_writedata,        //                                                     .writedata
		output wire [3:0]  video_pixel_buffer_dma_0_avalon_control_slave_byteenable        //                                                     .byteenable
	);

	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;   // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_waitrequest -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_waitrequest
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata;      // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_readdata -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_readdata
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;   // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_debugaccess -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_debugaccess
	wire   [31:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_address;       // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_address -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_address
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_read;          // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_read -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_read
	wire    [1:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable;    // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_byteenable -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_byteenable
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid; // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_readdatavalid -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_readdatavalid
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock;          // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_lock -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_lock
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_write;         // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_write -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_write
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata;     // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_writedata -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_writedata
	wire    [1:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount;    // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_burstcount -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                                   // rsp_mux:src_valid -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_valid
	wire   [93:0] rsp_mux_src_data;                                                                                    // rsp_mux:src_data -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                                   // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [24:0] rsp_mux_src_channel;                                                                                 // rsp_mux:src_channel -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                           // rsp_mux:src_startofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                             // rsp_mux:src_endofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_endofpacket
	wire          nios2_data_master_translator_avalon_universal_master_0_waitrequest;                                  // Nios2_data_master_agent:av_waitrequest -> Nios2_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_readdata;                                     // Nios2_data_master_agent:av_readdata -> Nios2_data_master_translator:uav_readdata
	wire          nios2_data_master_translator_avalon_universal_master_0_debugaccess;                                  // Nios2_data_master_translator:uav_debugaccess -> Nios2_data_master_agent:av_debugaccess
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_address;                                      // Nios2_data_master_translator:uav_address -> Nios2_data_master_agent:av_address
	wire          nios2_data_master_translator_avalon_universal_master_0_read;                                         // Nios2_data_master_translator:uav_read -> Nios2_data_master_agent:av_read
	wire    [3:0] nios2_data_master_translator_avalon_universal_master_0_byteenable;                                   // Nios2_data_master_translator:uav_byteenable -> Nios2_data_master_agent:av_byteenable
	wire          nios2_data_master_translator_avalon_universal_master_0_readdatavalid;                                // Nios2_data_master_agent:av_readdatavalid -> Nios2_data_master_translator:uav_readdatavalid
	wire          nios2_data_master_translator_avalon_universal_master_0_lock;                                         // Nios2_data_master_translator:uav_lock -> Nios2_data_master_agent:av_lock
	wire          nios2_data_master_translator_avalon_universal_master_0_write;                                        // Nios2_data_master_translator:uav_write -> Nios2_data_master_agent:av_write
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_writedata;                                    // Nios2_data_master_translator:uav_writedata -> Nios2_data_master_agent:av_writedata
	wire    [2:0] nios2_data_master_translator_avalon_universal_master_0_burstcount;                                   // Nios2_data_master_translator:uav_burstcount -> Nios2_data_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                               // rsp_mux_001:src_valid -> Nios2_data_master_agent:rp_valid
	wire  [111:0] rsp_mux_001_src_data;                                                                                // rsp_mux_001:src_data -> Nios2_data_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                               // Nios2_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [24:0] rsp_mux_001_src_channel;                                                                             // rsp_mux_001:src_channel -> Nios2_data_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                                       // rsp_mux_001:src_startofpacket -> Nios2_data_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                         // rsp_mux_001:src_endofpacket -> Nios2_data_master_agent:rp_endofpacket
	wire          nios2_instruction_master_translator_avalon_universal_master_0_waitrequest;                           // Nios2_instruction_master_agent:av_waitrequest -> Nios2_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_readdata;                              // Nios2_instruction_master_agent:av_readdata -> Nios2_instruction_master_translator:uav_readdata
	wire          nios2_instruction_master_translator_avalon_universal_master_0_debugaccess;                           // Nios2_instruction_master_translator:uav_debugaccess -> Nios2_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_address;                               // Nios2_instruction_master_translator:uav_address -> Nios2_instruction_master_agent:av_address
	wire          nios2_instruction_master_translator_avalon_universal_master_0_read;                                  // Nios2_instruction_master_translator:uav_read -> Nios2_instruction_master_agent:av_read
	wire    [3:0] nios2_instruction_master_translator_avalon_universal_master_0_byteenable;                            // Nios2_instruction_master_translator:uav_byteenable -> Nios2_instruction_master_agent:av_byteenable
	wire          nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid;                         // Nios2_instruction_master_agent:av_readdatavalid -> Nios2_instruction_master_translator:uav_readdatavalid
	wire          nios2_instruction_master_translator_avalon_universal_master_0_lock;                                  // Nios2_instruction_master_translator:uav_lock -> Nios2_instruction_master_agent:av_lock
	wire          nios2_instruction_master_translator_avalon_universal_master_0_write;                                 // Nios2_instruction_master_translator:uav_write -> Nios2_instruction_master_agent:av_write
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_writedata;                             // Nios2_instruction_master_translator:uav_writedata -> Nios2_instruction_master_agent:av_writedata
	wire    [2:0] nios2_instruction_master_translator_avalon_universal_master_0_burstcount;                            // Nios2_instruction_master_translator:uav_burstcount -> Nios2_instruction_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                               // rsp_mux_002:src_valid -> Nios2_instruction_master_agent:rp_valid
	wire  [111:0] rsp_mux_002_src_data;                                                                                // rsp_mux_002:src_data -> Nios2_instruction_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                               // Nios2_instruction_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [24:0] rsp_mux_002_src_channel;                                                                             // rsp_mux_002:src_channel -> Nios2_instruction_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                                       // rsp_mux_002:src_startofpacket -> Nios2_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                         // rsp_mux_002:src_endofpacket -> Nios2_instruction_master_agent:rp_endofpacket
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest;                         // JTAG_to_FPGA_Bridge_master_agent:av_waitrequest -> JTAG_to_FPGA_Bridge_master_translator:uav_waitrequest
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata;                            // JTAG_to_FPGA_Bridge_master_agent:av_readdata -> JTAG_to_FPGA_Bridge_master_translator:uav_readdata
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess;                         // JTAG_to_FPGA_Bridge_master_translator:uav_debugaccess -> JTAG_to_FPGA_Bridge_master_agent:av_debugaccess
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address;                             // JTAG_to_FPGA_Bridge_master_translator:uav_address -> JTAG_to_FPGA_Bridge_master_agent:av_address
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read;                                // JTAG_to_FPGA_Bridge_master_translator:uav_read -> JTAG_to_FPGA_Bridge_master_agent:av_read
	wire    [3:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable;                          // JTAG_to_FPGA_Bridge_master_translator:uav_byteenable -> JTAG_to_FPGA_Bridge_master_agent:av_byteenable
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid;                       // JTAG_to_FPGA_Bridge_master_agent:av_readdatavalid -> JTAG_to_FPGA_Bridge_master_translator:uav_readdatavalid
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock;                                // JTAG_to_FPGA_Bridge_master_translator:uav_lock -> JTAG_to_FPGA_Bridge_master_agent:av_lock
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write;                               // JTAG_to_FPGA_Bridge_master_translator:uav_write -> JTAG_to_FPGA_Bridge_master_agent:av_write
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata;                           // JTAG_to_FPGA_Bridge_master_translator:uav_writedata -> JTAG_to_FPGA_Bridge_master_agent:av_writedata
	wire    [2:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount;                          // JTAG_to_FPGA_Bridge_master_translator:uav_burstcount -> JTAG_to_FPGA_Bridge_master_agent:av_burstcount
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;                     // vga_subsystem_pixel_dma_master_agent:av_waitrequest -> vga_subsystem_pixel_dma_master_translator:uav_waitrequest
	wire   [15:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdata;                        // vga_subsystem_pixel_dma_master_agent:av_readdata -> vga_subsystem_pixel_dma_master_translator:uav_readdata
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;                     // vga_subsystem_pixel_dma_master_translator:uav_debugaccess -> vga_subsystem_pixel_dma_master_agent:av_debugaccess
	wire   [31:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_address;                         // vga_subsystem_pixel_dma_master_translator:uav_address -> vga_subsystem_pixel_dma_master_agent:av_address
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_read;                            // vga_subsystem_pixel_dma_master_translator:uav_read -> vga_subsystem_pixel_dma_master_agent:av_read
	wire    [1:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_byteenable;                      // vga_subsystem_pixel_dma_master_translator:uav_byteenable -> vga_subsystem_pixel_dma_master_agent:av_byteenable
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid;                   // vga_subsystem_pixel_dma_master_agent:av_readdatavalid -> vga_subsystem_pixel_dma_master_translator:uav_readdatavalid
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_lock;                            // vga_subsystem_pixel_dma_master_translator:uav_lock -> vga_subsystem_pixel_dma_master_agent:av_lock
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_write;                           // vga_subsystem_pixel_dma_master_translator:uav_write -> vga_subsystem_pixel_dma_master_agent:av_write
	wire   [15:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_writedata;                       // vga_subsystem_pixel_dma_master_translator:uav_writedata -> vga_subsystem_pixel_dma_master_agent:av_writedata
	wire    [1:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_burstcount;                      // vga_subsystem_pixel_dma_master_translator:uav_burstcount -> vga_subsystem_pixel_dma_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                               // rsp_mux_004:src_valid -> vga_subsystem_pixel_dma_master_agent:rp_valid
	wire   [93:0] rsp_mux_004_src_data;                                                                                // rsp_mux_004:src_data -> vga_subsystem_pixel_dma_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                               // vga_subsystem_pixel_dma_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [24:0] rsp_mux_004_src_channel;                                                                             // rsp_mux_004:src_channel -> vga_subsystem_pixel_dma_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                                       // rsp_mux_004:src_startofpacket -> vga_subsystem_pixel_dma_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                         // rsp_mux_004:src_endofpacket -> vga_subsystem_pixel_dma_master_agent:rp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                                          // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                                       // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                                       // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                                           // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                                        // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                              // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                                     // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                              // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                                         // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                             // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                                        // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                                      // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire   [94:0] sdram_s1_agent_rf_source_data;                                                                       // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                                      // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                              // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                                // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                                   // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire   [94:0] sdram_s1_agent_rsp_fifo_out_data;                                                                    // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                                   // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                           // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                             // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                                 // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                                  // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                                 // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdata;                                     // video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_readdata -> video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_readdata
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_waitrequest;                                  // video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_waitrequest -> video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_waitrequest
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_debugaccess;                                  // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_debugaccess -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_debugaccess
	wire   [31:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_address;                                      // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_address -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_address
	wire    [3:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_byteenable;                                   // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_byteenable -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_byteenable
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_read;                                         // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_read -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_read
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdatavalid;                                // video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_readdatavalid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_readdatavalid
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_lock;                                         // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_lock -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_lock
	wire   [31:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_writedata;                                    // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_writedata -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_writedata
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_write;                                        // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_write -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_write
	wire    [2:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_burstcount;                                   // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_burstcount -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_burstcount
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_valid;                                 // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_valid
	wire  [112:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_data;                                  // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_ready;                                 // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_ready
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_startofpacket;                         // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_endofpacket;                           // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_valid;                              // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_valid
	wire  [112:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_data;                               // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_ready;                              // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_ready
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_startofpacket;                      // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_endofpacket;                        // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_valid;                            // video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_src_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_data;                             // video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_src_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo:in_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_ready;                            // video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo:in_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                                               // cmd_mux_001:src_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_valid
	wire  [111:0] cmd_mux_001_src_data;                                                                                // cmd_mux_001:src_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                               // video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [24:0] cmd_mux_001_src_channel;                                                                             // cmd_mux_001:src_channel -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                                       // cmd_mux_001:src_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                         // cmd_mux_001:src_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                                       // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                                    // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                                    // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                                        // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                                     // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                                           // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                                  // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                           // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                                      // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                                          // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                                     // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                                   // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [112:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                                    // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                                   // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                           // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                             // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                                // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [112:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                                 // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                                // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                        // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                          // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                              // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                               // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                              // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                                               // cmd_mux_002:src_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [111:0] cmd_mux_002_src_data;                                                                                // cmd_mux_002:src_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                               // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [24:0] cmd_mux_002_src_channel;                                                                             // cmd_mux_002:src_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                       // cmd_mux_002:src_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                         // cmd_mux_002:src_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] vga_subsystem_char_buf_rgb_agent_m0_readdata;                                                        // vga_subsystem_char_buf_rgb_translator:uav_readdata -> vga_subsystem_char_buf_rgb_agent:m0_readdata
	wire          vga_subsystem_char_buf_rgb_agent_m0_waitrequest;                                                     // vga_subsystem_char_buf_rgb_translator:uav_waitrequest -> vga_subsystem_char_buf_rgb_agent:m0_waitrequest
	wire          vga_subsystem_char_buf_rgb_agent_m0_debugaccess;                                                     // vga_subsystem_char_buf_rgb_agent:m0_debugaccess -> vga_subsystem_char_buf_rgb_translator:uav_debugaccess
	wire   [31:0] vga_subsystem_char_buf_rgb_agent_m0_address;                                                         // vga_subsystem_char_buf_rgb_agent:m0_address -> vga_subsystem_char_buf_rgb_translator:uav_address
	wire    [3:0] vga_subsystem_char_buf_rgb_agent_m0_byteenable;                                                      // vga_subsystem_char_buf_rgb_agent:m0_byteenable -> vga_subsystem_char_buf_rgb_translator:uav_byteenable
	wire          vga_subsystem_char_buf_rgb_agent_m0_read;                                                            // vga_subsystem_char_buf_rgb_agent:m0_read -> vga_subsystem_char_buf_rgb_translator:uav_read
	wire          vga_subsystem_char_buf_rgb_agent_m0_readdatavalid;                                                   // vga_subsystem_char_buf_rgb_translator:uav_readdatavalid -> vga_subsystem_char_buf_rgb_agent:m0_readdatavalid
	wire          vga_subsystem_char_buf_rgb_agent_m0_lock;                                                            // vga_subsystem_char_buf_rgb_agent:m0_lock -> vga_subsystem_char_buf_rgb_translator:uav_lock
	wire   [31:0] vga_subsystem_char_buf_rgb_agent_m0_writedata;                                                       // vga_subsystem_char_buf_rgb_agent:m0_writedata -> vga_subsystem_char_buf_rgb_translator:uav_writedata
	wire          vga_subsystem_char_buf_rgb_agent_m0_write;                                                           // vga_subsystem_char_buf_rgb_agent:m0_write -> vga_subsystem_char_buf_rgb_translator:uav_write
	wire    [2:0] vga_subsystem_char_buf_rgb_agent_m0_burstcount;                                                      // vga_subsystem_char_buf_rgb_agent:m0_burstcount -> vga_subsystem_char_buf_rgb_translator:uav_burstcount
	wire          vga_subsystem_char_buf_rgb_agent_rf_source_valid;                                                    // vga_subsystem_char_buf_rgb_agent:rf_source_valid -> vga_subsystem_char_buf_rgb_agent_rsp_fifo:in_valid
	wire  [112:0] vga_subsystem_char_buf_rgb_agent_rf_source_data;                                                     // vga_subsystem_char_buf_rgb_agent:rf_source_data -> vga_subsystem_char_buf_rgb_agent_rsp_fifo:in_data
	wire          vga_subsystem_char_buf_rgb_agent_rf_source_ready;                                                    // vga_subsystem_char_buf_rgb_agent_rsp_fifo:in_ready -> vga_subsystem_char_buf_rgb_agent:rf_source_ready
	wire          vga_subsystem_char_buf_rgb_agent_rf_source_startofpacket;                                            // vga_subsystem_char_buf_rgb_agent:rf_source_startofpacket -> vga_subsystem_char_buf_rgb_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_char_buf_rgb_agent_rf_source_endofpacket;                                              // vga_subsystem_char_buf_rgb_agent:rf_source_endofpacket -> vga_subsystem_char_buf_rgb_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_valid;                                                 // vga_subsystem_char_buf_rgb_agent_rsp_fifo:out_valid -> vga_subsystem_char_buf_rgb_agent:rf_sink_valid
	wire  [112:0] vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_data;                                                  // vga_subsystem_char_buf_rgb_agent_rsp_fifo:out_data -> vga_subsystem_char_buf_rgb_agent:rf_sink_data
	wire          vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_ready;                                                 // vga_subsystem_char_buf_rgb_agent:rf_sink_ready -> vga_subsystem_char_buf_rgb_agent_rsp_fifo:out_ready
	wire          vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_startofpacket;                                         // vga_subsystem_char_buf_rgb_agent_rsp_fifo:out_startofpacket -> vga_subsystem_char_buf_rgb_agent:rf_sink_startofpacket
	wire          vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_endofpacket;                                           // vga_subsystem_char_buf_rgb_agent_rsp_fifo:out_endofpacket -> vga_subsystem_char_buf_rgb_agent:rf_sink_endofpacket
	wire          vga_subsystem_char_buf_rgb_agent_rdata_fifo_src_valid;                                               // vga_subsystem_char_buf_rgb_agent:rdata_fifo_src_valid -> vga_subsystem_char_buf_rgb_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_char_buf_rgb_agent_rdata_fifo_src_data;                                                // vga_subsystem_char_buf_rgb_agent:rdata_fifo_src_data -> vga_subsystem_char_buf_rgb_agent_rdata_fifo:in_data
	wire          vga_subsystem_char_buf_rgb_agent_rdata_fifo_src_ready;                                               // vga_subsystem_char_buf_rgb_agent_rdata_fifo:in_ready -> vga_subsystem_char_buf_rgb_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                                               // cmd_mux_003:src_valid -> vga_subsystem_char_buf_rgb_agent:cp_valid
	wire  [111:0] cmd_mux_003_src_data;                                                                                // cmd_mux_003:src_data -> vga_subsystem_char_buf_rgb_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                               // vga_subsystem_char_buf_rgb_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [24:0] cmd_mux_003_src_channel;                                                                             // cmd_mux_003:src_channel -> vga_subsystem_char_buf_rgb_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                       // cmd_mux_003:src_startofpacket -> vga_subsystem_char_buf_rgb_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                         // cmd_mux_003:src_endofpacket -> vga_subsystem_char_buf_rgb_agent:cp_endofpacket
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_readdata;                                           // vga_subsystem_char_buffer_control_slave_translator:uav_readdata -> vga_subsystem_char_buffer_control_slave_agent:m0_readdata
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest;                                        // vga_subsystem_char_buffer_control_slave_translator:uav_waitrequest -> vga_subsystem_char_buffer_control_slave_agent:m0_waitrequest
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess;                                        // vga_subsystem_char_buffer_control_slave_agent:m0_debugaccess -> vga_subsystem_char_buffer_control_slave_translator:uav_debugaccess
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_address;                                            // vga_subsystem_char_buffer_control_slave_agent:m0_address -> vga_subsystem_char_buffer_control_slave_translator:uav_address
	wire    [3:0] vga_subsystem_char_buffer_control_slave_agent_m0_byteenable;                                         // vga_subsystem_char_buffer_control_slave_agent:m0_byteenable -> vga_subsystem_char_buffer_control_slave_translator:uav_byteenable
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_read;                                               // vga_subsystem_char_buffer_control_slave_agent:m0_read -> vga_subsystem_char_buffer_control_slave_translator:uav_read
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid;                                      // vga_subsystem_char_buffer_control_slave_translator:uav_readdatavalid -> vga_subsystem_char_buffer_control_slave_agent:m0_readdatavalid
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_lock;                                               // vga_subsystem_char_buffer_control_slave_agent:m0_lock -> vga_subsystem_char_buffer_control_slave_translator:uav_lock
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_writedata;                                          // vga_subsystem_char_buffer_control_slave_agent:m0_writedata -> vga_subsystem_char_buffer_control_slave_translator:uav_writedata
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_write;                                              // vga_subsystem_char_buffer_control_slave_agent:m0_write -> vga_subsystem_char_buffer_control_slave_translator:uav_write
	wire    [2:0] vga_subsystem_char_buffer_control_slave_agent_m0_burstcount;                                         // vga_subsystem_char_buffer_control_slave_agent:m0_burstcount -> vga_subsystem_char_buffer_control_slave_translator:uav_burstcount
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_valid;                                       // vga_subsystem_char_buffer_control_slave_agent:rf_source_valid -> vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:in_valid
	wire  [112:0] vga_subsystem_char_buffer_control_slave_agent_rf_source_data;                                        // vga_subsystem_char_buffer_control_slave_agent:rf_source_data -> vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_ready;                                       // vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:in_ready -> vga_subsystem_char_buffer_control_slave_agent:rf_source_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket;                               // vga_subsystem_char_buffer_control_slave_agent:rf_source_startofpacket -> vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket;                                 // vga_subsystem_char_buffer_control_slave_agent:rf_source_endofpacket -> vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid;                                    // vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:out_valid -> vga_subsystem_char_buffer_control_slave_agent:rf_sink_valid
	wire  [112:0] vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data;                                     // vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:out_data -> vga_subsystem_char_buffer_control_slave_agent:rf_sink_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready;                                    // vga_subsystem_char_buffer_control_slave_agent:rf_sink_ready -> vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket;                            // vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:out_startofpacket -> vga_subsystem_char_buffer_control_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket;                              // vga_subsystem_char_buffer_control_slave_agent_rsp_fifo:out_endofpacket -> vga_subsystem_char_buffer_control_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid;                                  // vga_subsystem_char_buffer_control_slave_agent:rdata_fifo_src_valid -> vga_subsystem_char_buffer_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data;                                   // vga_subsystem_char_buffer_control_slave_agent:rdata_fifo_src_data -> vga_subsystem_char_buffer_control_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready;                                  // vga_subsystem_char_buffer_control_slave_agent_rdata_fifo:in_ready -> vga_subsystem_char_buffer_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                                               // cmd_mux_004:src_valid -> vga_subsystem_char_buffer_control_slave_agent:cp_valid
	wire  [111:0] cmd_mux_004_src_data;                                                                                // cmd_mux_004:src_data -> vga_subsystem_char_buffer_control_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                               // vga_subsystem_char_buffer_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [24:0] cmd_mux_004_src_channel;                                                                             // cmd_mux_004:src_channel -> vga_subsystem_char_buffer_control_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                       // cmd_mux_004:src_startofpacket -> vga_subsystem_char_buffer_control_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                         // cmd_mux_004:src_endofpacket -> vga_subsystem_char_buffer_control_slave_agent:cp_endofpacket
	wire   [31:0] vga_subsystem_char_buffer_slave_agent_m0_readdata;                                                   // vga_subsystem_char_buffer_slave_translator:uav_readdata -> vga_subsystem_char_buffer_slave_agent:m0_readdata
	wire          vga_subsystem_char_buffer_slave_agent_m0_waitrequest;                                                // vga_subsystem_char_buffer_slave_translator:uav_waitrequest -> vga_subsystem_char_buffer_slave_agent:m0_waitrequest
	wire          vga_subsystem_char_buffer_slave_agent_m0_debugaccess;                                                // vga_subsystem_char_buffer_slave_agent:m0_debugaccess -> vga_subsystem_char_buffer_slave_translator:uav_debugaccess
	wire   [31:0] vga_subsystem_char_buffer_slave_agent_m0_address;                                                    // vga_subsystem_char_buffer_slave_agent:m0_address -> vga_subsystem_char_buffer_slave_translator:uav_address
	wire    [3:0] vga_subsystem_char_buffer_slave_agent_m0_byteenable;                                                 // vga_subsystem_char_buffer_slave_agent:m0_byteenable -> vga_subsystem_char_buffer_slave_translator:uav_byteenable
	wire          vga_subsystem_char_buffer_slave_agent_m0_read;                                                       // vga_subsystem_char_buffer_slave_agent:m0_read -> vga_subsystem_char_buffer_slave_translator:uav_read
	wire          vga_subsystem_char_buffer_slave_agent_m0_readdatavalid;                                              // vga_subsystem_char_buffer_slave_translator:uav_readdatavalid -> vga_subsystem_char_buffer_slave_agent:m0_readdatavalid
	wire          vga_subsystem_char_buffer_slave_agent_m0_lock;                                                       // vga_subsystem_char_buffer_slave_agent:m0_lock -> vga_subsystem_char_buffer_slave_translator:uav_lock
	wire   [31:0] vga_subsystem_char_buffer_slave_agent_m0_writedata;                                                  // vga_subsystem_char_buffer_slave_agent:m0_writedata -> vga_subsystem_char_buffer_slave_translator:uav_writedata
	wire          vga_subsystem_char_buffer_slave_agent_m0_write;                                                      // vga_subsystem_char_buffer_slave_agent:m0_write -> vga_subsystem_char_buffer_slave_translator:uav_write
	wire    [2:0] vga_subsystem_char_buffer_slave_agent_m0_burstcount;                                                 // vga_subsystem_char_buffer_slave_agent:m0_burstcount -> vga_subsystem_char_buffer_slave_translator:uav_burstcount
	wire          vga_subsystem_char_buffer_slave_agent_rf_source_valid;                                               // vga_subsystem_char_buffer_slave_agent:rf_source_valid -> vga_subsystem_char_buffer_slave_agent_rsp_fifo:in_valid
	wire  [112:0] vga_subsystem_char_buffer_slave_agent_rf_source_data;                                                // vga_subsystem_char_buffer_slave_agent:rf_source_data -> vga_subsystem_char_buffer_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_char_buffer_slave_agent_rf_source_ready;                                               // vga_subsystem_char_buffer_slave_agent_rsp_fifo:in_ready -> vga_subsystem_char_buffer_slave_agent:rf_source_ready
	wire          vga_subsystem_char_buffer_slave_agent_rf_source_startofpacket;                                       // vga_subsystem_char_buffer_slave_agent:rf_source_startofpacket -> vga_subsystem_char_buffer_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rf_source_endofpacket;                                         // vga_subsystem_char_buffer_slave_agent:rf_source_endofpacket -> vga_subsystem_char_buffer_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_valid;                                            // vga_subsystem_char_buffer_slave_agent_rsp_fifo:out_valid -> vga_subsystem_char_buffer_slave_agent:rf_sink_valid
	wire  [112:0] vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_data;                                             // vga_subsystem_char_buffer_slave_agent_rsp_fifo:out_data -> vga_subsystem_char_buffer_slave_agent:rf_sink_data
	wire          vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_ready;                                            // vga_subsystem_char_buffer_slave_agent:rf_sink_ready -> vga_subsystem_char_buffer_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_startofpacket;                                    // vga_subsystem_char_buffer_slave_agent_rsp_fifo:out_startofpacket -> vga_subsystem_char_buffer_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_endofpacket;                                      // vga_subsystem_char_buffer_slave_agent_rsp_fifo:out_endofpacket -> vga_subsystem_char_buffer_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_valid;                                          // vga_subsystem_char_buffer_slave_agent:rdata_fifo_src_valid -> vga_subsystem_char_buffer_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_data;                                           // vga_subsystem_char_buffer_slave_agent:rdata_fifo_src_data -> vga_subsystem_char_buffer_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_ready;                                          // vga_subsystem_char_buffer_slave_agent_rdata_fifo:in_ready -> vga_subsystem_char_buffer_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                                               // cmd_mux_005:src_valid -> vga_subsystem_char_buffer_slave_agent:cp_valid
	wire  [111:0] cmd_mux_005_src_data;                                                                                // cmd_mux_005:src_data -> vga_subsystem_char_buffer_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                               // vga_subsystem_char_buffer_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [24:0] cmd_mux_005_src_channel;                                                                             // cmd_mux_005:src_channel -> vga_subsystem_char_buffer_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                       // cmd_mux_005:src_startofpacket -> vga_subsystem_char_buffer_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                         // cmd_mux_005:src_endofpacket -> vga_subsystem_char_buffer_slave_agent:cp_endofpacket
	wire   [31:0] gyro_i2c_csr_agent_m0_readdata;                                                                      // gyro_i2c_csr_translator:uav_readdata -> gyro_i2c_csr_agent:m0_readdata
	wire          gyro_i2c_csr_agent_m0_waitrequest;                                                                   // gyro_i2c_csr_translator:uav_waitrequest -> gyro_i2c_csr_agent:m0_waitrequest
	wire          gyro_i2c_csr_agent_m0_debugaccess;                                                                   // gyro_i2c_csr_agent:m0_debugaccess -> gyro_i2c_csr_translator:uav_debugaccess
	wire   [31:0] gyro_i2c_csr_agent_m0_address;                                                                       // gyro_i2c_csr_agent:m0_address -> gyro_i2c_csr_translator:uav_address
	wire    [3:0] gyro_i2c_csr_agent_m0_byteenable;                                                                    // gyro_i2c_csr_agent:m0_byteenable -> gyro_i2c_csr_translator:uav_byteenable
	wire          gyro_i2c_csr_agent_m0_read;                                                                          // gyro_i2c_csr_agent:m0_read -> gyro_i2c_csr_translator:uav_read
	wire          gyro_i2c_csr_agent_m0_readdatavalid;                                                                 // gyro_i2c_csr_translator:uav_readdatavalid -> gyro_i2c_csr_agent:m0_readdatavalid
	wire          gyro_i2c_csr_agent_m0_lock;                                                                          // gyro_i2c_csr_agent:m0_lock -> gyro_i2c_csr_translator:uav_lock
	wire   [31:0] gyro_i2c_csr_agent_m0_writedata;                                                                     // gyro_i2c_csr_agent:m0_writedata -> gyro_i2c_csr_translator:uav_writedata
	wire          gyro_i2c_csr_agent_m0_write;                                                                         // gyro_i2c_csr_agent:m0_write -> gyro_i2c_csr_translator:uav_write
	wire    [2:0] gyro_i2c_csr_agent_m0_burstcount;                                                                    // gyro_i2c_csr_agent:m0_burstcount -> gyro_i2c_csr_translator:uav_burstcount
	wire          gyro_i2c_csr_agent_rf_source_valid;                                                                  // gyro_i2c_csr_agent:rf_source_valid -> gyro_i2c_csr_agent_rsp_fifo:in_valid
	wire  [112:0] gyro_i2c_csr_agent_rf_source_data;                                                                   // gyro_i2c_csr_agent:rf_source_data -> gyro_i2c_csr_agent_rsp_fifo:in_data
	wire          gyro_i2c_csr_agent_rf_source_ready;                                                                  // gyro_i2c_csr_agent_rsp_fifo:in_ready -> gyro_i2c_csr_agent:rf_source_ready
	wire          gyro_i2c_csr_agent_rf_source_startofpacket;                                                          // gyro_i2c_csr_agent:rf_source_startofpacket -> gyro_i2c_csr_agent_rsp_fifo:in_startofpacket
	wire          gyro_i2c_csr_agent_rf_source_endofpacket;                                                            // gyro_i2c_csr_agent:rf_source_endofpacket -> gyro_i2c_csr_agent_rsp_fifo:in_endofpacket
	wire          gyro_i2c_csr_agent_rsp_fifo_out_valid;                                                               // gyro_i2c_csr_agent_rsp_fifo:out_valid -> gyro_i2c_csr_agent:rf_sink_valid
	wire  [112:0] gyro_i2c_csr_agent_rsp_fifo_out_data;                                                                // gyro_i2c_csr_agent_rsp_fifo:out_data -> gyro_i2c_csr_agent:rf_sink_data
	wire          gyro_i2c_csr_agent_rsp_fifo_out_ready;                                                               // gyro_i2c_csr_agent:rf_sink_ready -> gyro_i2c_csr_agent_rsp_fifo:out_ready
	wire          gyro_i2c_csr_agent_rsp_fifo_out_startofpacket;                                                       // gyro_i2c_csr_agent_rsp_fifo:out_startofpacket -> gyro_i2c_csr_agent:rf_sink_startofpacket
	wire          gyro_i2c_csr_agent_rsp_fifo_out_endofpacket;                                                         // gyro_i2c_csr_agent_rsp_fifo:out_endofpacket -> gyro_i2c_csr_agent:rf_sink_endofpacket
	wire          gyro_i2c_csr_agent_rdata_fifo_src_valid;                                                             // gyro_i2c_csr_agent:rdata_fifo_src_valid -> gyro_i2c_csr_agent_rdata_fifo:in_valid
	wire   [33:0] gyro_i2c_csr_agent_rdata_fifo_src_data;                                                              // gyro_i2c_csr_agent:rdata_fifo_src_data -> gyro_i2c_csr_agent_rdata_fifo:in_data
	wire          gyro_i2c_csr_agent_rdata_fifo_src_ready;                                                             // gyro_i2c_csr_agent_rdata_fifo:in_ready -> gyro_i2c_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                                               // cmd_mux_006:src_valid -> gyro_i2c_csr_agent:cp_valid
	wire  [111:0] cmd_mux_006_src_data;                                                                                // cmd_mux_006:src_data -> gyro_i2c_csr_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                               // gyro_i2c_csr_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [24:0] cmd_mux_006_src_channel;                                                                             // cmd_mux_006:src_channel -> gyro_i2c_csr_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                       // cmd_mux_006:src_startofpacket -> gyro_i2c_csr_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                         // cmd_mux_006:src_endofpacket -> gyro_i2c_csr_agent:cp_endofpacket
	wire   [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_readdata;                                             // vga_subsystem_pixel_dma_control_slave_translator:uav_readdata -> vga_subsystem_pixel_dma_control_slave_agent:m0_readdata
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest;                                          // vga_subsystem_pixel_dma_control_slave_translator:uav_waitrequest -> vga_subsystem_pixel_dma_control_slave_agent:m0_waitrequest
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess;                                          // vga_subsystem_pixel_dma_control_slave_agent:m0_debugaccess -> vga_subsystem_pixel_dma_control_slave_translator:uav_debugaccess
	wire   [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_address;                                              // vga_subsystem_pixel_dma_control_slave_agent:m0_address -> vga_subsystem_pixel_dma_control_slave_translator:uav_address
	wire    [3:0] vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable;                                           // vga_subsystem_pixel_dma_control_slave_agent:m0_byteenable -> vga_subsystem_pixel_dma_control_slave_translator:uav_byteenable
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_read;                                                 // vga_subsystem_pixel_dma_control_slave_agent:m0_read -> vga_subsystem_pixel_dma_control_slave_translator:uav_read
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid;                                        // vga_subsystem_pixel_dma_control_slave_translator:uav_readdatavalid -> vga_subsystem_pixel_dma_control_slave_agent:m0_readdatavalid
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_lock;                                                 // vga_subsystem_pixel_dma_control_slave_agent:m0_lock -> vga_subsystem_pixel_dma_control_slave_translator:uav_lock
	wire   [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_writedata;                                            // vga_subsystem_pixel_dma_control_slave_agent:m0_writedata -> vga_subsystem_pixel_dma_control_slave_translator:uav_writedata
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_write;                                                // vga_subsystem_pixel_dma_control_slave_agent:m0_write -> vga_subsystem_pixel_dma_control_slave_translator:uav_write
	wire    [2:0] vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount;                                           // vga_subsystem_pixel_dma_control_slave_agent:m0_burstcount -> vga_subsystem_pixel_dma_control_slave_translator:uav_burstcount
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid;                                         // vga_subsystem_pixel_dma_control_slave_agent:rf_source_valid -> vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_valid
	wire  [112:0] vga_subsystem_pixel_dma_control_slave_agent_rf_source_data;                                          // vga_subsystem_pixel_dma_control_slave_agent:rf_source_data -> vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready;                                         // vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_ready -> vga_subsystem_pixel_dma_control_slave_agent:rf_source_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket;                                 // vga_subsystem_pixel_dma_control_slave_agent:rf_source_startofpacket -> vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket;                                   // vga_subsystem_pixel_dma_control_slave_agent:rf_source_endofpacket -> vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid;                                      // vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_valid -> vga_subsystem_pixel_dma_control_slave_agent:rf_sink_valid
	wire  [112:0] vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data;                                       // vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_data -> vga_subsystem_pixel_dma_control_slave_agent:rf_sink_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready;                                      // vga_subsystem_pixel_dma_control_slave_agent:rf_sink_ready -> vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket;                              // vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_startofpacket -> vga_subsystem_pixel_dma_control_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket;                                // vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_endofpacket -> vga_subsystem_pixel_dma_control_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid;                                    // vga_subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_valid -> vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data;                                     // vga_subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_data -> vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready;                                    // vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo:in_ready -> vga_subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                                               // cmd_mux_007:src_valid -> vga_subsystem_pixel_dma_control_slave_agent:cp_valid
	wire  [111:0] cmd_mux_007_src_data;                                                                                // cmd_mux_007:src_data -> vga_subsystem_pixel_dma_control_slave_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                               // vga_subsystem_pixel_dma_control_slave_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [24:0] cmd_mux_007_src_channel;                                                                             // cmd_mux_007:src_channel -> vga_subsystem_pixel_dma_control_slave_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                       // cmd_mux_007:src_startofpacket -> vga_subsystem_pixel_dma_control_slave_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                         // cmd_mux_007:src_endofpacket -> vga_subsystem_pixel_dma_control_slave_agent:cp_endofpacket
	wire   [31:0] adc_pll_pll_slave_agent_m0_readdata;                                                                 // adc_pll_pll_slave_translator:uav_readdata -> adc_pll_pll_slave_agent:m0_readdata
	wire          adc_pll_pll_slave_agent_m0_waitrequest;                                                              // adc_pll_pll_slave_translator:uav_waitrequest -> adc_pll_pll_slave_agent:m0_waitrequest
	wire          adc_pll_pll_slave_agent_m0_debugaccess;                                                              // adc_pll_pll_slave_agent:m0_debugaccess -> adc_pll_pll_slave_translator:uav_debugaccess
	wire   [31:0] adc_pll_pll_slave_agent_m0_address;                                                                  // adc_pll_pll_slave_agent:m0_address -> adc_pll_pll_slave_translator:uav_address
	wire    [3:0] adc_pll_pll_slave_agent_m0_byteenable;                                                               // adc_pll_pll_slave_agent:m0_byteenable -> adc_pll_pll_slave_translator:uav_byteenable
	wire          adc_pll_pll_slave_agent_m0_read;                                                                     // adc_pll_pll_slave_agent:m0_read -> adc_pll_pll_slave_translator:uav_read
	wire          adc_pll_pll_slave_agent_m0_readdatavalid;                                                            // adc_pll_pll_slave_translator:uav_readdatavalid -> adc_pll_pll_slave_agent:m0_readdatavalid
	wire          adc_pll_pll_slave_agent_m0_lock;                                                                     // adc_pll_pll_slave_agent:m0_lock -> adc_pll_pll_slave_translator:uav_lock
	wire   [31:0] adc_pll_pll_slave_agent_m0_writedata;                                                                // adc_pll_pll_slave_agent:m0_writedata -> adc_pll_pll_slave_translator:uav_writedata
	wire          adc_pll_pll_slave_agent_m0_write;                                                                    // adc_pll_pll_slave_agent:m0_write -> adc_pll_pll_slave_translator:uav_write
	wire    [2:0] adc_pll_pll_slave_agent_m0_burstcount;                                                               // adc_pll_pll_slave_agent:m0_burstcount -> adc_pll_pll_slave_translator:uav_burstcount
	wire          adc_pll_pll_slave_agent_rf_source_valid;                                                             // adc_pll_pll_slave_agent:rf_source_valid -> adc_pll_pll_slave_agent_rsp_fifo:in_valid
	wire  [112:0] adc_pll_pll_slave_agent_rf_source_data;                                                              // adc_pll_pll_slave_agent:rf_source_data -> adc_pll_pll_slave_agent_rsp_fifo:in_data
	wire          adc_pll_pll_slave_agent_rf_source_ready;                                                             // adc_pll_pll_slave_agent_rsp_fifo:in_ready -> adc_pll_pll_slave_agent:rf_source_ready
	wire          adc_pll_pll_slave_agent_rf_source_startofpacket;                                                     // adc_pll_pll_slave_agent:rf_source_startofpacket -> adc_pll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          adc_pll_pll_slave_agent_rf_source_endofpacket;                                                       // adc_pll_pll_slave_agent:rf_source_endofpacket -> adc_pll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          adc_pll_pll_slave_agent_rsp_fifo_out_valid;                                                          // adc_pll_pll_slave_agent_rsp_fifo:out_valid -> adc_pll_pll_slave_agent:rf_sink_valid
	wire  [112:0] adc_pll_pll_slave_agent_rsp_fifo_out_data;                                                           // adc_pll_pll_slave_agent_rsp_fifo:out_data -> adc_pll_pll_slave_agent:rf_sink_data
	wire          adc_pll_pll_slave_agent_rsp_fifo_out_ready;                                                          // adc_pll_pll_slave_agent:rf_sink_ready -> adc_pll_pll_slave_agent_rsp_fifo:out_ready
	wire          adc_pll_pll_slave_agent_rsp_fifo_out_startofpacket;                                                  // adc_pll_pll_slave_agent_rsp_fifo:out_startofpacket -> adc_pll_pll_slave_agent:rf_sink_startofpacket
	wire          adc_pll_pll_slave_agent_rsp_fifo_out_endofpacket;                                                    // adc_pll_pll_slave_agent_rsp_fifo:out_endofpacket -> adc_pll_pll_slave_agent:rf_sink_endofpacket
	wire          adc_pll_pll_slave_agent_rdata_fifo_src_valid;                                                        // adc_pll_pll_slave_agent:rdata_fifo_src_valid -> adc_pll_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] adc_pll_pll_slave_agent_rdata_fifo_src_data;                                                         // adc_pll_pll_slave_agent:rdata_fifo_src_data -> adc_pll_pll_slave_agent_rdata_fifo:in_data
	wire          adc_pll_pll_slave_agent_rdata_fifo_src_ready;                                                        // adc_pll_pll_slave_agent_rdata_fifo:in_ready -> adc_pll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                                                               // cmd_mux_008:src_valid -> adc_pll_pll_slave_agent:cp_valid
	wire  [111:0] cmd_mux_008_src_data;                                                                                // cmd_mux_008:src_data -> adc_pll_pll_slave_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                               // adc_pll_pll_slave_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [24:0] cmd_mux_008_src_channel;                                                                             // cmd_mux_008:src_channel -> adc_pll_pll_slave_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                                       // cmd_mux_008:src_startofpacket -> adc_pll_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                         // cmd_mux_008:src_endofpacket -> adc_pll_pll_slave_agent:cp_endofpacket
	wire   [31:0] vga_subsystem_rgb_slave_agent_m0_readdata;                                                           // vga_subsystem_rgb_slave_translator:uav_readdata -> vga_subsystem_rgb_slave_agent:m0_readdata
	wire          vga_subsystem_rgb_slave_agent_m0_waitrequest;                                                        // vga_subsystem_rgb_slave_translator:uav_waitrequest -> vga_subsystem_rgb_slave_agent:m0_waitrequest
	wire          vga_subsystem_rgb_slave_agent_m0_debugaccess;                                                        // vga_subsystem_rgb_slave_agent:m0_debugaccess -> vga_subsystem_rgb_slave_translator:uav_debugaccess
	wire   [31:0] vga_subsystem_rgb_slave_agent_m0_address;                                                            // vga_subsystem_rgb_slave_agent:m0_address -> vga_subsystem_rgb_slave_translator:uav_address
	wire    [3:0] vga_subsystem_rgb_slave_agent_m0_byteenable;                                                         // vga_subsystem_rgb_slave_agent:m0_byteenable -> vga_subsystem_rgb_slave_translator:uav_byteenable
	wire          vga_subsystem_rgb_slave_agent_m0_read;                                                               // vga_subsystem_rgb_slave_agent:m0_read -> vga_subsystem_rgb_slave_translator:uav_read
	wire          vga_subsystem_rgb_slave_agent_m0_readdatavalid;                                                      // vga_subsystem_rgb_slave_translator:uav_readdatavalid -> vga_subsystem_rgb_slave_agent:m0_readdatavalid
	wire          vga_subsystem_rgb_slave_agent_m0_lock;                                                               // vga_subsystem_rgb_slave_agent:m0_lock -> vga_subsystem_rgb_slave_translator:uav_lock
	wire   [31:0] vga_subsystem_rgb_slave_agent_m0_writedata;                                                          // vga_subsystem_rgb_slave_agent:m0_writedata -> vga_subsystem_rgb_slave_translator:uav_writedata
	wire          vga_subsystem_rgb_slave_agent_m0_write;                                                              // vga_subsystem_rgb_slave_agent:m0_write -> vga_subsystem_rgb_slave_translator:uav_write
	wire    [2:0] vga_subsystem_rgb_slave_agent_m0_burstcount;                                                         // vga_subsystem_rgb_slave_agent:m0_burstcount -> vga_subsystem_rgb_slave_translator:uav_burstcount
	wire          vga_subsystem_rgb_slave_agent_rf_source_valid;                                                       // vga_subsystem_rgb_slave_agent:rf_source_valid -> vga_subsystem_rgb_slave_agent_rsp_fifo:in_valid
	wire  [112:0] vga_subsystem_rgb_slave_agent_rf_source_data;                                                        // vga_subsystem_rgb_slave_agent:rf_source_data -> vga_subsystem_rgb_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_rgb_slave_agent_rf_source_ready;                                                       // vga_subsystem_rgb_slave_agent_rsp_fifo:in_ready -> vga_subsystem_rgb_slave_agent:rf_source_ready
	wire          vga_subsystem_rgb_slave_agent_rf_source_startofpacket;                                               // vga_subsystem_rgb_slave_agent:rf_source_startofpacket -> vga_subsystem_rgb_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_rgb_slave_agent_rf_source_endofpacket;                                                 // vga_subsystem_rgb_slave_agent:rf_source_endofpacket -> vga_subsystem_rgb_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_rgb_slave_agent_rsp_fifo_out_valid;                                                    // vga_subsystem_rgb_slave_agent_rsp_fifo:out_valid -> vga_subsystem_rgb_slave_agent:rf_sink_valid
	wire  [112:0] vga_subsystem_rgb_slave_agent_rsp_fifo_out_data;                                                     // vga_subsystem_rgb_slave_agent_rsp_fifo:out_data -> vga_subsystem_rgb_slave_agent:rf_sink_data
	wire          vga_subsystem_rgb_slave_agent_rsp_fifo_out_ready;                                                    // vga_subsystem_rgb_slave_agent:rf_sink_ready -> vga_subsystem_rgb_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_rgb_slave_agent_rsp_fifo_out_startofpacket;                                            // vga_subsystem_rgb_slave_agent_rsp_fifo:out_startofpacket -> vga_subsystem_rgb_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_rgb_slave_agent_rsp_fifo_out_endofpacket;                                              // vga_subsystem_rgb_slave_agent_rsp_fifo:out_endofpacket -> vga_subsystem_rgb_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_rgb_slave_agent_rdata_fifo_src_valid;                                                  // vga_subsystem_rgb_slave_agent:rdata_fifo_src_valid -> vga_subsystem_rgb_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_rgb_slave_agent_rdata_fifo_src_data;                                                   // vga_subsystem_rgb_slave_agent:rdata_fifo_src_data -> vga_subsystem_rgb_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_rgb_slave_agent_rdata_fifo_src_ready;                                                  // vga_subsystem_rgb_slave_agent_rdata_fifo:in_ready -> vga_subsystem_rgb_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                                               // cmd_mux_009:src_valid -> vga_subsystem_rgb_slave_agent:cp_valid
	wire  [111:0] cmd_mux_009_src_data;                                                                                // cmd_mux_009:src_data -> vga_subsystem_rgb_slave_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                               // vga_subsystem_rgb_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [24:0] cmd_mux_009_src_channel;                                                                             // cmd_mux_009:src_channel -> vga_subsystem_rgb_slave_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                                       // cmd_mux_009:src_startofpacket -> vga_subsystem_rgb_slave_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                         // cmd_mux_009:src_endofpacket -> vga_subsystem_rgb_slave_agent:cp_endofpacket
	wire   [31:0] leds_s1_agent_m0_readdata;                                                                           // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                                                        // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                                                        // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [31:0] leds_s1_agent_m0_address;                                                                            // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                                         // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                                                               // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                                                      // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                                                               // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                                                          // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                                                              // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                                         // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                                                       // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [112:0] leds_s1_agent_rf_source_data;                                                                        // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                                                       // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                                                               // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                                                                 // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                                                    // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [112:0] leds_s1_agent_rsp_fifo_out_data;                                                                     // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                                                    // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                                            // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                                              // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire          leds_s1_agent_rdata_fifo_src_valid;                                                                  // LEDs_s1_agent:rdata_fifo_src_valid -> LEDs_s1_agent_rdata_fifo:in_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                                                   // LEDs_s1_agent:rdata_fifo_src_data -> LEDs_s1_agent_rdata_fifo:in_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                                                  // LEDs_s1_agent_rdata_fifo:in_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_valid;                                                                               // cmd_mux_010:src_valid -> LEDs_s1_agent:cp_valid
	wire  [111:0] cmd_mux_010_src_data;                                                                                // cmd_mux_010:src_data -> LEDs_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                               // LEDs_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [24:0] cmd_mux_010_src_channel;                                                                             // cmd_mux_010:src_channel -> LEDs_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                                       // cmd_mux_010:src_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                         // cmd_mux_010:src_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire   [31:0] hex3_hex0_s1_agent_m0_readdata;                                                                      // HEX3_HEX0_s1_translator:uav_readdata -> HEX3_HEX0_s1_agent:m0_readdata
	wire          hex3_hex0_s1_agent_m0_waitrequest;                                                                   // HEX3_HEX0_s1_translator:uav_waitrequest -> HEX3_HEX0_s1_agent:m0_waitrequest
	wire          hex3_hex0_s1_agent_m0_debugaccess;                                                                   // HEX3_HEX0_s1_agent:m0_debugaccess -> HEX3_HEX0_s1_translator:uav_debugaccess
	wire   [31:0] hex3_hex0_s1_agent_m0_address;                                                                       // HEX3_HEX0_s1_agent:m0_address -> HEX3_HEX0_s1_translator:uav_address
	wire    [3:0] hex3_hex0_s1_agent_m0_byteenable;                                                                    // HEX3_HEX0_s1_agent:m0_byteenable -> HEX3_HEX0_s1_translator:uav_byteenable
	wire          hex3_hex0_s1_agent_m0_read;                                                                          // HEX3_HEX0_s1_agent:m0_read -> HEX3_HEX0_s1_translator:uav_read
	wire          hex3_hex0_s1_agent_m0_readdatavalid;                                                                 // HEX3_HEX0_s1_translator:uav_readdatavalid -> HEX3_HEX0_s1_agent:m0_readdatavalid
	wire          hex3_hex0_s1_agent_m0_lock;                                                                          // HEX3_HEX0_s1_agent:m0_lock -> HEX3_HEX0_s1_translator:uav_lock
	wire   [31:0] hex3_hex0_s1_agent_m0_writedata;                                                                     // HEX3_HEX0_s1_agent:m0_writedata -> HEX3_HEX0_s1_translator:uav_writedata
	wire          hex3_hex0_s1_agent_m0_write;                                                                         // HEX3_HEX0_s1_agent:m0_write -> HEX3_HEX0_s1_translator:uav_write
	wire    [2:0] hex3_hex0_s1_agent_m0_burstcount;                                                                    // HEX3_HEX0_s1_agent:m0_burstcount -> HEX3_HEX0_s1_translator:uav_burstcount
	wire          hex3_hex0_s1_agent_rf_source_valid;                                                                  // HEX3_HEX0_s1_agent:rf_source_valid -> HEX3_HEX0_s1_agent_rsp_fifo:in_valid
	wire  [112:0] hex3_hex0_s1_agent_rf_source_data;                                                                   // HEX3_HEX0_s1_agent:rf_source_data -> HEX3_HEX0_s1_agent_rsp_fifo:in_data
	wire          hex3_hex0_s1_agent_rf_source_ready;                                                                  // HEX3_HEX0_s1_agent_rsp_fifo:in_ready -> HEX3_HEX0_s1_agent:rf_source_ready
	wire          hex3_hex0_s1_agent_rf_source_startofpacket;                                                          // HEX3_HEX0_s1_agent:rf_source_startofpacket -> HEX3_HEX0_s1_agent_rsp_fifo:in_startofpacket
	wire          hex3_hex0_s1_agent_rf_source_endofpacket;                                                            // HEX3_HEX0_s1_agent:rf_source_endofpacket -> HEX3_HEX0_s1_agent_rsp_fifo:in_endofpacket
	wire          hex3_hex0_s1_agent_rsp_fifo_out_valid;                                                               // HEX3_HEX0_s1_agent_rsp_fifo:out_valid -> HEX3_HEX0_s1_agent:rf_sink_valid
	wire  [112:0] hex3_hex0_s1_agent_rsp_fifo_out_data;                                                                // HEX3_HEX0_s1_agent_rsp_fifo:out_data -> HEX3_HEX0_s1_agent:rf_sink_data
	wire          hex3_hex0_s1_agent_rsp_fifo_out_ready;                                                               // HEX3_HEX0_s1_agent:rf_sink_ready -> HEX3_HEX0_s1_agent_rsp_fifo:out_ready
	wire          hex3_hex0_s1_agent_rsp_fifo_out_startofpacket;                                                       // HEX3_HEX0_s1_agent_rsp_fifo:out_startofpacket -> HEX3_HEX0_s1_agent:rf_sink_startofpacket
	wire          hex3_hex0_s1_agent_rsp_fifo_out_endofpacket;                                                         // HEX3_HEX0_s1_agent_rsp_fifo:out_endofpacket -> HEX3_HEX0_s1_agent:rf_sink_endofpacket
	wire          hex3_hex0_s1_agent_rdata_fifo_src_valid;                                                             // HEX3_HEX0_s1_agent:rdata_fifo_src_valid -> HEX3_HEX0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex3_hex0_s1_agent_rdata_fifo_src_data;                                                              // HEX3_HEX0_s1_agent:rdata_fifo_src_data -> HEX3_HEX0_s1_agent_rdata_fifo:in_data
	wire          hex3_hex0_s1_agent_rdata_fifo_src_ready;                                                             // HEX3_HEX0_s1_agent_rdata_fifo:in_ready -> HEX3_HEX0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_valid;                                                                               // cmd_mux_011:src_valid -> HEX3_HEX0_s1_agent:cp_valid
	wire  [111:0] cmd_mux_011_src_data;                                                                                // cmd_mux_011:src_data -> HEX3_HEX0_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                               // HEX3_HEX0_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [24:0] cmd_mux_011_src_channel;                                                                             // cmd_mux_011:src_channel -> HEX3_HEX0_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                                       // cmd_mux_011:src_startofpacket -> HEX3_HEX0_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                         // cmd_mux_011:src_endofpacket -> HEX3_HEX0_s1_agent:cp_endofpacket
	wire   [31:0] hex5_hex4_s1_agent_m0_readdata;                                                                      // HEX5_HEX4_s1_translator:uav_readdata -> HEX5_HEX4_s1_agent:m0_readdata
	wire          hex5_hex4_s1_agent_m0_waitrequest;                                                                   // HEX5_HEX4_s1_translator:uav_waitrequest -> HEX5_HEX4_s1_agent:m0_waitrequest
	wire          hex5_hex4_s1_agent_m0_debugaccess;                                                                   // HEX5_HEX4_s1_agent:m0_debugaccess -> HEX5_HEX4_s1_translator:uav_debugaccess
	wire   [31:0] hex5_hex4_s1_agent_m0_address;                                                                       // HEX5_HEX4_s1_agent:m0_address -> HEX5_HEX4_s1_translator:uav_address
	wire    [3:0] hex5_hex4_s1_agent_m0_byteenable;                                                                    // HEX5_HEX4_s1_agent:m0_byteenable -> HEX5_HEX4_s1_translator:uav_byteenable
	wire          hex5_hex4_s1_agent_m0_read;                                                                          // HEX5_HEX4_s1_agent:m0_read -> HEX5_HEX4_s1_translator:uav_read
	wire          hex5_hex4_s1_agent_m0_readdatavalid;                                                                 // HEX5_HEX4_s1_translator:uav_readdatavalid -> HEX5_HEX4_s1_agent:m0_readdatavalid
	wire          hex5_hex4_s1_agent_m0_lock;                                                                          // HEX5_HEX4_s1_agent:m0_lock -> HEX5_HEX4_s1_translator:uav_lock
	wire   [31:0] hex5_hex4_s1_agent_m0_writedata;                                                                     // HEX5_HEX4_s1_agent:m0_writedata -> HEX5_HEX4_s1_translator:uav_writedata
	wire          hex5_hex4_s1_agent_m0_write;                                                                         // HEX5_HEX4_s1_agent:m0_write -> HEX5_HEX4_s1_translator:uav_write
	wire    [2:0] hex5_hex4_s1_agent_m0_burstcount;                                                                    // HEX5_HEX4_s1_agent:m0_burstcount -> HEX5_HEX4_s1_translator:uav_burstcount
	wire          hex5_hex4_s1_agent_rf_source_valid;                                                                  // HEX5_HEX4_s1_agent:rf_source_valid -> HEX5_HEX4_s1_agent_rsp_fifo:in_valid
	wire  [112:0] hex5_hex4_s1_agent_rf_source_data;                                                                   // HEX5_HEX4_s1_agent:rf_source_data -> HEX5_HEX4_s1_agent_rsp_fifo:in_data
	wire          hex5_hex4_s1_agent_rf_source_ready;                                                                  // HEX5_HEX4_s1_agent_rsp_fifo:in_ready -> HEX5_HEX4_s1_agent:rf_source_ready
	wire          hex5_hex4_s1_agent_rf_source_startofpacket;                                                          // HEX5_HEX4_s1_agent:rf_source_startofpacket -> HEX5_HEX4_s1_agent_rsp_fifo:in_startofpacket
	wire          hex5_hex4_s1_agent_rf_source_endofpacket;                                                            // HEX5_HEX4_s1_agent:rf_source_endofpacket -> HEX5_HEX4_s1_agent_rsp_fifo:in_endofpacket
	wire          hex5_hex4_s1_agent_rsp_fifo_out_valid;                                                               // HEX5_HEX4_s1_agent_rsp_fifo:out_valid -> HEX5_HEX4_s1_agent:rf_sink_valid
	wire  [112:0] hex5_hex4_s1_agent_rsp_fifo_out_data;                                                                // HEX5_HEX4_s1_agent_rsp_fifo:out_data -> HEX5_HEX4_s1_agent:rf_sink_data
	wire          hex5_hex4_s1_agent_rsp_fifo_out_ready;                                                               // HEX5_HEX4_s1_agent:rf_sink_ready -> HEX5_HEX4_s1_agent_rsp_fifo:out_ready
	wire          hex5_hex4_s1_agent_rsp_fifo_out_startofpacket;                                                       // HEX5_HEX4_s1_agent_rsp_fifo:out_startofpacket -> HEX5_HEX4_s1_agent:rf_sink_startofpacket
	wire          hex5_hex4_s1_agent_rsp_fifo_out_endofpacket;                                                         // HEX5_HEX4_s1_agent_rsp_fifo:out_endofpacket -> HEX5_HEX4_s1_agent:rf_sink_endofpacket
	wire          hex5_hex4_s1_agent_rdata_fifo_src_valid;                                                             // HEX5_HEX4_s1_agent:rdata_fifo_src_valid -> HEX5_HEX4_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex5_hex4_s1_agent_rdata_fifo_src_data;                                                              // HEX5_HEX4_s1_agent:rdata_fifo_src_data -> HEX5_HEX4_s1_agent_rdata_fifo:in_data
	wire          hex5_hex4_s1_agent_rdata_fifo_src_ready;                                                             // HEX5_HEX4_s1_agent_rdata_fifo:in_ready -> HEX5_HEX4_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_valid;                                                                               // cmd_mux_012:src_valid -> HEX5_HEX4_s1_agent:cp_valid
	wire  [111:0] cmd_mux_012_src_data;                                                                                // cmd_mux_012:src_data -> HEX5_HEX4_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                               // HEX5_HEX4_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [24:0] cmd_mux_012_src_channel;                                                                             // cmd_mux_012:src_channel -> HEX5_HEX4_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                                       // cmd_mux_012:src_startofpacket -> HEX5_HEX4_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                         // cmd_mux_012:src_endofpacket -> HEX5_HEX4_s1_agent:cp_endofpacket
	wire   [31:0] slider_switches_s1_agent_m0_readdata;                                                                // Slider_Switches_s1_translator:uav_readdata -> Slider_Switches_s1_agent:m0_readdata
	wire          slider_switches_s1_agent_m0_waitrequest;                                                             // Slider_Switches_s1_translator:uav_waitrequest -> Slider_Switches_s1_agent:m0_waitrequest
	wire          slider_switches_s1_agent_m0_debugaccess;                                                             // Slider_Switches_s1_agent:m0_debugaccess -> Slider_Switches_s1_translator:uav_debugaccess
	wire   [31:0] slider_switches_s1_agent_m0_address;                                                                 // Slider_Switches_s1_agent:m0_address -> Slider_Switches_s1_translator:uav_address
	wire    [3:0] slider_switches_s1_agent_m0_byteenable;                                                              // Slider_Switches_s1_agent:m0_byteenable -> Slider_Switches_s1_translator:uav_byteenable
	wire          slider_switches_s1_agent_m0_read;                                                                    // Slider_Switches_s1_agent:m0_read -> Slider_Switches_s1_translator:uav_read
	wire          slider_switches_s1_agent_m0_readdatavalid;                                                           // Slider_Switches_s1_translator:uav_readdatavalid -> Slider_Switches_s1_agent:m0_readdatavalid
	wire          slider_switches_s1_agent_m0_lock;                                                                    // Slider_Switches_s1_agent:m0_lock -> Slider_Switches_s1_translator:uav_lock
	wire   [31:0] slider_switches_s1_agent_m0_writedata;                                                               // Slider_Switches_s1_agent:m0_writedata -> Slider_Switches_s1_translator:uav_writedata
	wire          slider_switches_s1_agent_m0_write;                                                                   // Slider_Switches_s1_agent:m0_write -> Slider_Switches_s1_translator:uav_write
	wire    [2:0] slider_switches_s1_agent_m0_burstcount;                                                              // Slider_Switches_s1_agent:m0_burstcount -> Slider_Switches_s1_translator:uav_burstcount
	wire          slider_switches_s1_agent_rf_source_valid;                                                            // Slider_Switches_s1_agent:rf_source_valid -> Slider_Switches_s1_agent_rsp_fifo:in_valid
	wire  [112:0] slider_switches_s1_agent_rf_source_data;                                                             // Slider_Switches_s1_agent:rf_source_data -> Slider_Switches_s1_agent_rsp_fifo:in_data
	wire          slider_switches_s1_agent_rf_source_ready;                                                            // Slider_Switches_s1_agent_rsp_fifo:in_ready -> Slider_Switches_s1_agent:rf_source_ready
	wire          slider_switches_s1_agent_rf_source_startofpacket;                                                    // Slider_Switches_s1_agent:rf_source_startofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_startofpacket
	wire          slider_switches_s1_agent_rf_source_endofpacket;                                                      // Slider_Switches_s1_agent:rf_source_endofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_valid;                                                         // Slider_Switches_s1_agent_rsp_fifo:out_valid -> Slider_Switches_s1_agent:rf_sink_valid
	wire  [112:0] slider_switches_s1_agent_rsp_fifo_out_data;                                                          // Slider_Switches_s1_agent_rsp_fifo:out_data -> Slider_Switches_s1_agent:rf_sink_data
	wire          slider_switches_s1_agent_rsp_fifo_out_ready;                                                         // Slider_Switches_s1_agent:rf_sink_ready -> Slider_Switches_s1_agent_rsp_fifo:out_ready
	wire          slider_switches_s1_agent_rsp_fifo_out_startofpacket;                                                 // Slider_Switches_s1_agent_rsp_fifo:out_startofpacket -> Slider_Switches_s1_agent:rf_sink_startofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_endofpacket;                                                   // Slider_Switches_s1_agent_rsp_fifo:out_endofpacket -> Slider_Switches_s1_agent:rf_sink_endofpacket
	wire          slider_switches_s1_agent_rdata_fifo_src_valid;                                                       // Slider_Switches_s1_agent:rdata_fifo_src_valid -> Slider_Switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_src_data;                                                        // Slider_Switches_s1_agent:rdata_fifo_src_data -> Slider_Switches_s1_agent_rdata_fifo:in_data
	wire          slider_switches_s1_agent_rdata_fifo_src_ready;                                                       // Slider_Switches_s1_agent_rdata_fifo:in_ready -> Slider_Switches_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_013_src_valid;                                                                               // cmd_mux_013:src_valid -> Slider_Switches_s1_agent:cp_valid
	wire  [111:0] cmd_mux_013_src_data;                                                                                // cmd_mux_013:src_data -> Slider_Switches_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                               // Slider_Switches_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [24:0] cmd_mux_013_src_channel;                                                                             // cmd_mux_013:src_channel -> Slider_Switches_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                                       // cmd_mux_013:src_startofpacket -> Slider_Switches_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                         // cmd_mux_013:src_endofpacket -> Slider_Switches_s1_agent:cp_endofpacket
	wire   [31:0] pushbuttons_s1_agent_m0_readdata;                                                                    // Pushbuttons_s1_translator:uav_readdata -> Pushbuttons_s1_agent:m0_readdata
	wire          pushbuttons_s1_agent_m0_waitrequest;                                                                 // Pushbuttons_s1_translator:uav_waitrequest -> Pushbuttons_s1_agent:m0_waitrequest
	wire          pushbuttons_s1_agent_m0_debugaccess;                                                                 // Pushbuttons_s1_agent:m0_debugaccess -> Pushbuttons_s1_translator:uav_debugaccess
	wire   [31:0] pushbuttons_s1_agent_m0_address;                                                                     // Pushbuttons_s1_agent:m0_address -> Pushbuttons_s1_translator:uav_address
	wire    [3:0] pushbuttons_s1_agent_m0_byteenable;                                                                  // Pushbuttons_s1_agent:m0_byteenable -> Pushbuttons_s1_translator:uav_byteenable
	wire          pushbuttons_s1_agent_m0_read;                                                                        // Pushbuttons_s1_agent:m0_read -> Pushbuttons_s1_translator:uav_read
	wire          pushbuttons_s1_agent_m0_readdatavalid;                                                               // Pushbuttons_s1_translator:uav_readdatavalid -> Pushbuttons_s1_agent:m0_readdatavalid
	wire          pushbuttons_s1_agent_m0_lock;                                                                        // Pushbuttons_s1_agent:m0_lock -> Pushbuttons_s1_translator:uav_lock
	wire   [31:0] pushbuttons_s1_agent_m0_writedata;                                                                   // Pushbuttons_s1_agent:m0_writedata -> Pushbuttons_s1_translator:uav_writedata
	wire          pushbuttons_s1_agent_m0_write;                                                                       // Pushbuttons_s1_agent:m0_write -> Pushbuttons_s1_translator:uav_write
	wire    [2:0] pushbuttons_s1_agent_m0_burstcount;                                                                  // Pushbuttons_s1_agent:m0_burstcount -> Pushbuttons_s1_translator:uav_burstcount
	wire          pushbuttons_s1_agent_rf_source_valid;                                                                // Pushbuttons_s1_agent:rf_source_valid -> Pushbuttons_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pushbuttons_s1_agent_rf_source_data;                                                                 // Pushbuttons_s1_agent:rf_source_data -> Pushbuttons_s1_agent_rsp_fifo:in_data
	wire          pushbuttons_s1_agent_rf_source_ready;                                                                // Pushbuttons_s1_agent_rsp_fifo:in_ready -> Pushbuttons_s1_agent:rf_source_ready
	wire          pushbuttons_s1_agent_rf_source_startofpacket;                                                        // Pushbuttons_s1_agent:rf_source_startofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_startofpacket
	wire          pushbuttons_s1_agent_rf_source_endofpacket;                                                          // Pushbuttons_s1_agent:rf_source_endofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_endofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_valid;                                                             // Pushbuttons_s1_agent_rsp_fifo:out_valid -> Pushbuttons_s1_agent:rf_sink_valid
	wire  [112:0] pushbuttons_s1_agent_rsp_fifo_out_data;                                                              // Pushbuttons_s1_agent_rsp_fifo:out_data -> Pushbuttons_s1_agent:rf_sink_data
	wire          pushbuttons_s1_agent_rsp_fifo_out_ready;                                                             // Pushbuttons_s1_agent:rf_sink_ready -> Pushbuttons_s1_agent_rsp_fifo:out_ready
	wire          pushbuttons_s1_agent_rsp_fifo_out_startofpacket;                                                     // Pushbuttons_s1_agent_rsp_fifo:out_startofpacket -> Pushbuttons_s1_agent:rf_sink_startofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_endofpacket;                                                       // Pushbuttons_s1_agent_rsp_fifo:out_endofpacket -> Pushbuttons_s1_agent:rf_sink_endofpacket
	wire          pushbuttons_s1_agent_rdata_fifo_src_valid;                                                           // Pushbuttons_s1_agent:rdata_fifo_src_valid -> Pushbuttons_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_src_data;                                                            // Pushbuttons_s1_agent:rdata_fifo_src_data -> Pushbuttons_s1_agent_rdata_fifo:in_data
	wire          pushbuttons_s1_agent_rdata_fifo_src_ready;                                                           // Pushbuttons_s1_agent_rdata_fifo:in_ready -> Pushbuttons_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_014_src_valid;                                                                               // cmd_mux_014:src_valid -> Pushbuttons_s1_agent:cp_valid
	wire  [111:0] cmd_mux_014_src_data;                                                                                // cmd_mux_014:src_data -> Pushbuttons_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                               // Pushbuttons_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [24:0] cmd_mux_014_src_channel;                                                                             // cmd_mux_014:src_channel -> Pushbuttons_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                                       // cmd_mux_014:src_startofpacket -> Pushbuttons_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                         // cmd_mux_014:src_endofpacket -> Pushbuttons_s1_agent:cp_endofpacket
	wire   [31:0] interval_timer_s1_agent_m0_readdata;                                                                 // Interval_Timer_s1_translator:uav_readdata -> Interval_Timer_s1_agent:m0_readdata
	wire          interval_timer_s1_agent_m0_waitrequest;                                                              // Interval_Timer_s1_translator:uav_waitrequest -> Interval_Timer_s1_agent:m0_waitrequest
	wire          interval_timer_s1_agent_m0_debugaccess;                                                              // Interval_Timer_s1_agent:m0_debugaccess -> Interval_Timer_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_s1_agent_m0_address;                                                                  // Interval_Timer_s1_agent:m0_address -> Interval_Timer_s1_translator:uav_address
	wire    [3:0] interval_timer_s1_agent_m0_byteenable;                                                               // Interval_Timer_s1_agent:m0_byteenable -> Interval_Timer_s1_translator:uav_byteenable
	wire          interval_timer_s1_agent_m0_read;                                                                     // Interval_Timer_s1_agent:m0_read -> Interval_Timer_s1_translator:uav_read
	wire          interval_timer_s1_agent_m0_readdatavalid;                                                            // Interval_Timer_s1_translator:uav_readdatavalid -> Interval_Timer_s1_agent:m0_readdatavalid
	wire          interval_timer_s1_agent_m0_lock;                                                                     // Interval_Timer_s1_agent:m0_lock -> Interval_Timer_s1_translator:uav_lock
	wire   [31:0] interval_timer_s1_agent_m0_writedata;                                                                // Interval_Timer_s1_agent:m0_writedata -> Interval_Timer_s1_translator:uav_writedata
	wire          interval_timer_s1_agent_m0_write;                                                                    // Interval_Timer_s1_agent:m0_write -> Interval_Timer_s1_translator:uav_write
	wire    [2:0] interval_timer_s1_agent_m0_burstcount;                                                               // Interval_Timer_s1_agent:m0_burstcount -> Interval_Timer_s1_translator:uav_burstcount
	wire          interval_timer_s1_agent_rf_source_valid;                                                             // Interval_Timer_s1_agent:rf_source_valid -> Interval_Timer_s1_agent_rsp_fifo:in_valid
	wire  [112:0] interval_timer_s1_agent_rf_source_data;                                                              // Interval_Timer_s1_agent:rf_source_data -> Interval_Timer_s1_agent_rsp_fifo:in_data
	wire          interval_timer_s1_agent_rf_source_ready;                                                             // Interval_Timer_s1_agent_rsp_fifo:in_ready -> Interval_Timer_s1_agent:rf_source_ready
	wire          interval_timer_s1_agent_rf_source_startofpacket;                                                     // Interval_Timer_s1_agent:rf_source_startofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_s1_agent_rf_source_endofpacket;                                                       // Interval_Timer_s1_agent:rf_source_endofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_valid;                                                          // Interval_Timer_s1_agent_rsp_fifo:out_valid -> Interval_Timer_s1_agent:rf_sink_valid
	wire  [112:0] interval_timer_s1_agent_rsp_fifo_out_data;                                                           // Interval_Timer_s1_agent_rsp_fifo:out_data -> Interval_Timer_s1_agent:rf_sink_data
	wire          interval_timer_s1_agent_rsp_fifo_out_ready;                                                          // Interval_Timer_s1_agent:rf_sink_ready -> Interval_Timer_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_s1_agent_rsp_fifo_out_startofpacket;                                                  // Interval_Timer_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_s1_agent:rf_sink_startofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_endofpacket;                                                    // Interval_Timer_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_s1_agent:rf_sink_endofpacket
	wire          interval_timer_s1_agent_rdata_fifo_src_valid;                                                        // Interval_Timer_s1_agent:rdata_fifo_src_valid -> Interval_Timer_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_src_data;                                                         // Interval_Timer_s1_agent:rdata_fifo_src_data -> Interval_Timer_s1_agent_rdata_fifo:in_data
	wire          interval_timer_s1_agent_rdata_fifo_src_ready;                                                        // Interval_Timer_s1_agent_rdata_fifo:in_ready -> Interval_Timer_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_015_src_valid;                                                                               // cmd_mux_015:src_valid -> Interval_Timer_s1_agent:cp_valid
	wire  [111:0] cmd_mux_015_src_data;                                                                                // cmd_mux_015:src_data -> Interval_Timer_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                               // Interval_Timer_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [24:0] cmd_mux_015_src_channel;                                                                             // cmd_mux_015:src_channel -> Interval_Timer_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                                       // cmd_mux_015:src_startofpacket -> Interval_Timer_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                         // cmd_mux_015:src_endofpacket -> Interval_Timer_s1_agent:cp_endofpacket
	wire   [31:0] interval_timer_2_s1_agent_m0_readdata;                                                               // Interval_Timer_2_s1_translator:uav_readdata -> Interval_Timer_2_s1_agent:m0_readdata
	wire          interval_timer_2_s1_agent_m0_waitrequest;                                                            // Interval_Timer_2_s1_translator:uav_waitrequest -> Interval_Timer_2_s1_agent:m0_waitrequest
	wire          interval_timer_2_s1_agent_m0_debugaccess;                                                            // Interval_Timer_2_s1_agent:m0_debugaccess -> Interval_Timer_2_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_2_s1_agent_m0_address;                                                                // Interval_Timer_2_s1_agent:m0_address -> Interval_Timer_2_s1_translator:uav_address
	wire    [3:0] interval_timer_2_s1_agent_m0_byteenable;                                                             // Interval_Timer_2_s1_agent:m0_byteenable -> Interval_Timer_2_s1_translator:uav_byteenable
	wire          interval_timer_2_s1_agent_m0_read;                                                                   // Interval_Timer_2_s1_agent:m0_read -> Interval_Timer_2_s1_translator:uav_read
	wire          interval_timer_2_s1_agent_m0_readdatavalid;                                                          // Interval_Timer_2_s1_translator:uav_readdatavalid -> Interval_Timer_2_s1_agent:m0_readdatavalid
	wire          interval_timer_2_s1_agent_m0_lock;                                                                   // Interval_Timer_2_s1_agent:m0_lock -> Interval_Timer_2_s1_translator:uav_lock
	wire   [31:0] interval_timer_2_s1_agent_m0_writedata;                                                              // Interval_Timer_2_s1_agent:m0_writedata -> Interval_Timer_2_s1_translator:uav_writedata
	wire          interval_timer_2_s1_agent_m0_write;                                                                  // Interval_Timer_2_s1_agent:m0_write -> Interval_Timer_2_s1_translator:uav_write
	wire    [2:0] interval_timer_2_s1_agent_m0_burstcount;                                                             // Interval_Timer_2_s1_agent:m0_burstcount -> Interval_Timer_2_s1_translator:uav_burstcount
	wire          interval_timer_2_s1_agent_rf_source_valid;                                                           // Interval_Timer_2_s1_agent:rf_source_valid -> Interval_Timer_2_s1_agent_rsp_fifo:in_valid
	wire  [112:0] interval_timer_2_s1_agent_rf_source_data;                                                            // Interval_Timer_2_s1_agent:rf_source_data -> Interval_Timer_2_s1_agent_rsp_fifo:in_data
	wire          interval_timer_2_s1_agent_rf_source_ready;                                                           // Interval_Timer_2_s1_agent_rsp_fifo:in_ready -> Interval_Timer_2_s1_agent:rf_source_ready
	wire          interval_timer_2_s1_agent_rf_source_startofpacket;                                                   // Interval_Timer_2_s1_agent:rf_source_startofpacket -> Interval_Timer_2_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_2_s1_agent_rf_source_endofpacket;                                                     // Interval_Timer_2_s1_agent:rf_source_endofpacket -> Interval_Timer_2_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_2_s1_agent_rsp_fifo_out_valid;                                                        // Interval_Timer_2_s1_agent_rsp_fifo:out_valid -> Interval_Timer_2_s1_agent:rf_sink_valid
	wire  [112:0] interval_timer_2_s1_agent_rsp_fifo_out_data;                                                         // Interval_Timer_2_s1_agent_rsp_fifo:out_data -> Interval_Timer_2_s1_agent:rf_sink_data
	wire          interval_timer_2_s1_agent_rsp_fifo_out_ready;                                                        // Interval_Timer_2_s1_agent:rf_sink_ready -> Interval_Timer_2_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_2_s1_agent_rsp_fifo_out_startofpacket;                                                // Interval_Timer_2_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_2_s1_agent:rf_sink_startofpacket
	wire          interval_timer_2_s1_agent_rsp_fifo_out_endofpacket;                                                  // Interval_Timer_2_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_2_s1_agent:rf_sink_endofpacket
	wire          interval_timer_2_s1_agent_rdata_fifo_src_valid;                                                      // Interval_Timer_2_s1_agent:rdata_fifo_src_valid -> Interval_Timer_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_2_s1_agent_rdata_fifo_src_data;                                                       // Interval_Timer_2_s1_agent:rdata_fifo_src_data -> Interval_Timer_2_s1_agent_rdata_fifo:in_data
	wire          interval_timer_2_s1_agent_rdata_fifo_src_ready;                                                      // Interval_Timer_2_s1_agent_rdata_fifo:in_ready -> Interval_Timer_2_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_016_src_valid;                                                                               // cmd_mux_016:src_valid -> Interval_Timer_2_s1_agent:cp_valid
	wire  [111:0] cmd_mux_016_src_data;                                                                                // cmd_mux_016:src_data -> Interval_Timer_2_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                               // Interval_Timer_2_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [24:0] cmd_mux_016_src_channel;                                                                             // cmd_mux_016:src_channel -> Interval_Timer_2_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                                       // cmd_mux_016:src_startofpacket -> Interval_Timer_2_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                         // cmd_mux_016:src_endofpacket -> Interval_Timer_2_s1_agent:cp_endofpacket
	wire   [31:0] pwmx_s1_agent_m0_readdata;                                                                           // PWMX_s1_translator:uav_readdata -> PWMX_s1_agent:m0_readdata
	wire          pwmx_s1_agent_m0_waitrequest;                                                                        // PWMX_s1_translator:uav_waitrequest -> PWMX_s1_agent:m0_waitrequest
	wire          pwmx_s1_agent_m0_debugaccess;                                                                        // PWMX_s1_agent:m0_debugaccess -> PWMX_s1_translator:uav_debugaccess
	wire   [31:0] pwmx_s1_agent_m0_address;                                                                            // PWMX_s1_agent:m0_address -> PWMX_s1_translator:uav_address
	wire    [3:0] pwmx_s1_agent_m0_byteenable;                                                                         // PWMX_s1_agent:m0_byteenable -> PWMX_s1_translator:uav_byteenable
	wire          pwmx_s1_agent_m0_read;                                                                               // PWMX_s1_agent:m0_read -> PWMX_s1_translator:uav_read
	wire          pwmx_s1_agent_m0_readdatavalid;                                                                      // PWMX_s1_translator:uav_readdatavalid -> PWMX_s1_agent:m0_readdatavalid
	wire          pwmx_s1_agent_m0_lock;                                                                               // PWMX_s1_agent:m0_lock -> PWMX_s1_translator:uav_lock
	wire   [31:0] pwmx_s1_agent_m0_writedata;                                                                          // PWMX_s1_agent:m0_writedata -> PWMX_s1_translator:uav_writedata
	wire          pwmx_s1_agent_m0_write;                                                                              // PWMX_s1_agent:m0_write -> PWMX_s1_translator:uav_write
	wire    [2:0] pwmx_s1_agent_m0_burstcount;                                                                         // PWMX_s1_agent:m0_burstcount -> PWMX_s1_translator:uav_burstcount
	wire          pwmx_s1_agent_rf_source_valid;                                                                       // PWMX_s1_agent:rf_source_valid -> PWMX_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pwmx_s1_agent_rf_source_data;                                                                        // PWMX_s1_agent:rf_source_data -> PWMX_s1_agent_rsp_fifo:in_data
	wire          pwmx_s1_agent_rf_source_ready;                                                                       // PWMX_s1_agent_rsp_fifo:in_ready -> PWMX_s1_agent:rf_source_ready
	wire          pwmx_s1_agent_rf_source_startofpacket;                                                               // PWMX_s1_agent:rf_source_startofpacket -> PWMX_s1_agent_rsp_fifo:in_startofpacket
	wire          pwmx_s1_agent_rf_source_endofpacket;                                                                 // PWMX_s1_agent:rf_source_endofpacket -> PWMX_s1_agent_rsp_fifo:in_endofpacket
	wire          pwmx_s1_agent_rsp_fifo_out_valid;                                                                    // PWMX_s1_agent_rsp_fifo:out_valid -> PWMX_s1_agent:rf_sink_valid
	wire  [112:0] pwmx_s1_agent_rsp_fifo_out_data;                                                                     // PWMX_s1_agent_rsp_fifo:out_data -> PWMX_s1_agent:rf_sink_data
	wire          pwmx_s1_agent_rsp_fifo_out_ready;                                                                    // PWMX_s1_agent:rf_sink_ready -> PWMX_s1_agent_rsp_fifo:out_ready
	wire          pwmx_s1_agent_rsp_fifo_out_startofpacket;                                                            // PWMX_s1_agent_rsp_fifo:out_startofpacket -> PWMX_s1_agent:rf_sink_startofpacket
	wire          pwmx_s1_agent_rsp_fifo_out_endofpacket;                                                              // PWMX_s1_agent_rsp_fifo:out_endofpacket -> PWMX_s1_agent:rf_sink_endofpacket
	wire          pwmx_s1_agent_rdata_fifo_src_valid;                                                                  // PWMX_s1_agent:rdata_fifo_src_valid -> PWMX_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwmx_s1_agent_rdata_fifo_src_data;                                                                   // PWMX_s1_agent:rdata_fifo_src_data -> PWMX_s1_agent_rdata_fifo:in_data
	wire          pwmx_s1_agent_rdata_fifo_src_ready;                                                                  // PWMX_s1_agent_rdata_fifo:in_ready -> PWMX_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_017_src_valid;                                                                               // cmd_mux_017:src_valid -> PWMX_s1_agent:cp_valid
	wire  [111:0] cmd_mux_017_src_data;                                                                                // cmd_mux_017:src_data -> PWMX_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                               // PWMX_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [24:0] cmd_mux_017_src_channel;                                                                             // cmd_mux_017:src_channel -> PWMX_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                                       // cmd_mux_017:src_startofpacket -> PWMX_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                         // cmd_mux_017:src_endofpacket -> PWMX_s1_agent:cp_endofpacket
	wire   [31:0] pwmy_s1_agent_m0_readdata;                                                                           // PWMY_s1_translator:uav_readdata -> PWMY_s1_agent:m0_readdata
	wire          pwmy_s1_agent_m0_waitrequest;                                                                        // PWMY_s1_translator:uav_waitrequest -> PWMY_s1_agent:m0_waitrequest
	wire          pwmy_s1_agent_m0_debugaccess;                                                                        // PWMY_s1_agent:m0_debugaccess -> PWMY_s1_translator:uav_debugaccess
	wire   [31:0] pwmy_s1_agent_m0_address;                                                                            // PWMY_s1_agent:m0_address -> PWMY_s1_translator:uav_address
	wire    [3:0] pwmy_s1_agent_m0_byteenable;                                                                         // PWMY_s1_agent:m0_byteenable -> PWMY_s1_translator:uav_byteenable
	wire          pwmy_s1_agent_m0_read;                                                                               // PWMY_s1_agent:m0_read -> PWMY_s1_translator:uav_read
	wire          pwmy_s1_agent_m0_readdatavalid;                                                                      // PWMY_s1_translator:uav_readdatavalid -> PWMY_s1_agent:m0_readdatavalid
	wire          pwmy_s1_agent_m0_lock;                                                                               // PWMY_s1_agent:m0_lock -> PWMY_s1_translator:uav_lock
	wire   [31:0] pwmy_s1_agent_m0_writedata;                                                                          // PWMY_s1_agent:m0_writedata -> PWMY_s1_translator:uav_writedata
	wire          pwmy_s1_agent_m0_write;                                                                              // PWMY_s1_agent:m0_write -> PWMY_s1_translator:uav_write
	wire    [2:0] pwmy_s1_agent_m0_burstcount;                                                                         // PWMY_s1_agent:m0_burstcount -> PWMY_s1_translator:uav_burstcount
	wire          pwmy_s1_agent_rf_source_valid;                                                                       // PWMY_s1_agent:rf_source_valid -> PWMY_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pwmy_s1_agent_rf_source_data;                                                                        // PWMY_s1_agent:rf_source_data -> PWMY_s1_agent_rsp_fifo:in_data
	wire          pwmy_s1_agent_rf_source_ready;                                                                       // PWMY_s1_agent_rsp_fifo:in_ready -> PWMY_s1_agent:rf_source_ready
	wire          pwmy_s1_agent_rf_source_startofpacket;                                                               // PWMY_s1_agent:rf_source_startofpacket -> PWMY_s1_agent_rsp_fifo:in_startofpacket
	wire          pwmy_s1_agent_rf_source_endofpacket;                                                                 // PWMY_s1_agent:rf_source_endofpacket -> PWMY_s1_agent_rsp_fifo:in_endofpacket
	wire          pwmy_s1_agent_rsp_fifo_out_valid;                                                                    // PWMY_s1_agent_rsp_fifo:out_valid -> PWMY_s1_agent:rf_sink_valid
	wire  [112:0] pwmy_s1_agent_rsp_fifo_out_data;                                                                     // PWMY_s1_agent_rsp_fifo:out_data -> PWMY_s1_agent:rf_sink_data
	wire          pwmy_s1_agent_rsp_fifo_out_ready;                                                                    // PWMY_s1_agent:rf_sink_ready -> PWMY_s1_agent_rsp_fifo:out_ready
	wire          pwmy_s1_agent_rsp_fifo_out_startofpacket;                                                            // PWMY_s1_agent_rsp_fifo:out_startofpacket -> PWMY_s1_agent:rf_sink_startofpacket
	wire          pwmy_s1_agent_rsp_fifo_out_endofpacket;                                                              // PWMY_s1_agent_rsp_fifo:out_endofpacket -> PWMY_s1_agent:rf_sink_endofpacket
	wire          pwmy_s1_agent_rdata_fifo_src_valid;                                                                  // PWMY_s1_agent:rdata_fifo_src_valid -> PWMY_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwmy_s1_agent_rdata_fifo_src_data;                                                                   // PWMY_s1_agent:rdata_fifo_src_data -> PWMY_s1_agent_rdata_fifo:in_data
	wire          pwmy_s1_agent_rdata_fifo_src_ready;                                                                  // PWMY_s1_agent_rdata_fifo:in_ready -> PWMY_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_018_src_valid;                                                                               // cmd_mux_018:src_valid -> PWMY_s1_agent:cp_valid
	wire  [111:0] cmd_mux_018_src_data;                                                                                // cmd_mux_018:src_data -> PWMY_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                               // PWMY_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [24:0] cmd_mux_018_src_channel;                                                                             // cmd_mux_018:src_channel -> PWMY_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                                       // cmd_mux_018:src_startofpacket -> PWMY_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                                         // cmd_mux_018:src_endofpacket -> PWMY_s1_agent:cp_endofpacket
	wire   [31:0] joyirq_s1_agent_m0_readdata;                                                                         // joyirq_s1_translator:uav_readdata -> joyirq_s1_agent:m0_readdata
	wire          joyirq_s1_agent_m0_waitrequest;                                                                      // joyirq_s1_translator:uav_waitrequest -> joyirq_s1_agent:m0_waitrequest
	wire          joyirq_s1_agent_m0_debugaccess;                                                                      // joyirq_s1_agent:m0_debugaccess -> joyirq_s1_translator:uav_debugaccess
	wire   [31:0] joyirq_s1_agent_m0_address;                                                                          // joyirq_s1_agent:m0_address -> joyirq_s1_translator:uav_address
	wire    [3:0] joyirq_s1_agent_m0_byteenable;                                                                       // joyirq_s1_agent:m0_byteenable -> joyirq_s1_translator:uav_byteenable
	wire          joyirq_s1_agent_m0_read;                                                                             // joyirq_s1_agent:m0_read -> joyirq_s1_translator:uav_read
	wire          joyirq_s1_agent_m0_readdatavalid;                                                                    // joyirq_s1_translator:uav_readdatavalid -> joyirq_s1_agent:m0_readdatavalid
	wire          joyirq_s1_agent_m0_lock;                                                                             // joyirq_s1_agent:m0_lock -> joyirq_s1_translator:uav_lock
	wire   [31:0] joyirq_s1_agent_m0_writedata;                                                                        // joyirq_s1_agent:m0_writedata -> joyirq_s1_translator:uav_writedata
	wire          joyirq_s1_agent_m0_write;                                                                            // joyirq_s1_agent:m0_write -> joyirq_s1_translator:uav_write
	wire    [2:0] joyirq_s1_agent_m0_burstcount;                                                                       // joyirq_s1_agent:m0_burstcount -> joyirq_s1_translator:uav_burstcount
	wire          joyirq_s1_agent_rf_source_valid;                                                                     // joyirq_s1_agent:rf_source_valid -> joyirq_s1_agent_rsp_fifo:in_valid
	wire  [112:0] joyirq_s1_agent_rf_source_data;                                                                      // joyirq_s1_agent:rf_source_data -> joyirq_s1_agent_rsp_fifo:in_data
	wire          joyirq_s1_agent_rf_source_ready;                                                                     // joyirq_s1_agent_rsp_fifo:in_ready -> joyirq_s1_agent:rf_source_ready
	wire          joyirq_s1_agent_rf_source_startofpacket;                                                             // joyirq_s1_agent:rf_source_startofpacket -> joyirq_s1_agent_rsp_fifo:in_startofpacket
	wire          joyirq_s1_agent_rf_source_endofpacket;                                                               // joyirq_s1_agent:rf_source_endofpacket -> joyirq_s1_agent_rsp_fifo:in_endofpacket
	wire          joyirq_s1_agent_rsp_fifo_out_valid;                                                                  // joyirq_s1_agent_rsp_fifo:out_valid -> joyirq_s1_agent:rf_sink_valid
	wire  [112:0] joyirq_s1_agent_rsp_fifo_out_data;                                                                   // joyirq_s1_agent_rsp_fifo:out_data -> joyirq_s1_agent:rf_sink_data
	wire          joyirq_s1_agent_rsp_fifo_out_ready;                                                                  // joyirq_s1_agent:rf_sink_ready -> joyirq_s1_agent_rsp_fifo:out_ready
	wire          joyirq_s1_agent_rsp_fifo_out_startofpacket;                                                          // joyirq_s1_agent_rsp_fifo:out_startofpacket -> joyirq_s1_agent:rf_sink_startofpacket
	wire          joyirq_s1_agent_rsp_fifo_out_endofpacket;                                                            // joyirq_s1_agent_rsp_fifo:out_endofpacket -> joyirq_s1_agent:rf_sink_endofpacket
	wire          joyirq_s1_agent_rdata_fifo_src_valid;                                                                // joyirq_s1_agent:rdata_fifo_src_valid -> joyirq_s1_agent_rdata_fifo:in_valid
	wire   [33:0] joyirq_s1_agent_rdata_fifo_src_data;                                                                 // joyirq_s1_agent:rdata_fifo_src_data -> joyirq_s1_agent_rdata_fifo:in_data
	wire          joyirq_s1_agent_rdata_fifo_src_ready;                                                                // joyirq_s1_agent_rdata_fifo:in_ready -> joyirq_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_019_src_valid;                                                                               // cmd_mux_019:src_valid -> joyirq_s1_agent:cp_valid
	wire  [111:0] cmd_mux_019_src_data;                                                                                // cmd_mux_019:src_data -> joyirq_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                               // joyirq_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [24:0] cmd_mux_019_src_channel;                                                                             // cmd_mux_019:src_channel -> joyirq_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                                       // cmd_mux_019:src_startofpacket -> joyirq_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                                         // cmd_mux_019:src_endofpacket -> joyirq_s1_agent:cp_endofpacket
	wire   [31:0] penirq_s1_agent_m0_readdata;                                                                         // penirq_s1_translator:uav_readdata -> penirq_s1_agent:m0_readdata
	wire          penirq_s1_agent_m0_waitrequest;                                                                      // penirq_s1_translator:uav_waitrequest -> penirq_s1_agent:m0_waitrequest
	wire          penirq_s1_agent_m0_debugaccess;                                                                      // penirq_s1_agent:m0_debugaccess -> penirq_s1_translator:uav_debugaccess
	wire   [31:0] penirq_s1_agent_m0_address;                                                                          // penirq_s1_agent:m0_address -> penirq_s1_translator:uav_address
	wire    [3:0] penirq_s1_agent_m0_byteenable;                                                                       // penirq_s1_agent:m0_byteenable -> penirq_s1_translator:uav_byteenable
	wire          penirq_s1_agent_m0_read;                                                                             // penirq_s1_agent:m0_read -> penirq_s1_translator:uav_read
	wire          penirq_s1_agent_m0_readdatavalid;                                                                    // penirq_s1_translator:uav_readdatavalid -> penirq_s1_agent:m0_readdatavalid
	wire          penirq_s1_agent_m0_lock;                                                                             // penirq_s1_agent:m0_lock -> penirq_s1_translator:uav_lock
	wire   [31:0] penirq_s1_agent_m0_writedata;                                                                        // penirq_s1_agent:m0_writedata -> penirq_s1_translator:uav_writedata
	wire          penirq_s1_agent_m0_write;                                                                            // penirq_s1_agent:m0_write -> penirq_s1_translator:uav_write
	wire    [2:0] penirq_s1_agent_m0_burstcount;                                                                       // penirq_s1_agent:m0_burstcount -> penirq_s1_translator:uav_burstcount
	wire          penirq_s1_agent_rf_source_valid;                                                                     // penirq_s1_agent:rf_source_valid -> penirq_s1_agent_rsp_fifo:in_valid
	wire  [112:0] penirq_s1_agent_rf_source_data;                                                                      // penirq_s1_agent:rf_source_data -> penirq_s1_agent_rsp_fifo:in_data
	wire          penirq_s1_agent_rf_source_ready;                                                                     // penirq_s1_agent_rsp_fifo:in_ready -> penirq_s1_agent:rf_source_ready
	wire          penirq_s1_agent_rf_source_startofpacket;                                                             // penirq_s1_agent:rf_source_startofpacket -> penirq_s1_agent_rsp_fifo:in_startofpacket
	wire          penirq_s1_agent_rf_source_endofpacket;                                                               // penirq_s1_agent:rf_source_endofpacket -> penirq_s1_agent_rsp_fifo:in_endofpacket
	wire          penirq_s1_agent_rsp_fifo_out_valid;                                                                  // penirq_s1_agent_rsp_fifo:out_valid -> penirq_s1_agent:rf_sink_valid
	wire  [112:0] penirq_s1_agent_rsp_fifo_out_data;                                                                   // penirq_s1_agent_rsp_fifo:out_data -> penirq_s1_agent:rf_sink_data
	wire          penirq_s1_agent_rsp_fifo_out_ready;                                                                  // penirq_s1_agent:rf_sink_ready -> penirq_s1_agent_rsp_fifo:out_ready
	wire          penirq_s1_agent_rsp_fifo_out_startofpacket;                                                          // penirq_s1_agent_rsp_fifo:out_startofpacket -> penirq_s1_agent:rf_sink_startofpacket
	wire          penirq_s1_agent_rsp_fifo_out_endofpacket;                                                            // penirq_s1_agent_rsp_fifo:out_endofpacket -> penirq_s1_agent:rf_sink_endofpacket
	wire          penirq_s1_agent_rdata_fifo_src_valid;                                                                // penirq_s1_agent:rdata_fifo_src_valid -> penirq_s1_agent_rdata_fifo:in_valid
	wire   [33:0] penirq_s1_agent_rdata_fifo_src_data;                                                                 // penirq_s1_agent:rdata_fifo_src_data -> penirq_s1_agent_rdata_fifo:in_data
	wire          penirq_s1_agent_rdata_fifo_src_ready;                                                                // penirq_s1_agent_rdata_fifo:in_ready -> penirq_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_020_src_valid;                                                                               // cmd_mux_020:src_valid -> penirq_s1_agent:cp_valid
	wire  [111:0] cmd_mux_020_src_data;                                                                                // cmd_mux_020:src_data -> penirq_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                               // penirq_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [24:0] cmd_mux_020_src_channel;                                                                             // cmd_mux_020:src_channel -> penirq_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                                       // cmd_mux_020:src_startofpacket -> penirq_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                                         // cmd_mux_020:src_endofpacket -> penirq_s1_agent:cp_endofpacket
	wire   [31:0] modular_adc_0_sample_store_csr_agent_m0_readdata;                                                    // modular_adc_0_sample_store_csr_translator:uav_readdata -> modular_adc_0_sample_store_csr_agent:m0_readdata
	wire          modular_adc_0_sample_store_csr_agent_m0_waitrequest;                                                 // modular_adc_0_sample_store_csr_translator:uav_waitrequest -> modular_adc_0_sample_store_csr_agent:m0_waitrequest
	wire          modular_adc_0_sample_store_csr_agent_m0_debugaccess;                                                 // modular_adc_0_sample_store_csr_agent:m0_debugaccess -> modular_adc_0_sample_store_csr_translator:uav_debugaccess
	wire   [31:0] modular_adc_0_sample_store_csr_agent_m0_address;                                                     // modular_adc_0_sample_store_csr_agent:m0_address -> modular_adc_0_sample_store_csr_translator:uav_address
	wire    [3:0] modular_adc_0_sample_store_csr_agent_m0_byteenable;                                                  // modular_adc_0_sample_store_csr_agent:m0_byteenable -> modular_adc_0_sample_store_csr_translator:uav_byteenable
	wire          modular_adc_0_sample_store_csr_agent_m0_read;                                                        // modular_adc_0_sample_store_csr_agent:m0_read -> modular_adc_0_sample_store_csr_translator:uav_read
	wire          modular_adc_0_sample_store_csr_agent_m0_readdatavalid;                                               // modular_adc_0_sample_store_csr_translator:uav_readdatavalid -> modular_adc_0_sample_store_csr_agent:m0_readdatavalid
	wire          modular_adc_0_sample_store_csr_agent_m0_lock;                                                        // modular_adc_0_sample_store_csr_agent:m0_lock -> modular_adc_0_sample_store_csr_translator:uav_lock
	wire   [31:0] modular_adc_0_sample_store_csr_agent_m0_writedata;                                                   // modular_adc_0_sample_store_csr_agent:m0_writedata -> modular_adc_0_sample_store_csr_translator:uav_writedata
	wire          modular_adc_0_sample_store_csr_agent_m0_write;                                                       // modular_adc_0_sample_store_csr_agent:m0_write -> modular_adc_0_sample_store_csr_translator:uav_write
	wire    [2:0] modular_adc_0_sample_store_csr_agent_m0_burstcount;                                                  // modular_adc_0_sample_store_csr_agent:m0_burstcount -> modular_adc_0_sample_store_csr_translator:uav_burstcount
	wire          modular_adc_0_sample_store_csr_agent_rf_source_valid;                                                // modular_adc_0_sample_store_csr_agent:rf_source_valid -> modular_adc_0_sample_store_csr_agent_rsp_fifo:in_valid
	wire  [112:0] modular_adc_0_sample_store_csr_agent_rf_source_data;                                                 // modular_adc_0_sample_store_csr_agent:rf_source_data -> modular_adc_0_sample_store_csr_agent_rsp_fifo:in_data
	wire          modular_adc_0_sample_store_csr_agent_rf_source_ready;                                                // modular_adc_0_sample_store_csr_agent_rsp_fifo:in_ready -> modular_adc_0_sample_store_csr_agent:rf_source_ready
	wire          modular_adc_0_sample_store_csr_agent_rf_source_startofpacket;                                        // modular_adc_0_sample_store_csr_agent:rf_source_startofpacket -> modular_adc_0_sample_store_csr_agent_rsp_fifo:in_startofpacket
	wire          modular_adc_0_sample_store_csr_agent_rf_source_endofpacket;                                          // modular_adc_0_sample_store_csr_agent:rf_source_endofpacket -> modular_adc_0_sample_store_csr_agent_rsp_fifo:in_endofpacket
	wire          modular_adc_0_sample_store_csr_agent_rsp_fifo_out_valid;                                             // modular_adc_0_sample_store_csr_agent_rsp_fifo:out_valid -> modular_adc_0_sample_store_csr_agent:rf_sink_valid
	wire  [112:0] modular_adc_0_sample_store_csr_agent_rsp_fifo_out_data;                                              // modular_adc_0_sample_store_csr_agent_rsp_fifo:out_data -> modular_adc_0_sample_store_csr_agent:rf_sink_data
	wire          modular_adc_0_sample_store_csr_agent_rsp_fifo_out_ready;                                             // modular_adc_0_sample_store_csr_agent:rf_sink_ready -> modular_adc_0_sample_store_csr_agent_rsp_fifo:out_ready
	wire          modular_adc_0_sample_store_csr_agent_rsp_fifo_out_startofpacket;                                     // modular_adc_0_sample_store_csr_agent_rsp_fifo:out_startofpacket -> modular_adc_0_sample_store_csr_agent:rf_sink_startofpacket
	wire          modular_adc_0_sample_store_csr_agent_rsp_fifo_out_endofpacket;                                       // modular_adc_0_sample_store_csr_agent_rsp_fifo:out_endofpacket -> modular_adc_0_sample_store_csr_agent:rf_sink_endofpacket
	wire          modular_adc_0_sample_store_csr_agent_rdata_fifo_src_valid;                                           // modular_adc_0_sample_store_csr_agent:rdata_fifo_src_valid -> modular_adc_0_sample_store_csr_agent_rdata_fifo:in_valid
	wire   [33:0] modular_adc_0_sample_store_csr_agent_rdata_fifo_src_data;                                            // modular_adc_0_sample_store_csr_agent:rdata_fifo_src_data -> modular_adc_0_sample_store_csr_agent_rdata_fifo:in_data
	wire          modular_adc_0_sample_store_csr_agent_rdata_fifo_src_ready;                                           // modular_adc_0_sample_store_csr_agent_rdata_fifo:in_ready -> modular_adc_0_sample_store_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_021_src_valid;                                                                               // cmd_mux_021:src_valid -> modular_adc_0_sample_store_csr_agent:cp_valid
	wire  [111:0] cmd_mux_021_src_data;                                                                                // cmd_mux_021:src_data -> modular_adc_0_sample_store_csr_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                                               // modular_adc_0_sample_store_csr_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [24:0] cmd_mux_021_src_channel;                                                                             // cmd_mux_021:src_channel -> modular_adc_0_sample_store_csr_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                                       // cmd_mux_021:src_startofpacket -> modular_adc_0_sample_store_csr_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                                         // cmd_mux_021:src_endofpacket -> modular_adc_0_sample_store_csr_agent:cp_endofpacket
	wire   [31:0] modular_adc_0_sequencer_csr_agent_m0_readdata;                                                       // modular_adc_0_sequencer_csr_translator:uav_readdata -> modular_adc_0_sequencer_csr_agent:m0_readdata
	wire          modular_adc_0_sequencer_csr_agent_m0_waitrequest;                                                    // modular_adc_0_sequencer_csr_translator:uav_waitrequest -> modular_adc_0_sequencer_csr_agent:m0_waitrequest
	wire          modular_adc_0_sequencer_csr_agent_m0_debugaccess;                                                    // modular_adc_0_sequencer_csr_agent:m0_debugaccess -> modular_adc_0_sequencer_csr_translator:uav_debugaccess
	wire   [31:0] modular_adc_0_sequencer_csr_agent_m0_address;                                                        // modular_adc_0_sequencer_csr_agent:m0_address -> modular_adc_0_sequencer_csr_translator:uav_address
	wire    [3:0] modular_adc_0_sequencer_csr_agent_m0_byteenable;                                                     // modular_adc_0_sequencer_csr_agent:m0_byteenable -> modular_adc_0_sequencer_csr_translator:uav_byteenable
	wire          modular_adc_0_sequencer_csr_agent_m0_read;                                                           // modular_adc_0_sequencer_csr_agent:m0_read -> modular_adc_0_sequencer_csr_translator:uav_read
	wire          modular_adc_0_sequencer_csr_agent_m0_readdatavalid;                                                  // modular_adc_0_sequencer_csr_translator:uav_readdatavalid -> modular_adc_0_sequencer_csr_agent:m0_readdatavalid
	wire          modular_adc_0_sequencer_csr_agent_m0_lock;                                                           // modular_adc_0_sequencer_csr_agent:m0_lock -> modular_adc_0_sequencer_csr_translator:uav_lock
	wire   [31:0] modular_adc_0_sequencer_csr_agent_m0_writedata;                                                      // modular_adc_0_sequencer_csr_agent:m0_writedata -> modular_adc_0_sequencer_csr_translator:uav_writedata
	wire          modular_adc_0_sequencer_csr_agent_m0_write;                                                          // modular_adc_0_sequencer_csr_agent:m0_write -> modular_adc_0_sequencer_csr_translator:uav_write
	wire    [2:0] modular_adc_0_sequencer_csr_agent_m0_burstcount;                                                     // modular_adc_0_sequencer_csr_agent:m0_burstcount -> modular_adc_0_sequencer_csr_translator:uav_burstcount
	wire          modular_adc_0_sequencer_csr_agent_rf_source_valid;                                                   // modular_adc_0_sequencer_csr_agent:rf_source_valid -> modular_adc_0_sequencer_csr_agent_rsp_fifo:in_valid
	wire  [112:0] modular_adc_0_sequencer_csr_agent_rf_source_data;                                                    // modular_adc_0_sequencer_csr_agent:rf_source_data -> modular_adc_0_sequencer_csr_agent_rsp_fifo:in_data
	wire          modular_adc_0_sequencer_csr_agent_rf_source_ready;                                                   // modular_adc_0_sequencer_csr_agent_rsp_fifo:in_ready -> modular_adc_0_sequencer_csr_agent:rf_source_ready
	wire          modular_adc_0_sequencer_csr_agent_rf_source_startofpacket;                                           // modular_adc_0_sequencer_csr_agent:rf_source_startofpacket -> modular_adc_0_sequencer_csr_agent_rsp_fifo:in_startofpacket
	wire          modular_adc_0_sequencer_csr_agent_rf_source_endofpacket;                                             // modular_adc_0_sequencer_csr_agent:rf_source_endofpacket -> modular_adc_0_sequencer_csr_agent_rsp_fifo:in_endofpacket
	wire          modular_adc_0_sequencer_csr_agent_rsp_fifo_out_valid;                                                // modular_adc_0_sequencer_csr_agent_rsp_fifo:out_valid -> modular_adc_0_sequencer_csr_agent:rf_sink_valid
	wire  [112:0] modular_adc_0_sequencer_csr_agent_rsp_fifo_out_data;                                                 // modular_adc_0_sequencer_csr_agent_rsp_fifo:out_data -> modular_adc_0_sequencer_csr_agent:rf_sink_data
	wire          modular_adc_0_sequencer_csr_agent_rsp_fifo_out_ready;                                                // modular_adc_0_sequencer_csr_agent:rf_sink_ready -> modular_adc_0_sequencer_csr_agent_rsp_fifo:out_ready
	wire          modular_adc_0_sequencer_csr_agent_rsp_fifo_out_startofpacket;                                        // modular_adc_0_sequencer_csr_agent_rsp_fifo:out_startofpacket -> modular_adc_0_sequencer_csr_agent:rf_sink_startofpacket
	wire          modular_adc_0_sequencer_csr_agent_rsp_fifo_out_endofpacket;                                          // modular_adc_0_sequencer_csr_agent_rsp_fifo:out_endofpacket -> modular_adc_0_sequencer_csr_agent:rf_sink_endofpacket
	wire          modular_adc_0_sequencer_csr_agent_rdata_fifo_src_valid;                                              // modular_adc_0_sequencer_csr_agent:rdata_fifo_src_valid -> modular_adc_0_sequencer_csr_agent_rdata_fifo:in_valid
	wire   [33:0] modular_adc_0_sequencer_csr_agent_rdata_fifo_src_data;                                               // modular_adc_0_sequencer_csr_agent:rdata_fifo_src_data -> modular_adc_0_sequencer_csr_agent_rdata_fifo:in_data
	wire          modular_adc_0_sequencer_csr_agent_rdata_fifo_src_ready;                                              // modular_adc_0_sequencer_csr_agent_rdata_fifo:in_ready -> modular_adc_0_sequencer_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_022_src_valid;                                                                               // cmd_mux_022:src_valid -> modular_adc_0_sequencer_csr_agent:cp_valid
	wire  [111:0] cmd_mux_022_src_data;                                                                                // cmd_mux_022:src_data -> modular_adc_0_sequencer_csr_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                                               // modular_adc_0_sequencer_csr_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [24:0] cmd_mux_022_src_channel;                                                                             // cmd_mux_022:src_channel -> modular_adc_0_sequencer_csr_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                                       // cmd_mux_022:src_startofpacket -> modular_adc_0_sequencer_csr_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                                         // cmd_mux_022:src_endofpacket -> modular_adc_0_sequencer_csr_agent:cp_endofpacket
	wire   [31:0] touch_spi_spi_control_port_agent_m0_readdata;                                                        // touch_spi_spi_control_port_translator:uav_readdata -> touch_spi_spi_control_port_agent:m0_readdata
	wire          touch_spi_spi_control_port_agent_m0_waitrequest;                                                     // touch_spi_spi_control_port_translator:uav_waitrequest -> touch_spi_spi_control_port_agent:m0_waitrequest
	wire          touch_spi_spi_control_port_agent_m0_debugaccess;                                                     // touch_spi_spi_control_port_agent:m0_debugaccess -> touch_spi_spi_control_port_translator:uav_debugaccess
	wire   [31:0] touch_spi_spi_control_port_agent_m0_address;                                                         // touch_spi_spi_control_port_agent:m0_address -> touch_spi_spi_control_port_translator:uav_address
	wire    [3:0] touch_spi_spi_control_port_agent_m0_byteenable;                                                      // touch_spi_spi_control_port_agent:m0_byteenable -> touch_spi_spi_control_port_translator:uav_byteenable
	wire          touch_spi_spi_control_port_agent_m0_read;                                                            // touch_spi_spi_control_port_agent:m0_read -> touch_spi_spi_control_port_translator:uav_read
	wire          touch_spi_spi_control_port_agent_m0_readdatavalid;                                                   // touch_spi_spi_control_port_translator:uav_readdatavalid -> touch_spi_spi_control_port_agent:m0_readdatavalid
	wire          touch_spi_spi_control_port_agent_m0_lock;                                                            // touch_spi_spi_control_port_agent:m0_lock -> touch_spi_spi_control_port_translator:uav_lock
	wire   [31:0] touch_spi_spi_control_port_agent_m0_writedata;                                                       // touch_spi_spi_control_port_agent:m0_writedata -> touch_spi_spi_control_port_translator:uav_writedata
	wire          touch_spi_spi_control_port_agent_m0_write;                                                           // touch_spi_spi_control_port_agent:m0_write -> touch_spi_spi_control_port_translator:uav_write
	wire    [2:0] touch_spi_spi_control_port_agent_m0_burstcount;                                                      // touch_spi_spi_control_port_agent:m0_burstcount -> touch_spi_spi_control_port_translator:uav_burstcount
	wire          touch_spi_spi_control_port_agent_rf_source_valid;                                                    // touch_spi_spi_control_port_agent:rf_source_valid -> touch_spi_spi_control_port_agent_rsp_fifo:in_valid
	wire  [112:0] touch_spi_spi_control_port_agent_rf_source_data;                                                     // touch_spi_spi_control_port_agent:rf_source_data -> touch_spi_spi_control_port_agent_rsp_fifo:in_data
	wire          touch_spi_spi_control_port_agent_rf_source_ready;                                                    // touch_spi_spi_control_port_agent_rsp_fifo:in_ready -> touch_spi_spi_control_port_agent:rf_source_ready
	wire          touch_spi_spi_control_port_agent_rf_source_startofpacket;                                            // touch_spi_spi_control_port_agent:rf_source_startofpacket -> touch_spi_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          touch_spi_spi_control_port_agent_rf_source_endofpacket;                                              // touch_spi_spi_control_port_agent:rf_source_endofpacket -> touch_spi_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          touch_spi_spi_control_port_agent_rsp_fifo_out_valid;                                                 // touch_spi_spi_control_port_agent_rsp_fifo:out_valid -> touch_spi_spi_control_port_agent:rf_sink_valid
	wire  [112:0] touch_spi_spi_control_port_agent_rsp_fifo_out_data;                                                  // touch_spi_spi_control_port_agent_rsp_fifo:out_data -> touch_spi_spi_control_port_agent:rf_sink_data
	wire          touch_spi_spi_control_port_agent_rsp_fifo_out_ready;                                                 // touch_spi_spi_control_port_agent:rf_sink_ready -> touch_spi_spi_control_port_agent_rsp_fifo:out_ready
	wire          touch_spi_spi_control_port_agent_rsp_fifo_out_startofpacket;                                         // touch_spi_spi_control_port_agent_rsp_fifo:out_startofpacket -> touch_spi_spi_control_port_agent:rf_sink_startofpacket
	wire          touch_spi_spi_control_port_agent_rsp_fifo_out_endofpacket;                                           // touch_spi_spi_control_port_agent_rsp_fifo:out_endofpacket -> touch_spi_spi_control_port_agent:rf_sink_endofpacket
	wire          touch_spi_spi_control_port_agent_rdata_fifo_src_valid;                                               // touch_spi_spi_control_port_agent:rdata_fifo_src_valid -> touch_spi_spi_control_port_agent_rdata_fifo:in_valid
	wire   [33:0] touch_spi_spi_control_port_agent_rdata_fifo_src_data;                                                // touch_spi_spi_control_port_agent:rdata_fifo_src_data -> touch_spi_spi_control_port_agent_rdata_fifo:in_data
	wire          touch_spi_spi_control_port_agent_rdata_fifo_src_ready;                                               // touch_spi_spi_control_port_agent_rdata_fifo:in_ready -> touch_spi_spi_control_port_agent:rdata_fifo_src_ready
	wire          cmd_mux_023_src_valid;                                                                               // cmd_mux_023:src_valid -> touch_spi_spi_control_port_agent:cp_valid
	wire  [111:0] cmd_mux_023_src_data;                                                                                // cmd_mux_023:src_data -> touch_spi_spi_control_port_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                                               // touch_spi_spi_control_port_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [24:0] cmd_mux_023_src_channel;                                                                             // cmd_mux_023:src_channel -> touch_spi_spi_control_port_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                                       // cmd_mux_023:src_startofpacket -> touch_spi_spi_control_port_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                                         // cmd_mux_023:src_endofpacket -> touch_spi_spi_control_port_agent:cp_endofpacket
	wire   [31:0] nios2_debug_mem_slave_agent_m0_readdata;                                                             // Nios2_debug_mem_slave_translator:uav_readdata -> Nios2_debug_mem_slave_agent:m0_readdata
	wire          nios2_debug_mem_slave_agent_m0_waitrequest;                                                          // Nios2_debug_mem_slave_translator:uav_waitrequest -> Nios2_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_debug_mem_slave_agent_m0_debugaccess;                                                          // Nios2_debug_mem_slave_agent:m0_debugaccess -> Nios2_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_debug_mem_slave_agent_m0_address;                                                              // Nios2_debug_mem_slave_agent:m0_address -> Nios2_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_debug_mem_slave_agent_m0_byteenable;                                                           // Nios2_debug_mem_slave_agent:m0_byteenable -> Nios2_debug_mem_slave_translator:uav_byteenable
	wire          nios2_debug_mem_slave_agent_m0_read;                                                                 // Nios2_debug_mem_slave_agent:m0_read -> Nios2_debug_mem_slave_translator:uav_read
	wire          nios2_debug_mem_slave_agent_m0_readdatavalid;                                                        // Nios2_debug_mem_slave_translator:uav_readdatavalid -> Nios2_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_debug_mem_slave_agent_m0_lock;                                                                 // Nios2_debug_mem_slave_agent:m0_lock -> Nios2_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_debug_mem_slave_agent_m0_writedata;                                                            // Nios2_debug_mem_slave_agent:m0_writedata -> Nios2_debug_mem_slave_translator:uav_writedata
	wire          nios2_debug_mem_slave_agent_m0_write;                                                                // Nios2_debug_mem_slave_agent:m0_write -> Nios2_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_debug_mem_slave_agent_m0_burstcount;                                                           // Nios2_debug_mem_slave_agent:m0_burstcount -> Nios2_debug_mem_slave_translator:uav_burstcount
	wire          nios2_debug_mem_slave_agent_rf_source_valid;                                                         // Nios2_debug_mem_slave_agent:rf_source_valid -> Nios2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [112:0] nios2_debug_mem_slave_agent_rf_source_data;                                                          // Nios2_debug_mem_slave_agent:rf_source_data -> Nios2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_debug_mem_slave_agent_rf_source_ready;                                                         // Nios2_debug_mem_slave_agent_rsp_fifo:in_ready -> Nios2_debug_mem_slave_agent:rf_source_ready
	wire          nios2_debug_mem_slave_agent_rf_source_startofpacket;                                                 // Nios2_debug_mem_slave_agent:rf_source_startofpacket -> Nios2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_debug_mem_slave_agent_rf_source_endofpacket;                                                   // Nios2_debug_mem_slave_agent:rf_source_endofpacket -> Nios2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_valid;                                                      // Nios2_debug_mem_slave_agent_rsp_fifo:out_valid -> Nios2_debug_mem_slave_agent:rf_sink_valid
	wire  [112:0] nios2_debug_mem_slave_agent_rsp_fifo_out_data;                                                       // Nios2_debug_mem_slave_agent_rsp_fifo:out_data -> Nios2_debug_mem_slave_agent:rf_sink_data
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_ready;                                                      // Nios2_debug_mem_slave_agent:rf_sink_ready -> Nios2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                              // Nios2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> Nios2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                                // Nios2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> Nios2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          nios2_debug_mem_slave_agent_rdata_fifo_src_valid;                                                    // Nios2_debug_mem_slave_agent:rdata_fifo_src_valid -> Nios2_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_debug_mem_slave_agent_rdata_fifo_src_data;                                                     // Nios2_debug_mem_slave_agent:rdata_fifo_src_data -> Nios2_debug_mem_slave_agent_rdata_fifo:in_data
	wire          nios2_debug_mem_slave_agent_rdata_fifo_src_ready;                                                    // Nios2_debug_mem_slave_agent_rdata_fifo:in_ready -> Nios2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_024_src_valid;                                                                               // cmd_mux_024:src_valid -> Nios2_debug_mem_slave_agent:cp_valid
	wire  [111:0] cmd_mux_024_src_data;                                                                                // cmd_mux_024:src_data -> Nios2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                                               // Nios2_debug_mem_slave_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [24:0] cmd_mux_024_src_channel;                                                                             // cmd_mux_024:src_channel -> Nios2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                                       // cmd_mux_024:src_startofpacket -> Nios2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                                         // cmd_mux_024:src_endofpacket -> Nios2_debug_mem_slave_agent:cp_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_valid;                                     // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_valid -> router:sink_valid
	wire   [93:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_data;                                      // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_data -> router:sink_data
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_ready;                                     // router:sink_ready -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_ready
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_startofpacket;                             // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_endofpacket;                               // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                                    // router:src_valid -> cmd_demux:sink_valid
	wire   [93:0] router_src_data;                                                                                     // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                                    // cmd_demux:sink_ready -> router:src_ready
	wire   [24:0] router_src_channel;                                                                                  // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                            // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                              // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_data_master_agent_cp_valid;                                                                    // Nios2_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [111:0] nios2_data_master_agent_cp_data;                                                                     // Nios2_data_master_agent:cp_data -> router_001:sink_data
	wire          nios2_data_master_agent_cp_ready;                                                                    // router_001:sink_ready -> Nios2_data_master_agent:cp_ready
	wire          nios2_data_master_agent_cp_startofpacket;                                                            // Nios2_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_data_master_agent_cp_endofpacket;                                                              // Nios2_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                                // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [111:0] router_001_src_data;                                                                                 // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                                // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [24:0] router_001_src_channel;                                                                              // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                                        // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                          // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          nios2_instruction_master_agent_cp_valid;                                                             // Nios2_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire  [111:0] nios2_instruction_master_agent_cp_data;                                                              // Nios2_instruction_master_agent:cp_data -> router_002:sink_data
	wire          nios2_instruction_master_agent_cp_ready;                                                             // router_002:sink_ready -> Nios2_instruction_master_agent:cp_ready
	wire          nios2_instruction_master_agent_cp_startofpacket;                                                     // Nios2_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          nios2_instruction_master_agent_cp_endofpacket;                                                       // Nios2_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                                // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [111:0] router_002_src_data;                                                                                 // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                                // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [24:0] router_002_src_channel;                                                                              // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                                        // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                          // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_valid;                                                           // JTAG_to_FPGA_Bridge_master_agent:cp_valid -> router_003:sink_valid
	wire  [111:0] jtag_to_fpga_bridge_master_agent_cp_data;                                                            // JTAG_to_FPGA_Bridge_master_agent:cp_data -> router_003:sink_data
	wire          jtag_to_fpga_bridge_master_agent_cp_ready;                                                           // router_003:sink_ready -> JTAG_to_FPGA_Bridge_master_agent:cp_ready
	wire          jtag_to_fpga_bridge_master_agent_cp_startofpacket;                                                   // JTAG_to_FPGA_Bridge_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_endofpacket;                                                     // JTAG_to_FPGA_Bridge_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          vga_subsystem_pixel_dma_master_agent_cp_valid;                                                       // vga_subsystem_pixel_dma_master_agent:cp_valid -> router_004:sink_valid
	wire   [93:0] vga_subsystem_pixel_dma_master_agent_cp_data;                                                        // vga_subsystem_pixel_dma_master_agent:cp_data -> router_004:sink_data
	wire          vga_subsystem_pixel_dma_master_agent_cp_ready;                                                       // router_004:sink_ready -> vga_subsystem_pixel_dma_master_agent:cp_ready
	wire          vga_subsystem_pixel_dma_master_agent_cp_startofpacket;                                               // vga_subsystem_pixel_dma_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          vga_subsystem_pixel_dma_master_agent_cp_endofpacket;                                                 // vga_subsystem_pixel_dma_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                // router_004:src_valid -> cmd_demux_004:sink_valid
	wire   [93:0] router_004_src_data;                                                                                 // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                                // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [24:0] router_004_src_channel;                                                                              // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                                        // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                          // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                             // SDRAM_s1_agent:rp_valid -> router_005:sink_valid
	wire   [93:0] sdram_s1_agent_rp_data;                                                                              // SDRAM_s1_agent:rp_data -> router_005:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                             // router_005:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                                     // SDRAM_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                                       // SDRAM_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                // router_005:src_valid -> rsp_demux:sink_valid
	wire   [93:0] router_005_src_data;                                                                                 // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                                                // rsp_demux:sink_ready -> router_005:src_ready
	wire   [24:0] router_005_src_channel;                                                                              // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                                        // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                          // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_valid;                                        // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_valid -> router_006:sink_valid
	wire  [111:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_data;                                         // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_data -> router_006:sink_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_ready;                                        // router_006:sink_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_ready
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_startofpacket;                                // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_endofpacket;                                  // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [111:0] router_006_src_data;                                                                                 // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                                                // rsp_demux_001:sink_ready -> router_006:src_ready
	wire   [24:0] router_006_src_channel;                                                                              // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                                        // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                          // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                          // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_007:sink_valid
	wire  [111:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                           // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_007:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                          // router_007:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                                  // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                                    // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [111:0] router_007_src_data;                                                                                 // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                                                // rsp_demux_002:sink_ready -> router_007:src_ready
	wire   [24:0] router_007_src_channel;                                                                              // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                                        // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                          // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          vga_subsystem_char_buf_rgb_agent_rp_valid;                                                           // vga_subsystem_char_buf_rgb_agent:rp_valid -> router_008:sink_valid
	wire  [111:0] vga_subsystem_char_buf_rgb_agent_rp_data;                                                            // vga_subsystem_char_buf_rgb_agent:rp_data -> router_008:sink_data
	wire          vga_subsystem_char_buf_rgb_agent_rp_ready;                                                           // router_008:sink_ready -> vga_subsystem_char_buf_rgb_agent:rp_ready
	wire          vga_subsystem_char_buf_rgb_agent_rp_startofpacket;                                                   // vga_subsystem_char_buf_rgb_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          vga_subsystem_char_buf_rgb_agent_rp_endofpacket;                                                     // vga_subsystem_char_buf_rgb_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                                // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [111:0] router_008_src_data;                                                                                 // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                                                // rsp_demux_003:sink_ready -> router_008:src_ready
	wire   [24:0] router_008_src_channel;                                                                              // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                                        // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                          // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_valid;                                              // vga_subsystem_char_buffer_control_slave_agent:rp_valid -> router_009:sink_valid
	wire  [111:0] vga_subsystem_char_buffer_control_slave_agent_rp_data;                                               // vga_subsystem_char_buffer_control_slave_agent:rp_data -> router_009:sink_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_ready;                                              // router_009:sink_ready -> vga_subsystem_char_buffer_control_slave_agent:rp_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket;                                      // vga_subsystem_char_buffer_control_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket;                                        // vga_subsystem_char_buffer_control_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                                // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [111:0] router_009_src_data;                                                                                 // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                                                // rsp_demux_004:sink_ready -> router_009:src_ready
	wire   [24:0] router_009_src_channel;                                                                              // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                                        // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                          // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rp_valid;                                                      // vga_subsystem_char_buffer_slave_agent:rp_valid -> router_010:sink_valid
	wire  [111:0] vga_subsystem_char_buffer_slave_agent_rp_data;                                                       // vga_subsystem_char_buffer_slave_agent:rp_data -> router_010:sink_data
	wire          vga_subsystem_char_buffer_slave_agent_rp_ready;                                                      // router_010:sink_ready -> vga_subsystem_char_buffer_slave_agent:rp_ready
	wire          vga_subsystem_char_buffer_slave_agent_rp_startofpacket;                                              // vga_subsystem_char_buffer_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rp_endofpacket;                                                // vga_subsystem_char_buffer_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [111:0] router_010_src_data;                                                                                 // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                                                // rsp_demux_005:sink_ready -> router_010:src_ready
	wire   [24:0] router_010_src_channel;                                                                              // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                                                        // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                          // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          gyro_i2c_csr_agent_rp_valid;                                                                         // gyro_i2c_csr_agent:rp_valid -> router_011:sink_valid
	wire  [111:0] gyro_i2c_csr_agent_rp_data;                                                                          // gyro_i2c_csr_agent:rp_data -> router_011:sink_data
	wire          gyro_i2c_csr_agent_rp_ready;                                                                         // router_011:sink_ready -> gyro_i2c_csr_agent:rp_ready
	wire          gyro_i2c_csr_agent_rp_startofpacket;                                                                 // gyro_i2c_csr_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          gyro_i2c_csr_agent_rp_endofpacket;                                                                   // gyro_i2c_csr_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                                // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [111:0] router_011_src_data;                                                                                 // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                                                // rsp_demux_006:sink_ready -> router_011:src_ready
	wire   [24:0] router_011_src_channel;                                                                              // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                                        // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                          // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_valid;                                                // vga_subsystem_pixel_dma_control_slave_agent:rp_valid -> router_012:sink_valid
	wire  [111:0] vga_subsystem_pixel_dma_control_slave_agent_rp_data;                                                 // vga_subsystem_pixel_dma_control_slave_agent:rp_data -> router_012:sink_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_ready;                                                // router_012:sink_ready -> vga_subsystem_pixel_dma_control_slave_agent:rp_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket;                                        // vga_subsystem_pixel_dma_control_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket;                                          // vga_subsystem_pixel_dma_control_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                                // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [111:0] router_012_src_data;                                                                                 // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                                                // rsp_demux_007:sink_ready -> router_012:src_ready
	wire   [24:0] router_012_src_channel;                                                                              // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                                        // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                          // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          adc_pll_pll_slave_agent_rp_valid;                                                                    // adc_pll_pll_slave_agent:rp_valid -> router_013:sink_valid
	wire  [111:0] adc_pll_pll_slave_agent_rp_data;                                                                     // adc_pll_pll_slave_agent:rp_data -> router_013:sink_data
	wire          adc_pll_pll_slave_agent_rp_ready;                                                                    // router_013:sink_ready -> adc_pll_pll_slave_agent:rp_ready
	wire          adc_pll_pll_slave_agent_rp_startofpacket;                                                            // adc_pll_pll_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          adc_pll_pll_slave_agent_rp_endofpacket;                                                              // adc_pll_pll_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                                // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [111:0] router_013_src_data;                                                                                 // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                                                // rsp_demux_008:sink_ready -> router_013:src_ready
	wire   [24:0] router_013_src_channel;                                                                              // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                                        // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                          // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          vga_subsystem_rgb_slave_agent_rp_valid;                                                              // vga_subsystem_rgb_slave_agent:rp_valid -> router_014:sink_valid
	wire  [111:0] vga_subsystem_rgb_slave_agent_rp_data;                                                               // vga_subsystem_rgb_slave_agent:rp_data -> router_014:sink_data
	wire          vga_subsystem_rgb_slave_agent_rp_ready;                                                              // router_014:sink_ready -> vga_subsystem_rgb_slave_agent:rp_ready
	wire          vga_subsystem_rgb_slave_agent_rp_startofpacket;                                                      // vga_subsystem_rgb_slave_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          vga_subsystem_rgb_slave_agent_rp_endofpacket;                                                        // vga_subsystem_rgb_slave_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                                // router_014:src_valid -> rsp_demux_009:sink_valid
	wire  [111:0] router_014_src_data;                                                                                 // router_014:src_data -> rsp_demux_009:sink_data
	wire          router_014_src_ready;                                                                                // rsp_demux_009:sink_ready -> router_014:src_ready
	wire   [24:0] router_014_src_channel;                                                                              // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_startofpacket;                                                                        // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                          // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                                              // LEDs_s1_agent:rp_valid -> router_015:sink_valid
	wire  [111:0] leds_s1_agent_rp_data;                                                                               // LEDs_s1_agent:rp_data -> router_015:sink_data
	wire          leds_s1_agent_rp_ready;                                                                              // router_015:sink_ready -> LEDs_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                                                      // LEDs_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                                                        // LEDs_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                                // router_015:src_valid -> rsp_demux_010:sink_valid
	wire  [111:0] router_015_src_data;                                                                                 // router_015:src_data -> rsp_demux_010:sink_data
	wire          router_015_src_ready;                                                                                // rsp_demux_010:sink_ready -> router_015:src_ready
	wire   [24:0] router_015_src_channel;                                                                              // router_015:src_channel -> rsp_demux_010:sink_channel
	wire          router_015_src_startofpacket;                                                                        // router_015:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                          // router_015:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          hex3_hex0_s1_agent_rp_valid;                                                                         // HEX3_HEX0_s1_agent:rp_valid -> router_016:sink_valid
	wire  [111:0] hex3_hex0_s1_agent_rp_data;                                                                          // HEX3_HEX0_s1_agent:rp_data -> router_016:sink_data
	wire          hex3_hex0_s1_agent_rp_ready;                                                                         // router_016:sink_ready -> HEX3_HEX0_s1_agent:rp_ready
	wire          hex3_hex0_s1_agent_rp_startofpacket;                                                                 // HEX3_HEX0_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          hex3_hex0_s1_agent_rp_endofpacket;                                                                   // HEX3_HEX0_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                                // router_016:src_valid -> rsp_demux_011:sink_valid
	wire  [111:0] router_016_src_data;                                                                                 // router_016:src_data -> rsp_demux_011:sink_data
	wire          router_016_src_ready;                                                                                // rsp_demux_011:sink_ready -> router_016:src_ready
	wire   [24:0] router_016_src_channel;                                                                              // router_016:src_channel -> rsp_demux_011:sink_channel
	wire          router_016_src_startofpacket;                                                                        // router_016:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                          // router_016:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          hex5_hex4_s1_agent_rp_valid;                                                                         // HEX5_HEX4_s1_agent:rp_valid -> router_017:sink_valid
	wire  [111:0] hex5_hex4_s1_agent_rp_data;                                                                          // HEX5_HEX4_s1_agent:rp_data -> router_017:sink_data
	wire          hex5_hex4_s1_agent_rp_ready;                                                                         // router_017:sink_ready -> HEX5_HEX4_s1_agent:rp_ready
	wire          hex5_hex4_s1_agent_rp_startofpacket;                                                                 // HEX5_HEX4_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          hex5_hex4_s1_agent_rp_endofpacket;                                                                   // HEX5_HEX4_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                                // router_017:src_valid -> rsp_demux_012:sink_valid
	wire  [111:0] router_017_src_data;                                                                                 // router_017:src_data -> rsp_demux_012:sink_data
	wire          router_017_src_ready;                                                                                // rsp_demux_012:sink_ready -> router_017:src_ready
	wire   [24:0] router_017_src_channel;                                                                              // router_017:src_channel -> rsp_demux_012:sink_channel
	wire          router_017_src_startofpacket;                                                                        // router_017:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                          // router_017:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          slider_switches_s1_agent_rp_valid;                                                                   // Slider_Switches_s1_agent:rp_valid -> router_018:sink_valid
	wire  [111:0] slider_switches_s1_agent_rp_data;                                                                    // Slider_Switches_s1_agent:rp_data -> router_018:sink_data
	wire          slider_switches_s1_agent_rp_ready;                                                                   // router_018:sink_ready -> Slider_Switches_s1_agent:rp_ready
	wire          slider_switches_s1_agent_rp_startofpacket;                                                           // Slider_Switches_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          slider_switches_s1_agent_rp_endofpacket;                                                             // Slider_Switches_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                                // router_018:src_valid -> rsp_demux_013:sink_valid
	wire  [111:0] router_018_src_data;                                                                                 // router_018:src_data -> rsp_demux_013:sink_data
	wire          router_018_src_ready;                                                                                // rsp_demux_013:sink_ready -> router_018:src_ready
	wire   [24:0] router_018_src_channel;                                                                              // router_018:src_channel -> rsp_demux_013:sink_channel
	wire          router_018_src_startofpacket;                                                                        // router_018:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                          // router_018:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          pushbuttons_s1_agent_rp_valid;                                                                       // Pushbuttons_s1_agent:rp_valid -> router_019:sink_valid
	wire  [111:0] pushbuttons_s1_agent_rp_data;                                                                        // Pushbuttons_s1_agent:rp_data -> router_019:sink_data
	wire          pushbuttons_s1_agent_rp_ready;                                                                       // router_019:sink_ready -> Pushbuttons_s1_agent:rp_ready
	wire          pushbuttons_s1_agent_rp_startofpacket;                                                               // Pushbuttons_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          pushbuttons_s1_agent_rp_endofpacket;                                                                 // Pushbuttons_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                                // router_019:src_valid -> rsp_demux_014:sink_valid
	wire  [111:0] router_019_src_data;                                                                                 // router_019:src_data -> rsp_demux_014:sink_data
	wire          router_019_src_ready;                                                                                // rsp_demux_014:sink_ready -> router_019:src_ready
	wire   [24:0] router_019_src_channel;                                                                              // router_019:src_channel -> rsp_demux_014:sink_channel
	wire          router_019_src_startofpacket;                                                                        // router_019:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                          // router_019:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          interval_timer_s1_agent_rp_valid;                                                                    // Interval_Timer_s1_agent:rp_valid -> router_020:sink_valid
	wire  [111:0] interval_timer_s1_agent_rp_data;                                                                     // Interval_Timer_s1_agent:rp_data -> router_020:sink_data
	wire          interval_timer_s1_agent_rp_ready;                                                                    // router_020:sink_ready -> Interval_Timer_s1_agent:rp_ready
	wire          interval_timer_s1_agent_rp_startofpacket;                                                            // Interval_Timer_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          interval_timer_s1_agent_rp_endofpacket;                                                              // Interval_Timer_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                                // router_020:src_valid -> rsp_demux_015:sink_valid
	wire  [111:0] router_020_src_data;                                                                                 // router_020:src_data -> rsp_demux_015:sink_data
	wire          router_020_src_ready;                                                                                // rsp_demux_015:sink_ready -> router_020:src_ready
	wire   [24:0] router_020_src_channel;                                                                              // router_020:src_channel -> rsp_demux_015:sink_channel
	wire          router_020_src_startofpacket;                                                                        // router_020:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                          // router_020:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          interval_timer_2_s1_agent_rp_valid;                                                                  // Interval_Timer_2_s1_agent:rp_valid -> router_021:sink_valid
	wire  [111:0] interval_timer_2_s1_agent_rp_data;                                                                   // Interval_Timer_2_s1_agent:rp_data -> router_021:sink_data
	wire          interval_timer_2_s1_agent_rp_ready;                                                                  // router_021:sink_ready -> Interval_Timer_2_s1_agent:rp_ready
	wire          interval_timer_2_s1_agent_rp_startofpacket;                                                          // Interval_Timer_2_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          interval_timer_2_s1_agent_rp_endofpacket;                                                            // Interval_Timer_2_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                                // router_021:src_valid -> rsp_demux_016:sink_valid
	wire  [111:0] router_021_src_data;                                                                                 // router_021:src_data -> rsp_demux_016:sink_data
	wire          router_021_src_ready;                                                                                // rsp_demux_016:sink_ready -> router_021:src_ready
	wire   [24:0] router_021_src_channel;                                                                              // router_021:src_channel -> rsp_demux_016:sink_channel
	wire          router_021_src_startofpacket;                                                                        // router_021:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                          // router_021:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          pwmx_s1_agent_rp_valid;                                                                              // PWMX_s1_agent:rp_valid -> router_022:sink_valid
	wire  [111:0] pwmx_s1_agent_rp_data;                                                                               // PWMX_s1_agent:rp_data -> router_022:sink_data
	wire          pwmx_s1_agent_rp_ready;                                                                              // router_022:sink_ready -> PWMX_s1_agent:rp_ready
	wire          pwmx_s1_agent_rp_startofpacket;                                                                      // PWMX_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          pwmx_s1_agent_rp_endofpacket;                                                                        // PWMX_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                                // router_022:src_valid -> rsp_demux_017:sink_valid
	wire  [111:0] router_022_src_data;                                                                                 // router_022:src_data -> rsp_demux_017:sink_data
	wire          router_022_src_ready;                                                                                // rsp_demux_017:sink_ready -> router_022:src_ready
	wire   [24:0] router_022_src_channel;                                                                              // router_022:src_channel -> rsp_demux_017:sink_channel
	wire          router_022_src_startofpacket;                                                                        // router_022:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                          // router_022:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          pwmy_s1_agent_rp_valid;                                                                              // PWMY_s1_agent:rp_valid -> router_023:sink_valid
	wire  [111:0] pwmy_s1_agent_rp_data;                                                                               // PWMY_s1_agent:rp_data -> router_023:sink_data
	wire          pwmy_s1_agent_rp_ready;                                                                              // router_023:sink_ready -> PWMY_s1_agent:rp_ready
	wire          pwmy_s1_agent_rp_startofpacket;                                                                      // PWMY_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          pwmy_s1_agent_rp_endofpacket;                                                                        // PWMY_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                                // router_023:src_valid -> rsp_demux_018:sink_valid
	wire  [111:0] router_023_src_data;                                                                                 // router_023:src_data -> rsp_demux_018:sink_data
	wire          router_023_src_ready;                                                                                // rsp_demux_018:sink_ready -> router_023:src_ready
	wire   [24:0] router_023_src_channel;                                                                              // router_023:src_channel -> rsp_demux_018:sink_channel
	wire          router_023_src_startofpacket;                                                                        // router_023:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                          // router_023:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          joyirq_s1_agent_rp_valid;                                                                            // joyirq_s1_agent:rp_valid -> router_024:sink_valid
	wire  [111:0] joyirq_s1_agent_rp_data;                                                                             // joyirq_s1_agent:rp_data -> router_024:sink_data
	wire          joyirq_s1_agent_rp_ready;                                                                            // router_024:sink_ready -> joyirq_s1_agent:rp_ready
	wire          joyirq_s1_agent_rp_startofpacket;                                                                    // joyirq_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          joyirq_s1_agent_rp_endofpacket;                                                                      // joyirq_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                                // router_024:src_valid -> rsp_demux_019:sink_valid
	wire  [111:0] router_024_src_data;                                                                                 // router_024:src_data -> rsp_demux_019:sink_data
	wire          router_024_src_ready;                                                                                // rsp_demux_019:sink_ready -> router_024:src_ready
	wire   [24:0] router_024_src_channel;                                                                              // router_024:src_channel -> rsp_demux_019:sink_channel
	wire          router_024_src_startofpacket;                                                                        // router_024:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                          // router_024:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          penirq_s1_agent_rp_valid;                                                                            // penirq_s1_agent:rp_valid -> router_025:sink_valid
	wire  [111:0] penirq_s1_agent_rp_data;                                                                             // penirq_s1_agent:rp_data -> router_025:sink_data
	wire          penirq_s1_agent_rp_ready;                                                                            // router_025:sink_ready -> penirq_s1_agent:rp_ready
	wire          penirq_s1_agent_rp_startofpacket;                                                                    // penirq_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          penirq_s1_agent_rp_endofpacket;                                                                      // penirq_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                                // router_025:src_valid -> rsp_demux_020:sink_valid
	wire  [111:0] router_025_src_data;                                                                                 // router_025:src_data -> rsp_demux_020:sink_data
	wire          router_025_src_ready;                                                                                // rsp_demux_020:sink_ready -> router_025:src_ready
	wire   [24:0] router_025_src_channel;                                                                              // router_025:src_channel -> rsp_demux_020:sink_channel
	wire          router_025_src_startofpacket;                                                                        // router_025:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                          // router_025:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          modular_adc_0_sample_store_csr_agent_rp_valid;                                                       // modular_adc_0_sample_store_csr_agent:rp_valid -> router_026:sink_valid
	wire  [111:0] modular_adc_0_sample_store_csr_agent_rp_data;                                                        // modular_adc_0_sample_store_csr_agent:rp_data -> router_026:sink_data
	wire          modular_adc_0_sample_store_csr_agent_rp_ready;                                                       // router_026:sink_ready -> modular_adc_0_sample_store_csr_agent:rp_ready
	wire          modular_adc_0_sample_store_csr_agent_rp_startofpacket;                                               // modular_adc_0_sample_store_csr_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          modular_adc_0_sample_store_csr_agent_rp_endofpacket;                                                 // modular_adc_0_sample_store_csr_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                                // router_026:src_valid -> rsp_demux_021:sink_valid
	wire  [111:0] router_026_src_data;                                                                                 // router_026:src_data -> rsp_demux_021:sink_data
	wire          router_026_src_ready;                                                                                // rsp_demux_021:sink_ready -> router_026:src_ready
	wire   [24:0] router_026_src_channel;                                                                              // router_026:src_channel -> rsp_demux_021:sink_channel
	wire          router_026_src_startofpacket;                                                                        // router_026:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                          // router_026:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          modular_adc_0_sequencer_csr_agent_rp_valid;                                                          // modular_adc_0_sequencer_csr_agent:rp_valid -> router_027:sink_valid
	wire  [111:0] modular_adc_0_sequencer_csr_agent_rp_data;                                                           // modular_adc_0_sequencer_csr_agent:rp_data -> router_027:sink_data
	wire          modular_adc_0_sequencer_csr_agent_rp_ready;                                                          // router_027:sink_ready -> modular_adc_0_sequencer_csr_agent:rp_ready
	wire          modular_adc_0_sequencer_csr_agent_rp_startofpacket;                                                  // modular_adc_0_sequencer_csr_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          modular_adc_0_sequencer_csr_agent_rp_endofpacket;                                                    // modular_adc_0_sequencer_csr_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                                // router_027:src_valid -> rsp_demux_022:sink_valid
	wire  [111:0] router_027_src_data;                                                                                 // router_027:src_data -> rsp_demux_022:sink_data
	wire          router_027_src_ready;                                                                                // rsp_demux_022:sink_ready -> router_027:src_ready
	wire   [24:0] router_027_src_channel;                                                                              // router_027:src_channel -> rsp_demux_022:sink_channel
	wire          router_027_src_startofpacket;                                                                        // router_027:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_027_src_endofpacket;                                                                          // router_027:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          touch_spi_spi_control_port_agent_rp_valid;                                                           // touch_spi_spi_control_port_agent:rp_valid -> router_028:sink_valid
	wire  [111:0] touch_spi_spi_control_port_agent_rp_data;                                                            // touch_spi_spi_control_port_agent:rp_data -> router_028:sink_data
	wire          touch_spi_spi_control_port_agent_rp_ready;                                                           // router_028:sink_ready -> touch_spi_spi_control_port_agent:rp_ready
	wire          touch_spi_spi_control_port_agent_rp_startofpacket;                                                   // touch_spi_spi_control_port_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          touch_spi_spi_control_port_agent_rp_endofpacket;                                                     // touch_spi_spi_control_port_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                                // router_028:src_valid -> rsp_demux_023:sink_valid
	wire  [111:0] router_028_src_data;                                                                                 // router_028:src_data -> rsp_demux_023:sink_data
	wire          router_028_src_ready;                                                                                // rsp_demux_023:sink_ready -> router_028:src_ready
	wire   [24:0] router_028_src_channel;                                                                              // router_028:src_channel -> rsp_demux_023:sink_channel
	wire          router_028_src_startofpacket;                                                                        // router_028:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_028_src_endofpacket;                                                                          // router_028:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          nios2_debug_mem_slave_agent_rp_valid;                                                                // Nios2_debug_mem_slave_agent:rp_valid -> router_029:sink_valid
	wire  [111:0] nios2_debug_mem_slave_agent_rp_data;                                                                 // Nios2_debug_mem_slave_agent:rp_data -> router_029:sink_data
	wire          nios2_debug_mem_slave_agent_rp_ready;                                                                // router_029:sink_ready -> Nios2_debug_mem_slave_agent:rp_ready
	wire          nios2_debug_mem_slave_agent_rp_startofpacket;                                                        // Nios2_debug_mem_slave_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          nios2_debug_mem_slave_agent_rp_endofpacket;                                                          // Nios2_debug_mem_slave_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                                                // router_029:src_valid -> rsp_demux_024:sink_valid
	wire  [111:0] router_029_src_data;                                                                                 // router_029:src_data -> rsp_demux_024:sink_data
	wire          router_029_src_ready;                                                                                // rsp_demux_024:sink_ready -> router_029:src_ready
	wire   [24:0] router_029_src_channel;                                                                              // router_029:src_channel -> rsp_demux_024:sink_channel
	wire          router_029_src_startofpacket;                                                                        // router_029:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_029_src_endofpacket;                                                                          // router_029:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          router_003_src_valid;                                                                                // router_003:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_valid
	wire  [111:0] router_003_src_data;                                                                                 // router_003:src_data -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                                                // JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [24:0] router_003_src_channel;                                                                              // router_003:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                                        // router_003:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                                          // router_003:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_endofpacket
	wire  [111:0] jtag_to_fpga_bridge_master_limiter_cmd_src_data;                                                     // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_ready;                                                    // cmd_demux_003:sink_ready -> JTAG_to_FPGA_Bridge_master_limiter:cmd_src_ready
	wire   [24:0] jtag_to_fpga_bridge_master_limiter_cmd_src_channel;                                                  // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket;                                            // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket;                                              // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                                               // rsp_mux_003:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_003_src_data;                                                                                // rsp_mux_003:src_data -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                                               // JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [24:0] rsp_mux_003_src_channel;                                                                             // rsp_mux_003:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                                       // rsp_mux_003:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                         // rsp_mux_003:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_endofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_valid;                                                    // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_valid -> JTAG_to_FPGA_Bridge_master_agent:rp_valid
	wire  [111:0] jtag_to_fpga_bridge_master_limiter_rsp_src_data;                                                     // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_data -> JTAG_to_FPGA_Bridge_master_agent:rp_data
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_ready;                                                    // JTAG_to_FPGA_Bridge_master_agent:rp_ready -> JTAG_to_FPGA_Bridge_master_limiter:rsp_src_ready
	wire   [24:0] jtag_to_fpga_bridge_master_limiter_rsp_src_channel;                                                  // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_channel -> JTAG_to_FPGA_Bridge_master_agent:rp_channel
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket;                                            // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_startofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket;                                              // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_endofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                                   // cmd_mux:src_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire   [93:0] cmd_mux_src_data;                                                                                    // cmd_mux:src_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                                   // SDRAM_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [24:0] cmd_mux_src_channel;                                                                                 // cmd_mux:src_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                           // cmd_mux:src_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                             // cmd_mux:src_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                                                // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire   [93:0] sdram_s1_burst_adapter_source0_data;                                                                 // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                                                // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire   [24:0] sdram_s1_burst_adapter_source0_channel;                                                              // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                                        // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                                          // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                            // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire  [111:0] cmd_demux_001_src2_data;                                                                             // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_001_src2_ready;                                                                            // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire   [24:0] cmd_demux_001_src2_channel;                                                                          // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                                                    // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                      // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                            // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire  [111:0] cmd_demux_001_src3_data;                                                                             // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src3_ready;                                                                            // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire   [24:0] cmd_demux_001_src3_channel;                                                                          // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                                                    // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                                      // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                            // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire  [111:0] cmd_demux_001_src4_data;                                                                             // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_001_src4_ready;                                                                            // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire   [24:0] cmd_demux_001_src4_channel;                                                                          // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                                                    // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                                      // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                            // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire  [111:0] cmd_demux_001_src5_data;                                                                             // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_001_src5_ready;                                                                            // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire   [24:0] cmd_demux_001_src5_channel;                                                                          // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_001_src5_startofpacket;                                                                    // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                                      // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                            // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire  [111:0] cmd_demux_001_src6_data;                                                                             // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_001_src6_ready;                                                                            // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire   [24:0] cmd_demux_001_src6_channel;                                                                          // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_001_src6_startofpacket;                                                                    // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                                      // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                            // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire  [111:0] cmd_demux_001_src7_data;                                                                             // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_001_src7_ready;                                                                            // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire   [24:0] cmd_demux_001_src7_channel;                                                                          // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                                    // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                                      // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                            // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire  [111:0] cmd_demux_001_src8_data;                                                                             // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_001_src8_ready;                                                                            // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire   [24:0] cmd_demux_001_src8_channel;                                                                          // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                                    // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                                      // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                                            // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire  [111:0] cmd_demux_001_src9_data;                                                                             // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_001_src9_ready;                                                                            // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire   [24:0] cmd_demux_001_src9_channel;                                                                          // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_001_src9_startofpacket;                                                                    // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                                      // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                                           // cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	wire  [111:0] cmd_demux_001_src10_data;                                                                            // cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_001_src10_ready;                                                                           // cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	wire   [24:0] cmd_demux_001_src10_channel;                                                                         // cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_001_src10_startofpacket;                                                                   // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                                     // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                                                           // cmd_demux_001:src11_valid -> cmd_mux_011:sink0_valid
	wire  [111:0] cmd_demux_001_src11_data;                                                                            // cmd_demux_001:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_001_src11_ready;                                                                           // cmd_mux_011:sink0_ready -> cmd_demux_001:src11_ready
	wire   [24:0] cmd_demux_001_src11_channel;                                                                         // cmd_demux_001:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_001_src11_startofpacket;                                                                   // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                                     // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src12_valid;                                                                           // cmd_demux_001:src12_valid -> cmd_mux_012:sink0_valid
	wire  [111:0] cmd_demux_001_src12_data;                                                                            // cmd_demux_001:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_001_src12_ready;                                                                           // cmd_mux_012:sink0_ready -> cmd_demux_001:src12_ready
	wire   [24:0] cmd_demux_001_src12_channel;                                                                         // cmd_demux_001:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_001_src12_startofpacket;                                                                   // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                                     // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                                                           // cmd_demux_001:src13_valid -> cmd_mux_013:sink0_valid
	wire  [111:0] cmd_demux_001_src13_data;                                                                            // cmd_demux_001:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_001_src13_ready;                                                                           // cmd_mux_013:sink0_ready -> cmd_demux_001:src13_ready
	wire   [24:0] cmd_demux_001_src13_channel;                                                                         // cmd_demux_001:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_001_src13_startofpacket;                                                                   // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                                     // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_001_src14_valid;                                                                           // cmd_demux_001:src14_valid -> cmd_mux_014:sink0_valid
	wire  [111:0] cmd_demux_001_src14_data;                                                                            // cmd_demux_001:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_001_src14_ready;                                                                           // cmd_mux_014:sink0_ready -> cmd_demux_001:src14_ready
	wire   [24:0] cmd_demux_001_src14_channel;                                                                         // cmd_demux_001:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_001_src14_startofpacket;                                                                   // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                                     // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src15_valid;                                                                           // cmd_demux_001:src15_valid -> cmd_mux_015:sink0_valid
	wire  [111:0] cmd_demux_001_src15_data;                                                                            // cmd_demux_001:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_001_src15_ready;                                                                           // cmd_mux_015:sink0_ready -> cmd_demux_001:src15_ready
	wire   [24:0] cmd_demux_001_src15_channel;                                                                         // cmd_demux_001:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_001_src15_startofpacket;                                                                   // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                                                     // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src16_valid;                                                                           // cmd_demux_001:src16_valid -> cmd_mux_016:sink0_valid
	wire  [111:0] cmd_demux_001_src16_data;                                                                            // cmd_demux_001:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_001_src16_ready;                                                                           // cmd_mux_016:sink0_ready -> cmd_demux_001:src16_ready
	wire   [24:0] cmd_demux_001_src16_channel;                                                                         // cmd_demux_001:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_001_src16_startofpacket;                                                                   // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                                                     // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src17_valid;                                                                           // cmd_demux_001:src17_valid -> cmd_mux_017:sink0_valid
	wire  [111:0] cmd_demux_001_src17_data;                                                                            // cmd_demux_001:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_001_src17_ready;                                                                           // cmd_mux_017:sink0_ready -> cmd_demux_001:src17_ready
	wire   [24:0] cmd_demux_001_src17_channel;                                                                         // cmd_demux_001:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_001_src17_startofpacket;                                                                   // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                                                     // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_001_src18_valid;                                                                           // cmd_demux_001:src18_valid -> cmd_mux_018:sink0_valid
	wire  [111:0] cmd_demux_001_src18_data;                                                                            // cmd_demux_001:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_001_src18_ready;                                                                           // cmd_mux_018:sink0_ready -> cmd_demux_001:src18_ready
	wire   [24:0] cmd_demux_001_src18_channel;                                                                         // cmd_demux_001:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_001_src18_startofpacket;                                                                   // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                                                     // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src19_valid;                                                                           // cmd_demux_001:src19_valid -> cmd_mux_019:sink0_valid
	wire  [111:0] cmd_demux_001_src19_data;                                                                            // cmd_demux_001:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_001_src19_ready;                                                                           // cmd_mux_019:sink0_ready -> cmd_demux_001:src19_ready
	wire   [24:0] cmd_demux_001_src19_channel;                                                                         // cmd_demux_001:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_001_src19_startofpacket;                                                                   // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                                                     // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src20_valid;                                                                           // cmd_demux_001:src20_valid -> cmd_mux_020:sink0_valid
	wire  [111:0] cmd_demux_001_src20_data;                                                                            // cmd_demux_001:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_001_src20_ready;                                                                           // cmd_mux_020:sink0_ready -> cmd_demux_001:src20_ready
	wire   [24:0] cmd_demux_001_src20_channel;                                                                         // cmd_demux_001:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_001_src20_startofpacket;                                                                   // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                                                     // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src21_valid;                                                                           // cmd_demux_001:src21_valid -> cmd_mux_021:sink0_valid
	wire  [111:0] cmd_demux_001_src21_data;                                                                            // cmd_demux_001:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_001_src21_ready;                                                                           // cmd_mux_021:sink0_ready -> cmd_demux_001:src21_ready
	wire   [24:0] cmd_demux_001_src21_channel;                                                                         // cmd_demux_001:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_001_src21_startofpacket;                                                                   // cmd_demux_001:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                                                     // cmd_demux_001:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src22_valid;                                                                           // cmd_demux_001:src22_valid -> cmd_mux_022:sink0_valid
	wire  [111:0] cmd_demux_001_src22_data;                                                                            // cmd_demux_001:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_001_src22_ready;                                                                           // cmd_mux_022:sink0_ready -> cmd_demux_001:src22_ready
	wire   [24:0] cmd_demux_001_src22_channel;                                                                         // cmd_demux_001:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_001_src22_startofpacket;                                                                   // cmd_demux_001:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_001_src22_endofpacket;                                                                     // cmd_demux_001:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_001_src23_valid;                                                                           // cmd_demux_001:src23_valid -> cmd_mux_023:sink0_valid
	wire  [111:0] cmd_demux_001_src23_data;                                                                            // cmd_demux_001:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_001_src23_ready;                                                                           // cmd_mux_023:sink0_ready -> cmd_demux_001:src23_ready
	wire   [24:0] cmd_demux_001_src23_channel;                                                                         // cmd_demux_001:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_001_src23_startofpacket;                                                                   // cmd_demux_001:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_001_src23_endofpacket;                                                                     // cmd_demux_001:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_001_src24_valid;                                                                           // cmd_demux_001:src24_valid -> cmd_mux_024:sink0_valid
	wire  [111:0] cmd_demux_001_src24_data;                                                                            // cmd_demux_001:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_001_src24_ready;                                                                           // cmd_mux_024:sink0_ready -> cmd_demux_001:src24_ready
	wire   [24:0] cmd_demux_001_src24_channel;                                                                         // cmd_demux_001:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_001_src24_startofpacket;                                                                   // cmd_demux_001:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_001_src24_endofpacket;                                                                     // cmd_demux_001:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                            // cmd_demux_002:src1_valid -> cmd_mux_024:sink1_valid
	wire  [111:0] cmd_demux_002_src1_data;                                                                             // cmd_demux_002:src1_data -> cmd_mux_024:sink1_data
	wire          cmd_demux_002_src1_ready;                                                                            // cmd_mux_024:sink1_ready -> cmd_demux_002:src1_ready
	wire   [24:0] cmd_demux_002_src1_channel;                                                                          // cmd_demux_002:src1_channel -> cmd_mux_024:sink1_channel
	wire          cmd_demux_002_src1_startofpacket;                                                                    // cmd_demux_002:src1_startofpacket -> cmd_mux_024:sink1_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                                      // cmd_demux_002:src1_endofpacket -> cmd_mux_024:sink1_endofpacket
	wire          cmd_demux_003_src2_valid;                                                                            // cmd_demux_003:src2_valid -> cmd_mux_002:sink1_valid
	wire  [111:0] cmd_demux_003_src2_data;                                                                             // cmd_demux_003:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_003_src2_ready;                                                                            // cmd_mux_002:sink1_ready -> cmd_demux_003:src2_ready
	wire   [24:0] cmd_demux_003_src2_channel;                                                                          // cmd_demux_003:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_003_src2_startofpacket;                                                                    // cmd_demux_003:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                                      // cmd_demux_003:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_003_src3_valid;                                                                            // cmd_demux_003:src3_valid -> cmd_mux_003:sink1_valid
	wire  [111:0] cmd_demux_003_src3_data;                                                                             // cmd_demux_003:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_003_src3_ready;                                                                            // cmd_mux_003:sink1_ready -> cmd_demux_003:src3_ready
	wire   [24:0] cmd_demux_003_src3_channel;                                                                          // cmd_demux_003:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_003_src3_startofpacket;                                                                    // cmd_demux_003:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                                      // cmd_demux_003:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_003_src4_valid;                                                                            // cmd_demux_003:src4_valid -> cmd_mux_004:sink1_valid
	wire  [111:0] cmd_demux_003_src4_data;                                                                             // cmd_demux_003:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_003_src4_ready;                                                                            // cmd_mux_004:sink1_ready -> cmd_demux_003:src4_ready
	wire   [24:0] cmd_demux_003_src4_channel;                                                                          // cmd_demux_003:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_003_src4_startofpacket;                                                                    // cmd_demux_003:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                                      // cmd_demux_003:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_003_src5_valid;                                                                            // cmd_demux_003:src5_valid -> cmd_mux_005:sink1_valid
	wire  [111:0] cmd_demux_003_src5_data;                                                                             // cmd_demux_003:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_003_src5_ready;                                                                            // cmd_mux_005:sink1_ready -> cmd_demux_003:src5_ready
	wire   [24:0] cmd_demux_003_src5_channel;                                                                          // cmd_demux_003:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_003_src5_startofpacket;                                                                    // cmd_demux_003:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                                                      // cmd_demux_003:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_003_src6_valid;                                                                            // cmd_demux_003:src6_valid -> cmd_mux_006:sink1_valid
	wire  [111:0] cmd_demux_003_src6_data;                                                                             // cmd_demux_003:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_003_src6_ready;                                                                            // cmd_mux_006:sink1_ready -> cmd_demux_003:src6_ready
	wire   [24:0] cmd_demux_003_src6_channel;                                                                          // cmd_demux_003:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_003_src6_startofpacket;                                                                    // cmd_demux_003:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                                                      // cmd_demux_003:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_003_src7_valid;                                                                            // cmd_demux_003:src7_valid -> cmd_mux_007:sink1_valid
	wire  [111:0] cmd_demux_003_src7_data;                                                                             // cmd_demux_003:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_003_src7_ready;                                                                            // cmd_mux_007:sink1_ready -> cmd_demux_003:src7_ready
	wire   [24:0] cmd_demux_003_src7_channel;                                                                          // cmd_demux_003:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_003_src7_startofpacket;                                                                    // cmd_demux_003:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                                                      // cmd_demux_003:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_003_src8_valid;                                                                            // cmd_demux_003:src8_valid -> cmd_mux_008:sink1_valid
	wire  [111:0] cmd_demux_003_src8_data;                                                                             // cmd_demux_003:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_003_src8_ready;                                                                            // cmd_mux_008:sink1_ready -> cmd_demux_003:src8_ready
	wire   [24:0] cmd_demux_003_src8_channel;                                                                          // cmd_demux_003:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_003_src8_startofpacket;                                                                    // cmd_demux_003:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                                                      // cmd_demux_003:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_003_src9_valid;                                                                            // cmd_demux_003:src9_valid -> cmd_mux_009:sink1_valid
	wire  [111:0] cmd_demux_003_src9_data;                                                                             // cmd_demux_003:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_003_src9_ready;                                                                            // cmd_mux_009:sink1_ready -> cmd_demux_003:src9_ready
	wire   [24:0] cmd_demux_003_src9_channel;                                                                          // cmd_demux_003:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_003_src9_startofpacket;                                                                    // cmd_demux_003:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_003_src9_endofpacket;                                                                      // cmd_demux_003:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_003_src10_valid;                                                                           // cmd_demux_003:src10_valid -> cmd_mux_010:sink1_valid
	wire  [111:0] cmd_demux_003_src10_data;                                                                            // cmd_demux_003:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_003_src10_ready;                                                                           // cmd_mux_010:sink1_ready -> cmd_demux_003:src10_ready
	wire   [24:0] cmd_demux_003_src10_channel;                                                                         // cmd_demux_003:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_003_src10_startofpacket;                                                                   // cmd_demux_003:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_003_src10_endofpacket;                                                                     // cmd_demux_003:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_003_src11_valid;                                                                           // cmd_demux_003:src11_valid -> cmd_mux_011:sink1_valid
	wire  [111:0] cmd_demux_003_src11_data;                                                                            // cmd_demux_003:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_003_src11_ready;                                                                           // cmd_mux_011:sink1_ready -> cmd_demux_003:src11_ready
	wire   [24:0] cmd_demux_003_src11_channel;                                                                         // cmd_demux_003:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_003_src11_startofpacket;                                                                   // cmd_demux_003:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_003_src11_endofpacket;                                                                     // cmd_demux_003:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_003_src12_valid;                                                                           // cmd_demux_003:src12_valid -> cmd_mux_012:sink1_valid
	wire  [111:0] cmd_demux_003_src12_data;                                                                            // cmd_demux_003:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_003_src12_ready;                                                                           // cmd_mux_012:sink1_ready -> cmd_demux_003:src12_ready
	wire   [24:0] cmd_demux_003_src12_channel;                                                                         // cmd_demux_003:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_003_src12_startofpacket;                                                                   // cmd_demux_003:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_003_src12_endofpacket;                                                                     // cmd_demux_003:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_003_src13_valid;                                                                           // cmd_demux_003:src13_valid -> cmd_mux_013:sink1_valid
	wire  [111:0] cmd_demux_003_src13_data;                                                                            // cmd_demux_003:src13_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_003_src13_ready;                                                                           // cmd_mux_013:sink1_ready -> cmd_demux_003:src13_ready
	wire   [24:0] cmd_demux_003_src13_channel;                                                                         // cmd_demux_003:src13_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_003_src13_startofpacket;                                                                   // cmd_demux_003:src13_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_003_src13_endofpacket;                                                                     // cmd_demux_003:src13_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_003_src14_valid;                                                                           // cmd_demux_003:src14_valid -> cmd_mux_014:sink1_valid
	wire  [111:0] cmd_demux_003_src14_data;                                                                            // cmd_demux_003:src14_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_003_src14_ready;                                                                           // cmd_mux_014:sink1_ready -> cmd_demux_003:src14_ready
	wire   [24:0] cmd_demux_003_src14_channel;                                                                         // cmd_demux_003:src14_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_003_src14_startofpacket;                                                                   // cmd_demux_003:src14_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_003_src14_endofpacket;                                                                     // cmd_demux_003:src14_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_003_src15_valid;                                                                           // cmd_demux_003:src15_valid -> cmd_mux_015:sink1_valid
	wire  [111:0] cmd_demux_003_src15_data;                                                                            // cmd_demux_003:src15_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_003_src15_ready;                                                                           // cmd_mux_015:sink1_ready -> cmd_demux_003:src15_ready
	wire   [24:0] cmd_demux_003_src15_channel;                                                                         // cmd_demux_003:src15_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_003_src15_startofpacket;                                                                   // cmd_demux_003:src15_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_003_src15_endofpacket;                                                                     // cmd_demux_003:src15_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_003_src16_valid;                                                                           // cmd_demux_003:src16_valid -> cmd_mux_016:sink1_valid
	wire  [111:0] cmd_demux_003_src16_data;                                                                            // cmd_demux_003:src16_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_003_src16_ready;                                                                           // cmd_mux_016:sink1_ready -> cmd_demux_003:src16_ready
	wire   [24:0] cmd_demux_003_src16_channel;                                                                         // cmd_demux_003:src16_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_003_src16_startofpacket;                                                                   // cmd_demux_003:src16_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_003_src16_endofpacket;                                                                     // cmd_demux_003:src16_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_003_src17_valid;                                                                           // cmd_demux_003:src17_valid -> cmd_mux_017:sink1_valid
	wire  [111:0] cmd_demux_003_src17_data;                                                                            // cmd_demux_003:src17_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_003_src17_ready;                                                                           // cmd_mux_017:sink1_ready -> cmd_demux_003:src17_ready
	wire   [24:0] cmd_demux_003_src17_channel;                                                                         // cmd_demux_003:src17_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_003_src17_startofpacket;                                                                   // cmd_demux_003:src17_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_003_src17_endofpacket;                                                                     // cmd_demux_003:src17_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_003_src18_valid;                                                                           // cmd_demux_003:src18_valid -> cmd_mux_018:sink1_valid
	wire  [111:0] cmd_demux_003_src18_data;                                                                            // cmd_demux_003:src18_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_003_src18_ready;                                                                           // cmd_mux_018:sink1_ready -> cmd_demux_003:src18_ready
	wire   [24:0] cmd_demux_003_src18_channel;                                                                         // cmd_demux_003:src18_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_003_src18_startofpacket;                                                                   // cmd_demux_003:src18_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_003_src18_endofpacket;                                                                     // cmd_demux_003:src18_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_003_src19_valid;                                                                           // cmd_demux_003:src19_valid -> cmd_mux_019:sink1_valid
	wire  [111:0] cmd_demux_003_src19_data;                                                                            // cmd_demux_003:src19_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_003_src19_ready;                                                                           // cmd_mux_019:sink1_ready -> cmd_demux_003:src19_ready
	wire   [24:0] cmd_demux_003_src19_channel;                                                                         // cmd_demux_003:src19_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_003_src19_startofpacket;                                                                   // cmd_demux_003:src19_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_003_src19_endofpacket;                                                                     // cmd_demux_003:src19_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_003_src20_valid;                                                                           // cmd_demux_003:src20_valid -> cmd_mux_020:sink1_valid
	wire  [111:0] cmd_demux_003_src20_data;                                                                            // cmd_demux_003:src20_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_003_src20_ready;                                                                           // cmd_mux_020:sink1_ready -> cmd_demux_003:src20_ready
	wire   [24:0] cmd_demux_003_src20_channel;                                                                         // cmd_demux_003:src20_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_003_src20_startofpacket;                                                                   // cmd_demux_003:src20_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_003_src20_endofpacket;                                                                     // cmd_demux_003:src20_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_003_src21_valid;                                                                           // cmd_demux_003:src21_valid -> cmd_mux_021:sink1_valid
	wire  [111:0] cmd_demux_003_src21_data;                                                                            // cmd_demux_003:src21_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_003_src21_ready;                                                                           // cmd_mux_021:sink1_ready -> cmd_demux_003:src21_ready
	wire   [24:0] cmd_demux_003_src21_channel;                                                                         // cmd_demux_003:src21_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_003_src21_startofpacket;                                                                   // cmd_demux_003:src21_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_003_src21_endofpacket;                                                                     // cmd_demux_003:src21_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_003_src22_valid;                                                                           // cmd_demux_003:src22_valid -> cmd_mux_022:sink1_valid
	wire  [111:0] cmd_demux_003_src22_data;                                                                            // cmd_demux_003:src22_data -> cmd_mux_022:sink1_data
	wire          cmd_demux_003_src22_ready;                                                                           // cmd_mux_022:sink1_ready -> cmd_demux_003:src22_ready
	wire   [24:0] cmd_demux_003_src22_channel;                                                                         // cmd_demux_003:src22_channel -> cmd_mux_022:sink1_channel
	wire          cmd_demux_003_src22_startofpacket;                                                                   // cmd_demux_003:src22_startofpacket -> cmd_mux_022:sink1_startofpacket
	wire          cmd_demux_003_src22_endofpacket;                                                                     // cmd_demux_003:src22_endofpacket -> cmd_mux_022:sink1_endofpacket
	wire          cmd_demux_003_src23_valid;                                                                           // cmd_demux_003:src23_valid -> cmd_mux_023:sink1_valid
	wire  [111:0] cmd_demux_003_src23_data;                                                                            // cmd_demux_003:src23_data -> cmd_mux_023:sink1_data
	wire          cmd_demux_003_src23_ready;                                                                           // cmd_mux_023:sink1_ready -> cmd_demux_003:src23_ready
	wire   [24:0] cmd_demux_003_src23_channel;                                                                         // cmd_demux_003:src23_channel -> cmd_mux_023:sink1_channel
	wire          cmd_demux_003_src23_startofpacket;                                                                   // cmd_demux_003:src23_startofpacket -> cmd_mux_023:sink1_startofpacket
	wire          cmd_demux_003_src23_endofpacket;                                                                     // cmd_demux_003:src23_endofpacket -> cmd_mux_023:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                            // cmd_demux_004:src0_valid -> cmd_mux:sink4_valid
	wire   [93:0] cmd_demux_004_src0_data;                                                                             // cmd_demux_004:src0_data -> cmd_mux:sink4_data
	wire          cmd_demux_004_src0_ready;                                                                            // cmd_mux:sink4_ready -> cmd_demux_004:src0_ready
	wire   [24:0] cmd_demux_004_src0_channel;                                                                          // cmd_demux_004:src0_channel -> cmd_mux:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                                                    // cmd_demux_004:src0_startofpacket -> cmd_mux:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                                      // cmd_demux_004:src0_endofpacket -> cmd_mux:sink4_endofpacket
	wire          rsp_demux_src4_valid;                                                                                // rsp_demux:src4_valid -> rsp_mux_004:sink0_valid
	wire   [93:0] rsp_demux_src4_data;                                                                                 // rsp_demux:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_src4_ready;                                                                                // rsp_mux_004:sink0_ready -> rsp_demux:src4_ready
	wire   [24:0] rsp_demux_src4_channel;                                                                              // rsp_demux:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_src4_startofpacket;                                                                        // rsp_demux:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_src4_endofpacket;                                                                          // rsp_demux:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                            // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire  [111:0] rsp_demux_002_src0_data;                                                                             // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                            // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire   [24:0] rsp_demux_002_src0_channel;                                                                          // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                    // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                      // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                            // rsp_demux_002:src1_valid -> rsp_mux_003:sink2_valid
	wire  [111:0] rsp_demux_002_src1_data;                                                                             // rsp_demux_002:src1_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_002_src1_ready;                                                                            // rsp_mux_003:sink2_ready -> rsp_demux_002:src1_ready
	wire   [24:0] rsp_demux_002_src1_channel;                                                                          // rsp_demux_002:src1_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                                    // rsp_demux_002:src1_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                                      // rsp_demux_002:src1_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                            // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire  [111:0] rsp_demux_003_src0_data;                                                                             // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                            // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire   [24:0] rsp_demux_003_src0_channel;                                                                          // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                    // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                      // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                            // rsp_demux_003:src1_valid -> rsp_mux_003:sink3_valid
	wire  [111:0] rsp_demux_003_src1_data;                                                                             // rsp_demux_003:src1_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_003_src1_ready;                                                                            // rsp_mux_003:sink3_ready -> rsp_demux_003:src1_ready
	wire   [24:0] rsp_demux_003_src1_channel;                                                                          // rsp_demux_003:src1_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                                    // rsp_demux_003:src1_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                                      // rsp_demux_003:src1_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                            // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire  [111:0] rsp_demux_004_src0_data;                                                                             // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                            // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire   [24:0] rsp_demux_004_src0_channel;                                                                          // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                    // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                      // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                            // rsp_demux_004:src1_valid -> rsp_mux_003:sink4_valid
	wire  [111:0] rsp_demux_004_src1_data;                                                                             // rsp_demux_004:src1_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_004_src1_ready;                                                                            // rsp_mux_003:sink4_ready -> rsp_demux_004:src1_ready
	wire   [24:0] rsp_demux_004_src1_channel;                                                                          // rsp_demux_004:src1_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                                                    // rsp_demux_004:src1_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                                      // rsp_demux_004:src1_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                            // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire  [111:0] rsp_demux_005_src0_data;                                                                             // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                            // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire   [24:0] rsp_demux_005_src0_channel;                                                                          // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                    // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                      // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                            // rsp_demux_005:src1_valid -> rsp_mux_003:sink5_valid
	wire  [111:0] rsp_demux_005_src1_data;                                                                             // rsp_demux_005:src1_data -> rsp_mux_003:sink5_data
	wire          rsp_demux_005_src1_ready;                                                                            // rsp_mux_003:sink5_ready -> rsp_demux_005:src1_ready
	wire   [24:0] rsp_demux_005_src1_channel;                                                                          // rsp_demux_005:src1_channel -> rsp_mux_003:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                                                    // rsp_demux_005:src1_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                                      // rsp_demux_005:src1_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                            // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire  [111:0] rsp_demux_006_src0_data;                                                                             // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                            // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire   [24:0] rsp_demux_006_src0_channel;                                                                          // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                    // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                      // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                            // rsp_demux_006:src1_valid -> rsp_mux_003:sink6_valid
	wire  [111:0] rsp_demux_006_src1_data;                                                                             // rsp_demux_006:src1_data -> rsp_mux_003:sink6_data
	wire          rsp_demux_006_src1_ready;                                                                            // rsp_mux_003:sink6_ready -> rsp_demux_006:src1_ready
	wire   [24:0] rsp_demux_006_src1_channel;                                                                          // rsp_demux_006:src1_channel -> rsp_mux_003:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                                                    // rsp_demux_006:src1_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                                      // rsp_demux_006:src1_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                            // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire  [111:0] rsp_demux_007_src0_data;                                                                             // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                            // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire   [24:0] rsp_demux_007_src0_channel;                                                                          // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                    // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                      // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                            // rsp_demux_007:src1_valid -> rsp_mux_003:sink7_valid
	wire  [111:0] rsp_demux_007_src1_data;                                                                             // rsp_demux_007:src1_data -> rsp_mux_003:sink7_data
	wire          rsp_demux_007_src1_ready;                                                                            // rsp_mux_003:sink7_ready -> rsp_demux_007:src1_ready
	wire   [24:0] rsp_demux_007_src1_channel;                                                                          // rsp_demux_007:src1_channel -> rsp_mux_003:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                                                    // rsp_demux_007:src1_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                                      // rsp_demux_007:src1_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                            // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire  [111:0] rsp_demux_008_src0_data;                                                                             // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                            // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire   [24:0] rsp_demux_008_src0_channel;                                                                          // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                    // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                      // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                            // rsp_demux_008:src1_valid -> rsp_mux_003:sink8_valid
	wire  [111:0] rsp_demux_008_src1_data;                                                                             // rsp_demux_008:src1_data -> rsp_mux_003:sink8_data
	wire          rsp_demux_008_src1_ready;                                                                            // rsp_mux_003:sink8_ready -> rsp_demux_008:src1_ready
	wire   [24:0] rsp_demux_008_src1_channel;                                                                          // rsp_demux_008:src1_channel -> rsp_mux_003:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                                                    // rsp_demux_008:src1_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                                      // rsp_demux_008:src1_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                            // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire  [111:0] rsp_demux_009_src0_data;                                                                             // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                            // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	wire   [24:0] rsp_demux_009_src0_channel;                                                                          // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                                    // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                      // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                            // rsp_demux_009:src1_valid -> rsp_mux_003:sink9_valid
	wire  [111:0] rsp_demux_009_src1_data;                                                                             // rsp_demux_009:src1_data -> rsp_mux_003:sink9_data
	wire          rsp_demux_009_src1_ready;                                                                            // rsp_mux_003:sink9_ready -> rsp_demux_009:src1_ready
	wire   [24:0] rsp_demux_009_src1_channel;                                                                          // rsp_demux_009:src1_channel -> rsp_mux_003:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                                                    // rsp_demux_009:src1_startofpacket -> rsp_mux_003:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                                      // rsp_demux_009:src1_endofpacket -> rsp_mux_003:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                            // rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	wire  [111:0] rsp_demux_010_src0_data;                                                                             // rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                            // rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	wire   [24:0] rsp_demux_010_src0_channel;                                                                          // rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                                    // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                      // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                            // rsp_demux_010:src1_valid -> rsp_mux_003:sink10_valid
	wire  [111:0] rsp_demux_010_src1_data;                                                                             // rsp_demux_010:src1_data -> rsp_mux_003:sink10_data
	wire          rsp_demux_010_src1_ready;                                                                            // rsp_mux_003:sink10_ready -> rsp_demux_010:src1_ready
	wire   [24:0] rsp_demux_010_src1_channel;                                                                          // rsp_demux_010:src1_channel -> rsp_mux_003:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                                                    // rsp_demux_010:src1_startofpacket -> rsp_mux_003:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                                      // rsp_demux_010:src1_endofpacket -> rsp_mux_003:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                            // rsp_demux_011:src0_valid -> rsp_mux_001:sink11_valid
	wire  [111:0] rsp_demux_011_src0_data;                                                                             // rsp_demux_011:src0_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                            // rsp_mux_001:sink11_ready -> rsp_demux_011:src0_ready
	wire   [24:0] rsp_demux_011_src0_channel;                                                                          // rsp_demux_011:src0_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                                    // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                      // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                            // rsp_demux_011:src1_valid -> rsp_mux_003:sink11_valid
	wire  [111:0] rsp_demux_011_src1_data;                                                                             // rsp_demux_011:src1_data -> rsp_mux_003:sink11_data
	wire          rsp_demux_011_src1_ready;                                                                            // rsp_mux_003:sink11_ready -> rsp_demux_011:src1_ready
	wire   [24:0] rsp_demux_011_src1_channel;                                                                          // rsp_demux_011:src1_channel -> rsp_mux_003:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                                                                    // rsp_demux_011:src1_startofpacket -> rsp_mux_003:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                                      // rsp_demux_011:src1_endofpacket -> rsp_mux_003:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                            // rsp_demux_012:src0_valid -> rsp_mux_001:sink12_valid
	wire  [111:0] rsp_demux_012_src0_data;                                                                             // rsp_demux_012:src0_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                            // rsp_mux_001:sink12_ready -> rsp_demux_012:src0_ready
	wire   [24:0] rsp_demux_012_src0_channel;                                                                          // rsp_demux_012:src0_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                                    // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                      // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                                            // rsp_demux_012:src1_valid -> rsp_mux_003:sink12_valid
	wire  [111:0] rsp_demux_012_src1_data;                                                                             // rsp_demux_012:src1_data -> rsp_mux_003:sink12_data
	wire          rsp_demux_012_src1_ready;                                                                            // rsp_mux_003:sink12_ready -> rsp_demux_012:src1_ready
	wire   [24:0] rsp_demux_012_src1_channel;                                                                          // rsp_demux_012:src1_channel -> rsp_mux_003:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                                                                    // rsp_demux_012:src1_startofpacket -> rsp_mux_003:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                                      // rsp_demux_012:src1_endofpacket -> rsp_mux_003:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                            // rsp_demux_013:src0_valid -> rsp_mux_001:sink13_valid
	wire  [111:0] rsp_demux_013_src0_data;                                                                             // rsp_demux_013:src0_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                            // rsp_mux_001:sink13_ready -> rsp_demux_013:src0_ready
	wire   [24:0] rsp_demux_013_src0_channel;                                                                          // rsp_demux_013:src0_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                                    // rsp_demux_013:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                                      // rsp_demux_013:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                                            // rsp_demux_013:src1_valid -> rsp_mux_003:sink13_valid
	wire  [111:0] rsp_demux_013_src1_data;                                                                             // rsp_demux_013:src1_data -> rsp_mux_003:sink13_data
	wire          rsp_demux_013_src1_ready;                                                                            // rsp_mux_003:sink13_ready -> rsp_demux_013:src1_ready
	wire   [24:0] rsp_demux_013_src1_channel;                                                                          // rsp_demux_013:src1_channel -> rsp_mux_003:sink13_channel
	wire          rsp_demux_013_src1_startofpacket;                                                                    // rsp_demux_013:src1_startofpacket -> rsp_mux_003:sink13_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                                      // rsp_demux_013:src1_endofpacket -> rsp_mux_003:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                            // rsp_demux_014:src0_valid -> rsp_mux_001:sink14_valid
	wire  [111:0] rsp_demux_014_src0_data;                                                                             // rsp_demux_014:src0_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                            // rsp_mux_001:sink14_ready -> rsp_demux_014:src0_ready
	wire   [24:0] rsp_demux_014_src0_channel;                                                                          // rsp_demux_014:src0_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                                    // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                                      // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                                            // rsp_demux_014:src1_valid -> rsp_mux_003:sink14_valid
	wire  [111:0] rsp_demux_014_src1_data;                                                                             // rsp_demux_014:src1_data -> rsp_mux_003:sink14_data
	wire          rsp_demux_014_src1_ready;                                                                            // rsp_mux_003:sink14_ready -> rsp_demux_014:src1_ready
	wire   [24:0] rsp_demux_014_src1_channel;                                                                          // rsp_demux_014:src1_channel -> rsp_mux_003:sink14_channel
	wire          rsp_demux_014_src1_startofpacket;                                                                    // rsp_demux_014:src1_startofpacket -> rsp_mux_003:sink14_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                                      // rsp_demux_014:src1_endofpacket -> rsp_mux_003:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                            // rsp_demux_015:src0_valid -> rsp_mux_001:sink15_valid
	wire  [111:0] rsp_demux_015_src0_data;                                                                             // rsp_demux_015:src0_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                            // rsp_mux_001:sink15_ready -> rsp_demux_015:src0_ready
	wire   [24:0] rsp_demux_015_src0_channel;                                                                          // rsp_demux_015:src0_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                                    // rsp_demux_015:src0_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                                      // rsp_demux_015:src0_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                                                            // rsp_demux_015:src1_valid -> rsp_mux_003:sink15_valid
	wire  [111:0] rsp_demux_015_src1_data;                                                                             // rsp_demux_015:src1_data -> rsp_mux_003:sink15_data
	wire          rsp_demux_015_src1_ready;                                                                            // rsp_mux_003:sink15_ready -> rsp_demux_015:src1_ready
	wire   [24:0] rsp_demux_015_src1_channel;                                                                          // rsp_demux_015:src1_channel -> rsp_mux_003:sink15_channel
	wire          rsp_demux_015_src1_startofpacket;                                                                    // rsp_demux_015:src1_startofpacket -> rsp_mux_003:sink15_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                                      // rsp_demux_015:src1_endofpacket -> rsp_mux_003:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                            // rsp_demux_016:src0_valid -> rsp_mux_001:sink16_valid
	wire  [111:0] rsp_demux_016_src0_data;                                                                             // rsp_demux_016:src0_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                            // rsp_mux_001:sink16_ready -> rsp_demux_016:src0_ready
	wire   [24:0] rsp_demux_016_src0_channel;                                                                          // rsp_demux_016:src0_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                                    // rsp_demux_016:src0_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                                      // rsp_demux_016:src0_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                                                            // rsp_demux_016:src1_valid -> rsp_mux_003:sink16_valid
	wire  [111:0] rsp_demux_016_src1_data;                                                                             // rsp_demux_016:src1_data -> rsp_mux_003:sink16_data
	wire          rsp_demux_016_src1_ready;                                                                            // rsp_mux_003:sink16_ready -> rsp_demux_016:src1_ready
	wire   [24:0] rsp_demux_016_src1_channel;                                                                          // rsp_demux_016:src1_channel -> rsp_mux_003:sink16_channel
	wire          rsp_demux_016_src1_startofpacket;                                                                    // rsp_demux_016:src1_startofpacket -> rsp_mux_003:sink16_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                                      // rsp_demux_016:src1_endofpacket -> rsp_mux_003:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                            // rsp_demux_017:src0_valid -> rsp_mux_001:sink17_valid
	wire  [111:0] rsp_demux_017_src0_data;                                                                             // rsp_demux_017:src0_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                            // rsp_mux_001:sink17_ready -> rsp_demux_017:src0_ready
	wire   [24:0] rsp_demux_017_src0_channel;                                                                          // rsp_demux_017:src0_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                                    // rsp_demux_017:src0_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                                      // rsp_demux_017:src0_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                                                            // rsp_demux_017:src1_valid -> rsp_mux_003:sink17_valid
	wire  [111:0] rsp_demux_017_src1_data;                                                                             // rsp_demux_017:src1_data -> rsp_mux_003:sink17_data
	wire          rsp_demux_017_src1_ready;                                                                            // rsp_mux_003:sink17_ready -> rsp_demux_017:src1_ready
	wire   [24:0] rsp_demux_017_src1_channel;                                                                          // rsp_demux_017:src1_channel -> rsp_mux_003:sink17_channel
	wire          rsp_demux_017_src1_startofpacket;                                                                    // rsp_demux_017:src1_startofpacket -> rsp_mux_003:sink17_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                                      // rsp_demux_017:src1_endofpacket -> rsp_mux_003:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                            // rsp_demux_018:src0_valid -> rsp_mux_001:sink18_valid
	wire  [111:0] rsp_demux_018_src0_data;                                                                             // rsp_demux_018:src0_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_018_src0_ready;                                                                            // rsp_mux_001:sink18_ready -> rsp_demux_018:src0_ready
	wire   [24:0] rsp_demux_018_src0_channel;                                                                          // rsp_demux_018:src0_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                                    // rsp_demux_018:src0_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                                      // rsp_demux_018:src0_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                                                            // rsp_demux_018:src1_valid -> rsp_mux_003:sink18_valid
	wire  [111:0] rsp_demux_018_src1_data;                                                                             // rsp_demux_018:src1_data -> rsp_mux_003:sink18_data
	wire          rsp_demux_018_src1_ready;                                                                            // rsp_mux_003:sink18_ready -> rsp_demux_018:src1_ready
	wire   [24:0] rsp_demux_018_src1_channel;                                                                          // rsp_demux_018:src1_channel -> rsp_mux_003:sink18_channel
	wire          rsp_demux_018_src1_startofpacket;                                                                    // rsp_demux_018:src1_startofpacket -> rsp_mux_003:sink18_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                                      // rsp_demux_018:src1_endofpacket -> rsp_mux_003:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                            // rsp_demux_019:src0_valid -> rsp_mux_001:sink19_valid
	wire  [111:0] rsp_demux_019_src0_data;                                                                             // rsp_demux_019:src0_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_019_src0_ready;                                                                            // rsp_mux_001:sink19_ready -> rsp_demux_019:src0_ready
	wire   [24:0] rsp_demux_019_src0_channel;                                                                          // rsp_demux_019:src0_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                                    // rsp_demux_019:src0_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                                      // rsp_demux_019:src0_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                                            // rsp_demux_019:src1_valid -> rsp_mux_003:sink19_valid
	wire  [111:0] rsp_demux_019_src1_data;                                                                             // rsp_demux_019:src1_data -> rsp_mux_003:sink19_data
	wire          rsp_demux_019_src1_ready;                                                                            // rsp_mux_003:sink19_ready -> rsp_demux_019:src1_ready
	wire   [24:0] rsp_demux_019_src1_channel;                                                                          // rsp_demux_019:src1_channel -> rsp_mux_003:sink19_channel
	wire          rsp_demux_019_src1_startofpacket;                                                                    // rsp_demux_019:src1_startofpacket -> rsp_mux_003:sink19_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                                      // rsp_demux_019:src1_endofpacket -> rsp_mux_003:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                            // rsp_demux_020:src0_valid -> rsp_mux_001:sink20_valid
	wire  [111:0] rsp_demux_020_src0_data;                                                                             // rsp_demux_020:src0_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                            // rsp_mux_001:sink20_ready -> rsp_demux_020:src0_ready
	wire   [24:0] rsp_demux_020_src0_channel;                                                                          // rsp_demux_020:src0_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                                    // rsp_demux_020:src0_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                                      // rsp_demux_020:src0_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                                                            // rsp_demux_020:src1_valid -> rsp_mux_003:sink20_valid
	wire  [111:0] rsp_demux_020_src1_data;                                                                             // rsp_demux_020:src1_data -> rsp_mux_003:sink20_data
	wire          rsp_demux_020_src1_ready;                                                                            // rsp_mux_003:sink20_ready -> rsp_demux_020:src1_ready
	wire   [24:0] rsp_demux_020_src1_channel;                                                                          // rsp_demux_020:src1_channel -> rsp_mux_003:sink20_channel
	wire          rsp_demux_020_src1_startofpacket;                                                                    // rsp_demux_020:src1_startofpacket -> rsp_mux_003:sink20_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                                                      // rsp_demux_020:src1_endofpacket -> rsp_mux_003:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                                            // rsp_demux_021:src0_valid -> rsp_mux_001:sink21_valid
	wire  [111:0] rsp_demux_021_src0_data;                                                                             // rsp_demux_021:src0_data -> rsp_mux_001:sink21_data
	wire          rsp_demux_021_src0_ready;                                                                            // rsp_mux_001:sink21_ready -> rsp_demux_021:src0_ready
	wire   [24:0] rsp_demux_021_src0_channel;                                                                          // rsp_demux_021:src0_channel -> rsp_mux_001:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                                    // rsp_demux_021:src0_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                                      // rsp_demux_021:src0_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_021_src1_valid;                                                                            // rsp_demux_021:src1_valid -> rsp_mux_003:sink21_valid
	wire  [111:0] rsp_demux_021_src1_data;                                                                             // rsp_demux_021:src1_data -> rsp_mux_003:sink21_data
	wire          rsp_demux_021_src1_ready;                                                                            // rsp_mux_003:sink21_ready -> rsp_demux_021:src1_ready
	wire   [24:0] rsp_demux_021_src1_channel;                                                                          // rsp_demux_021:src1_channel -> rsp_mux_003:sink21_channel
	wire          rsp_demux_021_src1_startofpacket;                                                                    // rsp_demux_021:src1_startofpacket -> rsp_mux_003:sink21_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                                      // rsp_demux_021:src1_endofpacket -> rsp_mux_003:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                                            // rsp_demux_022:src0_valid -> rsp_mux_001:sink22_valid
	wire  [111:0] rsp_demux_022_src0_data;                                                                             // rsp_demux_022:src0_data -> rsp_mux_001:sink22_data
	wire          rsp_demux_022_src0_ready;                                                                            // rsp_mux_001:sink22_ready -> rsp_demux_022:src0_ready
	wire   [24:0] rsp_demux_022_src0_channel;                                                                          // rsp_demux_022:src0_channel -> rsp_mux_001:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                                    // rsp_demux_022:src0_startofpacket -> rsp_mux_001:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                                      // rsp_demux_022:src0_endofpacket -> rsp_mux_001:sink22_endofpacket
	wire          rsp_demux_022_src1_valid;                                                                            // rsp_demux_022:src1_valid -> rsp_mux_003:sink22_valid
	wire  [111:0] rsp_demux_022_src1_data;                                                                             // rsp_demux_022:src1_data -> rsp_mux_003:sink22_data
	wire          rsp_demux_022_src1_ready;                                                                            // rsp_mux_003:sink22_ready -> rsp_demux_022:src1_ready
	wire   [24:0] rsp_demux_022_src1_channel;                                                                          // rsp_demux_022:src1_channel -> rsp_mux_003:sink22_channel
	wire          rsp_demux_022_src1_startofpacket;                                                                    // rsp_demux_022:src1_startofpacket -> rsp_mux_003:sink22_startofpacket
	wire          rsp_demux_022_src1_endofpacket;                                                                      // rsp_demux_022:src1_endofpacket -> rsp_mux_003:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                                            // rsp_demux_023:src0_valid -> rsp_mux_001:sink23_valid
	wire  [111:0] rsp_demux_023_src0_data;                                                                             // rsp_demux_023:src0_data -> rsp_mux_001:sink23_data
	wire          rsp_demux_023_src0_ready;                                                                            // rsp_mux_001:sink23_ready -> rsp_demux_023:src0_ready
	wire   [24:0] rsp_demux_023_src0_channel;                                                                          // rsp_demux_023:src0_channel -> rsp_mux_001:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                                    // rsp_demux_023:src0_startofpacket -> rsp_mux_001:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                                      // rsp_demux_023:src0_endofpacket -> rsp_mux_001:sink23_endofpacket
	wire          rsp_demux_023_src1_valid;                                                                            // rsp_demux_023:src1_valid -> rsp_mux_003:sink23_valid
	wire  [111:0] rsp_demux_023_src1_data;                                                                             // rsp_demux_023:src1_data -> rsp_mux_003:sink23_data
	wire          rsp_demux_023_src1_ready;                                                                            // rsp_mux_003:sink23_ready -> rsp_demux_023:src1_ready
	wire   [24:0] rsp_demux_023_src1_channel;                                                                          // rsp_demux_023:src1_channel -> rsp_mux_003:sink23_channel
	wire          rsp_demux_023_src1_startofpacket;                                                                    // rsp_demux_023:src1_startofpacket -> rsp_mux_003:sink23_startofpacket
	wire          rsp_demux_023_src1_endofpacket;                                                                      // rsp_demux_023:src1_endofpacket -> rsp_mux_003:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                                            // rsp_demux_024:src0_valid -> rsp_mux_001:sink24_valid
	wire  [111:0] rsp_demux_024_src0_data;                                                                             // rsp_demux_024:src0_data -> rsp_mux_001:sink24_data
	wire          rsp_demux_024_src0_ready;                                                                            // rsp_mux_001:sink24_ready -> rsp_demux_024:src0_ready
	wire   [24:0] rsp_demux_024_src0_channel;                                                                          // rsp_demux_024:src0_channel -> rsp_mux_001:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                                    // rsp_demux_024:src0_startofpacket -> rsp_mux_001:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                                      // rsp_demux_024:src0_endofpacket -> rsp_mux_001:sink24_endofpacket
	wire          rsp_demux_024_src1_valid;                                                                            // rsp_demux_024:src1_valid -> rsp_mux_002:sink1_valid
	wire  [111:0] rsp_demux_024_src1_data;                                                                             // rsp_demux_024:src1_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_024_src1_ready;                                                                            // rsp_mux_002:sink1_ready -> rsp_demux_024:src1_ready
	wire   [24:0] rsp_demux_024_src1_channel;                                                                          // rsp_demux_024:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_024_src1_startofpacket;                                                                    // rsp_demux_024:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_024_src1_endofpacket;                                                                      // rsp_demux_024:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                            // cmd_demux_001:src0_valid -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [111:0] cmd_demux_001_src0_data;                                                                             // cmd_demux_001:src0_data -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                            // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire   [24:0] cmd_demux_001_src0_channel;                                                                          // cmd_demux_001:src0_channel -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                    // cmd_demux_001:src0_startofpacket -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                      // cmd_demux_001:src0_endofpacket -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_data_master_to_sdram_s1_cmd_width_adapter_src_valid;                                           // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire   [93:0] nios2_data_master_to_sdram_s1_cmd_width_adapter_src_data;                                            // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          nios2_data_master_to_sdram_s1_cmd_width_adapter_src_ready;                                           // cmd_mux:sink1_ready -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [24:0] nios2_data_master_to_sdram_s1_cmd_width_adapter_src_channel;                                         // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          nios2_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                                   // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          nios2_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                     // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                            // cmd_demux_002:src0_valid -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [111:0] cmd_demux_002_src0_data;                                                                             // cmd_demux_002:src0_data -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                                            // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire   [24:0] cmd_demux_002_src0_channel;                                                                          // cmd_demux_002:src0_channel -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                    // cmd_demux_002:src0_startofpacket -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                      // cmd_demux_002:src0_endofpacket -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid;                                    // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux:sink2_valid
	wire   [93:0] nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_data;                                     // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux:sink2_data
	wire          nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready;                                    // cmd_mux:sink2_ready -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [24:0] nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel;                                  // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux:sink2_channel
	wire          nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                            // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                              // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                            // cmd_demux_003:src0_valid -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [111:0] cmd_demux_003_src0_data;                                                                             // cmd_demux_003:src0_data -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_003_src0_ready;                                                                            // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_003:src0_ready
	wire   [24:0] cmd_demux_003_src0_channel;                                                                          // cmd_demux_003:src0_channel -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                                                    // cmd_demux_003:src0_startofpacket -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                                      // cmd_demux_003:src0_endofpacket -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid;                                  // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux:sink3_valid
	wire   [93:0] jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data;                                   // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux:sink3_data
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready;                                  // cmd_mux:sink3_ready -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [24:0] jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel;                                // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux:sink3_channel
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                          // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink3_startofpacket
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                            // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink3_endofpacket
	wire          rsp_demux_src1_valid;                                                                                // rsp_demux:src1_valid -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_valid
	wire   [93:0] rsp_demux_src1_data;                                                                                 // rsp_demux:src1_data -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                                                // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire   [24:0] rsp_demux_src1_channel;                                                                              // rsp_demux:src1_channel -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                        // rsp_demux:src1_startofpacket -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                          // rsp_demux:src1_endofpacket -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_nios2_data_master_rsp_width_adapter_src_valid;                                           // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [111:0] sdram_s1_to_nios2_data_master_rsp_width_adapter_src_data;                                            // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          sdram_s1_to_nios2_data_master_rsp_width_adapter_src_ready;                                           // rsp_mux_001:sink0_ready -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_ready
	wire   [24:0] sdram_s1_to_nios2_data_master_rsp_width_adapter_src_channel;                                         // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          sdram_s1_to_nios2_data_master_rsp_width_adapter_src_startofpacket;                                   // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          sdram_s1_to_nios2_data_master_rsp_width_adapter_src_endofpacket;                                     // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                                // rsp_demux:src2_valid -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_valid
	wire   [93:0] rsp_demux_src2_data;                                                                                 // rsp_demux:src2_data -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_data
	wire          rsp_demux_src2_ready;                                                                                // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire   [24:0] rsp_demux_src2_channel;                                                                              // rsp_demux:src2_channel -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_startofpacket;                                                                        // rsp_demux:src2_startofpacket -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                          // rsp_demux:src2_endofpacket -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_valid;                                    // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [111:0] sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_data;                                     // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_ready;                                    // rsp_mux_002:sink0_ready -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_ready
	wire   [24:0] sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_channel;                                  // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_startofpacket;                            // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_endofpacket;                              // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                                // rsp_demux:src3_valid -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_valid
	wire   [93:0] rsp_demux_src3_data;                                                                                 // rsp_demux:src3_data -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_data
	wire          rsp_demux_src3_ready;                                                                                // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_ready -> rsp_demux:src3_ready
	wire   [24:0] rsp_demux_src3_channel;                                                                              // rsp_demux:src3_channel -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src3_startofpacket;                                                                        // rsp_demux:src3_startofpacket -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                                          // rsp_demux:src3_endofpacket -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid;                                  // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_valid -> rsp_mux_003:sink0_valid
	wire  [111:0] sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data;                                   // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_data -> rsp_mux_003:sink0_data
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready;                                  // rsp_mux_003:sink0_ready -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_ready
	wire   [24:0] sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel;                                // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_channel -> rsp_mux_003:sink0_channel
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket;                          // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket;                            // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                                                // cmd_demux:src0_valid -> crosser:in_valid
	wire   [93:0] cmd_demux_src0_data;                                                                                 // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                                // crosser:in_ready -> cmd_demux:src0_ready
	wire   [24:0] cmd_demux_src0_channel;                                                                              // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                        // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                          // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                                   // crosser:out_valid -> cmd_mux:sink0_valid
	wire   [93:0] crosser_out_data;                                                                                    // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                                   // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [24:0] crosser_out_channel;                                                                                 // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                           // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                             // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                            // cmd_demux_001:src1_valid -> crosser_001:in_valid
	wire  [111:0] cmd_demux_001_src1_data;                                                                             // cmd_demux_001:src1_data -> crosser_001:in_data
	wire          cmd_demux_001_src1_ready;                                                                            // crosser_001:in_ready -> cmd_demux_001:src1_ready
	wire   [24:0] cmd_demux_001_src1_channel;                                                                          // cmd_demux_001:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                    // cmd_demux_001:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                      // cmd_demux_001:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                               // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [111:0] crosser_001_out_data;                                                                                // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                                               // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [24:0] crosser_001_out_channel;                                                                             // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                                                       // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                         // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                            // cmd_demux_003:src1_valid -> crosser_002:in_valid
	wire  [111:0] cmd_demux_003_src1_data;                                                                             // cmd_demux_003:src1_data -> crosser_002:in_data
	wire          cmd_demux_003_src1_ready;                                                                            // crosser_002:in_ready -> cmd_demux_003:src1_ready
	wire   [24:0] cmd_demux_003_src1_channel;                                                                          // cmd_demux_003:src1_channel -> crosser_002:in_channel
	wire          cmd_demux_003_src1_startofpacket;                                                                    // cmd_demux_003:src1_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                                      // cmd_demux_003:src1_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                               // crosser_002:out_valid -> cmd_mux_001:sink1_valid
	wire  [111:0] crosser_002_out_data;                                                                                // crosser_002:out_data -> cmd_mux_001:sink1_data
	wire          crosser_002_out_ready;                                                                               // cmd_mux_001:sink1_ready -> crosser_002:out_ready
	wire   [24:0] crosser_002_out_channel;                                                                             // crosser_002:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_002_out_startofpacket;                                                                       // crosser_002:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                                                         // crosser_002:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                                // rsp_demux:src0_valid -> crosser_003:in_valid
	wire   [93:0] rsp_demux_src0_data;                                                                                 // rsp_demux:src0_data -> crosser_003:in_data
	wire          rsp_demux_src0_ready;                                                                                // crosser_003:in_ready -> rsp_demux:src0_ready
	wire   [24:0] rsp_demux_src0_channel;                                                                              // rsp_demux:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                        // rsp_demux:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                          // rsp_demux:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                               // crosser_003:out_valid -> rsp_mux:sink0_valid
	wire   [93:0] crosser_003_out_data;                                                                                // crosser_003:out_data -> rsp_mux:sink0_data
	wire          crosser_003_out_ready;                                                                               // rsp_mux:sink0_ready -> crosser_003:out_ready
	wire   [24:0] crosser_003_out_channel;                                                                             // crosser_003:out_channel -> rsp_mux:sink0_channel
	wire          crosser_003_out_startofpacket;                                                                       // crosser_003:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                                         // crosser_003:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                            // rsp_demux_001:src0_valid -> crosser_004:in_valid
	wire  [111:0] rsp_demux_001_src0_data;                                                                             // rsp_demux_001:src0_data -> crosser_004:in_data
	wire          rsp_demux_001_src0_ready;                                                                            // crosser_004:in_ready -> rsp_demux_001:src0_ready
	wire   [24:0] rsp_demux_001_src0_channel;                                                                          // rsp_demux_001:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                    // rsp_demux_001:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                      // rsp_demux_001:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                               // crosser_004:out_valid -> rsp_mux_001:sink1_valid
	wire  [111:0] crosser_004_out_data;                                                                                // crosser_004:out_data -> rsp_mux_001:sink1_data
	wire          crosser_004_out_ready;                                                                               // rsp_mux_001:sink1_ready -> crosser_004:out_ready
	wire   [24:0] crosser_004_out_channel;                                                                             // crosser_004:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_004_out_startofpacket;                                                                       // crosser_004:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_004_out_endofpacket;                                                                         // crosser_004:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                            // rsp_demux_001:src1_valid -> crosser_005:in_valid
	wire  [111:0] rsp_demux_001_src1_data;                                                                             // rsp_demux_001:src1_data -> crosser_005:in_data
	wire          rsp_demux_001_src1_ready;                                                                            // crosser_005:in_ready -> rsp_demux_001:src1_ready
	wire   [24:0] rsp_demux_001_src1_channel;                                                                          // rsp_demux_001:src1_channel -> crosser_005:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                                    // rsp_demux_001:src1_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                      // rsp_demux_001:src1_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                               // crosser_005:out_valid -> rsp_mux_003:sink1_valid
	wire  [111:0] crosser_005_out_data;                                                                                // crosser_005:out_data -> rsp_mux_003:sink1_data
	wire          crosser_005_out_ready;                                                                               // rsp_mux_003:sink1_ready -> crosser_005:out_ready
	wire   [24:0] crosser_005_out_channel;                                                                             // crosser_005:out_channel -> rsp_mux_003:sink1_channel
	wire          crosser_005_out_startofpacket;                                                                       // crosser_005:out_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          crosser_005_out_endofpacket;                                                                         // crosser_005:out_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire   [24:0] jtag_to_fpga_bridge_master_limiter_cmd_valid_data;                                                   // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                                 // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                                  // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                                 // avalon_st_adapter:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                       // avalon_st_adapter:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                                        // avalon_st_adapter:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                       // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                       // avalon_st_adapter:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_out_valid;                            // video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_out_data;                             // video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_001:in_0_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                   // avalon_st_adapter_001:out_0_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                                    // avalon_st_adapter_001:out_0_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                   // video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                   // avalon_st_adapter_001:out_0_error -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                              // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                                               // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_002:in_0_ready -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                   // avalon_st_adapter_002:out_0_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                                    // avalon_st_adapter_002:out_0_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                   // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                   // avalon_st_adapter_002:out_0_error -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          vga_subsystem_char_buf_rgb_agent_rdata_fifo_out_valid;                                               // vga_subsystem_char_buf_rgb_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] vga_subsystem_char_buf_rgb_agent_rdata_fifo_out_data;                                                // vga_subsystem_char_buf_rgb_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          vga_subsystem_char_buf_rgb_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_003:in_0_ready -> vga_subsystem_char_buf_rgb_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                   // avalon_st_adapter_003:out_0_valid -> vga_subsystem_char_buf_rgb_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                                    // avalon_st_adapter_003:out_0_data -> vga_subsystem_char_buf_rgb_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                   // vga_subsystem_char_buf_rgb_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                   // avalon_st_adapter_003:out_0_error -> vga_subsystem_char_buf_rgb_agent:rdata_fifo_sink_error
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid;                                  // vga_subsystem_char_buffer_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data;                                   // vga_subsystem_char_buffer_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_004:in_0_ready -> vga_subsystem_char_buffer_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                   // avalon_st_adapter_004:out_0_valid -> vga_subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                                    // avalon_st_adapter_004:out_0_data -> vga_subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                   // vga_subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                   // avalon_st_adapter_004:out_0_error -> vga_subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_error
	wire          vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_valid;                                          // vga_subsystem_char_buffer_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_data;                                           // vga_subsystem_char_buffer_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_005:in_0_ready -> vga_subsystem_char_buffer_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                                   // avalon_st_adapter_005:out_0_valid -> vga_subsystem_char_buffer_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                                    // avalon_st_adapter_005:out_0_data -> vga_subsystem_char_buffer_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                                   // vga_subsystem_char_buffer_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                                   // avalon_st_adapter_005:out_0_error -> vga_subsystem_char_buffer_slave_agent:rdata_fifo_sink_error
	wire          gyro_i2c_csr_agent_rdata_fifo_out_valid;                                                             // gyro_i2c_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] gyro_i2c_csr_agent_rdata_fifo_out_data;                                                              // gyro_i2c_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          gyro_i2c_csr_agent_rdata_fifo_out_ready;                                                             // avalon_st_adapter_006:in_0_ready -> gyro_i2c_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                                   // avalon_st_adapter_006:out_0_valid -> gyro_i2c_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                                    // avalon_st_adapter_006:out_0_data -> gyro_i2c_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                                   // gyro_i2c_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                                   // avalon_st_adapter_006:out_0_error -> gyro_i2c_csr_agent:rdata_fifo_sink_error
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_valid;                                    // vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_data;                                     // vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_007:in_0_ready -> vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                                   // avalon_st_adapter_007:out_0_valid -> vga_subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                                    // avalon_st_adapter_007:out_0_data -> vga_subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                                   // vga_subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                                   // avalon_st_adapter_007:out_0_error -> vga_subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_error
	wire          adc_pll_pll_slave_agent_rdata_fifo_out_valid;                                                        // adc_pll_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] adc_pll_pll_slave_agent_rdata_fifo_out_data;                                                         // adc_pll_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          adc_pll_pll_slave_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_008:in_0_ready -> adc_pll_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                                   // avalon_st_adapter_008:out_0_valid -> adc_pll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                                    // avalon_st_adapter_008:out_0_data -> adc_pll_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                                   // adc_pll_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                                   // avalon_st_adapter_008:out_0_error -> adc_pll_pll_slave_agent:rdata_fifo_sink_error
	wire          vga_subsystem_rgb_slave_agent_rdata_fifo_out_valid;                                                  // vga_subsystem_rgb_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] vga_subsystem_rgb_slave_agent_rdata_fifo_out_data;                                                   // vga_subsystem_rgb_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          vga_subsystem_rgb_slave_agent_rdata_fifo_out_ready;                                                  // avalon_st_adapter_009:in_0_ready -> vga_subsystem_rgb_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                                   // avalon_st_adapter_009:out_0_valid -> vga_subsystem_rgb_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                                    // avalon_st_adapter_009:out_0_data -> vga_subsystem_rgb_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                                   // vga_subsystem_rgb_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                                   // avalon_st_adapter_009:out_0_error -> vga_subsystem_rgb_slave_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_out_valid;                                                                  // LEDs_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_out_data;                                                                   // LEDs_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          leds_s1_agent_rdata_fifo_out_ready;                                                                  // avalon_st_adapter_010:in_0_ready -> LEDs_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                                   // avalon_st_adapter_010:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                                    // avalon_st_adapter_010:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                                   // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                                   // avalon_st_adapter_010:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire          hex3_hex0_s1_agent_rdata_fifo_out_valid;                                                             // HEX3_HEX0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] hex3_hex0_s1_agent_rdata_fifo_out_data;                                                              // HEX3_HEX0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          hex3_hex0_s1_agent_rdata_fifo_out_ready;                                                             // avalon_st_adapter_011:in_0_ready -> HEX3_HEX0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                                   // avalon_st_adapter_011:out_0_valid -> HEX3_HEX0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                                    // avalon_st_adapter_011:out_0_data -> HEX3_HEX0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                                   // HEX3_HEX0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                                   // avalon_st_adapter_011:out_0_error -> HEX3_HEX0_s1_agent:rdata_fifo_sink_error
	wire          hex5_hex4_s1_agent_rdata_fifo_out_valid;                                                             // HEX5_HEX4_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] hex5_hex4_s1_agent_rdata_fifo_out_data;                                                              // HEX5_HEX4_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          hex5_hex4_s1_agent_rdata_fifo_out_ready;                                                             // avalon_st_adapter_012:in_0_ready -> HEX5_HEX4_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                                   // avalon_st_adapter_012:out_0_valid -> HEX5_HEX4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                                    // avalon_st_adapter_012:out_0_data -> HEX5_HEX4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                                   // HEX5_HEX4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                                   // avalon_st_adapter_012:out_0_error -> HEX5_HEX4_s1_agent:rdata_fifo_sink_error
	wire          slider_switches_s1_agent_rdata_fifo_out_valid;                                                       // Slider_Switches_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_out_data;                                                        // Slider_Switches_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          slider_switches_s1_agent_rdata_fifo_out_ready;                                                       // avalon_st_adapter_013:in_0_ready -> Slider_Switches_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                                   // avalon_st_adapter_013:out_0_valid -> Slider_Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                                    // avalon_st_adapter_013:out_0_data -> Slider_Switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                                   // Slider_Switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                                   // avalon_st_adapter_013:out_0_error -> Slider_Switches_s1_agent:rdata_fifo_sink_error
	wire          pushbuttons_s1_agent_rdata_fifo_out_valid;                                                           // Pushbuttons_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_out_data;                                                            // Pushbuttons_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          pushbuttons_s1_agent_rdata_fifo_out_ready;                                                           // avalon_st_adapter_014:in_0_ready -> Pushbuttons_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                                   // avalon_st_adapter_014:out_0_valid -> Pushbuttons_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                                    // avalon_st_adapter_014:out_0_data -> Pushbuttons_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                                   // Pushbuttons_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                                   // avalon_st_adapter_014:out_0_error -> Pushbuttons_s1_agent:rdata_fifo_sink_error
	wire          interval_timer_s1_agent_rdata_fifo_out_valid;                                                        // Interval_Timer_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_out_data;                                                         // Interval_Timer_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          interval_timer_s1_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_015:in_0_ready -> Interval_Timer_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                                   // avalon_st_adapter_015:out_0_valid -> Interval_Timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                                    // avalon_st_adapter_015:out_0_data -> Interval_Timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                                   // Interval_Timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                                   // avalon_st_adapter_015:out_0_error -> Interval_Timer_s1_agent:rdata_fifo_sink_error
	wire          interval_timer_2_s1_agent_rdata_fifo_out_valid;                                                      // Interval_Timer_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] interval_timer_2_s1_agent_rdata_fifo_out_data;                                                       // Interval_Timer_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          interval_timer_2_s1_agent_rdata_fifo_out_ready;                                                      // avalon_st_adapter_016:in_0_ready -> Interval_Timer_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                                   // avalon_st_adapter_016:out_0_valid -> Interval_Timer_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                                    // avalon_st_adapter_016:out_0_data -> Interval_Timer_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                                   // Interval_Timer_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                                   // avalon_st_adapter_016:out_0_error -> Interval_Timer_2_s1_agent:rdata_fifo_sink_error
	wire          pwmx_s1_agent_rdata_fifo_out_valid;                                                                  // PWMX_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] pwmx_s1_agent_rdata_fifo_out_data;                                                                   // PWMX_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          pwmx_s1_agent_rdata_fifo_out_ready;                                                                  // avalon_st_adapter_017:in_0_ready -> PWMX_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                                   // avalon_st_adapter_017:out_0_valid -> PWMX_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                                    // avalon_st_adapter_017:out_0_data -> PWMX_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                                   // PWMX_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                                   // avalon_st_adapter_017:out_0_error -> PWMX_s1_agent:rdata_fifo_sink_error
	wire          pwmy_s1_agent_rdata_fifo_out_valid;                                                                  // PWMY_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] pwmy_s1_agent_rdata_fifo_out_data;                                                                   // PWMY_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          pwmy_s1_agent_rdata_fifo_out_ready;                                                                  // avalon_st_adapter_018:in_0_ready -> PWMY_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                                   // avalon_st_adapter_018:out_0_valid -> PWMY_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                                    // avalon_st_adapter_018:out_0_data -> PWMY_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                                   // PWMY_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                                   // avalon_st_adapter_018:out_0_error -> PWMY_s1_agent:rdata_fifo_sink_error
	wire          joyirq_s1_agent_rdata_fifo_out_valid;                                                                // joyirq_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] joyirq_s1_agent_rdata_fifo_out_data;                                                                 // joyirq_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          joyirq_s1_agent_rdata_fifo_out_ready;                                                                // avalon_st_adapter_019:in_0_ready -> joyirq_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                                   // avalon_st_adapter_019:out_0_valid -> joyirq_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                                    // avalon_st_adapter_019:out_0_data -> joyirq_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                                   // joyirq_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                                   // avalon_st_adapter_019:out_0_error -> joyirq_s1_agent:rdata_fifo_sink_error
	wire          penirq_s1_agent_rdata_fifo_out_valid;                                                                // penirq_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] penirq_s1_agent_rdata_fifo_out_data;                                                                 // penirq_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          penirq_s1_agent_rdata_fifo_out_ready;                                                                // avalon_st_adapter_020:in_0_ready -> penirq_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                                   // avalon_st_adapter_020:out_0_valid -> penirq_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                                    // avalon_st_adapter_020:out_0_data -> penirq_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                                   // penirq_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                                   // avalon_st_adapter_020:out_0_error -> penirq_s1_agent:rdata_fifo_sink_error
	wire          modular_adc_0_sample_store_csr_agent_rdata_fifo_out_valid;                                           // modular_adc_0_sample_store_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] modular_adc_0_sample_store_csr_agent_rdata_fifo_out_data;                                            // modular_adc_0_sample_store_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_021:in_0_data
	wire          modular_adc_0_sample_store_csr_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_021:in_0_ready -> modular_adc_0_sample_store_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                                   // avalon_st_adapter_021:out_0_valid -> modular_adc_0_sample_store_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                                    // avalon_st_adapter_021:out_0_data -> modular_adc_0_sample_store_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                                   // modular_adc_0_sample_store_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                                   // avalon_st_adapter_021:out_0_error -> modular_adc_0_sample_store_csr_agent:rdata_fifo_sink_error
	wire          modular_adc_0_sequencer_csr_agent_rdata_fifo_out_valid;                                              // modular_adc_0_sequencer_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] modular_adc_0_sequencer_csr_agent_rdata_fifo_out_data;                                               // modular_adc_0_sequencer_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_022:in_0_data
	wire          modular_adc_0_sequencer_csr_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_022:in_0_ready -> modular_adc_0_sequencer_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                                   // avalon_st_adapter_022:out_0_valid -> modular_adc_0_sequencer_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                                    // avalon_st_adapter_022:out_0_data -> modular_adc_0_sequencer_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                                   // modular_adc_0_sequencer_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                                   // avalon_st_adapter_022:out_0_error -> modular_adc_0_sequencer_csr_agent:rdata_fifo_sink_error
	wire          touch_spi_spi_control_port_agent_rdata_fifo_out_valid;                                               // touch_spi_spi_control_port_agent_rdata_fifo:out_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] touch_spi_spi_control_port_agent_rdata_fifo_out_data;                                                // touch_spi_spi_control_port_agent_rdata_fifo:out_data -> avalon_st_adapter_023:in_0_data
	wire          touch_spi_spi_control_port_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_023:in_0_ready -> touch_spi_spi_control_port_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                                   // avalon_st_adapter_023:out_0_valid -> touch_spi_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                                    // avalon_st_adapter_023:out_0_data -> touch_spi_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                                   // touch_spi_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                                   // avalon_st_adapter_023:out_0_error -> touch_spi_spi_control_port_agent:rdata_fifo_sink_error
	wire          nios2_debug_mem_slave_agent_rdata_fifo_out_valid;                                                    // Nios2_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] nios2_debug_mem_slave_agent_rdata_fifo_out_data;                                                     // Nios2_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_024:in_0_data
	wire          nios2_debug_mem_slave_agent_rdata_fifo_out_ready;                                                    // avalon_st_adapter_024:in_0_ready -> Nios2_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                                   // avalon_st_adapter_024:out_0_valid -> Nios2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                                    // avalon_st_adapter_024:out_0_data -> Nios2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                                   // Nios2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                                   // avalon_st_adapter_024:out_0_error -> Nios2_debug_mem_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator (
		.clk                    (video_pll_0_lcd_clk_clk),                                                                             //                       clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                          //                     reset.reset
		.uav_address            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (video_pixel_buffer_dma_0_avalon_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                (video_pixel_buffer_dma_0_avalon_pixel_dma_master_read),                                               //                          .read
		.av_readdata            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                (video_pixel_buffer_dma_0_avalon_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                                                //               (terminated)
		.av_byteenable          (2'b11),                                                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                                                //               (terminated)
		.av_write               (1'b0),                                                                                                //               (terminated)
		.av_writedata           (16'b0000000000000000),                                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                //               (terminated)
		.uav_clken              (),                                                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                                                //               (terminated)
		.uav_response           (2'b00),                                                                                               //               (terminated)
		.av_response            (),                                                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_data_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                               //                       clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Nios2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (Nios2_data_master_read),                                               //                          .read
		.av_readdata            (Nios2_data_master_readdata),                                           //                          .readdata
		.av_write               (Nios2_data_master_write),                                              //                          .write
		.av_writedata           (Nios2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (Nios2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_instruction_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                      //                       clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Nios2_instruction_master_read),                                               //                          .read
		.av_readdata            (Nios2_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_to_fpga_bridge_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                        //                       clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),                                       //                     reset.reset
		.uav_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (JTAG_to_FPGA_Bridge_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (JTAG_to_FPGA_Bridge_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (JTAG_to_FPGA_Bridge_master_byteenable),                                         //                          .byteenable
		.av_read                (JTAG_to_FPGA_Bridge_master_read),                                               //                          .read
		.av_readdata            (JTAG_to_FPGA_Bridge_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (JTAG_to_FPGA_Bridge_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (JTAG_to_FPGA_Bridge_master_write),                                              //                          .write
		.av_writedata           (JTAG_to_FPGA_Bridge_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) vga_subsystem_pixel_dma_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                            //                       clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),                                           //                     reset.reset
		.uav_address            (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (vga_subsystem_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (vga_subsystem_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                (vga_subsystem_pixel_dma_master_read),                                               //                          .read
		.av_readdata            (vga_subsystem_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (vga_subsystem_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                (vga_subsystem_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                              //               (terminated)
		.av_byteenable          (2'b11),                                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                                              //               (terminated)
		.av_write               (1'b0),                                                                              //               (terminated)
		.av_writedata           (16'b0000000000000000),                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (SDRAM_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                          //                         .write
		.av_read                (SDRAM_s1_read),                           //                         .read
		.av_readdata            (SDRAM_s1_readdata),                       //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                      //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_translator (
		.clk                    (video_pll_0_lcd_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_pixel_buffer_dma_0_avalon_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_pixel_buffer_dma_0_avalon_control_slave_write),                  //                         .write
		.av_read                (video_pixel_buffer_dma_0_avalon_control_slave_read),                   //                         .read
		.av_readdata            (video_pixel_buffer_dma_0_avalon_control_slave_readdata),               //                         .readdata
		.av_writedata           (video_pixel_buffer_dma_0_avalon_control_slave_writedata),              //                         .writedata
		.av_byteenable          (video_pixel_buffer_dma_0_avalon_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                                     //              (terminated)
		.av_burstcount          (),                                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                                 //              (terminated)
		.av_writebyteenable     (),                                                                     //              (terminated)
		.av_lock                (),                                                                     //              (terminated)
		.av_chipselect          (),                                                                     //              (terminated)
		.av_clken               (),                                                                     //              (terminated)
		.uav_clken              (1'b0),                                                                 //              (terminated)
		.av_debugaccess         (),                                                                     //              (terminated)
		.av_outputenable        (),                                                                     //              (terminated)
		.uav_response           (),                                                                     //              (terminated)
		.av_response            (2'b00),                                                                //              (terminated)
		.uav_writeresponsevalid (),                                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_char_buf_rgb_translator (
		.clk                    (System_PLL_sys_clk_clk),                            //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (vga_subsystem_char_buf_rgb_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_char_buf_rgb_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_subsystem_char_buf_rgb_agent_m0_read),          //                         .read
		.uav_write              (vga_subsystem_char_buf_rgb_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_subsystem_char_buf_rgb_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_char_buf_rgb_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_char_buf_rgb_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_subsystem_char_buf_rgb_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_subsystem_char_buf_rgb_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_subsystem_char_buf_rgb_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_subsystem_char_buf_rgb_agent_m0_debugaccess),   //                         .debugaccess
		.av_read                (vga_subsystem_char_buf_rgb_read),                   //      avalon_anti_slave_0.read
		.av_readdata            (vga_subsystem_char_buf_rgb_readdata),               //                         .readdata
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_char_buffer_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                         //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address            (vga_subsystem_char_buffer_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_char_buffer_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_subsystem_char_buffer_control_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_subsystem_char_buffer_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_char_buffer_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_subsystem_char_buffer_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_subsystem_char_buffer_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_subsystem_char_buffer_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (vga_subsystem_char_buffer_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (vga_subsystem_char_buffer_control_slave_write),                  //                         .write
		.av_read                (vga_subsystem_char_buffer_control_slave_read),                   //                         .read
		.av_readdata            (vga_subsystem_char_buffer_control_slave_readdata),               //                         .readdata
		.av_writedata           (vga_subsystem_char_buffer_control_slave_writedata),              //                         .writedata
		.av_byteenable          (vga_subsystem_char_buffer_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                               //              (terminated)
		.av_beginbursttransfer  (),                                                               //              (terminated)
		.av_burstcount          (),                                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                                           //              (terminated)
		.av_waitrequest         (1'b0),                                                           //              (terminated)
		.av_writebyteenable     (),                                                               //              (terminated)
		.av_lock                (),                                                               //              (terminated)
		.av_chipselect          (),                                                               //              (terminated)
		.av_clken               (),                                                               //              (terminated)
		.uav_clken              (1'b0),                                                           //              (terminated)
		.av_debugaccess         (),                                                               //              (terminated)
		.av_outputenable        (),                                                               //              (terminated)
		.uav_response           (),                                                               //              (terminated)
		.av_response            (2'b00),                                                          //              (terminated)
		.uav_writeresponsevalid (),                                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_char_buffer_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                 //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address            (vga_subsystem_char_buffer_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_char_buffer_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_subsystem_char_buffer_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_subsystem_char_buffer_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_subsystem_char_buffer_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_char_buffer_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_char_buffer_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_subsystem_char_buffer_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_subsystem_char_buffer_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_subsystem_char_buffer_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_subsystem_char_buffer_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (vga_subsystem_char_buffer_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (vga_subsystem_char_buffer_slave_write),                  //                         .write
		.av_readdata            (vga_subsystem_char_buffer_slave_readdata),               //                         .readdata
		.av_writedata           (vga_subsystem_char_buffer_slave_writedata),              //                         .writedata
		.av_byteenable          (vga_subsystem_char_buffer_slave_byteenable),             //                         .byteenable
		.av_chipselect          (vga_subsystem_char_buffer_slave_chipselect),             //                         .chipselect
		.av_clken               (vga_subsystem_char_buffer_slave_clken),                  //                         .clken
		.av_read                (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gyro_i2c_csr_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gyro_i2c_csr_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (gyro_i2c_csr_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (gyro_i2c_csr_agent_m0_read),              //                         .read
		.uav_write              (gyro_i2c_csr_agent_m0_write),             //                         .write
		.uav_waitrequest        (gyro_i2c_csr_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (gyro_i2c_csr_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (gyro_i2c_csr_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (gyro_i2c_csr_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (gyro_i2c_csr_agent_m0_writedata),         //                         .writedata
		.uav_lock               (gyro_i2c_csr_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (gyro_i2c_csr_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (gyro_i2c_csr_address),                    //      avalon_anti_slave_0.address
		.av_write               (gyro_i2c_csr_write),                      //                         .write
		.av_read                (gyro_i2c_csr_read),                       //                         .read
		.av_readdata            (gyro_i2c_csr_readdata),                   //                         .readdata
		.av_writedata           (gyro_i2c_csr_writedata),                  //                         .writedata
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_pixel_dma_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                       //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address            (vga_subsystem_pixel_dma_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_subsystem_pixel_dma_control_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_subsystem_pixel_dma_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_subsystem_pixel_dma_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_subsystem_pixel_dma_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_subsystem_pixel_dma_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (vga_subsystem_pixel_dma_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (vga_subsystem_pixel_dma_control_slave_write),                  //                         .write
		.av_read                (vga_subsystem_pixel_dma_control_slave_read),                   //                         .read
		.av_readdata            (vga_subsystem_pixel_dma_control_slave_readdata),               //                         .readdata
		.av_writedata           (vga_subsystem_pixel_dma_control_slave_writedata),              //                         .writedata
		.av_byteenable          (vga_subsystem_pixel_dma_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_pll_pll_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                   //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (adc_pll_pll_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (adc_pll_pll_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (adc_pll_pll_slave_agent_m0_read),          //                         .read
		.uav_write              (adc_pll_pll_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (adc_pll_pll_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (adc_pll_pll_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (adc_pll_pll_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (adc_pll_pll_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (adc_pll_pll_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (adc_pll_pll_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (adc_pll_pll_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (adc_pll_pll_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (adc_pll_pll_slave_write),                  //                         .write
		.av_read                (adc_pll_pll_slave_read),                   //                         .read
		.av_readdata            (adc_pll_pll_slave_readdata),               //                         .readdata
		.av_writedata           (adc_pll_pll_slave_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_rgb_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (vga_subsystem_rgb_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_rgb_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_subsystem_rgb_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_subsystem_rgb_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_subsystem_rgb_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_rgb_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_rgb_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_subsystem_rgb_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_subsystem_rgb_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_subsystem_rgb_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_subsystem_rgb_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_read                (vga_subsystem_rgb_slave_read),                   //      avalon_anti_slave_0.read
		.av_readdata            (vga_subsystem_rgb_slave_readdata),               //                         .readdata
		.av_address             (),                                               //              (terminated)
		.av_write               (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                   //                         .read
		.uav_write              (leds_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (LEDs_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                           //                         .write
		.av_readdata            (LEDs_s1_readdata),                        //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                       //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex3_hex0_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex3_hex0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (hex3_hex0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (hex3_hex0_s1_agent_m0_read),              //                         .read
		.uav_write              (hex3_hex0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (hex3_hex0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (hex3_hex0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (hex3_hex0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (hex3_hex0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (hex3_hex0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (hex3_hex0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (hex3_hex0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (HEX3_HEX0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (HEX3_HEX0_s1_write),                      //                         .write
		.av_readdata            (HEX3_HEX0_s1_readdata),                   //                         .readdata
		.av_writedata           (HEX3_HEX0_s1_writedata),                  //                         .writedata
		.av_chipselect          (HEX3_HEX0_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex5_hex4_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex5_hex4_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (hex5_hex4_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (hex5_hex4_s1_agent_m0_read),              //                         .read
		.uav_write              (hex5_hex4_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (hex5_hex4_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (hex5_hex4_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (hex5_hex4_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (hex5_hex4_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (hex5_hex4_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (hex5_hex4_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (hex5_hex4_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (HEX5_HEX4_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (HEX5_HEX4_s1_write),                      //                         .write
		.av_readdata            (HEX5_HEX4_s1_readdata),                   //                         .readdata
		.av_writedata           (HEX5_HEX4_s1_writedata),                  //                         .writedata
		.av_chipselect          (HEX5_HEX4_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slider_switches_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                    //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (slider_switches_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (slider_switches_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (slider_switches_s1_agent_m0_read),          //                         .read
		.uav_write              (slider_switches_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (slider_switches_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (slider_switches_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (slider_switches_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (slider_switches_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (slider_switches_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (slider_switches_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (slider_switches_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Slider_Switches_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (Slider_Switches_s1_readdata),               //                         .readdata
		.av_write               (),                                          //              (terminated)
		.av_read                (),                                          //              (terminated)
		.av_writedata           (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pushbuttons_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (pushbuttons_s1_agent_m0_read),            //                         .read
		.uav_write              (pushbuttons_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (pushbuttons_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (pushbuttons_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (pushbuttons_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (pushbuttons_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (pushbuttons_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (pushbuttons_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (Pushbuttons_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (Pushbuttons_s1_write),                    //                         .write
		.av_readdata            (Pushbuttons_s1_readdata),                 //                         .readdata
		.av_writedata           (Pushbuttons_s1_writedata),                //                         .writedata
		.av_chipselect          (Pushbuttons_s1_chipselect),               //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                   //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (interval_timer_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (interval_timer_s1_agent_m0_read),          //                         .read
		.uav_write              (interval_timer_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (interval_timer_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (interval_timer_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (interval_timer_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (interval_timer_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (interval_timer_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (interval_timer_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (interval_timer_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Interval_Timer_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_s1_write),                  //                         .write
		.av_readdata            (Interval_Timer_s1_readdata),               //                         .readdata
		.av_writedata           (Interval_Timer_s1_writedata),              //                         .writedata
		.av_chipselect          (Interval_Timer_s1_chipselect),             //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_2_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                     //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (interval_timer_2_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_2_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (interval_timer_2_s1_agent_m0_read),          //                         .read
		.uav_write              (interval_timer_2_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (interval_timer_2_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (interval_timer_2_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (interval_timer_2_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (interval_timer_2_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (interval_timer_2_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (interval_timer_2_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (interval_timer_2_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Interval_Timer_2_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_2_s1_write),                  //                         .write
		.av_readdata            (Interval_Timer_2_s1_readdata),               //                         .readdata
		.av_writedata           (Interval_Timer_2_s1_writedata),              //                         .writedata
		.av_chipselect          (Interval_Timer_2_s1_chipselect),             //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwmx_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwmx_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (pwmx_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (pwmx_s1_agent_m0_read),                   //                         .read
		.uav_write              (pwmx_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (pwmx_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (pwmx_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (pwmx_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (pwmx_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (pwmx_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (pwmx_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (pwmx_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_write               (PWMX_s1_write),                           //      avalon_anti_slave_0.write
		.av_read                (PWMX_s1_read),                            //                         .read
		.av_readdata            (PWMX_s1_readdata),                        //                         .readdata
		.av_writedata           (PWMX_s1_writedata),                       //                         .writedata
		.av_address             (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwmy_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwmy_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (pwmy_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (pwmy_s1_agent_m0_read),                   //                         .read
		.uav_write              (pwmy_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (pwmy_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (pwmy_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (pwmy_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (pwmy_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (pwmy_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (pwmy_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (pwmy_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_write               (PWMY_s1_write),                           //      avalon_anti_slave_0.write
		.av_read                (PWMY_s1_read),                            //                         .read
		.av_readdata            (PWMY_s1_readdata),                        //                         .readdata
		.av_writedata           (PWMY_s1_writedata),                       //                         .writedata
		.av_address             (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) joyirq_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                   //                      clk.clk
		.reset                  (joyirq_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (joyirq_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (joyirq_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (joyirq_s1_agent_m0_read),                  //                         .read
		.uav_write              (joyirq_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (joyirq_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (joyirq_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (joyirq_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (joyirq_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (joyirq_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (joyirq_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (joyirq_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (joyirq_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (joyirq_s1_write),                          //                         .write
		.av_readdata            (joyirq_s1_readdata),                       //                         .readdata
		.av_writedata           (joyirq_s1_writedata),                      //                         .writedata
		.av_chipselect          (joyirq_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) penirq_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (penirq_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (penirq_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (penirq_s1_agent_m0_read),                 //                         .read
		.uav_write              (penirq_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (penirq_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (penirq_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (penirq_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (penirq_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (penirq_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (penirq_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (penirq_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (penirq_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (penirq_s1_write),                         //                         .write
		.av_readdata            (penirq_s1_readdata),                      //                         .readdata
		.av_writedata           (penirq_s1_writedata),                     //                         .writedata
		.av_chipselect          (penirq_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) modular_adc_0_sample_store_csr_translator (
		.clk                    (System_PLL_sys_clk_clk),                                //                      clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (modular_adc_0_sample_store_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (modular_adc_0_sample_store_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (modular_adc_0_sample_store_csr_agent_m0_read),          //                         .read
		.uav_write              (modular_adc_0_sample_store_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (modular_adc_0_sample_store_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (modular_adc_0_sample_store_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (modular_adc_0_sample_store_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (modular_adc_0_sample_store_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (modular_adc_0_sample_store_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (modular_adc_0_sample_store_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (modular_adc_0_sample_store_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (modular_adc_0_sample_store_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (modular_adc_0_sample_store_csr_write),                  //                         .write
		.av_read                (modular_adc_0_sample_store_csr_read),                   //                         .read
		.av_readdata            (modular_adc_0_sample_store_csr_readdata),               //                         .readdata
		.av_writedata           (modular_adc_0_sample_store_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) modular_adc_0_sequencer_csr_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (modular_adc_0_sequencer_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (modular_adc_0_sequencer_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (modular_adc_0_sequencer_csr_agent_m0_read),          //                         .read
		.uav_write              (modular_adc_0_sequencer_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (modular_adc_0_sequencer_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (modular_adc_0_sequencer_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (modular_adc_0_sequencer_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (modular_adc_0_sequencer_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (modular_adc_0_sequencer_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (modular_adc_0_sequencer_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (modular_adc_0_sequencer_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (modular_adc_0_sequencer_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (modular_adc_0_sequencer_csr_write),                  //                         .write
		.av_read                (modular_adc_0_sequencer_csr_read),                   //                         .read
		.av_readdata            (modular_adc_0_sequencer_csr_readdata),               //                         .readdata
		.av_writedata           (modular_adc_0_sequencer_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) touch_spi_spi_control_port_translator (
		.clk                    (System_PLL_sys_clk_clk),                            //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (touch_spi_spi_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (touch_spi_spi_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (touch_spi_spi_control_port_agent_m0_read),          //                         .read
		.uav_write              (touch_spi_spi_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (touch_spi_spi_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (touch_spi_spi_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (touch_spi_spi_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (touch_spi_spi_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (touch_spi_spi_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (touch_spi_spi_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (touch_spi_spi_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (touch_spi_spi_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (touch_spi_spi_control_port_write),                  //                         .write
		.av_read                (touch_spi_spi_control_port_read),                   //                         .read
		.av_readdata            (touch_spi_spi_control_port_readdata),               //                         .readdata
		.av_writedata           (touch_spi_spi_control_port_writedata),              //                         .writedata
		.av_chipselect          (touch_spi_spi_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_debug_mem_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Nios2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Nios2_debug_mem_slave_write),                  //                         .write
		.av_read                (Nios2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (Nios2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (Nios2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (Nios2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Nios2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (Nios2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent (
		.clk                   (video_pll_0_lcd_clk_clk),                                                                             //       clk.clk
		.reset                 (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                                   //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                                    //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                                 //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                                             //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                                   //          .ready
		.av_response           (),                                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_data_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                               //       clk.clk
		.reset                 (Nios2_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_instruction_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                      //       clk.clk
		.reset                 (Nios2_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                       //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_to_fpga_bridge_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.av_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_to_fpga_bridge_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_to_fpga_bridge_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_to_fpga_bridge_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_to_fpga_bridge_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_to_fpga_bridge_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_to_fpga_bridge_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_subsystem_pixel_dma_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                            //       clk.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.av_address            (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (vga_subsystem_pixel_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (vga_subsystem_pixel_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (vga_subsystem_pixel_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (vga_subsystem_pixel_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (vga_subsystem_pixel_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                             //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                              //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                           //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                       //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                             //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                       //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_agent (
		.clk                     (video_pll_0_lcd_clk_clk),                                                        //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                          //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                          //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                           //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                                    //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                        //                .channel
		.rf_sink_ready           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                              //                .error
		.rdata_fifo_src_ready    (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo (
		.clk               (video_pll_0_lcd_clk_clk),                                                        //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo (
		.clk               (video_pll_0_lcd_clk_clk),                                                  //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                       //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_char_buf_rgb_agent (
		.clk                     (System_PLL_sys_clk_clk),                                      //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (vga_subsystem_char_buf_rgb_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_subsystem_char_buf_rgb_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_subsystem_char_buf_rgb_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_subsystem_char_buf_rgb_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_subsystem_char_buf_rgb_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_subsystem_char_buf_rgb_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_subsystem_char_buf_rgb_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_subsystem_char_buf_rgb_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_subsystem_char_buf_rgb_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_subsystem_char_buf_rgb_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_subsystem_char_buf_rgb_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_subsystem_char_buf_rgb_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_subsystem_char_buf_rgb_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_subsystem_char_buf_rgb_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_subsystem_char_buf_rgb_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_subsystem_char_buf_rgb_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                     //                .channel
		.rf_sink_ready           (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_subsystem_char_buf_rgb_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_subsystem_char_buf_rgb_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_subsystem_char_buf_rgb_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_char_buf_rgb_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_subsystem_char_buf_rgb_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (vga_subsystem_char_buf_rgb_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_char_buf_rgb_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_subsystem_char_buf_rgb_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buf_rgb_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (vga_subsystem_char_buf_rgb_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_char_buf_rgb_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_char_buf_rgb_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_char_buf_rgb_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_char_buf_rgb_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_char_buf_rgb_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buf_rgb_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (vga_subsystem_char_buf_rgb_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_char_buf_rgb_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_char_buf_rgb_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_char_buf_rgb_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_char_buf_rgb_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_char_buf_rgb_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_char_buffer_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                   //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                                  //       clk_reset.reset
		.m0_address              (vga_subsystem_char_buffer_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_subsystem_char_buffer_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_subsystem_char_buffer_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_subsystem_char_buffer_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_subsystem_char_buffer_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_subsystem_char_buffer_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_subsystem_char_buffer_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_subsystem_char_buffer_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_subsystem_char_buffer_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_subsystem_char_buffer_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_subsystem_char_buffer_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                                    //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                                  //                .channel
		.rf_sink_ready           (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_subsystem_char_buffer_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_subsystem_char_buffer_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_subsystem_char_buffer_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_char_buffer_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_char_buffer_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                             //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_char_buffer_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                           //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (vga_subsystem_char_buffer_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_subsystem_char_buffer_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_subsystem_char_buffer_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_subsystem_char_buffer_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_subsystem_char_buffer_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_subsystem_char_buffer_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_subsystem_char_buffer_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_subsystem_char_buffer_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_subsystem_char_buffer_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_subsystem_char_buffer_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_subsystem_char_buffer_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_subsystem_char_buffer_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_subsystem_char_buffer_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_subsystem_char_buffer_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_subsystem_char_buffer_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_subsystem_char_buffer_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                          //                .channel
		.rf_sink_ready           (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_subsystem_char_buffer_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_subsystem_char_buffer_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_subsystem_char_buffer_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_char_buffer_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_subsystem_char_buffer_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_char_buffer_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_char_buffer_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_char_buffer_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_char_buffer_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                     //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gyro_i2c_csr_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (gyro_i2c_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (gyro_i2c_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (gyro_i2c_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (gyro_i2c_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (gyro_i2c_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (gyro_i2c_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (gyro_i2c_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (gyro_i2c_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (gyro_i2c_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (gyro_i2c_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (gyro_i2c_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (gyro_i2c_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (gyro_i2c_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (gyro_i2c_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (gyro_i2c_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (gyro_i2c_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_006_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                       //                .channel
		.rf_sink_ready           (gyro_i2c_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (gyro_i2c_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (gyro_i2c_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (gyro_i2c_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (gyro_i2c_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (gyro_i2c_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (gyro_i2c_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (gyro_i2c_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (gyro_i2c_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (gyro_i2c_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),             //                .error
		.rdata_fifo_src_ready    (gyro_i2c_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gyro_i2c_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (gyro_i2c_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gyro_i2c_csr_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (gyro_i2c_csr_agent_rf_source_data),             //        in.data
		.in_valid          (gyro_i2c_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (gyro_i2c_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (gyro_i2c_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (gyro_i2c_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (gyro_i2c_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (gyro_i2c_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (gyro_i2c_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (gyro_i2c_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (gyro_i2c_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gyro_i2c_csr_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gyro_i2c_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (gyro_i2c_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (gyro_i2c_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (gyro_i2c_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (gyro_i2c_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (gyro_i2c_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_pixel_dma_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                 //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (vga_subsystem_pixel_dma_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_subsystem_pixel_dma_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_subsystem_pixel_dma_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_subsystem_pixel_dma_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_subsystem_pixel_dma_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_subsystem_pixel_dma_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_subsystem_pixel_dma_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_subsystem_pixel_dma_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_subsystem_pixel_dma_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                                //                .channel
		.rf_sink_ready           (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (vga_subsystem_pixel_dma_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_pll_pll_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (adc_pll_pll_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (adc_pll_pll_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (adc_pll_pll_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (adc_pll_pll_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (adc_pll_pll_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (adc_pll_pll_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (adc_pll_pll_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (adc_pll_pll_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (adc_pll_pll_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (adc_pll_pll_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (adc_pll_pll_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (adc_pll_pll_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (adc_pll_pll_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (adc_pll_pll_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (adc_pll_pll_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (adc_pll_pll_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_008_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                            //                .channel
		.rf_sink_ready           (adc_pll_pll_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (adc_pll_pll_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (adc_pll_pll_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (adc_pll_pll_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (adc_pll_pll_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (adc_pll_pll_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (adc_pll_pll_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (adc_pll_pll_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (adc_pll_pll_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (adc_pll_pll_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (adc_pll_pll_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_pll_pll_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (adc_pll_pll_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_pll_pll_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (adc_pll_pll_slave_agent_rf_source_data),             //        in.data
		.in_valid          (adc_pll_pll_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (adc_pll_pll_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (adc_pll_pll_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (adc_pll_pll_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (adc_pll_pll_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (adc_pll_pll_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (adc_pll_pll_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (adc_pll_pll_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (adc_pll_pll_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_pll_pll_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (adc_pll_pll_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (adc_pll_pll_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (adc_pll_pll_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (adc_pll_pll_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (adc_pll_pll_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (adc_pll_pll_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_rgb_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                   //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (vga_subsystem_rgb_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_subsystem_rgb_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_subsystem_rgb_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_subsystem_rgb_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_subsystem_rgb_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_subsystem_rgb_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_subsystem_rgb_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_subsystem_rgb_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_subsystem_rgb_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_subsystem_rgb_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_subsystem_rgb_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_subsystem_rgb_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_subsystem_rgb_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_subsystem_rgb_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_subsystem_rgb_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_subsystem_rgb_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                  //                .channel
		.rf_sink_ready           (vga_subsystem_rgb_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_rgb_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_subsystem_rgb_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_rgb_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_subsystem_rgb_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_subsystem_rgb_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_subsystem_rgb_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_subsystem_rgb_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_rgb_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_subsystem_rgb_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (vga_subsystem_rgb_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_rgb_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_subsystem_rgb_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_rgb_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                   //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (vga_subsystem_rgb_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_rgb_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_rgb_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_rgb_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_rgb_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_rgb_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_rgb_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_rgb_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_rgb_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_rgb_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_rgb_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (vga_subsystem_rgb_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_rgb_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_rgb_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_rgb_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_rgb_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_rgb_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                   //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_010_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                  //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),        //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),             //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (leds_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (leds_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (leds_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (leds_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (leds_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex3_hex0_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (hex3_hex0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex3_hex0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex3_hex0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex3_hex0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex3_hex0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex3_hex0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex3_hex0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex3_hex0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex3_hex0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex3_hex0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex3_hex0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex3_hex0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex3_hex0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex3_hex0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex3_hex0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex3_hex0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_011_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                       //                .channel
		.rf_sink_ready           (hex3_hex0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex3_hex0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex3_hex0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex3_hex0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex3_hex0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex3_hex0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex3_hex0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex3_hex0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex3_hex0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex3_hex0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),             //                .error
		.rdata_fifo_src_ready    (hex3_hex0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex3_hex0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex3_hex0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex3_hex0_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (hex3_hex0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex3_hex0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex3_hex0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex3_hex0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex3_hex0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex3_hex0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex3_hex0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex3_hex0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex3_hex0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex3_hex0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex3_hex0_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex3_hex0_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hex3_hex0_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hex3_hex0_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hex3_hex0_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hex3_hex0_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hex3_hex0_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex5_hex4_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (hex5_hex4_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex5_hex4_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex5_hex4_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex5_hex4_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex5_hex4_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex5_hex4_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex5_hex4_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex5_hex4_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex5_hex4_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex5_hex4_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex5_hex4_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex5_hex4_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex5_hex4_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex5_hex4_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex5_hex4_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex5_hex4_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_012_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                       //                .channel
		.rf_sink_ready           (hex5_hex4_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex5_hex4_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex5_hex4_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex5_hex4_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex5_hex4_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex5_hex4_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex5_hex4_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex5_hex4_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex5_hex4_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex5_hex4_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),             //                .error
		.rdata_fifo_src_ready    (hex5_hex4_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex5_hex4_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex5_hex4_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex5_hex4_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (hex5_hex4_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex5_hex4_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex5_hex4_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex5_hex4_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex5_hex4_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex5_hex4_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex5_hex4_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex5_hex4_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex5_hex4_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex5_hex4_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex5_hex4_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex5_hex4_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hex5_hex4_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hex5_hex4_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hex5_hex4_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hex5_hex4_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hex5_hex4_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) slider_switches_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (slider_switches_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (slider_switches_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (slider_switches_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (slider_switches_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (slider_switches_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (slider_switches_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (slider_switches_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (slider_switches_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (slider_switches_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (slider_switches_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (slider_switches_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (slider_switches_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (slider_switches_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (slider_switches_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (slider_switches_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (slider_switches_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                             //                .channel
		.rf_sink_ready           (slider_switches_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (slider_switches_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (slider_switches_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (slider_switches_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (slider_switches_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (slider_switches_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (slider_switches_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (slider_switches_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (slider_switches_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (slider_switches_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (slider_switches_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slider_switches_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (slider_switches_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                              //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (slider_switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (slider_switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (slider_switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (slider_switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (slider_switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (slider_switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (slider_switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (slider_switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (slider_switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (slider_switches_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (slider_switches_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (slider_switches_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (slider_switches_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (slider_switches_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                          //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pushbuttons_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pushbuttons_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pushbuttons_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pushbuttons_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pushbuttons_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pushbuttons_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pushbuttons_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pushbuttons_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pushbuttons_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pushbuttons_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pushbuttons_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pushbuttons_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pushbuttons_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pushbuttons_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pushbuttons_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pushbuttons_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_014_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                         //                .channel
		.rf_sink_ready           (pushbuttons_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pushbuttons_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pushbuttons_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pushbuttons_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pushbuttons_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pushbuttons_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pushbuttons_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),               //                .error
		.rdata_fifo_src_ready    (pushbuttons_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pushbuttons_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pushbuttons_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pushbuttons_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pushbuttons_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pushbuttons_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pushbuttons_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pushbuttons_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pushbuttons_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pushbuttons_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pushbuttons_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pushbuttons_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pushbuttons_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pushbuttons_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pushbuttons_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (interval_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (interval_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (interval_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (interval_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (interval_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (interval_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (interval_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (interval_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (interval_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (interval_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (interval_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (interval_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (interval_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (interval_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (interval_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (interval_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_015_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                            //                .channel
		.rf_sink_ready           (interval_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (interval_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (interval_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (interval_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (interval_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (interval_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (interval_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (interval_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (interval_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (interval_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (interval_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interval_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interval_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interval_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interval_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interval_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interval_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interval_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interval_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interval_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (interval_timer_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (interval_timer_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (interval_timer_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (interval_timer_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (interval_timer_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_2_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (interval_timer_2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (interval_timer_2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (interval_timer_2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (interval_timer_2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (interval_timer_2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (interval_timer_2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (interval_timer_2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (interval_timer_2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (interval_timer_2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (interval_timer_2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (interval_timer_2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (interval_timer_2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (interval_timer_2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (interval_timer_2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (interval_timer_2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (interval_timer_2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                              //                .channel
		.rf_sink_ready           (interval_timer_2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (interval_timer_2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (interval_timer_2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (interval_timer_2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (interval_timer_2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (interval_timer_2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (interval_timer_2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (interval_timer_2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (interval_timer_2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (interval_timer_2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (interval_timer_2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (interval_timer_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interval_timer_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interval_timer_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interval_timer_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interval_timer_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interval_timer_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interval_timer_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interval_timer_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interval_timer_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interval_timer_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (interval_timer_2_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (interval_timer_2_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (interval_timer_2_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (interval_timer_2_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (interval_timer_2_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (interval_timer_2_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwmx_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                   //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (pwmx_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pwmx_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pwmx_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pwmx_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pwmx_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pwmx_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pwmx_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pwmx_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pwmx_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pwmx_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pwmx_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pwmx_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pwmx_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pwmx_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pwmx_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pwmx_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_017_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                  //                .channel
		.rf_sink_ready           (pwmx_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pwmx_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pwmx_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pwmx_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pwmx_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pwmx_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pwmx_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pwmx_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pwmx_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pwmx_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),        //                .error
		.rdata_fifo_src_ready    (pwmx_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwmx_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pwmx_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwmx_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (pwmx_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pwmx_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pwmx_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pwmx_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pwmx_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pwmx_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pwmx_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pwmx_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pwmx_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pwmx_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwmx_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwmx_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (pwmx_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (pwmx_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (pwmx_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (pwmx_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (pwmx_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwmy_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                   //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (pwmy_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pwmy_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pwmy_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pwmy_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pwmy_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pwmy_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pwmy_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pwmy_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pwmy_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pwmy_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pwmy_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pwmy_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pwmy_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pwmy_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pwmy_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pwmy_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_018_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                  //                .channel
		.rf_sink_ready           (pwmy_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pwmy_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pwmy_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pwmy_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pwmy_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pwmy_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pwmy_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pwmy_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pwmy_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pwmy_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),        //                .error
		.rdata_fifo_src_ready    (pwmy_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwmy_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pwmy_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwmy_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (pwmy_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pwmy_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pwmy_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pwmy_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pwmy_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pwmy_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pwmy_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pwmy_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pwmy_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pwmy_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwmy_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwmy_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (pwmy_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (pwmy_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (pwmy_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (pwmy_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (pwmy_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) joyirq_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                     //             clk.clk
		.reset                   (joyirq_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (joyirq_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (joyirq_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (joyirq_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (joyirq_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (joyirq_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (joyirq_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (joyirq_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (joyirq_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (joyirq_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (joyirq_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (joyirq_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (joyirq_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (joyirq_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (joyirq_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (joyirq_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (joyirq_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_019_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                    //                .channel
		.rf_sink_ready           (joyirq_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (joyirq_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (joyirq_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (joyirq_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (joyirq_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (joyirq_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (joyirq_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (joyirq_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (joyirq_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (joyirq_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),          //                .error
		.rdata_fifo_src_ready    (joyirq_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (joyirq_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (joyirq_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) joyirq_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                     //       clk.clk
		.reset             (joyirq_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (joyirq_s1_agent_rf_source_data),             //        in.data
		.in_valid          (joyirq_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (joyirq_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (joyirq_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (joyirq_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (joyirq_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (joyirq_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (joyirq_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (joyirq_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (joyirq_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) joyirq_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (joyirq_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (joyirq_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (joyirq_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (joyirq_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (joyirq_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (joyirq_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (joyirq_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_startofpacket  (1'b0),                                     // (terminated)
		.in_endofpacket    (1'b0),                                     // (terminated)
		.out_startofpacket (),                                         // (terminated)
		.out_endofpacket   (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) penirq_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                     //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (penirq_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (penirq_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (penirq_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (penirq_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (penirq_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (penirq_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (penirq_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (penirq_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (penirq_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (penirq_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (penirq_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (penirq_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (penirq_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (penirq_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (penirq_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (penirq_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_020_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                    //                .channel
		.rf_sink_ready           (penirq_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (penirq_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (penirq_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (penirq_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (penirq_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (penirq_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (penirq_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (penirq_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (penirq_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (penirq_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),          //                .error
		.rdata_fifo_src_ready    (penirq_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (penirq_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (penirq_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) penirq_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                     //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (penirq_s1_agent_rf_source_data),             //        in.data
		.in_valid          (penirq_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (penirq_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (penirq_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (penirq_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (penirq_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (penirq_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (penirq_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (penirq_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (penirq_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) penirq_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (penirq_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (penirq_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (penirq_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (penirq_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (penirq_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (penirq_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) modular_adc_0_sample_store_csr_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Nios2_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (modular_adc_0_sample_store_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (modular_adc_0_sample_store_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (modular_adc_0_sample_store_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (modular_adc_0_sample_store_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (modular_adc_0_sample_store_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (modular_adc_0_sample_store_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (modular_adc_0_sample_store_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (modular_adc_0_sample_store_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (modular_adc_0_sample_store_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (modular_adc_0_sample_store_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (modular_adc_0_sample_store_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (modular_adc_0_sample_store_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (modular_adc_0_sample_store_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (modular_adc_0_sample_store_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (modular_adc_0_sample_store_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (modular_adc_0_sample_store_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_021_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                                         //                .channel
		.rf_sink_ready           (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (modular_adc_0_sample_store_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (modular_adc_0_sample_store_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (modular_adc_0_sample_store_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (modular_adc_0_sample_store_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (modular_adc_0_sample_store_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_adc_0_sample_store_csr_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (modular_adc_0_sample_store_csr_agent_rf_source_data),             //        in.data
		.in_valid          (modular_adc_0_sample_store_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (modular_adc_0_sample_store_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (modular_adc_0_sample_store_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (modular_adc_0_sample_store_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (modular_adc_0_sample_store_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_adc_0_sample_store_csr_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                    //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (modular_adc_0_sample_store_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) modular_adc_0_sequencer_csr_agent (
		.clk                     (System_PLL_sys_clk_clk),                                       //             clk.clk
		.reset                   (Nios2_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (modular_adc_0_sequencer_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (modular_adc_0_sequencer_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (modular_adc_0_sequencer_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (modular_adc_0_sequencer_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (modular_adc_0_sequencer_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (modular_adc_0_sequencer_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (modular_adc_0_sequencer_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (modular_adc_0_sequencer_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (modular_adc_0_sequencer_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (modular_adc_0_sequencer_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (modular_adc_0_sequencer_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (modular_adc_0_sequencer_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (modular_adc_0_sequencer_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (modular_adc_0_sequencer_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (modular_adc_0_sequencer_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (modular_adc_0_sequencer_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_022_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                                      //                .channel
		.rf_sink_ready           (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (modular_adc_0_sequencer_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (modular_adc_0_sequencer_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (modular_adc_0_sequencer_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (modular_adc_0_sequencer_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (modular_adc_0_sequencer_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_adc_0_sequencer_csr_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (modular_adc_0_sequencer_csr_agent_rf_source_data),             //        in.data
		.in_valid          (modular_adc_0_sequencer_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (modular_adc_0_sequencer_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (modular_adc_0_sequencer_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (modular_adc_0_sequencer_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (modular_adc_0_sequencer_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_adc_0_sequencer_csr_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (modular_adc_0_sequencer_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) touch_spi_spi_control_port_agent (
		.clk                     (System_PLL_sys_clk_clk),                                      //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (touch_spi_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (touch_spi_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (touch_spi_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (touch_spi_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (touch_spi_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (touch_spi_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (touch_spi_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (touch_spi_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (touch_spi_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (touch_spi_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (touch_spi_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (touch_spi_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (touch_spi_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (touch_spi_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (touch_spi_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (touch_spi_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_023_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                                     //                .channel
		.rf_sink_ready           (touch_spi_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (touch_spi_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (touch_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (touch_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (touch_spi_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (touch_spi_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (touch_spi_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (touch_spi_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (touch_spi_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (touch_spi_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (touch_spi_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (touch_spi_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (touch_spi_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) touch_spi_spi_control_port_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (touch_spi_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (touch_spi_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (touch_spi_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (touch_spi_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (touch_spi_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (touch_spi_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (touch_spi_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (touch_spi_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (touch_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (touch_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) touch_spi_spi_control_port_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (touch_spi_spi_control_port_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (touch_spi_spi_control_port_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (touch_spi_spi_control_port_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (touch_spi_spi_control_port_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (touch_spi_spi_control_port_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (touch_spi_spi_control_port_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_debug_mem_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                 //             clk.clk
		.reset                   (Nios2_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_024_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                                //                .channel
		.rf_sink_ready           (nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (nios2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_debug_mem_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_debug_mem_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	Computer_System_mm_interconnect_0_router router (
		.sink_ready         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_valid),         //          .valid
		.sink_data          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_data),          //          .data
		.sink_startofpacket (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (video_pll_0_lcd_clk_clk),                                                 //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_src_ready),                                                        //       src.ready
		.src_valid          (router_src_valid),                                                        //          .valid
		.src_data           (router_src_data),                                                         //          .data
		.src_channel        (router_src_channel),                                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                     //       src.ready
		.src_valid          (router_001_src_valid),                     //          .valid
		.src_data           (router_001_src_data),                      //          .data
		.src_channel        (router_001_src_channel),                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (jtag_to_fpga_bridge_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (jtag_to_fpga_bridge_master_agent_cp_valid),         //          .valid
		.sink_data          (jtag_to_fpga_bridge_master_agent_cp_data),          //          .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router router_004 (
		.sink_ready         (vga_subsystem_pixel_dma_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_pixel_dma_master_agent_cp_valid),         //          .valid
		.sink_data          (vga_subsystem_pixel_dma_master_agent_cp_data),          //          .data
		.sink_startofpacket (vga_subsystem_pixel_dma_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_pixel_dma_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_004_src_ready),                                  //       src.ready
		.src_valid          (router_004_src_valid),                                  //          .valid
		.src_data           (router_004_src_data),                                   //          .data
		.src_channel        (router_004_src_channel),                                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (sdram_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                    //       src.ready
		.src_valid          (router_005_src_valid),                    //          .valid
		.src_data           (router_005_src_data),                     //          .data
		.src_channel        (router_005_src_channel),                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (video_pll_0_lcd_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_006_src_ready),                                                 //       src.ready
		.src_valid          (router_006_src_valid),                                                 //          .valid
		.src_data           (router_006_src_data),                                                  //          .data
		.src_channel        (router_006_src_channel),                                               //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_007_src_ready),                               //       src.ready
		.src_valid          (router_007_src_valid),                               //          .valid
		.src_data           (router_007_src_data),                                //          .data
		.src_channel        (router_007_src_channel),                             //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_008 (
		.sink_ready         (vga_subsystem_char_buf_rgb_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_char_buf_rgb_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_char_buf_rgb_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_char_buf_rgb_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_char_buf_rgb_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_008_src_ready),                              //       src.ready
		.src_valid          (router_008_src_valid),                              //          .valid
		.src_data           (router_008_src_data),                               //          .data
		.src_channel        (router_008_src_channel),                            //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_009 (
		.sink_ready         (vga_subsystem_char_buffer_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_char_buffer_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_char_buffer_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                         //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready          (router_009_src_ready),                                           //       src.ready
		.src_valid          (router_009_src_valid),                                           //          .valid
		.src_data           (router_009_src_data),                                            //          .data
		.src_channel        (router_009_src_channel),                                         //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_010 (
		.sink_ready         (vga_subsystem_char_buffer_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_char_buffer_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_char_buffer_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_char_buffer_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_char_buffer_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_010_src_ready),                                   //       src.ready
		.src_valid          (router_010_src_valid),                                   //          .valid
		.src_data           (router_010_src_data),                                    //          .data
		.src_channel        (router_010_src_channel),                                 //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                              //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_011 (
		.sink_ready         (gyro_i2c_csr_agent_rp_ready),             //      sink.ready
		.sink_valid         (gyro_i2c_csr_agent_rp_valid),             //          .valid
		.sink_data          (gyro_i2c_csr_agent_rp_data),              //          .data
		.sink_startofpacket (gyro_i2c_csr_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (gyro_i2c_csr_agent_rp_endofpacket),       //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                    //       src.ready
		.src_valid          (router_011_src_valid),                    //          .valid
		.src_data           (router_011_src_data),                     //          .data
		.src_channel        (router_011_src_channel),                  //          .channel
		.src_startofpacket  (router_011_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_012 (
		.sink_ready         (vga_subsystem_pixel_dma_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_pixel_dma_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_pixel_dma_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (router_012_src_ready),                                         //       src.ready
		.src_valid          (router_012_src_valid),                                         //          .valid
		.src_data           (router_012_src_data),                                          //          .data
		.src_channel        (router_012_src_channel),                                       //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_013 (
		.sink_ready         (adc_pll_pll_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (adc_pll_pll_slave_agent_rp_valid),         //          .valid
		.sink_data          (adc_pll_pll_slave_agent_rp_data),          //          .data
		.sink_startofpacket (adc_pll_pll_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (adc_pll_pll_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_013_src_ready),                     //       src.ready
		.src_valid          (router_013_src_valid),                     //          .valid
		.src_data           (router_013_src_data),                      //          .data
		.src_channel        (router_013_src_channel),                   //          .channel
		.src_startofpacket  (router_013_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_014 (
		.sink_ready         (vga_subsystem_rgb_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_rgb_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_rgb_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_rgb_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_rgb_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_014_src_ready),                           //       src.ready
		.src_valid          (router_014_src_valid),                           //          .valid
		.src_data           (router_014_src_data),                            //          .data
		.src_channel        (router_014_src_channel),                         //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_015 (
		.sink_ready         (leds_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                  //          .valid
		.sink_data          (leds_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                    //       src.ready
		.src_valid          (router_015_src_valid),                    //          .valid
		.src_data           (router_015_src_data),                     //          .data
		.src_channel        (router_015_src_channel),                  //          .channel
		.src_startofpacket  (router_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_016 (
		.sink_ready         (hex3_hex0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (hex3_hex0_s1_agent_rp_valid),             //          .valid
		.sink_data          (hex3_hex0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (hex3_hex0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (hex3_hex0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                    //       src.ready
		.src_valid          (router_016_src_valid),                    //          .valid
		.src_data           (router_016_src_data),                     //          .data
		.src_channel        (router_016_src_channel),                  //          .channel
		.src_startofpacket  (router_016_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_017 (
		.sink_ready         (hex5_hex4_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (hex5_hex4_s1_agent_rp_valid),             //          .valid
		.sink_data          (hex5_hex4_s1_agent_rp_data),              //          .data
		.sink_startofpacket (hex5_hex4_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (hex5_hex4_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                    //       src.ready
		.src_valid          (router_017_src_valid),                    //          .valid
		.src_data           (router_017_src_data),                     //          .data
		.src_channel        (router_017_src_channel),                  //          .channel
		.src_startofpacket  (router_017_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_018 (
		.sink_ready         (slider_switches_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (slider_switches_s1_agent_rp_valid),         //          .valid
		.sink_data          (slider_switches_s1_agent_rp_data),          //          .data
		.sink_startofpacket (slider_switches_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (slider_switches_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_018_src_ready),                      //       src.ready
		.src_valid          (router_018_src_valid),                      //          .valid
		.src_data           (router_018_src_data),                       //          .data
		.src_channel        (router_018_src_channel),                    //          .channel
		.src_startofpacket  (router_018_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_019 (
		.sink_ready         (pushbuttons_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (pushbuttons_s1_agent_rp_valid),           //          .valid
		.sink_data          (pushbuttons_s1_agent_rp_data),            //          .data
		.sink_startofpacket (pushbuttons_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (pushbuttons_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                    //       src.ready
		.src_valid          (router_019_src_valid),                    //          .valid
		.src_data           (router_019_src_data),                     //          .data
		.src_channel        (router_019_src_channel),                  //          .channel
		.src_startofpacket  (router_019_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_020 (
		.sink_ready         (interval_timer_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (interval_timer_s1_agent_rp_valid),         //          .valid
		.sink_data          (interval_timer_s1_agent_rp_data),          //          .data
		.sink_startofpacket (interval_timer_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (interval_timer_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_020_src_ready),                     //       src.ready
		.src_valid          (router_020_src_valid),                     //          .valid
		.src_data           (router_020_src_data),                      //          .data
		.src_channel        (router_020_src_channel),                   //          .channel
		.src_startofpacket  (router_020_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_021 (
		.sink_ready         (interval_timer_2_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (interval_timer_2_s1_agent_rp_valid),         //          .valid
		.sink_data          (interval_timer_2_s1_agent_rp_data),          //          .data
		.sink_startofpacket (interval_timer_2_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (interval_timer_2_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                     //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_021_src_ready),                       //       src.ready
		.src_valid          (router_021_src_valid),                       //          .valid
		.src_data           (router_021_src_data),                        //          .data
		.src_channel        (router_021_src_channel),                     //          .channel
		.src_startofpacket  (router_021_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_022 (
		.sink_ready         (pwmx_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (pwmx_s1_agent_rp_valid),                  //          .valid
		.sink_data          (pwmx_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (pwmx_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pwmx_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                    //       src.ready
		.src_valid          (router_022_src_valid),                    //          .valid
		.src_data           (router_022_src_data),                     //          .data
		.src_channel        (router_022_src_channel),                  //          .channel
		.src_startofpacket  (router_022_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_023 (
		.sink_ready         (pwmy_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (pwmy_s1_agent_rp_valid),                  //          .valid
		.sink_data          (pwmy_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (pwmy_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pwmy_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                    //       src.ready
		.src_valid          (router_023_src_valid),                    //          .valid
		.src_data           (router_023_src_data),                     //          .data
		.src_channel        (router_023_src_channel),                  //          .channel
		.src_startofpacket  (router_023_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_024 (
		.sink_ready         (joyirq_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (joyirq_s1_agent_rp_valid),                 //          .valid
		.sink_data          (joyirq_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (joyirq_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (joyirq_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset              (joyirq_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                     //       src.ready
		.src_valid          (router_024_src_valid),                     //          .valid
		.src_data           (router_024_src_data),                      //          .data
		.src_channel        (router_024_src_channel),                   //          .channel
		.src_startofpacket  (router_024_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_025 (
		.sink_ready         (penirq_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (penirq_s1_agent_rp_valid),                //          .valid
		.sink_data          (penirq_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (penirq_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (penirq_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                    //       src.ready
		.src_valid          (router_025_src_valid),                    //          .valid
		.src_data           (router_025_src_data),                     //          .data
		.src_channel        (router_025_src_channel),                  //          .channel
		.src_startofpacket  (router_025_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_026 (
		.sink_ready         (modular_adc_0_sample_store_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (modular_adc_0_sample_store_csr_agent_rp_valid),         //          .valid
		.sink_data          (modular_adc_0_sample_store_csr_agent_rp_data),          //          .data
		.sink_startofpacket (modular_adc_0_sample_store_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (modular_adc_0_sample_store_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_026_src_ready),                                  //       src.ready
		.src_valid          (router_026_src_valid),                                  //          .valid
		.src_data           (router_026_src_data),                                   //          .data
		.src_channel        (router_026_src_channel),                                //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_027 (
		.sink_ready         (modular_adc_0_sequencer_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (modular_adc_0_sequencer_csr_agent_rp_valid),         //          .valid
		.sink_data          (modular_adc_0_sequencer_csr_agent_rp_data),          //          .data
		.sink_startofpacket (modular_adc_0_sequencer_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (modular_adc_0_sequencer_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_027_src_ready),                               //       src.ready
		.src_valid          (router_027_src_valid),                               //          .valid
		.src_data           (router_027_src_data),                                //          .data
		.src_channel        (router_027_src_channel),                             //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_028 (
		.sink_ready         (touch_spi_spi_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (touch_spi_spi_control_port_agent_rp_valid),         //          .valid
		.sink_data          (touch_spi_spi_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (touch_spi_spi_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (touch_spi_spi_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_028_src_ready),                              //       src.ready
		.src_valid          (router_028_src_valid),                              //          .valid
		.src_data           (router_028_src_data),                               //          .data
		.src_channel        (router_028_src_channel),                            //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_029 router_029 (
		.sink_ready         (nios2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_029_src_ready),                         //       src.ready
		.src_valid          (router_029_src_valid),                         //          .valid
		.src_data           (router_029_src_data),                          //          .data
		.src_channel        (router_029_src_channel),                       //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (25),
		.VALID_WIDTH               (25),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_to_fpga_bridge_master_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                   //       clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                     //          .valid
		.cmd_sink_data          (router_003_src_data),                                      //          .data
		.cmd_sink_channel       (router_003_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (jtag_to_fpga_bridge_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                       //       cr0.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                             //          .data
		.sink0_channel         (cmd_mux_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                            //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (video_pll_0_lcd_clk_clk),                                    //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                           //      sink.ready
		.sink_channel       (router_src_channel),                                         //          .channel
		.sink_data          (router_src_data),                                            //          .data
		.sink_startofpacket (router_src_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                     //          .endofpacket
		.sink_valid         (router_src_valid),                                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //          .valid
		.src0_data          (cmd_demux_src0_data),                                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_001_src_ready),                    //      sink.ready
		.sink_channel        (router_001_src_channel),                  //          .channel
		.sink_data           (router_001_src_data),                     //          .data
		.sink_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.sink_endofpacket    (router_001_src_endofpacket),              //          .endofpacket
		.sink_valid          (router_001_src_valid),                    //          .valid
		.src0_ready          (cmd_demux_001_src0_ready),                //      src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                //          .valid
		.src0_data           (cmd_demux_001_src0_data),                 //          .data
		.src0_channel        (cmd_demux_001_src0_channel),              //          .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                //      src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                //          .valid
		.src1_data           (cmd_demux_001_src1_data),                 //          .data
		.src1_channel        (cmd_demux_001_src1_channel),              //          .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),          //          .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                //      src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                //          .valid
		.src2_data           (cmd_demux_001_src2_data),                 //          .data
		.src2_channel        (cmd_demux_001_src2_channel),              //          .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),          //          .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                //      src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                //          .valid
		.src3_data           (cmd_demux_001_src3_data),                 //          .data
		.src3_channel        (cmd_demux_001_src3_channel),              //          .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),          //          .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                //      src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                //          .valid
		.src4_data           (cmd_demux_001_src4_data),                 //          .data
		.src4_channel        (cmd_demux_001_src4_channel),              //          .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),          //          .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                //      src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                //          .valid
		.src5_data           (cmd_demux_001_src5_data),                 //          .data
		.src5_channel        (cmd_demux_001_src5_channel),              //          .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),        //          .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),          //          .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                //      src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                //          .valid
		.src6_data           (cmd_demux_001_src6_data),                 //          .data
		.src6_channel        (cmd_demux_001_src6_channel),              //          .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),        //          .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),          //          .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                //      src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                //          .valid
		.src7_data           (cmd_demux_001_src7_data),                 //          .data
		.src7_channel        (cmd_demux_001_src7_channel),              //          .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),        //          .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),          //          .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                //      src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                //          .valid
		.src8_data           (cmd_demux_001_src8_data),                 //          .data
		.src8_channel        (cmd_demux_001_src8_channel),              //          .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),        //          .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),          //          .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                //      src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                //          .valid
		.src9_data           (cmd_demux_001_src9_data),                 //          .data
		.src9_channel        (cmd_demux_001_src9_channel),              //          .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),        //          .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),          //          .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),               //     src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),               //          .valid
		.src10_data          (cmd_demux_001_src10_data),                //          .data
		.src10_channel       (cmd_demux_001_src10_channel),             //          .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),       //          .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),         //          .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),               //     src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),               //          .valid
		.src11_data          (cmd_demux_001_src11_data),                //          .data
		.src11_channel       (cmd_demux_001_src11_channel),             //          .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),       //          .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),         //          .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),               //     src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),               //          .valid
		.src12_data          (cmd_demux_001_src12_data),                //          .data
		.src12_channel       (cmd_demux_001_src12_channel),             //          .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),       //          .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),         //          .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),               //     src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),               //          .valid
		.src13_data          (cmd_demux_001_src13_data),                //          .data
		.src13_channel       (cmd_demux_001_src13_channel),             //          .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),       //          .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),         //          .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),               //     src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),               //          .valid
		.src14_data          (cmd_demux_001_src14_data),                //          .data
		.src14_channel       (cmd_demux_001_src14_channel),             //          .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),       //          .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),         //          .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),               //     src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),               //          .valid
		.src15_data          (cmd_demux_001_src15_data),                //          .data
		.src15_channel       (cmd_demux_001_src15_channel),             //          .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),       //          .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),         //          .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),               //     src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),               //          .valid
		.src16_data          (cmd_demux_001_src16_data),                //          .data
		.src16_channel       (cmd_demux_001_src16_channel),             //          .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),       //          .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),         //          .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),               //     src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),               //          .valid
		.src17_data          (cmd_demux_001_src17_data),                //          .data
		.src17_channel       (cmd_demux_001_src17_channel),             //          .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),       //          .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),         //          .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),               //     src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),               //          .valid
		.src18_data          (cmd_demux_001_src18_data),                //          .data
		.src18_channel       (cmd_demux_001_src18_channel),             //          .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),       //          .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),         //          .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),               //     src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),               //          .valid
		.src19_data          (cmd_demux_001_src19_data),                //          .data
		.src19_channel       (cmd_demux_001_src19_channel),             //          .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),       //          .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),         //          .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),               //     src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),               //          .valid
		.src20_data          (cmd_demux_001_src20_data),                //          .data
		.src20_channel       (cmd_demux_001_src20_channel),             //          .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),       //          .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),         //          .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),               //     src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),               //          .valid
		.src21_data          (cmd_demux_001_src21_data),                //          .data
		.src21_channel       (cmd_demux_001_src21_channel),             //          .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),       //          .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket),         //          .endofpacket
		.src22_ready         (cmd_demux_001_src22_ready),               //     src22.ready
		.src22_valid         (cmd_demux_001_src22_valid),               //          .valid
		.src22_data          (cmd_demux_001_src22_data),                //          .data
		.src22_channel       (cmd_demux_001_src22_channel),             //          .channel
		.src22_startofpacket (cmd_demux_001_src22_startofpacket),       //          .startofpacket
		.src22_endofpacket   (cmd_demux_001_src22_endofpacket),         //          .endofpacket
		.src23_ready         (cmd_demux_001_src23_ready),               //     src23.ready
		.src23_valid         (cmd_demux_001_src23_valid),               //          .valid
		.src23_data          (cmd_demux_001_src23_data),                //          .data
		.src23_channel       (cmd_demux_001_src23_channel),             //          .channel
		.src23_startofpacket (cmd_demux_001_src23_startofpacket),       //          .startofpacket
		.src23_endofpacket   (cmd_demux_001_src23_endofpacket),         //          .endofpacket
		.src24_ready         (cmd_demux_001_src24_ready),               //     src24.ready
		.src24_valid         (cmd_demux_001_src24_valid),               //          .valid
		.src24_data          (cmd_demux_001_src24_data),                //          .data
		.src24_channel       (cmd_demux_001_src24_channel),             //          .channel
		.src24_startofpacket (cmd_demux_001_src24_startofpacket),       //          .startofpacket
		.src24_endofpacket   (cmd_demux_001_src24_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                //          .valid
		.src0_data          (cmd_demux_002_src0_data),                 //          .data
		.src0_channel       (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                //          .valid
		.src1_data          (cmd_demux_002_src1_data),                 //          .data
		.src1_channel       (cmd_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                 (System_PLL_sys_clk_clk),                                   //        clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset),                  //  clk_reset.reset
		.sink_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_003_src0_ready),                                 //       src0.ready
		.src0_valid          (cmd_demux_003_src0_valid),                                 //           .valid
		.src0_data           (cmd_demux_003_src0_data),                                  //           .data
		.src0_channel        (cmd_demux_003_src0_channel),                               //           .channel
		.src0_startofpacket  (cmd_demux_003_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_003_src0_endofpacket),                           //           .endofpacket
		.src1_ready          (cmd_demux_003_src1_ready),                                 //       src1.ready
		.src1_valid          (cmd_demux_003_src1_valid),                                 //           .valid
		.src1_data           (cmd_demux_003_src1_data),                                  //           .data
		.src1_channel        (cmd_demux_003_src1_channel),                               //           .channel
		.src1_startofpacket  (cmd_demux_003_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_003_src1_endofpacket),                           //           .endofpacket
		.src2_ready          (cmd_demux_003_src2_ready),                                 //       src2.ready
		.src2_valid          (cmd_demux_003_src2_valid),                                 //           .valid
		.src2_data           (cmd_demux_003_src2_data),                                  //           .data
		.src2_channel        (cmd_demux_003_src2_channel),                               //           .channel
		.src2_startofpacket  (cmd_demux_003_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_003_src2_endofpacket),                           //           .endofpacket
		.src3_ready          (cmd_demux_003_src3_ready),                                 //       src3.ready
		.src3_valid          (cmd_demux_003_src3_valid),                                 //           .valid
		.src3_data           (cmd_demux_003_src3_data),                                  //           .data
		.src3_channel        (cmd_demux_003_src3_channel),                               //           .channel
		.src3_startofpacket  (cmd_demux_003_src3_startofpacket),                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_003_src3_endofpacket),                           //           .endofpacket
		.src4_ready          (cmd_demux_003_src4_ready),                                 //       src4.ready
		.src4_valid          (cmd_demux_003_src4_valid),                                 //           .valid
		.src4_data           (cmd_demux_003_src4_data),                                  //           .data
		.src4_channel        (cmd_demux_003_src4_channel),                               //           .channel
		.src4_startofpacket  (cmd_demux_003_src4_startofpacket),                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_003_src4_endofpacket),                           //           .endofpacket
		.src5_ready          (cmd_demux_003_src5_ready),                                 //       src5.ready
		.src5_valid          (cmd_demux_003_src5_valid),                                 //           .valid
		.src5_data           (cmd_demux_003_src5_data),                                  //           .data
		.src5_channel        (cmd_demux_003_src5_channel),                               //           .channel
		.src5_startofpacket  (cmd_demux_003_src5_startofpacket),                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_003_src5_endofpacket),                           //           .endofpacket
		.src6_ready          (cmd_demux_003_src6_ready),                                 //       src6.ready
		.src6_valid          (cmd_demux_003_src6_valid),                                 //           .valid
		.src6_data           (cmd_demux_003_src6_data),                                  //           .data
		.src6_channel        (cmd_demux_003_src6_channel),                               //           .channel
		.src6_startofpacket  (cmd_demux_003_src6_startofpacket),                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_003_src6_endofpacket),                           //           .endofpacket
		.src7_ready          (cmd_demux_003_src7_ready),                                 //       src7.ready
		.src7_valid          (cmd_demux_003_src7_valid),                                 //           .valid
		.src7_data           (cmd_demux_003_src7_data),                                  //           .data
		.src7_channel        (cmd_demux_003_src7_channel),                               //           .channel
		.src7_startofpacket  (cmd_demux_003_src7_startofpacket),                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_003_src7_endofpacket),                           //           .endofpacket
		.src8_ready          (cmd_demux_003_src8_ready),                                 //       src8.ready
		.src8_valid          (cmd_demux_003_src8_valid),                                 //           .valid
		.src8_data           (cmd_demux_003_src8_data),                                  //           .data
		.src8_channel        (cmd_demux_003_src8_channel),                               //           .channel
		.src8_startofpacket  (cmd_demux_003_src8_startofpacket),                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_003_src8_endofpacket),                           //           .endofpacket
		.src9_ready          (cmd_demux_003_src9_ready),                                 //       src9.ready
		.src9_valid          (cmd_demux_003_src9_valid),                                 //           .valid
		.src9_data           (cmd_demux_003_src9_data),                                  //           .data
		.src9_channel        (cmd_demux_003_src9_channel),                               //           .channel
		.src9_startofpacket  (cmd_demux_003_src9_startofpacket),                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_003_src9_endofpacket),                           //           .endofpacket
		.src10_ready         (cmd_demux_003_src10_ready),                                //      src10.ready
		.src10_valid         (cmd_demux_003_src10_valid),                                //           .valid
		.src10_data          (cmd_demux_003_src10_data),                                 //           .data
		.src10_channel       (cmd_demux_003_src10_channel),                              //           .channel
		.src10_startofpacket (cmd_demux_003_src10_startofpacket),                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_003_src10_endofpacket),                          //           .endofpacket
		.src11_ready         (cmd_demux_003_src11_ready),                                //      src11.ready
		.src11_valid         (cmd_demux_003_src11_valid),                                //           .valid
		.src11_data          (cmd_demux_003_src11_data),                                 //           .data
		.src11_channel       (cmd_demux_003_src11_channel),                              //           .channel
		.src11_startofpacket (cmd_demux_003_src11_startofpacket),                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_003_src11_endofpacket),                          //           .endofpacket
		.src12_ready         (cmd_demux_003_src12_ready),                                //      src12.ready
		.src12_valid         (cmd_demux_003_src12_valid),                                //           .valid
		.src12_data          (cmd_demux_003_src12_data),                                 //           .data
		.src12_channel       (cmd_demux_003_src12_channel),                              //           .channel
		.src12_startofpacket (cmd_demux_003_src12_startofpacket),                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_003_src12_endofpacket),                          //           .endofpacket
		.src13_ready         (cmd_demux_003_src13_ready),                                //      src13.ready
		.src13_valid         (cmd_demux_003_src13_valid),                                //           .valid
		.src13_data          (cmd_demux_003_src13_data),                                 //           .data
		.src13_channel       (cmd_demux_003_src13_channel),                              //           .channel
		.src13_startofpacket (cmd_demux_003_src13_startofpacket),                        //           .startofpacket
		.src13_endofpacket   (cmd_demux_003_src13_endofpacket),                          //           .endofpacket
		.src14_ready         (cmd_demux_003_src14_ready),                                //      src14.ready
		.src14_valid         (cmd_demux_003_src14_valid),                                //           .valid
		.src14_data          (cmd_demux_003_src14_data),                                 //           .data
		.src14_channel       (cmd_demux_003_src14_channel),                              //           .channel
		.src14_startofpacket (cmd_demux_003_src14_startofpacket),                        //           .startofpacket
		.src14_endofpacket   (cmd_demux_003_src14_endofpacket),                          //           .endofpacket
		.src15_ready         (cmd_demux_003_src15_ready),                                //      src15.ready
		.src15_valid         (cmd_demux_003_src15_valid),                                //           .valid
		.src15_data          (cmd_demux_003_src15_data),                                 //           .data
		.src15_channel       (cmd_demux_003_src15_channel),                              //           .channel
		.src15_startofpacket (cmd_demux_003_src15_startofpacket),                        //           .startofpacket
		.src15_endofpacket   (cmd_demux_003_src15_endofpacket),                          //           .endofpacket
		.src16_ready         (cmd_demux_003_src16_ready),                                //      src16.ready
		.src16_valid         (cmd_demux_003_src16_valid),                                //           .valid
		.src16_data          (cmd_demux_003_src16_data),                                 //           .data
		.src16_channel       (cmd_demux_003_src16_channel),                              //           .channel
		.src16_startofpacket (cmd_demux_003_src16_startofpacket),                        //           .startofpacket
		.src16_endofpacket   (cmd_demux_003_src16_endofpacket),                          //           .endofpacket
		.src17_ready         (cmd_demux_003_src17_ready),                                //      src17.ready
		.src17_valid         (cmd_demux_003_src17_valid),                                //           .valid
		.src17_data          (cmd_demux_003_src17_data),                                 //           .data
		.src17_channel       (cmd_demux_003_src17_channel),                              //           .channel
		.src17_startofpacket (cmd_demux_003_src17_startofpacket),                        //           .startofpacket
		.src17_endofpacket   (cmd_demux_003_src17_endofpacket),                          //           .endofpacket
		.src18_ready         (cmd_demux_003_src18_ready),                                //      src18.ready
		.src18_valid         (cmd_demux_003_src18_valid),                                //           .valid
		.src18_data          (cmd_demux_003_src18_data),                                 //           .data
		.src18_channel       (cmd_demux_003_src18_channel),                              //           .channel
		.src18_startofpacket (cmd_demux_003_src18_startofpacket),                        //           .startofpacket
		.src18_endofpacket   (cmd_demux_003_src18_endofpacket),                          //           .endofpacket
		.src19_ready         (cmd_demux_003_src19_ready),                                //      src19.ready
		.src19_valid         (cmd_demux_003_src19_valid),                                //           .valid
		.src19_data          (cmd_demux_003_src19_data),                                 //           .data
		.src19_channel       (cmd_demux_003_src19_channel),                              //           .channel
		.src19_startofpacket (cmd_demux_003_src19_startofpacket),                        //           .startofpacket
		.src19_endofpacket   (cmd_demux_003_src19_endofpacket),                          //           .endofpacket
		.src20_ready         (cmd_demux_003_src20_ready),                                //      src20.ready
		.src20_valid         (cmd_demux_003_src20_valid),                                //           .valid
		.src20_data          (cmd_demux_003_src20_data),                                 //           .data
		.src20_channel       (cmd_demux_003_src20_channel),                              //           .channel
		.src20_startofpacket (cmd_demux_003_src20_startofpacket),                        //           .startofpacket
		.src20_endofpacket   (cmd_demux_003_src20_endofpacket),                          //           .endofpacket
		.src21_ready         (cmd_demux_003_src21_ready),                                //      src21.ready
		.src21_valid         (cmd_demux_003_src21_valid),                                //           .valid
		.src21_data          (cmd_demux_003_src21_data),                                 //           .data
		.src21_channel       (cmd_demux_003_src21_channel),                              //           .channel
		.src21_startofpacket (cmd_demux_003_src21_startofpacket),                        //           .startofpacket
		.src21_endofpacket   (cmd_demux_003_src21_endofpacket),                          //           .endofpacket
		.src22_ready         (cmd_demux_003_src22_ready),                                //      src22.ready
		.src22_valid         (cmd_demux_003_src22_valid),                                //           .valid
		.src22_data          (cmd_demux_003_src22_data),                                 //           .data
		.src22_channel       (cmd_demux_003_src22_channel),                              //           .channel
		.src22_startofpacket (cmd_demux_003_src22_startofpacket),                        //           .startofpacket
		.src22_endofpacket   (cmd_demux_003_src22_endofpacket),                          //           .endofpacket
		.src23_ready         (cmd_demux_003_src23_ready),                                //      src23.ready
		.src23_valid         (cmd_demux_003_src23_valid),                                //           .valid
		.src23_data          (cmd_demux_003_src23_data),                                 //           .data
		.src23_channel       (cmd_demux_003_src23_channel),                              //           .channel
		.src23_startofpacket (cmd_demux_003_src23_startofpacket),                        //           .startofpacket
		.src23_endofpacket   (cmd_demux_003_src23_endofpacket)                           //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_004 cmd_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                //          .valid
		.src0_data          (cmd_demux_004_src0_data),                 //          .data
		.src0_channel       (cmd_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                          //          .valid
		.src_data            (cmd_mux_src_data),                                                           //          .data
		.src_channel         (cmd_mux_src_channel),                                                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                    //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                                          //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                                          //          .valid
		.sink0_channel       (crosser_out_channel),                                                        //          .channel
		.sink0_data          (crosser_out_data),                                                           //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                                  //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                                    //          .endofpacket
		.sink1_ready         (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_ready),                  //     sink1.ready
		.sink1_valid         (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_valid),                  //          .valid
		.sink1_channel       (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_channel),                //          .channel
		.sink1_data          (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_data),                   //          .data
		.sink1_startofpacket (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink2_ready         (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),           //     sink2.ready
		.sink2_valid         (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink2_channel       (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink2_data          (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),            //          .data
		.sink2_startofpacket (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink3_ready         (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink3_channel       (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink3_data          (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink3_startofpacket (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                                                   //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                                                   //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                                                 //          .channel
		.sink4_data          (cmd_demux_004_src0_data),                                                    //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),                                           //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket)                                              //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (video_pll_0_lcd_clk_clk),                                    //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                      //          .valid
		.src_data            (cmd_mux_001_src_data),                                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                      //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                      //          .valid
		.sink0_channel       (crosser_001_out_channel),                                    //          .channel
		.sink0_data          (crosser_001_out_data),                                       //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                                //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                                      //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                                      //          .valid
		.sink1_channel       (crosser_002_out_channel),                                    //          .channel
		.sink1_data          (crosser_002_out_data),                                       //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                              //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket)                                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src2_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src2_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src2_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src2_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src2_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src2_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src3_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src3_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src3_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src3_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src3_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src3_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src4_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src4_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src4_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src4_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src4_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src4_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src5_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src5_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src5_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src5_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src5_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src5_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                   //          .valid
		.src_data            (cmd_mux_006_src_data),                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src6_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src6_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src6_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src6_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src6_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src6_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src7_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src7_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src7_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src7_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src7_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src7_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src8_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src8_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src8_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src8_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src8_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src8_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src9_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src9_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src9_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src9_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src9_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src9_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                   //          .valid
		.src_data            (cmd_mux_010_src_data),                    //          .data
		.src_channel         (cmd_mux_010_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src10_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src10_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src10_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src10_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src10_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src10_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_011 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                   //          .valid
		.src_data            (cmd_mux_011_src_data),                    //          .data
		.src_channel         (cmd_mux_011_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src11_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src11_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src11_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src11_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src11_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src11_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src11_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src11_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src11_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src11_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src11_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src11_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_012 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                   //          .valid
		.src_data            (cmd_mux_012_src_data),                    //          .data
		.src_channel         (cmd_mux_012_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src12_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src12_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src12_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src12_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src12_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src12_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_013 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                   //          .valid
		.src_data            (cmd_mux_013_src_data),                    //          .data
		.src_channel         (cmd_mux_013_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src13_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src13_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src13_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src13_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src13_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src13_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_014 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                   //          .valid
		.src_data            (cmd_mux_014_src_data),                    //          .data
		.src_channel         (cmd_mux_014_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src14_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src14_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src14_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src14_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src14_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src14_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src14_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src14_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src14_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src14_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src14_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src14_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_015 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                   //          .valid
		.src_data            (cmd_mux_015_src_data),                    //          .data
		.src_channel         (cmd_mux_015_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src15_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src15_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src15_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src15_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src15_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src15_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src15_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src15_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src15_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src15_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src15_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src15_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_016 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                   //          .valid
		.src_data            (cmd_mux_016_src_data),                    //          .data
		.src_channel         (cmd_mux_016_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src16_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src16_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src16_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src16_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src16_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src16_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src16_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src16_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src16_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src16_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src16_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src16_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_017 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                   //          .valid
		.src_data            (cmd_mux_017_src_data),                    //          .data
		.src_channel         (cmd_mux_017_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src17_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src17_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src17_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src17_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src17_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src17_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src17_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src17_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src17_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src17_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src17_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src17_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_018 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                   //          .valid
		.src_data            (cmd_mux_018_src_data),                    //          .data
		.src_channel         (cmd_mux_018_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src18_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src18_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src18_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src18_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src18_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src18_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src18_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src18_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src18_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src18_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src18_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src18_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_019 (
		.clk                 (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset               (joyirq_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                    //          .valid
		.src_data            (cmd_mux_019_src_data),                     //          .data
		.src_channel         (cmd_mux_019_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_001_src19_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src19_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src19_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src19_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src19_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src19_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_003_src19_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_003_src19_valid),                //          .valid
		.sink1_channel       (cmd_demux_003_src19_channel),              //          .channel
		.sink1_data          (cmd_demux_003_src19_data),                 //          .data
		.sink1_startofpacket (cmd_demux_003_src19_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src19_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_020 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                   //          .valid
		.src_data            (cmd_mux_020_src_data),                    //          .data
		.src_channel         (cmd_mux_020_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src20_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src20_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src20_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src20_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src20_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src20_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src20_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src20_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src20_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src20_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src20_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src20_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_021 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                   //          .valid
		.src_data            (cmd_mux_021_src_data),                    //          .data
		.src_channel         (cmd_mux_021_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src21_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src21_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src21_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src21_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src21_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src21_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src21_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src21_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src21_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src21_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src21_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src21_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_022 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                   //          .valid
		.src_data            (cmd_mux_022_src_data),                    //          .data
		.src_channel         (cmd_mux_022_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src22_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src22_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src22_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src22_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src22_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src22_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src22_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src22_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src22_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src22_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src22_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src22_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_023 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                   //          .valid
		.src_data            (cmd_mux_023_src_data),                    //          .data
		.src_channel         (cmd_mux_023_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src23_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src23_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src23_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src23_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src23_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src23_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_003_src23_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_003_src23_valid),               //          .valid
		.sink1_channel       (cmd_demux_003_src23_channel),             //          .channel
		.sink1_data          (cmd_demux_003_src23_data),                //          .data
		.sink1_startofpacket (cmd_demux_003_src23_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src23_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_024 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                   //          .valid
		.src_data            (cmd_mux_024_src_data),                    //          .data
		.src_channel         (cmd_mux_024_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src24_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src24_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src24_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src24_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src24_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src24_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_002_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_src2_data),                     //          .data
		.src2_channel       (rsp_demux_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),              //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                    //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                    //          .valid
		.src3_data          (rsp_demux_src3_data),                     //          .data
		.src3_channel       (rsp_demux_src3_channel),                  //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),            //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),              //          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                    //      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                    //          .valid
		.src4_data          (rsp_demux_src4_data),                     //          .data
		.src4_channel       (rsp_demux_src4_channel),                  //          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),            //          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (video_pll_0_lcd_clk_clk),                                    //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                       //      sink.ready
		.sink_channel       (router_006_src_channel),                                     //          .channel
		.sink_data          (router_006_src_data),                                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                              //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                //          .valid
		.src1_data          (rsp_demux_005_src1_data),                 //          .data
		.src1_channel       (rsp_demux_005_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                //          .valid
		.src1_data          (rsp_demux_006_src1_data),                 //          .data
		.src1_channel       (rsp_demux_006_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                //          .valid
		.src1_data          (rsp_demux_007_src1_data),                 //          .data
		.src1_channel       (rsp_demux_007_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                    //      sink.ready
		.sink_channel       (router_013_src_channel),                  //          .channel
		.sink_data          (router_013_src_data),                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_013_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                //          .valid
		.src1_data          (rsp_demux_008_src1_data),                 //          .data
		.src1_channel       (rsp_demux_008_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                    //      sink.ready
		.sink_channel       (router_014_src_channel),                  //          .channel
		.sink_data          (router_014_src_data),                     //          .data
		.sink_startofpacket (router_014_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_014_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                //          .valid
		.src1_data          (rsp_demux_009_src1_data),                 //          .data
		.src1_channel       (rsp_demux_009_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                    //      sink.ready
		.sink_channel       (router_015_src_channel),                  //          .channel
		.sink_data          (router_015_src_data),                     //          .data
		.sink_startofpacket (router_015_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_015_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                //          .valid
		.src0_data          (rsp_demux_010_src0_data),                 //          .data
		.src0_channel       (rsp_demux_010_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                //          .valid
		.src1_data          (rsp_demux_010_src1_data),                 //          .data
		.src1_channel       (rsp_demux_010_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_011 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                    //      sink.ready
		.sink_channel       (router_016_src_channel),                  //          .channel
		.sink_data          (router_016_src_data),                     //          .data
		.sink_startofpacket (router_016_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_016_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                //          .valid
		.src0_data          (rsp_demux_011_src0_data),                 //          .data
		.src0_channel       (rsp_demux_011_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                //          .valid
		.src1_data          (rsp_demux_011_src1_data),                 //          .data
		.src1_channel       (rsp_demux_011_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_012 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                    //      sink.ready
		.sink_channel       (router_017_src_channel),                  //          .channel
		.sink_data          (router_017_src_data),                     //          .data
		.sink_startofpacket (router_017_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_017_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                //          .valid
		.src0_data          (rsp_demux_012_src0_data),                 //          .data
		.src0_channel       (rsp_demux_012_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                //          .valid
		.src1_data          (rsp_demux_012_src1_data),                 //          .data
		.src1_channel       (rsp_demux_012_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_013 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                    //      sink.ready
		.sink_channel       (router_018_src_channel),                  //          .channel
		.sink_data          (router_018_src_data),                     //          .data
		.sink_startofpacket (router_018_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_018_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                //          .valid
		.src0_data          (rsp_demux_013_src0_data),                 //          .data
		.src0_channel       (rsp_demux_013_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                //          .valid
		.src1_data          (rsp_demux_013_src1_data),                 //          .data
		.src1_channel       (rsp_demux_013_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_014 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                    //      sink.ready
		.sink_channel       (router_019_src_channel),                  //          .channel
		.sink_data          (router_019_src_data),                     //          .data
		.sink_startofpacket (router_019_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_019_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                //          .valid
		.src0_data          (rsp_demux_014_src0_data),                 //          .data
		.src0_channel       (rsp_demux_014_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                //          .valid
		.src1_data          (rsp_demux_014_src1_data),                 //          .data
		.src1_channel       (rsp_demux_014_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_015 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                    //      sink.ready
		.sink_channel       (router_020_src_channel),                  //          .channel
		.sink_data          (router_020_src_data),                     //          .data
		.sink_startofpacket (router_020_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_020_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                //          .valid
		.src0_data          (rsp_demux_015_src0_data),                 //          .data
		.src0_channel       (rsp_demux_015_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                //          .valid
		.src1_data          (rsp_demux_015_src1_data),                 //          .data
		.src1_channel       (rsp_demux_015_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_016 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                    //      sink.ready
		.sink_channel       (router_021_src_channel),                  //          .channel
		.sink_data          (router_021_src_data),                     //          .data
		.sink_startofpacket (router_021_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_021_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                //          .valid
		.src0_data          (rsp_demux_016_src0_data),                 //          .data
		.src0_channel       (rsp_demux_016_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                //          .valid
		.src1_data          (rsp_demux_016_src1_data),                 //          .data
		.src1_channel       (rsp_demux_016_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_017 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                    //      sink.ready
		.sink_channel       (router_022_src_channel),                  //          .channel
		.sink_data          (router_022_src_data),                     //          .data
		.sink_startofpacket (router_022_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_022_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                //          .valid
		.src0_data          (rsp_demux_017_src0_data),                 //          .data
		.src0_channel       (rsp_demux_017_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                //          .valid
		.src1_data          (rsp_demux_017_src1_data),                 //          .data
		.src1_channel       (rsp_demux_017_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_018 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                    //      sink.ready
		.sink_channel       (router_023_src_channel),                  //          .channel
		.sink_data          (router_023_src_data),                     //          .data
		.sink_startofpacket (router_023_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_023_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                //          .valid
		.src0_data          (rsp_demux_018_src0_data),                 //          .data
		.src0_channel       (rsp_demux_018_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                //          .valid
		.src1_data          (rsp_demux_018_src1_data),                 //          .data
		.src1_channel       (rsp_demux_018_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_019 (
		.clk                (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset              (joyirq_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                     //      sink.ready
		.sink_channel       (router_024_src_channel),                   //          .channel
		.sink_data          (router_024_src_data),                      //          .data
		.sink_startofpacket (router_024_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_024_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_019_src0_data),                  //          .data
		.src0_channel       (rsp_demux_019_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_019_src1_data),                  //          .data
		.src1_channel       (rsp_demux_019_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_020 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                    //      sink.ready
		.sink_channel       (router_025_src_channel),                  //          .channel
		.sink_data          (router_025_src_data),                     //          .data
		.sink_startofpacket (router_025_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_025_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                //          .valid
		.src0_data          (rsp_demux_020_src0_data),                 //          .data
		.src0_channel       (rsp_demux_020_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                //          .valid
		.src1_data          (rsp_demux_020_src1_data),                 //          .data
		.src1_channel       (rsp_demux_020_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_021 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                    //      sink.ready
		.sink_channel       (router_026_src_channel),                  //          .channel
		.sink_data          (router_026_src_data),                     //          .data
		.sink_startofpacket (router_026_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_026_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                //          .valid
		.src0_data          (rsp_demux_021_src0_data),                 //          .data
		.src0_channel       (rsp_demux_021_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                //          .valid
		.src1_data          (rsp_demux_021_src1_data),                 //          .data
		.src1_channel       (rsp_demux_021_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_022 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                    //      sink.ready
		.sink_channel       (router_027_src_channel),                  //          .channel
		.sink_data          (router_027_src_data),                     //          .data
		.sink_startofpacket (router_027_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_027_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                //          .valid
		.src0_data          (rsp_demux_022_src0_data),                 //          .data
		.src0_channel       (rsp_demux_022_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_022_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_022_src1_valid),                //          .valid
		.src1_data          (rsp_demux_022_src1_data),                 //          .data
		.src1_channel       (rsp_demux_022_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_022_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_022_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_023 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                    //      sink.ready
		.sink_channel       (router_028_src_channel),                  //          .channel
		.sink_data          (router_028_src_data),                     //          .data
		.sink_startofpacket (router_028_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_028_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                //          .valid
		.src0_data          (rsp_demux_023_src0_data),                 //          .data
		.src0_channel       (rsp_demux_023_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_023_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_023_src1_valid),                //          .valid
		.src1_data          (rsp_demux_023_src1_data),                 //          .data
		.src1_channel       (rsp_demux_023_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_023_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_023_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 rsp_demux_024 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                    //      sink.ready
		.sink_channel       (router_029_src_channel),                  //          .channel
		.sink_data          (router_029_src_data),                     //          .data
		.sink_startofpacket (router_029_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_029_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                //          .valid
		.src0_data          (rsp_demux_024_src0_data),                 //          .data
		.src0_channel       (rsp_demux_024_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_024_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_024_src1_valid),                //          .valid
		.src1_data          (rsp_demux_024_src1_data),                 //          .data
		.src1_channel       (rsp_demux_024_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_024_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_024_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (video_pll_0_lcd_clk_clk),                                    //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //          .valid
		.src_data            (rsp_mux_src_data),                                           //          .data
		.src_channel         (rsp_mux_src_channel),                                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                      //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                      //          .valid
		.sink0_channel       (crosser_003_out_channel),                                    //          .channel
		.sink0_data          (crosser_003_out_data),                                       //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset                (Nios2_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                             //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                             //          .valid
		.src_data             (rsp_mux_001_src_data),                                              //          .data
		.src_channel          (rsp_mux_001_src_channel),                                           //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                       //          .endofpacket
		.sink0_ready          (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid          (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel        (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data           (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket  (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket    (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready          (crosser_004_out_ready),                                             //     sink1.ready
		.sink1_valid          (crosser_004_out_valid),                                             //          .valid
		.sink1_channel        (crosser_004_out_channel),                                           //          .channel
		.sink1_data           (crosser_004_out_data),                                              //          .data
		.sink1_startofpacket  (crosser_004_out_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket    (crosser_004_out_endofpacket),                                       //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                          //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                          //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                        //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                           //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                  //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                    //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                          //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                          //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                        //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                           //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                  //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                    //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                          //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                          //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                        //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                           //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                  //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                    //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                          //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                          //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                        //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                           //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                  //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                    //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                          //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                          //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                        //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                           //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                  //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                    //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                          //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                          //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                        //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                           //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                  //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                    //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                          //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                          //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                        //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                           //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                  //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                    //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                          //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                          //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                        //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                           //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                  //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                    //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                          //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                          //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                        //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                           //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                  //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                    //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                          //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                          //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                        //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                           //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                  //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                    //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                          //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                          //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                        //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                           //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                  //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                    //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                          //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                          //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                        //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                           //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                  //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                    //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                          //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                          //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                        //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                           //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                  //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                    //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                          //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                          //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                        //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                           //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                  //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                                    //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                          //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                          //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                        //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                           //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                                  //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                                    //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                                          //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                                          //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                                        //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                                           //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                                  //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                                    //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                                          //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                                          //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                                        //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                                           //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                                  //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                                    //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                                          //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                                          //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                                        //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                                           //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                                  //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                                    //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                                          //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                                          //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                                        //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                                           //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                                  //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                                    //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                                          //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                                          //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                                        //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                                           //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                                  //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                                    //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                                          //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                                          //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                                        //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                                           //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),                                  //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                                    //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                                          //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                                          //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                                        //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                                           //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),                                  //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                                    //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                                          //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                                          //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                                        //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                                           //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),                                  //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket)                                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_002_src_data),                                                     //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_024_src1_ready),                                                 //     sink1.ready
		.sink1_valid         (rsp_demux_024_src1_valid),                                                 //          .valid
		.sink1_channel       (rsp_demux_024_src1_channel),                                               //          .channel
		.sink1_data          (rsp_demux_024_src1_data),                                                  //          .data
		.sink1_startofpacket (rsp_demux_024_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_024_src1_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready            (rsp_mux_003_src_ready),                                                      //       src.ready
		.src_valid            (rsp_mux_003_src_valid),                                                      //          .valid
		.src_data             (rsp_mux_003_src_data),                                                       //          .data
		.src_channel          (rsp_mux_003_src_channel),                                                    //          .channel
		.src_startofpacket    (rsp_mux_003_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket      (rsp_mux_003_src_endofpacket),                                                //          .endofpacket
		.sink0_ready          (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid          (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel        (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data           (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket  (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket    (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready          (crosser_005_out_ready),                                                      //     sink1.ready
		.sink1_valid          (crosser_005_out_valid),                                                      //          .valid
		.sink1_channel        (crosser_005_out_channel),                                                    //          .channel
		.sink1_data           (crosser_005_out_data),                                                       //          .data
		.sink1_startofpacket  (crosser_005_out_startofpacket),                                              //          .startofpacket
		.sink1_endofpacket    (crosser_005_out_endofpacket),                                                //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                                   //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                                   //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                                 //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                                    //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                           //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                             //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                                   //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                                   //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                                 //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                                    //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                           //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                             //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                                   //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                                   //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                                 //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                                    //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                           //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                             //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                                   //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                                   //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                                 //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                                    //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                           //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                             //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                                   //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                                   //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                                 //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                                    //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                           //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                             //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                                   //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                                   //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                                 //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                                    //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                           //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                             //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                                   //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                                   //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                                 //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                                    //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                           //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                             //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                                   //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                                   //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                                 //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                                    //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                           //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                             //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                                   //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                                   //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                                 //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                                    //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                           //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                             //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                                   //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                                   //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                                 //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                                    //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                           //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                             //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                                   //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                                   //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                                 //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                                    //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                           //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),                                             //          .endofpacket
		.sink13_ready         (rsp_demux_013_src1_ready),                                                   //    sink13.ready
		.sink13_valid         (rsp_demux_013_src1_valid),                                                   //          .valid
		.sink13_channel       (rsp_demux_013_src1_channel),                                                 //          .channel
		.sink13_data          (rsp_demux_013_src1_data),                                                    //          .data
		.sink13_startofpacket (rsp_demux_013_src1_startofpacket),                                           //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src1_endofpacket),                                             //          .endofpacket
		.sink14_ready         (rsp_demux_014_src1_ready),                                                   //    sink14.ready
		.sink14_valid         (rsp_demux_014_src1_valid),                                                   //          .valid
		.sink14_channel       (rsp_demux_014_src1_channel),                                                 //          .channel
		.sink14_data          (rsp_demux_014_src1_data),                                                    //          .data
		.sink14_startofpacket (rsp_demux_014_src1_startofpacket),                                           //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src1_endofpacket),                                             //          .endofpacket
		.sink15_ready         (rsp_demux_015_src1_ready),                                                   //    sink15.ready
		.sink15_valid         (rsp_demux_015_src1_valid),                                                   //          .valid
		.sink15_channel       (rsp_demux_015_src1_channel),                                                 //          .channel
		.sink15_data          (rsp_demux_015_src1_data),                                                    //          .data
		.sink15_startofpacket (rsp_demux_015_src1_startofpacket),                                           //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src1_endofpacket),                                             //          .endofpacket
		.sink16_ready         (rsp_demux_016_src1_ready),                                                   //    sink16.ready
		.sink16_valid         (rsp_demux_016_src1_valid),                                                   //          .valid
		.sink16_channel       (rsp_demux_016_src1_channel),                                                 //          .channel
		.sink16_data          (rsp_demux_016_src1_data),                                                    //          .data
		.sink16_startofpacket (rsp_demux_016_src1_startofpacket),                                           //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src1_endofpacket),                                             //          .endofpacket
		.sink17_ready         (rsp_demux_017_src1_ready),                                                   //    sink17.ready
		.sink17_valid         (rsp_demux_017_src1_valid),                                                   //          .valid
		.sink17_channel       (rsp_demux_017_src1_channel),                                                 //          .channel
		.sink17_data          (rsp_demux_017_src1_data),                                                    //          .data
		.sink17_startofpacket (rsp_demux_017_src1_startofpacket),                                           //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src1_endofpacket),                                             //          .endofpacket
		.sink18_ready         (rsp_demux_018_src1_ready),                                                   //    sink18.ready
		.sink18_valid         (rsp_demux_018_src1_valid),                                                   //          .valid
		.sink18_channel       (rsp_demux_018_src1_channel),                                                 //          .channel
		.sink18_data          (rsp_demux_018_src1_data),                                                    //          .data
		.sink18_startofpacket (rsp_demux_018_src1_startofpacket),                                           //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src1_endofpacket),                                             //          .endofpacket
		.sink19_ready         (rsp_demux_019_src1_ready),                                                   //    sink19.ready
		.sink19_valid         (rsp_demux_019_src1_valid),                                                   //          .valid
		.sink19_channel       (rsp_demux_019_src1_channel),                                                 //          .channel
		.sink19_data          (rsp_demux_019_src1_data),                                                    //          .data
		.sink19_startofpacket (rsp_demux_019_src1_startofpacket),                                           //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src1_endofpacket),                                             //          .endofpacket
		.sink20_ready         (rsp_demux_020_src1_ready),                                                   //    sink20.ready
		.sink20_valid         (rsp_demux_020_src1_valid),                                                   //          .valid
		.sink20_channel       (rsp_demux_020_src1_channel),                                                 //          .channel
		.sink20_data          (rsp_demux_020_src1_data),                                                    //          .data
		.sink20_startofpacket (rsp_demux_020_src1_startofpacket),                                           //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src1_endofpacket),                                             //          .endofpacket
		.sink21_ready         (rsp_demux_021_src1_ready),                                                   //    sink21.ready
		.sink21_valid         (rsp_demux_021_src1_valid),                                                   //          .valid
		.sink21_channel       (rsp_demux_021_src1_channel),                                                 //          .channel
		.sink21_data          (rsp_demux_021_src1_data),                                                    //          .data
		.sink21_startofpacket (rsp_demux_021_src1_startofpacket),                                           //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src1_endofpacket),                                             //          .endofpacket
		.sink22_ready         (rsp_demux_022_src1_ready),                                                   //    sink22.ready
		.sink22_valid         (rsp_demux_022_src1_valid),                                                   //          .valid
		.sink22_channel       (rsp_demux_022_src1_channel),                                                 //          .channel
		.sink22_data          (rsp_demux_022_src1_data),                                                    //          .data
		.sink22_startofpacket (rsp_demux_022_src1_startofpacket),                                           //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src1_endofpacket),                                             //          .endofpacket
		.sink23_ready         (rsp_demux_023_src1_ready),                                                   //    sink23.ready
		.sink23_valid         (rsp_demux_023_src1_valid),                                                   //          .valid
		.sink23_channel       (rsp_demux_023_src1_channel),                                                 //          .channel
		.sink23_data          (rsp_demux_023_src1_data),                                                    //          .data
		.sink23_startofpacket (rsp_demux_023_src1_startofpacket),                                           //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src1_endofpacket)                                              //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                   //          .valid
		.src_data            (rsp_mux_004_src_data),                    //          .data
		.src_channel         (rsp_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_src4_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src4_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src4_channel),                  //          .channel
		.sink0_data          (rsp_demux_src4_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src4_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src4_endofpacket)               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_data_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset                (Nios2_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                          //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                        //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                    //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                          //          .ready
		.in_data              (cmd_demux_001_src0_data),                                           //          .data
		.out_endofpacket      (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_instruction_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (Nios2_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                 //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                  //          .data
		.out_endofpacket      (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_valid             (cmd_demux_003_src0_valid),                                                   //      sink.valid
		.in_channel           (cmd_demux_003_src0_channel),                                                 //          .channel
		.in_startofpacket     (cmd_demux_003_src0_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src0_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_demux_003_src0_ready),                                                   //          .ready
		.in_data              (cmd_demux_003_src0_data),                                                    //          .data
		.out_endofpacket      (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_nios2_data_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                              //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                            //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                        //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                              //          .ready
		.in_data              (rsp_demux_src1_data),                                               //          .data
		.out_endofpacket      (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_nios2_instruction_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                     //          .ready
		.in_data              (rsp_demux_src2_data),                                                      //          .data
		.out_endofpacket      (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (SDRAM_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_valid             (rsp_demux_src3_valid),                                                       //      sink.valid
		.in_channel           (rsp_demux_src3_channel),                                                     //          .channel
		.in_startofpacket     (rsp_demux_src3_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (rsp_demux_src3_endofpacket),                                                 //          .endofpacket
		.in_ready             (rsp_demux_src3_ready),                                                       //          .ready
		.in_data              (rsp_demux_src3_data),                                                        //          .data
		.out_endofpacket      (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (video_pll_0_lcd_clk_clk),                                    //        in_clk.clk
		.in_reset          (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (System_PLL_sys_clk_clk),                                     //       out_clk.clk
		.out_reset         (SDRAM_reset_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                       //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                       //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                               //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                 //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                     //              .channel
		.in_data           (cmd_demux_src0_data),                                        //              .data
		.out_ready         (crosser_out_ready),                                          //           out.ready
		.out_valid         (crosser_out_valid),                                          //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                  //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                    //              .endofpacket
		.out_channel       (crosser_out_channel),                                        //              .channel
		.out_data          (crosser_out_data),                                           //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (System_PLL_sys_clk_clk),                                     //        in_clk.clk
		.in_reset          (Nios2_reset_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (video_pll_0_lcd_clk_clk),                                    //       out_clk.clk
		.out_reset         (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                   //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                 //              .channel
		.in_data           (cmd_demux_001_src1_data),                                    //              .data
		.out_ready         (crosser_001_out_ready),                                      //           out.ready
		.out_valid         (crosser_001_out_valid),                                      //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                    //              .channel
		.out_data          (crosser_001_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (System_PLL_sys_clk_clk),                                     //        in_clk.clk
		.in_reset          (SDRAM_reset_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (video_pll_0_lcd_clk_clk),                                    //       out_clk.clk
		.out_reset         (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src1_ready),                                   //            in.ready
		.in_valid          (cmd_demux_003_src1_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_003_src1_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src1_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_003_src1_channel),                                 //              .channel
		.in_data           (cmd_demux_003_src1_data),                                    //              .data
		.out_ready         (crosser_002_out_ready),                                      //           out.ready
		.out_valid         (crosser_002_out_valid),                                      //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                    //              .channel
		.out_data          (crosser_002_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (System_PLL_sys_clk_clk),                                     //        in_clk.clk
		.in_reset          (SDRAM_reset_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (video_pll_0_lcd_clk_clk),                                    //       out_clk.clk
		.out_reset         (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                       //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                       //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                               //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                 //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                     //              .channel
		.in_data           (rsp_demux_src0_data),                                        //              .data
		.out_ready         (crosser_003_out_ready),                                      //           out.ready
		.out_valid         (crosser_003_out_valid),                                      //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                    //              .channel
		.out_data          (crosser_003_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (video_pll_0_lcd_clk_clk),                                    //        in_clk.clk
		.in_reset          (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (System_PLL_sys_clk_clk),                                     //       out_clk.clk
		.out_reset         (Nios2_reset_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                   //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                 //              .channel
		.in_data           (rsp_demux_001_src0_data),                                    //              .data
		.out_ready         (crosser_004_out_ready),                                      //           out.ready
		.out_valid         (crosser_004_out_valid),                                      //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                    //              .channel
		.out_data          (crosser_004_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (25),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (video_pll_0_lcd_clk_clk),                                    //        in_clk.clk
		.in_reset          (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (System_PLL_sys_clk_clk),                                     //       out_clk.clk
		.out_reset         (SDRAM_reset_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                   //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                 //              .channel
		.in_data           (rsp_demux_001_src1_data),                                    //              .data
		.out_ready         (crosser_005_out_ready),                                      //           out.ready
		.out_valid         (crosser_005_out_valid),                                      //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                    //              .channel
		.out_data          (crosser_005_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)            //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (video_pll_0_lcd_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                         //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                       //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (vga_subsystem_char_buf_rgb_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_char_buf_rgb_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_char_buf_rgb_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                      //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),                            // in_rst_0.reset
		.in_0_data      (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.in_0_data      (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                           //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gyro_i2c_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (gyro_i2c_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (gyro_i2c_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)        //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),                          // in_rst_0.reset
		.in_0_data      (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                                 //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (adc_pll_pll_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (adc_pll_pll_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (adc_pll_pll_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (vga_subsystem_rgb_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_rgb_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_rgb_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)        //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex3_hex0_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (hex3_hex0_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (hex3_hex0_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)        //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex5_hex4_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (hex5_hex4_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (hex5_hex4_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)        //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (slider_switches_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (slider_switches_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (slider_switches_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (pushbuttons_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pushbuttons_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pushbuttons_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)          //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (interval_timer_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (interval_timer_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (interval_timer_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)             //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (interval_timer_2_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (interval_timer_2_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (interval_timer_2_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)               //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwmx_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (pwmx_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (pwmx_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)        //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwmy_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (pwmy_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (pwmy_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)        //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                   // in_clk_0.clk
		.in_rst_0_reset (joyirq_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (joyirq_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (joyirq_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (joyirq_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)         //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (penirq_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (penirq_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (penirq_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)        //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (Nios2_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (modular_adc_0_sample_store_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                          //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (Nios2_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (modular_adc_0_sequencer_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)                       //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (touch_spi_spi_control_port_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (touch_spi_spi_control_port_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (touch_spi_spi_control_port_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)                      //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (Nios2_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)                 //         .error
	);

endmodule
